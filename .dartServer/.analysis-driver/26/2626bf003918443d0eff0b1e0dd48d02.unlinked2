ÅtextvaluebuildTextSpan	selectionclearclearComposingisSelectionWithinTextBounds _isSelectionWithinComposingRangecopycutpaste	selectAll
controller	focusNodeobscuringCharacterobscureTexttextHeightBehaviortextWidthBasisreadOnly	forceLinetoolbarOptionsshowSelectionHandles
showCursorautocorrectsmartDashesTypesmartQuotesTypeenableSuggestionsstyle
strutStyle_strutStyle	textAligntextDirectiontextCapitalizationlocaletextScaleFactorcursorColorautocorrectionTextRectColorbackgroundCursorColormaxLinesminLinesexpands	autofocusselectionColorselectionControlskeyboardTypetextInputAction	onChangedonEditingCompleteonSubmittedonAppPrivateCommandonSelectionChangedonSelectionHandleTappedinputFormattersmouseCursorrendererIgnoresPointercursorWidthcursorHeightcursorRadiuscursorOpacityAnimatescursorOffsetpaintCursorAboveTextselectionHeightStyleselectionWidthStylekeyboardAppearancescrollPaddingenableInteractiveSelectiondebugDeterministicCursordragStartBehaviorscrollControllerscrollPhysicsscribbleEnabledselectionEnabledautofillHintsautofillClientclipBehaviorrestorationIdscrollBehaviorenableIMEPersonalizedLearning_userSelectionEnabled_inferKeyboardTypecreateStatedebugFillProperties_cursorTimer_targetCursorVisibility_cursorVisibilityNotifier_editableKey_clipboardStatus_textInputConnection_selectionOverlay_internalScrollController_scrollController_cursorBlinkOpacityController_toolbarLayerLink_startHandleLayerLink_endHandleLayerLink_didAutoFocus_currentAutofillScopecurrentAutofillScope_effectiveAutofillClient_shouldCreateInputConnection_fadeDuration_floatingCursorResetTime_floatingCursorResetControllerwantKeepAlive_cursorColor
cutEnabledcopyEnabledpasteEnabledselectAllEnabled_onChangedClipboardStatus%_textEditingValueforTextLayoutMetricscopySelectioncutSelection	pasteText	initState_tickersEnableddidChangeDependenciesdidUpdateWidgetdispose _lastKnownRemoteTextEditingValuecurrentTextEditingValueupdateEditingValueperformActionperformPrivateCommand_startCaretRect_lastTextPosition_pointOffsetOrigin_lastBoundedOffset_floatingCursorOffsetupdateFloatingCursor_onFloatingCursorResetTick_finalizeEditing_batchEditDepthbeginBatchEditendBatchEdit!_updateRemoteEditingValueIfNeeded_value	_hasFocus_isMultiline_getOffsetToRevealCaret_hasInputConnection_needsAutofill_openInputConnection_closeInputConnectionIfNeeded#_openOrCloseInputConnectionIfNeeded_restartConnectionScheduled_scheduleRestartConnection_restartConnectionIfNeededconnectionClosedrequestKeyboard(_updateOrDisposeSelectionOverlayIfNeeded _updateSelectionOverlayForScroll_handleSelectionChanged_currentCaretRect_handleCaretChanged_caretAnimationDuration_caretAnimationCurve_showCaretOnScreenScheduled_scheduleShowCaretOnScreen_lastBottomViewInsetdidChangeMetrics_formatAndSetValue_onCursorColorTickcursorCurrentlyVisiblecursorBlinkIntervalselectionOverlay_obscureShowCharTicksPending_obscureLatestCharIndex_cursorTick_cursorWaitForStart_cursorActive_startCursorTimer_stopCursorTimer_startOrStopCursorTimerIfNeeded_didChangeTextEditingValue_handleFocusChanged_cachedText_cachedFirstRect_cachedSize_cachedPlaceholder_cachedTextStyle_updateSelectionRects_updateSizeAndTransform_updateComposingRectIfNeeded_updateCaretRectIfNeeded_textDirectionrenderEditabletextEditingValue_devicePixelRatiouserUpdateTextEditingValuebringIntoViewshowToolbarhideToolbartoggleToolbar_placeholderLocationinsertTextPlaceholderremoveTextPlaceholder
autofillIdtextInputConfigurationautofill_currentPromptRectRangeshowAutocorrectionPromptRect_semanticsOnCopy_semanticsOnCut_semanticsOnPaste_characterBoundary_nextWordBoundary
_linebreak_documentBoundary_makeOverridable_replaceText_replaceTextAction_scrollToDocumentBoundary_updateSelection_updateSelectionAction_adjacentLineAction"_expandSelectionToDocumentBoundary_expandSelectionToLinebreak_expandSelection_hideToolbarIfVisible_actionsbuild_extractChildren
inlineSpanstartHandleLayerLinkendHandleLayerLinkhasFocusoffsetonCaretChangedtextSelectionDelegatedevicePixelRatiopromptRectRangepromptRectColorcreateRenderObjectupdateRenderObjectchildeditableKeyupdateSelectionRectsenabled_nextElementIdentifier_elementIdentifierelementIdentifieronScribbleFocusisInScribbleRectboundssizegetLeadingTextBoundaryAtgetTrailingTextBoundaryAtgetTextBoundaryAt
textLayoutinnerTextBoundaryouterTextBoundary	isForwardleadingTextBoundarytrailingTextBoundarystategetTextBoundariesForIntent_expandNonCollapsedRangeinvokeisActionEnabledignoreNonCollapsedSelectionNEWLINE_CODE_UNIT_isAtWordwrapUpstream_isAtWordwrapDownstream_verticalMovementRun_runSelection(stopCurrentVerticalRunIfSelectionChangesonTriggered_stack_throttledPush_throttleTimer_kThrottleDuration_undo_redo_update_push_list_indexcurrentValuepushundoredotoString%SelectionChangedCallbackAppPrivateCommandCallback_kCursorBlinkHalfPeriod_kCursorBlinkWaitForStart"_kObscureShowLatestCharCursorTicks_kIPadWidthTextEditingControllerToolbarOptionsEditableTextEditableTextState	_Editable_ScribbleFocusable_ScribbleFocusableState_ScribblePlaceholder_TextBoundary_CodeUnitBoundary_WhitespaceBoundary_CharacterBoundary_WordBoundary
_LineBreak_DocumentBoundary_ExpandedTextBoundary_CollapsedSelectionBoundary_MixedBoundary_DeleteTextAction_UpdateTextSelectionAction%_ExtendSelectionOrCaretPositionAction(_UpdateTextSelectionToAdjacentLineAction_SelectAllAction_CopySelectionActionTextEditingValueCallback_TextEditingHistory_TextEditingHistoryState
_UndoStack_Throttleable
_Throttled	_throttleÇ…	TextStyleCharacterRangeStringCharactersDragStartBehaviorSelectionChangedCauseTextEditingValueTextSelectionTextInputTypeSmartQuotesTypeSmartDashesTypevoidStringMapdynamicDurationmillisecondsintdoubleTextInputFormatterdispose	TextFieldValueNotifieremptytext	composingisValidisComposingRangeValidnotifyListenerscopyWith	selection	collapsedoffset	TextRangeoverridevalueTextSpanBuildContextboolwithComposingstylemerge
decorationTextDecoration	underlinechildren
textBefore
textInside	textAfterFlutterErrorisCollapsedstartlengthendreadOnly	TextInputTextInputActiondoneAutomaticKeepAliveClientMixinwantKeepAliveFormIntentActionActionsinvokemaybeInvoke	ShortcutsoverridableDeleteCharacterIntentDeleteToNextWordBoundaryIntentextentDeleteToLineBreakIntentbaseSelectAllTextIntent%DoNothingAndStopPropagationTextIntentReplaceTextIntentUpdateSelectionIntentCopySelectionTextIntentPasteTextIntentCupertinoTextFieldRenderEditableselectPosition
selectWordStatefulWidget	multilineKey
StrutStyle	TextAlignTextWidthBasisparentTextCapitalizationnoneListBoxHeightStyletightBoxWidthStyle
EdgeInsetsall
BrightnesslightCliphardEdgedisabledenabled	selectAllpastecopycutautofillHintsmaxLinesFilteringTextInputFormattersingleLineFormatterIterablekey	FocusNodeTextHeightBehaviorforceStrutHeightinheritFromTextStylefromTextStyleTextDirectionltrrtlDirectionalitylocaleLocaleMediaQueryDatatextScaleFactor
MediaQueryColorCupertinoThemeDataprimaryColorTextFormFieldExpandedSizedBox	ThemeDatatextSelectionColorshowToolbarTextSelectionControlsaddListenerValueChangedVoidCallbackTextInputClientperformPrivateCommandSystemMouseCursorsMouseCursorignorePointerpreferredLineHeightRadiusOffset
ScrollableScrollController
controllerScrollPhysicsphysicsScrollBehaviorselectionEnabledAutofillClientAutofillScopeAutofillHintsnameemailemailAddressRestorationBucketRestorationScopeRestorableTextEditingControllerRestorationManager	ScrollbarScrollConfigurationisEmptyfirstkIsWebdefaultTargetPlatformTargetPlatformiOSmacOSaddressCityaddressCityAndStateaddressStatecountryNamecreditCardNumbernumber
familyNamefullStreetAddress	givenNamejobTitlelocation
middleName
namePrefix
nameSuffixnewPasswordnewUsernamenicknameoneTimeCodeorganizationNamepassword
postalCodestreetAddressLine1streetAddressLine2sublocalitytelephoneNumberurlusernameiOSKeyboardTypeandroidfuchsialinuxwindowsstreetAddressbirthdaydatetimebirthdayDaybirthdayMonthbirthdayYearcountryCodecreditCardExpirationDatecreditCardExpirationDaycreditCardExpirationMonthcreditCardExpirationYearcreditCardFamilyNamecreditCardGivenNamecreditCardMiddleNamecreditCardNamecreditCardSecurityCodecreditCardTypegenderimpplanguagemiddleInitialphotopostalAddresspostalAddressExtendedpostalAddressExtendedPostalCodestreetAddressLevel1streetAddressLevel2streetAddressLevel3streetAddressLevel4streetAddressLine3phonetelephoneNumberAreaCodetelephoneNumberCountryCodetelephoneNumberDevicetelephoneNumberExtensiontelephoneNumberLocaltelephoneNumberLocalPrefixtelephoneNumberLocalSuffixtelephoneNumberNationaltransactionAmountnumberWithOptionsdecimaltransactionCurrencyDiagnosticPropertiesBuilderdebugFillPropertiesaddDiagnosticsPropertydefaultValueEnumPropertyDoublePropertyIntPropertyStateWidgetsBindingObserverTickerProviderStateMixinTextSelectionDelegateTimer	GlobalKeyClipboardStatusNotifierTextInputConnectionTextSelectionOverlaywidgetscrollControllerAnimationController	LayerLinkAutofillGroupStateautofillClient	focusNodehasFocuscursorColorwithOpacitytoolbarOptionsobscureTextenableInteractiveSelectionsetStateWidgetcurrentContext
StateError	ClipboardsetDataClipboardDatatoolbarupdateSchedulerBindinginstanceaddPostFrameCallbackmountedFuturegetData
kTextPlainmax
baseOffsetextentOffsetreplaced	initStatevsyncduration
showCursordidChangeDependenciesAutofillGroupofcontext
unregisterregister	autofocushasSize
FocusScope
TickerModecanceldidUpdateWidgetremoveListenerhandlesVisibleshowSelectionHandles
autofillIdupdateKeepAliveupdateConfigtextInputConfigurationsetStyle
fontFamilyfontSize
fontWeighttextDirection	textAlignselectionControlscanPasteWidgetsBindingremoveObserversetEditingStatescribbleInProgressscribblekeyboardplatformDispatcherbrieflyShowPasswordwithAnimationresetCharTicksnewlineshouldUnfocusgonextprevioussearchsendcontinueActionemergencyCalljoinrouteunspecifiedonAppPrivateCommandRectTextPositionRawFloatingCursorPointstateFloatingCursorDragStateStartisAnimatingstopgetLocalRectForCaretcurrentTextPositioncentersetFloatingCursorUpdatecenteredPoint$calculateBoundedFloatingCursorOffsetrawCursorOffsetgetPositionForPointlocalToGlobalEnd	animateTocurveCurves
decelerate
centerLeftisCompleted
forcePress
lerpDoubledxdyresetLerpValuepragmaonEditingCompletereportErrorFlutterErrorDetails	exceptionstacklibraryErrorDescriptionclearComposingunfocus	nextFocuspreviousFocusonSubmittedRevealedOffsetpositionallowImplicitScrollingrectSizesizewidthclamprightleft
fromCenterheightbottomtopminScrollExtentmaxScrollExtentshiftattachedautofillConfigurationattachshowrequestAutofillcloseconsumeKeyboardTokenscheduleMicrotaskcurrentAutofillScopeconnectionClosedReceivedrequestFocusupdateForScrollisSelectionWithinTextBounds	doubleTapdrag	longPresstapclipboardStatusdebugRequiredFortoolbarLayerLinkstartHandleLayerLinkendHandleLayerLinkrenderObjectselectionDelegatedragStartBehavioronSelectionHandleTappedshowHandlesonSelectionChangedcallCurvefastOutSlowIn
hasClientsscrollPaddinggetHandleSizekMinInteractiveDimensiongetHandleAnchorTextSelectionHandleTypeshowOnScreeninflateRectjumpTowindow
viewInsetsinputFormattersfold	formatterformatEditUpdatenewValueuserInteraction	onChangedvisibleForTestingcursorOpacityAnimateseaseOutdebugDeterministicCursorperiodic(stopCurrentVerticalRunIfSelectionChangesaddObserverzeroscribbleEnabledphysicalSizeshortestSidetoPlainTextincludeSemanticsLabelsgetBoxesForSelection
isNotEmptyScrollDirectionuserScrollDirectionidleforceSelectionRectgenerate
charactersgetRangeistringcharacterAtboundspaintBoundswhereselectionRectmaptoListsetSelectionRectsMatrix4getTransformTosetEditableSizeAndTransformgetRectForComposingRangesetComposingRectsetCaretRectruntimeTypefindRenderObjectdevicePixelRatiotoolbarIsVisiblehideHandleshidehideToolbarhashCodeTextInputConfigurationgrowableAutofillConfigurationuniqueIdentifiercurrentEditingValue	inputTypekeyboardTypeautocorrectsmartDashesTypesmartQuotesTypeenableSuggestions_userSelectionEnabledinputActiontextInputActiontextCapitalizationkeyboardAppearanceenableIMEPersonalizedLearningcanCopy
handleCopycanCut	handleCutClipboardStatus	pasteablehandlePasteDirectionalTextEditingIntentforwarddefaultActioncurrentTextEditingValuereplacementRangereplacementTextcauseCallbackActiononInvokeScrollToDocumentBoundaryIntentnewSelection-ExtendSelectionVerticallyToAdjacentLineIntent'ExpandSelectionToDocumentBoundaryIntent ExpandSelectionToLineBreakIntenttextEditingValuegetTrailingTextBoundaryAtgetLeadingTextBoundaryAtexpandToextentAtIndexObjectDismissIntentTypeDoNothingActionconsumesKeyDirectionalFocusIntentDirectionalFocusActionforTextField ExtendSelectionByCharacterIntent'ExtendSelectionToNextWordBoundaryIntent ExtendSelectionToLineBreakIntent'ExtendSelectionToDocumentBoundaryIntent6ExtendSelectionToNextWordBoundaryOrCaretLocationIntentintentdebugCheckHasMediaQuerybuildMouseRegioncursormouseCursorchildactionsonTriggeredFocusincludeSemantics
debugLabelexcludeFromSemanticsaxisDirectionAxisDirectiondownscrollPhysicsrestorationIdscrollBehavior
scrollbars
overscrollviewportBuilderViewportOffsetCompositedTransformTargetlink	SemanticsonCopyonCutonPasteeditableKeyupdateSelectionRects
inlineSpanbackgroundCursorColor	forceLineminLinesexpands
strutStyleselectionColortextScaleFactorOftextHeightBehaviorDefaultTextHeightBehaviortextWidthBasisobscuringCharacteronCaretChangedrendererIgnoresPointercursorWidthcursorHeightcursorRadiuscursorOffsetselectionHeightStyleselectionWidthStylepaintCursorAboveTexttextSelectionDelegatepromptRectRangepromptRectColorautocorrectionTextRectColorclipBehaviorSetcontainsreplaceRange	substring
InlineSpanbuildTextSpanMultiChildRenderObjectWidgetvisitChildren
WidgetSpanCaretChangedHandlerLocalizationsmaybeLocaleOfsetPromptRectRangeScribbleClienttoStringregisterScribbleElementunregisterScribbleElementselectPositionAtfromoverlaps	intersectHitTestResulthitTestpathanyHitTestEntryentrytarget	RenderBoxMatrixUtilstransformRectfromLTWHPlaceholderAlignmentTextBaselinebaseline	identical	alignmentaboveBaselinebelowBaselineTextPainterParagraphBuilderPlaceholderDimensionsdebugAssertIsValid	pushStylegetTextStyleaddPlaceholderscalepopminindexTextLayoutMetricsisWhitespace
codeUnitAtatstringBeforeLengthstringAfterLengthgetWordBoundaryaffinityTextAffinity
downstreamgetLineAtOffsetupstreamContextAction_valuegetTextBoundaryAtDirectionalCaretMovementIntentrenderEditablecollapseSelectioncontinuesAtWrapfromPositionextendTocollapseAtReversalVerticalCaretMovementRun%_textEditingValueforTextLayoutMetricsstartVerticalCaretMovementmoveNextmovePreviouscurrentcutSelectioncopySelectionUndoTextIntentundoRedoTextIntentredofunctionpushclearremoveRangeT
currentArgleadingEdgeValueNotifierStatefulWidgetStateAutomaticKeepAliveClientMixinWidgetsBindingObserverTickerProviderStateMixinTextSelectionDelegateTextInputClientAutofillClientMultiChildRenderObjectWidgetScribbleClient
WidgetSpan_TextBoundaryContextActionΩ∏WΩÙ1$ Í÷ÄR package:flutter/services.dart  ! 
dart:async 	dart:math dart:ui "package:characters/characters.dart package:flutter/foundation.dart package:flutter/gestures.dart package:flutter/rendering.dart package:flutter/scheduler.dart package:flutter/services.dart actions.dart autofill.dart automatic_keep_alive.dart 
basic.dart binding.dart constants.dart 
debug.dart focus_manager.dart focus_scope.dart focus_traversal.dart framework.dart localizations.dart media_query.dart scroll_configuration.dart scroll_controller.dart scroll_physics.dart scrollable.dart shortcuts.dart 	text.dart text_editing_intents.dart text_selection.dart ticker_provider.dart widget_span.dart 	dart:core¿KÛ ¿‘ë⁄ <ÄÜÄ§Ä•Ä∫Ä÷Ä˝Ä˛ÅQÅ{Å∫Å„ÇÇ4Ç5ÇLÇdÇàÇùÇ¥ÇÕÇ‚ÇˇÉÉ9ÉRÉoÉäÉÆÉœÉÌÑÑ Ñ4ÑXÑvÑïÑ∞Ñ±ÖFÖGÖóÖºÜ%Ü&ÜsÜƒÜ≈áá[áÜáÃáÕàà$àlàmà∏àﬂâââ]âìâ∂â∑â‰âËä'ävä≈ãã ã$ãpã±ãµååSåóåõåÈç2çÇç–ééeé∞éÔè4è8èÖèßè´è˘êCêWê£êÓëëërëÇëÜëîëòëÈííZíåì:ìÄì∑ìΩî
îîBîïîñîîˆï:ïZïïï£ïıñEñññøñ»ñˆñ˜ó%óFóóóÂò2òpòvò≥òˇôLôsôêô¨ô¡ô˝öö&ö*ö+ö7ö`ölö±õõTõ{õÇõûõ¢õ£õ◊õ›ú.únú⁄ù1ùÇù“ûûXûâûèû¯ü:üOücüüøü—üÚ†*†5†t†}†Ñ†à†â†Æ†¥°°"°T°•°Û¢@¢~¢Ñ¢¡££U£|£Ç£–£˝§+§_§¢§≈••6•U•£•ß•®•»•Œ¶¶K¶Q¶¢¶ßAßßêß„ßÁßË®® ®n®π®«®Õ©©l©Ω©˚™™M™Q™R™ñ™‘´´#´$´g´™¨¨¨¨¨<¨@¨é¨€¨Ô¨Û≠G≠ö≠¶≠Ω≠ˆ≠¸Æ?ÆXÆoÆÖÆùÆπÆ÷ÆÚØØ2Ø3ØaØgØíØ•Ø¶Ø”ØŸ∞+∞1∞\∞n∞o∞û∞§∞¯∞˛±)±=±>±r±x±£±ª±Ω±æ±‹±‡≤0≤x≤ø≤“≤÷≤Ò≤ı≥E≥ñ≥‡≥‰¥)¥-¥}¥»¥Ãµµµ(µ,µwµ∆µÂµÈ∂7∂~∂…∑∑d∑≤∑˝∏L∏r∏v∏≠∏æ∏¬ππ/π3ππÃπ˜π˚∫<∫@∫ç∫œ∫”ªªkª´ªæª¬ºº`ºÑºàº¬º∆ΩΩ_Ω£ΩÛæ:æ\æ`æ∞æ˜øFørøvø≥ø∑¿ @§¿ AO¿ A˙¿ B’¿ CÀ¿ Cœ¿ D&¿ D*¿ E¿ E˛¿ Fˇ¿ G˛¿ IC¿ JA¿ Kk¿ L6¿ L:¿ Lg¿ Lk¿ MU¿ N?¿ N˝¿ O¨¿ PÛ¿ Qú¿ Rc¿ S¿ SM¿ SQ¿ Sg¿ Sk¿ S“¿ T9¿ T‘¿ Uü¿ VM¿ V≥¿ Wj¿ Wn¿ Wç¿ Wë¿ Wﬁ¿ X!¿ Xn¿ Xæ¿ Y¿ Y@¿ Yx¿ Y|¿ Yª¿ YÊ¿ YÍ¿ Z9¿ ZÑ¿ Zà¿ Zœ¿ [¿ [O¿ [y¿ [å¿ [ê¿ [û¿ [¢¿ [Ò¿ \/¿ \[¿ \Ö¿ \ã¿ \Ÿ¿ ])¿ ]i¿ ]o¿ ]æ¿ ^¿ ^L¿ ^ó¿ ^ù¿ ^Ï¿ _ ¿ _&¿ _v¿ _ø¿ `¿ `Y¿ `©¿ `¿ aB¿ aS¿ aa¿ a¿ aú¿ a∑¿ a⁄¿ a¯¿ b¿ b;¿ ba¿ bÑ¿ bù¿ bπ¿ bÿ¿ c¿ c'¿ c?¿ cP¿ cj¿ cÅ¿ cî¿ cÆ¿ c…¿ cÊ¿ d¿ d3¿ dI¿ dp¿ dâ¿ d•¿ d∆¿ d‡¿ e¿ e+¿ eG¿ e]¿ e{¿ eò¿ e∫¿ eÈ¿ eˇ¿ f(¿ fD¿ f[¿ fr¿ fö¿ f±¿ fÿ¿ g¿ gH¿ g}¿ g≠¿ g„¿ h	¿ h$¿ h<¿ hb¿ hÜ¿ h±¿ h ¿ hÒ¿ i	¿ i"¿ iC¿ ir¿ iï¿ i∑¿ j¿ j(¿ jL¿ jº¿ k,¿ kV¿ kÉ¿ k§¿ k∆¿ k‰¿ l¿ l6¿ lc¿ lë¿ læ¿ lÍ¿ m¿ m=¿ mn¿ m}¿ m ¿ m˛¿ n¿ n(¿ n7¿ nt¿ nπ¿ n√¿ o¿ o;¿ oj¿ oê¿ o∫¿ p¿ pC¿ p[¿ pv¿ pÀ¿ pË¿ q¿ qB¿ qm¿ qï¿ qπ¿ q—¿ qÏ¿ r¿ rF¿ rn¿ rë¿ r®¿ r÷¿ s¿ s$¿ sF¿ sn¿ sí¿ s¨¿ s—¿ t¿ t(¿ tî¿ tª¿ tﬁ¿ u¿ uo¿ u~¿ uú¿ u…¿ u·¿ u‚¿ v¿ v2¿ v3¿ vj¿ vá¿ và¿ v ¿ w¿ w¿ w9¿ w?¿ wr¿ wá¿ w™¿ w´¿ wÊ¿ x)¿ x/¿ xx¿ xƒ¿ y¿ y'¿ y-¿ yV¿ yk¿ yÖ¿ yÜ¿ y∞¿ y‡¿ y·¿ z¿ zC¿ zD¿ z|¿ z£¿ z©¿ zÂ¿ {0¿ {6¿ {a¿ {v¿ {ç¿ {é¿ {‹¿ {‚¿ |0¿ |a¿ |g¿ |ë¿ |ó¿ |ß¿ |≠¿ |ˆ¿ }¿ }¿ }7¿ }=¿ }ç¿ }‹¿ ~)¿ ~Q¿ ~x¿ ~y¿ ~¢¿ ~®¿ ~Ù¿ D¿ k¿ q¿ Å¿ á¿ À¿ Ó¿ Ô¿ Ä)¿ ÄG¿ ÄM¿ Äü¿ Ä¥¿ Ä∫¿ Ä ¿ Ä–¿ Å)¿ ÅB¿ ÅC¿ Å~¿ Å¶¿ Å¨¿ Å‘¿ ÅÈ¿ Ç¿ Ç¿ ÇK¿ Çt¿ Çu¿ Çº¿ ÇÂ¿ ÇÊ¿ É/¿ ÉO¿ ÉP¿ ÉÉ¿ Éú¿ Éù¿ É◊¿ Ñ¿ Ñ¿ ÑX¿ Ñõ¿ Ñﬂ¿ Ö*¿ Öu¿ Ö{¿ Ö«¿ Ü¿ Ü\¿ Ük¿ Üq¿ Üº¿ Üˇ¿ á¿ án¿ á¬¿ á◊¿ á›¿ à2¿ àÇ¿ àƒ¿ à‚¿ â¿ âG¿ âM¿ âÇ¿ âÜ¿ âß¿ â®¿ â·¿ ä¿ ä¿ äR¿ äg¿ äÑ¿ äÖ¿ ä¬¿ äË¿ äÓ¿ ã3¿ ãZ¿ ã`¿ ãÆ¿ ã˚¿ åI¿ åí¿ å‚¿ åÚ¿ å¯¿ ç0¿ çE¿ çk¿ çl¿ çÆ¿ çı¿ é¿ é¿ é_¿ éî¿ éö¿ éŸ¿ éﬂ¿ éÔ¿ éı¿ èG¿ èM¿ èb¿ èë¿ èí¿ è“¿ ê
¿ ê¿ êW¿ ê©¿ êØ¿ êÁ¿ êˇ¿ ë ¿ ë?¿ ëw¿ ë}¿ ëŒ¿ ëÌ¿ ëÛ¿ íD¿ íÖ¿ íö¿ íª¿ íº¿ íÌ¿ íÛ¿ ì	¿ ì$¿ ì%¿ ìc¿ ìi¿ ì™¿ ì˙¿ îS¿ îa¿ îg¿ î§¿ î™¿ îÔ¿ ï¿ ï¿ ïm¿ ïò¿ ïû¿ ï‚¿ ï˘¿ ñ¿ ñ¿ ñW¿ ñ•¿ ñ´¿ ñ˚¿ ó.¿ ó4¿ ó~¿ óö¿ ó†¿ óÓ¿ ò5¿ òÜ¿ òÆ¿ ò¥¿ ô¿ ôV¿ ôß¿ ô„¿ ôÈ¿ ö8¿ öÖ¿ öµ¿ öª¿ õ¿ õ¿ õ'¿ õ1¿ õ7¿ õÜ¿ õ÷¿ ú¿ ú%¿ úE¿ úO¿ úU¿ ú†¿ ú·¿ úÔ¿ ù¿ ù¿ ù¿ ùk¿ ùò¿ ù¶¿ ù–¿ ù⁄¿ ù‡¿ ù¿ ùˆ¿ û;¿ ûP¿ û°¿ û∂¿ ûÕ¿ ûŒ¿ ü¿ üV¿ ü\¿ ü¨¿ üﬂ¿ üÂ¿ †7¿ †â¿ †è¿ †Â¿ †Î¿ °<¿ °á¿ °ô¿ °ü¿ °¿ ¢?¿ ¢_¿ ¢e¿ ¢ø¿ £¿ £*¿ £0¿ £{¿ £ü¿ £≠¿ £ ¿ £‘¿ £⁄¿ §(¿ §y¿ §í¿ §†¿ §…¿ §”¿ §Ÿ¿ §Ò¿ §˜¿ •¿ •¿ •Z¿ ••¿ •¡¿ •÷¿ ¶'¿ ¶<¿ ¶S¿ ¶T¿ ¶ã¿ ¶–¿ ¶÷¿ ß¿ ßY¿ ß_¿ ß´¿ ßœ¿ ß’¿ ßÓ¿ ßÙ¿ ®E¿ ®å¿ ®í¿ ®≈¿ ®”¿ ®„¿ ©¿ ©$¿ ©.¿ ©C¿ ©Y¿ ©Z¿ ©ì¿ ©‡¿ ©Ô¿ ©ı¿ ™E¿ ™ï¿ ™õ¿ ™ƒ¿ ™Ÿ¿ ´,¿ ´D¿ ´\¿ ´]¿ ´ë¿ ´ó¿ ´ÿ¿ ¨(¿ ¨j¿ ¨â¿ ¨ä¿ ¨À¿ ≠¿ ≠¿ ≠k¿ ≠µ¿ Æ¿ Æ¿ Æ¿ Æ!¿ Ær¿ Ææ¿ Æ—¿ Ø!¿ Øp¿ Ø¶¿ Øª¿ ØÌ¿ ØÓ¿ ∞*¿ ∞b¿ ∞h¿ ∞®¿ ∞”¿ ∞Ë¿ ±¿ ±¿ ±L¿ ±v¿ ±w¿ ±∞¿ ±Ò¿ ≤'¿ ≤-¿ ≤r¿ ≤π¿ ≤˝¿ ≥ ¿ ≥&¿ ≥k¿ ≥∞¿ ≥€¿ ≥·¿ ¥1¿ ¥â¿ ¥–¿ ¥÷¿ ¥Ï¿ µ:¿ µÅ¿ µá¿ µÊ¿ µ¯¿ ∂¿ ∂¿ ∂I¿ ∂Ç¿ ∂•¿ ∂Ù¿ ∑@¿ ∑ã¿ ∑π¿ ∑ø¿ ∏¿ ∏G¿ ∏è¿ ∏ﬂ¿ π.¿ πU¿ πj¿ πp¿ πÄ¿ πÜ¿ π∆¿ ∫¿ ∫O¿ ∫è¿ ∫∏¿ ∫π¿ ∫˙¿ ªM¿ ªl¿ ªr¿ ªø¿ ªÁ¿ ªÌ¿ º<¿ ºå¿ º®¿ ºÆ¿ º˛¿ ΩM¿ Ωò¿ ΩÃ¿ Ω“¿ æ$¿ æ9¿ æb¿ æc¿ æû¿ æÓ¿ æ˚¿ ø¿ øK¿ øô¿ øﬂ¿ øÙ¿ ¿¿ ¿ ¿ ¿c¿ ¿™¿ ¿∞¿ ¿˚¿ ¡¿ ¡¿ ¡`¿ ¡ó¿ ¡ù¿ ¡≠¿ ¬a¿ ¬±¿ ¬·¿ √o¿ √ø¿ √Ì¿ ƒ¿ ƒ:¿ ƒ;¿ ƒ}¿ ƒÃ¿ ƒ›¿ ƒÚ¿ ≈(¿ ≈)¿ ≈q¿ ≈†¿ ≈°¿ ≈‡¿ ∆¿ ∆ ¿ ∆q¿ ∆¿¿ ∆Ú¿ «¿ «:¿ «;¿ «á¿ «ï¿ «õ¿ «„¿ «È¿ »:¿ »ä¿ »Ÿ¿ »ı¿ …¿ …¿ …c¿ …≤¿ …∏¿ …·¿  ¿  ¿  B¿  f¿  l¿  É¿  â¿  —¿ À¿ Àj¿ À∫¿ À⁄¿ ÀÔ¿ Ã¿ Ã¿ ÃH¿ Ãk¿ Ãq¿ Ãƒ¿ ÃŸ¿ Ã˜¿ Ã¯¿ Õ4¿ Õk¿ Õq¿ Õù¿ Õ≤¿ Õ–¿ Õ—¿ Œ¿ Œ>¿ ŒD¿ Œî¿ Œ∏¿ Œ‹¿ Œ›¿ œ¿ œ7¿ œ8¿ œ|¿ œü¿ œ†¿ œÍ¿ œ¿ –/¿ –_¿ –`¿ –™¿ –∞¿ –Ó¿ —¿ —¿ —C¿ —I¿ —|¿ —Ç¿ —®¿ —œ¿ —–¿ “¿ “p¿ “v¿ “⁄¿ ”¿ ”|¿ ”Ú¿ ”¯¿ ‘ ¿ ‘5¿ ‘W¿ ‘X¿ ‘¢¿ ‘Ê¿ ‘¸¿ ’¿ ’G¿ ’Ö¿ ’ƒ¿ ’ ¿ ÷¿ ÷S¿ ÷|¿ ÷Ç¿ ÷ö¿ ÷Ø¿ ÷ÿ¿ ÷Ÿ¿ ◊&¿ ◊u¿ ◊ç¿ ◊ì¿ ◊„¿ ÿ¿ ÿ¿ ÿN¿ ÿ~¿ ÿ¿ ÿª¿ ÿË¿ ÿÈ¿ Ÿ)¿ Ÿr¿ Ÿx¿ Ÿ≥¿ Ÿπ¿ Ÿ‹¿ ŸÒ¿ ⁄¿ ⁄¿ ⁄[¿ ⁄°¿ ⁄ß¿ ⁄Ò¿ ⁄˜¿ €¿ €,¿ €2¿ €}¿ €»¿ €ﬂ¿ ‹¿ ‹¿ ‹E¿ ‹â¿ ‹è¿ ‹Æ¿ ‹¥¿ ‹Ã¿ ‹·¿ ‹ˇ¿ › ¿ ›@¿ ›l¿ ›r¿ ›™¿ ›”¿ ›Ë¿ ﬁ#¿ ﬁ$¿ ﬁa¿ ﬁ≥¿ ﬁ≈¿ ﬁÀ¿ ﬂ¿ ﬂi¿ ﬂ¨¿ ﬂ˙¿ ‡+¿ ‡1¿ ‡¿ ‡®¿ ‡Æ¿ ‡œ¿ ‡’¿ ‡¯¿ ‡˛¿ ·K¿ ·¿ ·Ö¿ ·£¿ ‚%¿ ‚w¿ ‚Ã¿ „"¿ „r¿ „Ø¿ „µ¿ „ÿ¿ „ﬁ¿ ‰.¿ ‰¿ ‰À¿ ‰Ï¿ ‰Ú¿ Â9¿ Â?¿ Âç¿ Â◊¿ Â›¿ Ê*¿ Êz¿ Ê∆¿ Á¿ Áb¿ Á≤¿ Á∏¿ Ë¿ ËS¿ Ë°¿ ËÒ¿ ÈB¿ ÈS¿ ÈY¿ È§¿ ÈÛ¿ Í:¿ Í@¿ Íå¿ Íß¿ Í≠¿ Í˚¿ ÎI¿ Îó¿ ÎÂ¿ Ï+¿ Ïô¿ Ïü¿ Ï¥¿ Ï¯¿ Ì!¿ Ì"¿ Ìq¿ Ìw¿ Ìæ¿ Ó¿ Ó*¿ Ó+¿ Óa¿ Óg¿ Óä¿ Ó•¿ Ó¶¿ ÓË¿ Ó˛¿ Ô¿ ÔO¿ Ôî¿ Ôö¿ ÔÂ¿ 1¿ 7¿ ¿ ƒ¿ ˛¿ Ò¿ Ò¿ Ò¿ Òg¿ Òy¿ Òò¿ Òô¿ Ò—¿ Ú¿ Ú"¿ Úo¿ Ú≥¿ Ú»¿ ÚŒ¿ Û¿ Ûb¿ Û¶¿ Ûæ¿ Ûƒ¿ Ù¿ Ù]¿ Ùk¿ Ùì¿ Ùî¿ ÙÈ¿ ı¿ ı¿ ıu¿ ıv¿ ıø¿ ıÎ¿ ˆ¿ ˆ5¿ ˆ<¿ ˆv¿ ˆ¡¿ ˆ«¿ ˆ»¿ ˆ˛¿ ˆˇ¿ ˜P¿ ˜£¿ ˜ı¿ ¯I¿ ¯P¿ ¯°¿ ¯Ú¿ ˘)¿ ˘<¿ ˘c¿ ˘Ñ¿ ˘ß¿ ˘˛¿ ˙:¿ ˙ó¿ ˙‘¿ ˚¿ ˚f¿ ˚§¿ ˚ﬂ¿ ¸!¿ ¸[¿ ¸∏¿ ˝¿ ˝r¿ ˝ß¿ ˛¿ ˛a¿ ˛ù¿ ˛Ÿ¿ ˇ6¿ ˇt¿ ˇ—¿ 
¿ E¿ à¿ Â¿B¿Ç¿ﬂ¿¿%¿&¿t¿ö¿ª¿«¿ÿ¿˝¿"¿E¿j¿{¿É¿â¿ä¿£¿…¿œ¿–¿#¿b¿©¿È¿ ¿Z¿ñ¿—¿	¿?¿Ü¿Ã¿¿[¿ö¿ÿ¿¿P¿ç¿–¿		¿	A¿	v¿	ª¿	Ï¿
 ¿
N¿
Å¿
¥¿
¿(¿]¿å¿¡¿ˆ¿,¿b¿ï¿À¿¿9¿i¿™¿Û¿?¿v¿Ω¿¿K¿í¿ÿ¿¿d¿£¿ﬁ¿!¿g¿®¿Ï¿,¿r¿∏¿˚¿S¿ë¿æ¿Ò¿¯¿˘¿<¿@¿A¿M¿á¿à¿î¿Ÿ¿¿^¿™¿
¿d¿√¿j¿¿|¿ß¿ ¿e¿º¿¿`¿´¿¿_¿…¿>¿™¿¿î¿˚¿~¿˚¿ˇ¿¿¿"¿ ¿ "¿ J¿ ù¿ À¿!*¿!+¿!X¿!É¿!Ñ¿!≥¿".¿"/¿"e¿"f¿"ô¿"–¿#¿#¿#$¿#%¿#R¿#^¿#¢¿#£¿#Û¿#Ù¿$C¿$Q¿$W¿$•¿$Ú¿$¯¿%C¿%ç¿%ì¿%≤¿%◊¿%˘¿&3¿&z¿&{¿&Ã¿&Â¿'*¿'+¿'v¿'≥¿(¿(¿(;¿(<¿(H¿(¿(Ä¿(‚¿(„¿(Ô¿)N¿)O¿)[¿)®¿)©¿)µ¿*¿*¿*¿*†¿*°¿*∆¿*ÿ¿+"¿+*¿+.¿+/¿+n¿+µ¿+›¿,¿,¿,:¿,>¿,?¿,l¿,x¿,¨¿,Ï¿-¿-B¿-P¿-V¿-Ö¿-Õ¿-ˇ¿.7¿.Q¿.R¿.y¿.ö¿.´¿.Œ¿.Û¿/¿/;¿/`¿/¶¿/Ã¿/Í¿0¿0o¿0~¿0©¿0∂¿0«¿0œ¿0’¿0ı¿0˘¿0˙¿1&¿12¿1e¿1ñ¿1§¿1™¿1Í¿2¿28¿2Y¿2g¿2m¿2µ¿3¿34¿3~¿3π¿3–¿4¿4¿4 ¿45¿4;¿4[¿4_¿4`¿4É¿4è¿4Õ¿4Ë¿4ˆ¿4¸¿5<¿5[¿5y¿5á¿5ç¿5Ω¿5¯¿6G¿6_¿6m¿6s¿6t¿6¡¿6ÿ¿73¿7Ö¿7À¿7“¿7”¿7Û¿84¿8A¿8H¿8z¿8ƒ¿8ˇ¿9¿9R¿9\¿9f¿9{¿9Å¿9Ö¿9Ü¿9™¿9∂¿9Ê¿:¿:a¿:x¿:Ü¿:å¿:¨¿:Õ¿;*¿;3¿;@¿;G¿;y¿;±¿;∑¿;ª¿;º¿;“¿;”¿;ﬂ¿;Ù¿<¿<D¿<W¿<v¿<û¿<‹¿=¿=R¿=ó¿=–¿=‘¿=’¿>%¿>G¿>f¿>g¿>s¿>î¿>∑¿>∏¿?¿?8¿?m¿?ù¿?ﬁ¿?‰¿?Â¿@¿@/¿@j¿@õ¿@Ÿ¿@„¿@Ì¿@Û¿@Ù¿A8¿Ar¿A°¿AÀ¿A˘¿B¿BS¿B†¿B¿¿B›¿BÂ¿BÎ¿BÔ¿B¿B¸¿C-¿CS¿Cà¿Cœ¿D¿D;¿DA¿Dä¿D≥¿Dπ¿D˛¿Dˇ¿E<¿Eô¿E⁄¿E‡¿E·¿F¿FS¿Få¿F•¿F´¿F¨¿FÌ¿G`¿Gß¿G≠¿GÆ¿G◊¿G˛¿H0¿HN¿HT¿HU¿H~¿H±¿I¿I¿I¿I¿IH¿It¿I≈¿I‰¿J¿J-¿JU¿Jy¿J°¿J ¿JÒ¿J¸¿K¿K
¿Kt¿Kñ¿Kú¿K†¿K°¿K≠¿K¿¿KÍ¿L¿L_¿Lé¿Lπ¿Lﬁ¿M ¿M¿M5¿Mc¿Mç¿MØ¿MÕ¿N¿N9¿Nz¿Nõ¿N∞¿N˛¿O¿O¿O(¿O)¿Ot¿Oz¿O∆¿P
¿P[¿P~¿PÑ¿Pœ¿Q¿Q8¿Q9¿QE¿Q¿QÄ¿Qå¿Q¿¿R¿R]¿R¶¿Rß¿Rı¿S¿S?¿SM¿SS¿ST¿So¿S¿¿S⁄¿T¿T¿TI¿TJ¿Te¿T±¿TÎ¿U-¿U;¿UA¿UB¿Ué¿U∑¿V^¿Vk¿VÄ¿V¶¿Vß¿V‚¿W¿WÇ¿W÷¿W◊¿X:¿Xî¿X’¿X€¿X‹¿Y+¿Y{¿Y»¿YÊ¿Z¿Z:¿Zâ¿Zƒ¿ZÛ¿[¿[¿[¿[¿[%¿[T¿[j¿[é¿[Ÿ¿\!¿\5¿\P¿\â¿\ò¿\π¿\ÿ¿\˘¿]¿]A¿]b¿]ô¿]®¿]”¿]˝¿^¿^?¿^a¿^â¿^‘¿_¿_U¿_d¿_j¿_n¿_o¿_{¿_ƒ¿_Û¿_˜¿_¯¿`B¿`[¿`\¿`≠¿`∫¿`›¿`ﬁ¿a(¿aF¿aG¿a}¿aõ¿aú¿aÌ¿b=¿bÉ¿b‹¿b›¿bÈ¿c%¿ca¿ct¿c§¿cæ¿cË¿d#¿dU¿d}¿dá¿dÿ¿d˙¿e%¿e&¿eì¿eÁ¿eË¿f6¿fg¿f«¿f÷¿g¿gK¿g≥¿g¥¿h¿h¢¿i¿i¿i9¿iq¿i∏¿iÔ¿jg¿jq¿jÄ¿jÜ¿jä¿jã¿j±¿k.¿ke¿kÕ¿l¿lô¿m¿m6¿mV¿mw¿mò¿m•¿mÎ¿nK¿n´¿n¨¿o9¿o?¿oC¿oD¿oq¿o¬¿p¿p9¿pE¿pj¿pç¿p√¿p„¿p˚¿q¿qm¿qy¿qÅ¿qé¿qÃ¿r¿r]¿rá¿r¢¿rº¿r·¿s¿s2¿sU¿s|¿s°¿s–¿sı¿t¿tI¿tq¿tô¿t¨¿t—¿t˚¿u¿u7¿ue¿ux¿uÇ¿uä¿uê¿uë¿u”¿uÚ¿v ¿v¿v¿vJ¿vT¿vt¿vï¿v…¿vÁ¿v˝¿w¿we¿wo¿wu¿wv¿wƒ¿x¿xb¿xè¿xÀ¿x“¿y#¿ys¿y¡¿yœ¿yË¿z¿z¿z¿z¿z2¿z3¿zÑ¿zƒ¿z ¿{¿{j¿{Ü¿{†¿{∫¿{æ¿{ø¿|¿|\¿|b¿|Ø¿|ª¿|”¿|Ì¿|˘¿}¿}d¿}k¿}î¿}ò¿}ô¿}∆¿}˚¿~	¿~9¿~q¿~¿~∂¿~È¿~Ì¿~Ó¿(¿O¿t¿x¿y¿¨¿›¿ﬁ¿Ä+¿Äz¿Ä…¿Ä›¿Ä‚¿Å.¿Å¿ÅÕ¿Åﬁ¿Ç¿ÇP¿Çõ¿Çú¿Çœ¿ÇÚ¿É¿É¿É)¿Éc¿Éè¿É¡¿Ñ
¿ÑK¿Ñå¿Ñ≥¿Ñ¿¿Ö¿Ö_¿Öï¿Ö∆¿Ö„¿Ö˛¿ÜI¿ÜR¿ÜS¿Üó¿Ü“¿á$¿áK¿áQ¿áR¿á†¿á≥¿à¿à¿àC¿àw¿àÄ¿àÅ¿à…¿â&¿â*¿â+¿âv¿â∆¿â’¿äA¿äB¿äb¿äã¿äô¿äü¿äø¿äÒ¿äÚ¿ãA¿ãÜ¿ãú¿ã•¿ãÚ¿å?¿åê¿å±¿å˝¿ç[¿çÆ¿çœ¿çı¿é¿éC¿é_¿és¿éõ¿éø¿éÁ¿è¿è7¿èA¿èg¿èy¿èï¿è‰¿ê¿ê@¿êH¿ê}¿êä¿êÆ¿ê¥¿ê∏¿êπ¿ê‚¿ë¿ë&¿ëI¿ëx¿ë~¿ëÇ¿ëÉ¿ë≤¿ëÚ¿í¿í-¿íT¿í~¿íÑ¿íà¿íâ¿íµ¿í€¿ì¿ì¿ì¿ì>¿ìq¿ìu¿ì¿¿ì≈¿î¿î_¿îé¿î¥¿î›¿ï¿ï,¿ï2¿ïU¿ïv¿ï£¿ï§¿ñ¿ñp¿ñ¬¿ñÏ¿ñÌ¿ó¿ó)¿ó8¿óJ¿óp¿óí¿ó∏¿óﬂ¿ò¿ò¿ò-¿ò\¿ò`¿òa¿òb¿òn¿òä¿ò©¿ò·¿ô¿ô3¿ôv¿ô|¿ôÄ¿ôÅ¿ô∫¿ô¿¿ö¿ö\¿ö™¿ö˘¿õ¿õ3¿õH¿õf¿õs¿õÁ¿õÌ¿õÒ¿õÚ¿ú&¿úK¿úb¿úç¿úú¿ú¬¿ú‰¿úÏ¿úÚ¿úˆ¿ú˜¿ù#¿ùM¿ùQ¿ùR¿ù¿ù◊¿û&¿ût¿ûó¿û⁄¿ûË¿ûÈ¿ü¿ü¿ü[¿üü¿ü„¿†!¿†O¿†d¿†u¿†°¿†»¿†ı¿°!¿°L¿°r¿°ú¿°∑¿°∆¿°Ò¿¢
¿¢'¿¢1¿¢@¿¢F¿¢r¿¢ñ¿¢∂¿¢√¿¢Í¿£¿£I¿£e¿£~¿£¢¿£—¿§¿§;¿§c¿§ö¿§Ω¿§Ù¿•7¿•B¿•Q¿•|¿•Ñ¿•À¿•Û¿•˘¿¶F¿¶m¿¶•¿¶Ø¿¶Ë¿ß	¿ß=¿ß[¿ßq¿ßç¿ßﬂ¿ßÈ¿ßÔ¿ß¿®@¿®`¿®è¿®™¿®∞¿®¥¿®µ¿®–¿©/¿©\¿©¿©É¿©Ñ¿©…¿™¿™Z¿™[¿™á¿™à¿™À¿™Ú¿´ ¿´¿´.¿´p¿´õ¿´„¿´Û¿´˚¿´¸¿¨@¿¨A¿¨è¿¨…¿≠¿≠=¿≠á¿≠¥¿≠Ì¿Æ¿Æ)¿Æ4¿Æx¿Æî¿Æ√¿Æ€¿ÆË¿Ø*¿ØL¿ØÇ¿Øõ¿Ø¶¿ØÆ¿ØØ¿ØÍ¿∞¿∞¿∞l¿∞m¿∞à¿∞≠¿∞Ã¿∞˘¿± ¿±+¿±P¿±ç¿±∫¿±·¿±Ï¿±˚¿≤2¿≤W¿≤î¿≤ü¿≤ß¿≤Ø¿≤≥¿≤¥¿≤ÿ¿≤Ÿ¿≤Â¿≥¿≥U¿≥ô¿≥«¿≥—¿¥&¿¥z¿¥œ¿µ	¿µ¿µ¿µd¿µh¿µi¿µñ¿∂¿∂Z¿∂©¿∂∂¿∑¿∑Q¿∑û¿∑Ï¿∏$¿∏[¿∏∏¿∏ˇ¿π ¿π¿π#¿πc¿πt¿πÈ¿π˝¿∫ ¿∫V¿∫v¿∫é¿∫¨¿∫Ù¿ª ¿ª¿ª¿ª¿ª\¿ªù¿ª≥¿ª«¿º¿ºc¿º∂¿º∆¿º‚¿º˛¿Ω3¿Ωi¿Ω°¿Ωß¿Ωæ¿Ω ¿Ω˜¿æ¿æP¿æp¿æà¿æ¶¿æÊ¿æÚ¿æ˙¿ø ¿ø¿ø¿ø¿ø¿ø8¿øü¿¿¿¿¿¿	¿¿V¿¿ä¿¿ü¿¿Ó¿¿Ô¿¡=¿¡ã¿¡¨¿¡¡¿¬ ¿¬¿¬9¿¬N¿¬ë¿¬í¿¬∫¿¬⁄¿¬€¿¬˝¿√5¿√{¿√£¿√Ù¿ƒE¿ƒî¿ƒ©¿ƒ≤¿≈¿≈D¿≈ö¿≈ß¿≈„¿≈È¿≈Í¿∆¿∆*¿∆ê¿∆Ω¿∆Ã¿∆÷¿∆‹¿∆‡¿∆·¿«¿«@¿«t¿«ê¿«Ÿ¿«›¿«ﬁ¿»)¿»t¿»í¿»ì¿»∞¿»“¿»Ï¿…¿…¿…¿…@¿…p¿…ü¿…≠¿…’¿ *¿ 7¿ Ç¿ à¿ å¿ ç¿ «¿ ‚¿ ˛¿À¿À<¿Àl¿Àõ¿À©¿À¡¿ÀÈ¿Ã¿Ã>¿Ãp¿Ãv¿Ãz¿Ã{¿Ã¶¿ÃÒ¿Õ¿ÕY¿Õs¿Õw¿Õx¿Õû¿Õ«¿ÕÓ¿Œ¿Œn¿Œè¿Œ÷¿œ¿œ¿œ¿œ>¿œi¿œê¿œ¿¿œ’¿–#¿–T¿–£¿–¡¿–˙¿—¿—)¿—¿—€¿—„¿—‰¿—¸¿“¿“:¿“Y¿“f¿“ö¿““¿“ÿ¿“Ô¿“Û¿“Ù¿”¿”)¿”I¿”h¿”á¿”à¿”Ω¿”ﬁ¿”Ï¿‘!¿‘/¿‘t¿‘ƒ¿‘“¿‘”¿’2¿’∑¿÷¿÷r¿÷ù¿÷œ¿◊¿◊T¿◊Ü¿◊÷¿ÿp¿ÿä¿ÿÆ¿ÿ’¿ÿÔ¿Ÿ ¿ŸN¿Ÿï¿Ÿº¿ŸŒ¿Ÿ˜¿⁄¿⁄¿⁄c¿€¿€7¿€P¿€Q¿€é¿€Ø¿€Õ¿€⁄¿‹(¿‹V¿‹o¿‹{¿‹õ¿‹¶¿‹’¿‹¯¿›¿›ö¿›≤¿ﬁ<¿ﬁT¿ﬁi¿ﬁ¡¿ﬁ˜¿ﬁ˝¿ﬂ¿ﬂ¿ﬂ%¿ﬂD¿ﬂq¿ﬂ∂¿‡ ¿‡¿‡Ä¿‡≠¿‡Ã¿‡“¿‡÷¿‡◊¿·'¿·v¿·ƒ¿‚¿‚N¿‚v¿‚≠¿‚Ã¿‚„¿„8¿„Ä¿„£¿„Í¿‰8¿‰ì¿‰õ¿‰¿¿‰˝¿Âc¿Âi¿Âm¿Ân¿Âí¿Â±¿Ê¿Ê7¿Ê§¿Ê˝¿Á4¿Á<¿Áû¿Á§¿Á®¿Á©¿ÁŒ¿Ë#¿Ëì¿Ë¶¿Ë™¿Ë´¿Ë‹¿Ë‚¿È1¿Èd¿Èœ¿È–¿È‹¿Í¿Í¿Í[¿Í\¿Íh¿Í¬¿Î¿ÎT¿ÎÖ¿Î±¿Î ¿ÎÂ¿Ï¿Ï"¿Ï_¿Ïc¿Ïd¿Ïp¿Ïû¿ÏË¿Ì4¿Ì5¿Ìh¿Ì¢¿Ì¶¿Ìß¿Ì¿Ìˆ¿ÓE¿Óâ¿Óï¿Ó¨¿Ó˝¿ÔH¿Ôó¿Ô„¿Ôı¿	¿¿¿\¿p¿v¿ñ¿º¿Õ¿—¿“¿ﬁ¿Ò¿Ò%¿ÒP¿Òq¿Ò∞¿Ò‰¿Ú¿Ú¿Ú¿Ú¿ÚD¿Ú]¿ÚÑ¿Ú≥¿Ú»¿Ú’¿ÚÍ¿Ú¿ÚÙ¿Úı¿ÛA¿ÛL¿ÛQ¿Ûú¿Û‚¿Ù¿Ù¿Ù¿Ù:¿Ù[¿Ùi¿Ùj¿Ùò¿Ù¶¿Ùß¿Ùπ¿ı¿ı¿ı¿ı¿ı%¿ıF¿ıg¿ıu¿ıv¿ıà¿ı©¿ı±¿ıµ¿ı∂¿ı¬¿ı˜¿ı¯¿ˆ¿ˆ:¿ˆë¿ˆﬂ¿ˆ˛¿˜&¿˜N¿˜Ü¿˜ê¿˜∏¿˜π¿˜‹¿¯¿¯#¿¯J¿¯q¿¯†¿¯œ¿˘¿˘B¿˘ü¿˘¡¿˘‡¿˘È¿˙¿˙S¿˙á¿˙“¿˙Ÿ¿˙›¿˙ﬁ¿˙Í¿˚0¿˚1¿˚]¿˚É¿˚Ñ¿˚ê¿˚ ¿˚‹¿¸¿¸'¿¸+¿¸,¿¸p¿¸ì¿¸™¿¸ø¿¸Ì¿˝¿˝$¿˝(¿˝)¿˝l¿˝è¿˝•¿˝∫¿˝Á¿˛¿˛¿˛!¿˛"¿˛g¿˛ä¿˛¢¿˛∑¿˛Ê¿ˇD¿ˇn¿ˇ|¿ˇÄ¿ˇÅ¿ˇÇ¿ˇ‘¿ˇ’¿ ¿ ô¿ Â¿ È¿ Í¿3¿_¿Å¿Ç¿†¿÷¿¿¿f¿ß¿◊¿W¿]¿^¿ñ¿À¿¿O¿p¿∑¿ª¿º¿˛¿*¿L¿M¿k¿°¿Õ¿⁄¿1¿r¿±¿∑¿∏¿¿(¿w¿¬¿Á¿¿Y¿≥¿∑¿∏¿	¿	¿	h¿	∫¿	æ¿	ø¿	Ô¿
¿
l¿
ã¿
©¿
∞¿
Ë¿
È¿4¿Å¿–¿Î¿¿/¿5¿9¿∞¿±¿˛¿!¿k¿Ö¿ƒ¿—¿¿¿¿¿H¿w¿ó¿Ê¿˙¿¿¿å¿ç¿g¿h¿ƒ¿¿@¿D¿E¿ì¿Œ¿¿¿¿i¿¬¿Ï¿˙¿ ¿¿b¿ï¿≈¿Ï¿¿¿>¿w¿∞¿±¿7¿W¿á¿≠¿¥¿‹¿‡¿·¿¿Q¿k¿~¿Ñ¿∞¿¥¿µ¿ˇ¿O¿z¿≠¿¿C¿D¿R¿√¿E¿≤¿≥¿–¿h¿¿ô¿*¿–¿*¿Õ¿[¿Ê¿Á¿˘¿<¿á¿ ¿ ¿ ¿  ¿ G¿ u¿ µ¿ ∂¿ ¸¿!¿!Q¿!g¿!Ç¿!¶¿!œ¿"¿"P¿"]¿"u¿"û¿"√¿"Î¿#
¿#4¿#ä¿#∑¿#‰¿$¿$R¿$£¿$Ò¿%&¿%á¿%±¿%‘¿%Â¿&4¿&f¿&ë¿&µ¿&Ì¿'#¿']¿'å¿'ø¿'¿('¿(X¿(à¿(ƒ¿(›¿)¿)0¿)u¿)∂¿)Î¿*¿*E¿*í¿*‹¿+!¿+Z¿+è¿+¬¿+Ô¿,"¿,U¿,Ü¿,Ω¿,¸¿-f¿-õ¿-“¿.¿.q¿.∞¿.˜¿/0¿/X¿/ï¿/‰¿0¿0X¿0ì¿0›¿1(¿1q¿1º¿2¿2C¿2Ä¿2¬¿3¿3J¿3c¿3z¿3è¿3¢¿3≥¿3¬¿3œ¿3⁄¿3„¿3Í¿3Ó¿3Ô¿4#¿4)¿4n¿4∫¿4◊¿4ı¿5¿5L¿5ñ¿5€¿6'¿60¿6ñ¿6Ó¿7¿7i¿7ù¿7Ï¿7Ù¿8,¿82¿8Ö¿8’¿9&¿9@¿9©¿:¿:x¿:á¿:Ë¿:¿;3¿;|¿;ó¿;›¿;Ë¿;Ò¿;˜¿;¯¿</¿<[¿<s¿<é¿<¬¿<…¿<Õ¿<œ¿<–¿=¿=¿=#¿=A¿=Z¿=Ç¿=®¿=æ¿=ﬁ¿=¸¿>¿>5¿>R¿>t¿>ê¿>¨¿>ø¿>⁄¿>Ô¿?¿?+¿?H¿?i¿?z¿?†¿?ø¿?Ÿ¿?Ú¿@¿@:¿@Q¿@h¿@à¿@∞¿@È¿A ¿AL¿Au¿Aô¿A≥¿AÕ¿AÌ¿B¿BB¿BÇ¿BÉ¿BÀ¿Bˇ¿C9¿Ce¿Cê¿C∞¿C–¿Cÿ¿CÎ¿CÛ¿D¿D
¿D¿D*¿DJ¿Df¿Dé¿D¥¿D⁄¿E¿E¿E1¿EH¿E_¿Ev¿Eå¿E¨¿EÀ¿EÎ¿F¿F-¿FE¿Fh¿FÇ¿F≤¿FŸ¿F¯¿G%¿GJ¿Gf¿GÑ¿G¢¿Gø¿G‚¿H¿H@¿Hi¿Hû¿Hø¿H„¿I¿I¿I¿I+¿Ig¿IÇ¿Iö¿I∫¿IÏ¿J¿JN¿Jl¿Jà¿J¢¿Jº¿J÷¿J¿K¿K&¿KL¿Kt¿Kê¿K¥¿KÚ¿L¿L*¿LP¿L}¿L´¿LÀ¿L˘¿M¿M?¿Ma¿MÉ¿M•¿M◊¿N	¿N9¿Nw¿N´¿N’¿N˝¿O%¿OG¿ON¿OR¿OS¿O_¿OÆ¿Oø¿OŸ¿O˚¿P/¿P_¿P¿Pù¿Pπ¿P’¿PÒ¿Q¿Q'¿QG¿Qo¿Qô¿Q∑¿Q›¿R¿RA¿RY¿RÅ¿R∞¿R‡¿S¿S8¿SZ¿S|¿S†¿Sƒ¿SË¿T¿TN¿Té¿Tƒ¿T¿U$¿UN¿Ur¿Uü¿U£¿U•¿U¶¿Uÿ¿Uı¿V¿V¿V9¿VX¿VÄ¿Võ¿V≤¿V≥¿V…¿VÊ¿W¿W0¿WF¿WG¿WS¿Wô¿Wõ¿Wú¿W¯¿XQ¿XR¿X^¿Xs¿Xä¿X§¿XÊ¿XÏ¿X¿XÒ¿X˝¿Y4¿YZ¿Yä¿YÃ¿Y“¿Y”¿Z¿ZA¿ZG¿ZK¿ZL¿ZX¿Zk¿Zß¿Zº¿Z¿¿Z¡¿[3¿[4¿[]¿[Ä¿[Å¿[ç¿[√¿[ƒ¿[–¿[¯¿\¿\x¿\õ¿\ü¿\†¿\¨¿\—¿\˚¿]&¿]:¿]a¿]u¿]ü¿]≥¿]Û¿^%¿^g¿^ª¿^ø¿^¿¿^Ã¿^‡¿_%¿_W¿_o¿_ß¿`¿`¿`¿`¿`F¿`_¿`c¿`e¿`f¿`ñ¿`µ¿`–¿a¿a4¿aJ¿ab¿aÄ¿a•¿aÌ¿b5¿bu¿bÄ¿bé¿b≠¿b ¿b·¿b¯¿c¿c¿c`¿cs¿ct¿cÄ¿c˜¿d¿dB¿dV¿d¶¿d¨¿d»¿d⁄¿dÌ¿d˛¿e¿e#¿e7¿eL¿eR¿eV¿eX¿eY¿e´¿e“¿e÷¿f¿fm¿fΩ¿f‡¿f‰¿g1¿g{¿g∆¿h¿h_¿hÆ¿h„¿hÁ¿i5¿ik¿iä¿i£¿i§¿iÕ¿iŒ¿j¿jX¿jY¿j§¿jÂ¿jÊ¿k¿k3¿kk¿k¢¿k©¿k≠¿kØ¿k∞¿l ¿l¿l1¿lc¿ld¿lp¿lõ¿lú¿l®¿m¿m¿m≥¿mµ¿m∂¿n¿nT¿nà¿n∫¿nÓ¿nÔ¿n˚¿o&¿o'¿o3¿ot¿o¥¿p
¿p6¿p>¿pD¿pn¿pr¿ps¿p¿p¡¿q¿qq¿q°¿q©¿qØ¿qÓ¿qÚ¿qÙ¿qı¿r@¿rã¿rÃ¿r˝¿s0¿s1¿s=¿sh¿si¿su¿s∂¿t¿t&¿tç¿tî¿tò¿tô¿t•¿tÁ¿u>¿u•¿uæ¿v¿v¿v¿v¿v¿vS¿v™¿w¿w'¿wN¿wë¿wò¿wú¿wû¿wü¿wË¿x¿xS¿xT¿xz¿x{¿xá¿x≤¿x≥¿xø¿y ¿y¿yS¿yü¿yÙ¿y˚¿yˇ¿z¿zM¿zf¿zû¿zÍ¿{?¿{F¿{J¿{L¿{M¿{ô¿{‰¿{¸¿|%¿|9¿|N¿|i¿|n¿|o¿|ï¿|ñ¿|¢¿|Õ¿|Œ¿|⁄¿}¿}4¿}n¿}u¿}y¿}z¿}Ü¿}»¿}·¿~¿~@¿~G¿~K¿~M¿~N¿~ô¿~¶¿~÷¿¿	¿¿@¿A¿M¿Æ¿∫¿¸¿Ä¿ÄA¿Äh¿Äo¿Äs¿Äu¿Äv¿Ä∆¿Ä«¿Å ¿Å4¿Å}¿Å~¿Åß¿Å–¿Å—¿Å›¿Ç¿Ç]¿Çå¿Çê¿Çë¿Çù¿Çﬁ¿É¿ÉQ¿ÉX¿É\¿É]¿Éi¿É´¿É„¿Ñ ¿Ñ'¿Ñ+¿Ñ-¿Ñ.¿Ñ}¿Ñ™¿Ñ≠¿Ñ˙¿Ö%¿Ö_¿Ö¶¿Öß¿Ö–¿ÖË¿ÖÈ¿Öı¿ÜD¿ÜE¿ÜQ¿Üí¿Üß¿Ü‰¿áz¿á~¿á¿áã¿áÕ¿á‚¿à ¿à∑¿àª¿àΩ¿àæ¿â¿âV¿âh¿âï¿â‹¿â›¿ä¿ä4¿ä5¿äA¿äk¿ä∆¿ä˜¿ä˚¿ä¸¿ã¿ãÇ¿ãÉ¿ãè¿å¿å¿å¿å`¿åª¿å˝¿å˛¿ç¿çd¿çe¿ç§¿ç’¿çÙ¿é¿éZ¿é{¿éû¿éü¿éµ¿è¿è~¿èÖ¿èâ¿èä¿èñ¿èÃ¿ê¿ê'¿ê(¿êJ¿êg¿êy¿êÓ¿ê˜¿ê˝¿ê˛¿ëI¿ëÖ¿ëò¿ëû¿ëﬁ¿ë˚¿í¿íì¿íú¿í¢¿í£¿íæ¿íŒ¿íÁ¿ì¿ì¿ìp¿ìò¿ì°¿ì®¿ì¨¿ì≠¿ìπ¿î¿î¿î¿îz¿îò¿î®¿îŒ¿îÛ¿î¯¿î˘¿ï¿ïD¿ïâ¿ïä¿ïµ¿ï∂¿ñ ¿ñ¿ñN¿ñy¿ñª¿ñ‚¿ñÈ¿ó8¿óë¿óï¿óñ¿ó›¿ó˜¿ò/¿ò\¿ò†¿òß¿òŸ¿ô6¿ô:¿ô;¿ôG¿ô}¿ôπ¿ôÿ¿ôŸ¿ö8¿öb¿öô¿ö∫¿ö‡¿õ¿õG¿õè¿õò¿õû¿õü¿õˆ¿ú¿ú%¿úà¿úë¿úó¿úò¿ú„¿ù<¿ùf¿ùy¿ù¿ù‚¿ùˇ¿û¿ûÄ¿ûâ¿ûè¿ûê¿û»¿û…¿ü¿üO¿üq¿üÆ¿üÕ¿üÓ¿ü˘¿†@¿†_¿†Ä¿†´¿†∂¿†æ¿†ƒ¿†≈¿†˜¿°.¿°e¿°f¿°ü¿°Õ¿¢ ¿¢¿¢M¿¢â¿¢∆¿£¿£#¿£5¿£T¿£l¿£¢¿£Ã¿£◊¿£‡¿£Ê¿£Á¿§¿§¿§|¿§É¿§á¿§à¿§î¿§“¿§‘¿§’¿•Q¿•ß¿•®¿•…¿¶C¿¶D¿¶P¿¶ª¿¶˜¿ß¿ß¿ßb¿ßª¿ßÂ¿ß¯¿ß˛¿ßˇ¿®=¿®o¿®¶¿®›¿®ﬁ¿©â¿©±¿©È¿™t¿™|¿™Ø¿™∞¿™À¿™€¿´E¿´L¿´P¿´Q¿´]¿´º¿´æ¿´ø¿¨3¿¨k¿¨l¿¨ç¿¨é¿¨¿¿¨‡¿¨·¿≠¿≠L¿≠l¿≠ò¿≠¶¿≠¨¿≠ÿ¿Æ&¿ÆÉ¿Æ·¿ØD¿Øc¿ØÜ¿Ø¢¿Ø®¿Ø¨¿Ø≠¿Øπ¿ØÏ¿∞¿∞¿∞x¿∞»¿∞Ï¿∞˙¿± ¿±¿±3¿±V¿±r¿±x¿±y¿±æ¿≤ ¿≤!¿≤Å¿≤Ø¿≤ ¿≥5¿≥n¿≥ú¿≥…¿≥ ¿≥ﬁ¿≥Ó¿¥@¿¥G¿¥y¿¥¢¿¥∆¿¥Ã¿¥–¿¥—¿¥›¿µ¿µ¿µ¿µb¿µÇ¿µÉ¿µ§¿µ•¿µ±¿µ˘¿∂¿∂$¿∂A¿∂W¿∂•¿∂ª¿∂ƒ¿∂À¿∂œ¿∂–¿∂‹¿∑¿∑¿∑¿∑h¿∑å¿∑ç¿∑Æ¿∑Ø¿∑ª¿∏¿∏(¿∏P¿∏]¿∏Ü¿∏å¿∏ê¿∏ë¿∏ù¿π¿π¿π¿π:¿πM¿πó¿πò¿πŒ¿π“¿∫!¿∫f¿∫¥¿ª¿ª¿ª¿ª_¿ª™¿ª›¿º¿º/¿º=¿ºV¿ºt¿ºì¿º´¿º¨¿º›¿ºÛ¿ºÙ¿Ω6¿Ω`¿Ωa¿Ωö¿Ω†¿Ω¿æ>¿æg¿æm¿æ∫¿æ–¿æ˛¿æˇ¿ø¿øU¿øW¿øX¿øú¿øÍ¿¿$¿¿=¿¿>¿¿ä¿¿Ÿ¿¿Á¿¡1¿¡2¿¡X¿¡t¿¡x¿¡y¿¡ü¿¡ª¿¡ø¿¡¿¿¡Ó¿¬¿¬¿¬¿¬S¿¬a¿¬g¿¬†¿¬º¿¬‚¿¬Í¿¬Ó¿¬Ô¿√ ¿√=¿√K¿√Q¿√R¿√ê¿√î¿√ï¿√°¿√∂¿√Õ¿√ˇ¿ƒ#¿ƒ@¿ƒG¿ƒT¿ƒ~¿ƒÇ¿ƒÉ¿ƒè¿ƒ«¿ƒÌ¿≈"¿≈8¿≈j¿≈ñ¿≈ú¿≈†¿≈°¿≈≠¿≈¿¿≈Ì¿∆¿∆ ¿∆$¿∆%¿∆1¿∆X¿∆l¿∆î¿«"¿«∞¿«π¿«‘¿«€¿«ﬂ¿«·¿«‚¿»/¿»F¿»\¿»á¿»ó¿»ò¿»∑¿»∏¿»˚¿…¿…¿…=¿…|¿…}¿…®¿…Æ¿…¿ ¿  ¿ 2¿ J¿ X¿ ^¿ _¿ ë¿ í¿ ≥¿ ¡¿ «¿ »¿À¿À;¿Às¿À¶¿À¨¿À¬¿À·¿ÀÂ¿ÀÊ¿Ã¿Ã%¿Ãu¿ÃÉ¿Ãâ¿Ã≈¿Ã”¿ÃÏ¿Ãˇ¿Õ¿Õ¿Õ8¿Õ9¿ÕP¿Õk¿Õq¿Õr¿Õã¿Õè¿Õê¿Õ»¿ÕŒ¿Œ¿Œ.¿Œ4¿Œp¿Œ~¿Œó¿Œ™¿Œ∞¿Œ±¿Œ„¿Œ‰¿œ	¿œ$¿œ*¿œ+¿œD¿œH¿œI¿œq¿œÇ¿œï¿œ¶¿œ™¿œ´¿œ∑¿œÕ¿œÌ¿œÒ¿œÛ¿œÙ¿–5¿–m¿–n¿–•¿–€¿–‹¿—)¿—K¿—O¿—ú¿—π¿—◊¿—˝¿“,¿“H¿“M¿“]¿“¿“ç¿“é¿“®¿“æ¿“◊¿“˜¿”¿”¿”)¿”>¿”D¿”c¿”Ñ¿”≥¿” ¿”“¿”Ê¿”Ó¿‘¿‘¿‘     Ä•  Ä∫Ä— Ä÷ÄÎÄÌÄ˚Ä˛ Å*ÅOÅQ  Å{ Å¢Å∏Å∫  Å„  Ç  Ç5  ÇL  Çd  Çà  Çù  Ç¥  ÇÕ  Ç‚  Çˇ  É  É9  ÉR  Éo  Éä  ÉÆ  Éœ  ÉÌ  Ñ  Ñ   Ñ4  ÑX  Ñv  Ñï  Ñ±ÑÿÖD â∑¢Uì@âÇ/// A controller for an editable text field.
///
/// Whenever the user modifies a text field with an associated
/// [TextEditingController], the text field updates [value] and the controller
/// notifies its listeners. Listeners can then read the [text] and [selection]
/// properties to learn what the user has typed or how the selection has been
/// updated.
///
/// Similarly, if you modify the [text] or [selection] properties, the text
/// field will be notified and will update itself appropriately.
///
/// A [TextEditingController] can also be used to provide an initial value for a
/// text field. If you build a text field with a controller that already has
/// [text], the text field will use that text as its initial value.
///
/// The [value] (as well as [text] and [selection]) of this controller can be
/// updated from within a listener added to this controller. Be aware of
/// infinite loops since the listener will also be notified of the changes made
/// from within itself. Modifying the composing region from within a listener
/// can also have a bad interaction with some input methods. Gboard, for
/// example, will try to restore the composing region of the text if it was
/// modified programmatically, creating an infinite loop of communications
/// between the framework and the input method. Consider using
/// [TextInputFormatter]s instead for as-you-type text modification.
///
/// If both the [text] or [selection] properties need to be changed, set the
/// controller's [value] instead.
///
/// Remember to [dispose] of the [TextEditingController] when it is no longer
/// needed. This will ensure we discard any resources used by the object.
/// {@tool dartpad}
/// This example creates a [TextField] with a [TextEditingController] whose
/// change listener forces the entered text to be lower case and keeps the
/// cursor at the end of the input.
///
/// ** See code in examples/api/lib/widgets/editable_text/text_editing_controller.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [TextField], which is a Material Design text field that can be controlled
///    with a [TextEditingController].
///  * [EditableText], which is a raw region of editable text that can be
///    controlled with a [TextEditingController].
///  * Learn how to use a [TextEditingController] in one of our [cookbook recipes](https://flutter.dev/docs/cookbook/forms/text-field-changes#2-use-a-texteditingcontroller). ìÇÅ îî/Äè/// Creates a controller for an editable text field.
///
/// This constructor treats a null [text] argument as if it were the empty
/// string.î2î;  îHîMîíî[îtîSîNîVî]îmînîvîÜîëîãîáîçîòÇ]ïqïrï{Äª/// Creates a controller for an editable text field from an initial [TextEditingValue].
///
/// This constructor treats a null [value] argument as if it were
/// [TextEditingValue.empty].ï|ïè  &ïõï°ïÛñ≈ï’ïπï±ï´ï¥ïºïΩï¬ï√ïÃïÕïÿï›ïﬁï˝ññññMñNñ_ñPñUñVñ`ñûñŒñ”ñÛñ⁄ñ‘ñ›ñÌñÓ ñ˘Ló2+/// The current string the user is editing.   óHÇ·ôyÇ/// Setting this will notify all the listeners of this [TextEditingController]
/// that they need to update (it calls [notifyListeners]). For this reason,
/// this value should only be set between frames, e.g. in response to user
/// actions, not during the build, layout, or paint phases.
///
/// This property can be set from a listener added to this
/// [TextEditingController]; however, one should not also set [selection]
/// in a separate statement. To change both the [text] and the [selection]
/// change the controller's [value]. ô~ôÜ   ö-Åtö=  öCöU  ö-ö.†ãÄ»°6Äê/// The currently selected [text].
///
/// If the selection is collapsed, then this property gives the offset of the
/// cursor within the text.   °VÑP§Çê/// Setting this will notify all the listeners of this [TextEditingController]
/// that they need to update (it calls [notifyListeners]). For this reason,
/// this value should only be set between frames, e.g. in response to user
/// actions, not during the build, layout, or paint phases.
///
/// This property can be set from a listener added to this
/// [TextEditingController]; however, one should not also set [text]
/// in a separate statement. To change both the [text] and the [selection]
/// change the controller's [value].
///
/// If the new selection is of non-zero length, or is outside the composing
/// range, the composing range is cleared. §§   õ•Ñ‚úyÄ¬/// Builds [TextSpan] from current editing value.
///
/// By default makes text in composing range appear as underlined. Descendants
/// can override this method to customize appearance of text. úàúü  úßú≥  ú∫ú…   •™Ç<ßÜÅƒ/// Set the [value] to empty.
///
/// After calling this function, [text] will be the empty string and the
/// selection will be collapsed at zero offset.
///
/// Calling this will notify all the listeners of this [TextEditingController]
/// that they need to update (it calls [notifyListeners]). For this reason,
/// this method should only be called between frames, e.g. in response to user
/// actions, not during the build, layout, or paint phases.   ßÍÇf™Å˛/// Set the composing region to an empty range.
///
/// The composing region is the range of text that is still being composed.
/// Calling this function indicates that the user is done composing that
/// region.
///
/// Calling this will notify all the listeners of this [TextEditingController]
/// that they need to update (it calls [notifyListeners]). For this reason,
/// this method should only be called between frames, e.g. in response to user
/// actions, not during the build, layout, or paint phases.   ™TÄŒ™ùA/// Check that the [selection] is inside of the bounds of [text]. ™π™»   ´&Ä‰´n@/// Check that the [selection] is inside of the composing range. ´è´û    ¨ÖÆ≠¨Åó/// Toolbar configuration for [EditableText].
///
/// Toolbar is a context menu that will show up when user right click or long
/// press the [EditableText]. It includes several options: cut, copy, paste,
/// and select all.
///
/// [EditableText] and its derived widgets have their own default [ToolbarOptions].
/// Create a custom [ToolbarOptions] if you want explicit control over the toolbar
/// option. ≠øÅr ÆGÆU{/// Create a toolbar configuration with given options.
///
/// All options default to false if they are not explicitly set.Æ\Æb  ÆsÆy  ÆâÆè  Æ°Æß  ÆhÆ~ÆñÆ≤Æ¿Æ∆Æ”ÆÃÆ«ÆœÆ›Æ„ÆÔÆËÆ‰ÆÎÆ˘ÆˇØØØ Ø	ØØØ/Ø(ØØ+Ø5nØüX/// Whether to show copy option in toolbar.
///
/// Defaults to false. Must not be null. Ø®Äƒ∞iÄ´/// Whether to show cut option in toolbar.
///
/// If [EditableText.readOnly] is set to true, cut will be disabled regardless.
///
/// Defaults to false. Must not be null. ∞qÄ ±6ÄØ/// Whether to show paste option in toolbar.
///
/// If [EditableText.readOnly] is set to true, paste will be disabled regardless.
///
/// Defaults to false. Must not be null. ±@y±∞^/// Whether to show select all option in toolbar.
///
/// Defaults to false. Must not be null.    ±æ¿ ÌB¿ \5™p/// A basic text input field.
///
/// This widget interacts with the [TextInput] service to let the user edit the
/// text it contains. It also provides scrolling, selection, and cursor
/// movement. This widget does not provide any focus management (e.g.,
/// tap-to-focus).
///
/// ## Handling User Input
///
/// Currently the user may change the text this widget contains via keyboard or
/// the text selection menu. When the user inserted or deleted text, you will be
/// notified of the change and get a chance to modify the new text value:
///
/// * The [inputFormatters] will be first applied to the user input.
///
/// * The [controller]'s [TextEditingController.value] will be updated with the
///   formatted result, and the [controller]'s listeners will be notified.
///
/// * The [onChanged] callback, if specified, will be called last.
///
/// ## Input Actions
///
/// A [TextInputAction] can be provided to customize the appearance of the
/// action button on the soft keyboard for Android and iOS. The default action
/// is [TextInputAction.done].
///
/// Many [TextInputAction]s are common between Android and iOS. However, if a
/// [textInputAction] is provided that is not supported by the current
/// platform in debug mode, an error will be thrown when the corresponding
/// EditableText receives focus. For example, providing iOS's "emergencyCall"
/// action when running on an Android device will result in an error when in
/// debug mode. In release mode, incompatible [TextInputAction]s are replaced
/// either with "unspecified" on Android, or "default" on iOS. Appropriate
/// [textInputAction]s can be chosen by checking the current platform and then
/// selecting the appropriate action.
///
/// {@template flutter.widgets.EditableText.lifeCycle}
/// ## Lifecycle
///
/// Upon completion of editing, like pressing the "done" button on the keyboard,
/// two actions take place:
///
///   1st: Editing is finalized. The default behavior of this step includes
///   an invocation of [onChanged]. That default behavior can be overridden.
///   See [onEditingComplete] for details.
///
///   2nd: [onSubmitted] is invoked with the user's input value.
///
/// [onSubmitted] can be used to manually move focus to another input widget
/// when a user finishes with the currently focused input widget.
///
/// When the widget has focus, it will prevent itself from disposing via
/// [AutomaticKeepAliveClientMixin.wantKeepAlive] in order to avoid losing the
/// selection. Removing the focus will allow it to be disposed.
/// {@endtemplate}
///
/// Rather than using this widget directly, consider using [TextField], which
/// is a full-featured, material-design text input field with placeholder text,
/// labels, and [Form] integration.
///
/// ## Text Editing [Intent]s and Their Default [Action]s
///
/// This widget provides default [Action]s for handling common text editing
/// [Intent]s such as deleting, copying and pasting in the text field. These
/// [Action]s can be directly invoked using [Actions.invoke] or the
/// [Actions.maybeInvoke] method. The default text editing keyboard [Shortcuts]
/// also use these [Intent]s and [Action]s to perform the text editing
/// operations they are bound to.
///
/// The default handling of a specific [Intent] can be overridden by placing an
/// [Actions] widget above this widget. See the [Action] class and the
/// [Action.overridable] constructor for more information on how a pre-defined
/// overridable [Action] can be overridden.
///
/// ### Intents for Deleting Text and Their Default Behavior
///
/// | **Intent Class**                 | **Default Behavior when there's selected text**      | **Default Behavior when there is a [caret](https://en.wikipedia.org/wiki/Caret_navigation) (The selection is [TextSelection.collapsed])**  |
/// | :------------------------------- | :--------------------------------------------------- | :----------------------------------------------------------------------- |
/// | [DeleteCharacterIntent]          | Deletes the selected text                            | Deletes the user-perceived character before or after the caret location. |
/// | [DeleteToNextWordBoundaryIntent] | Deletes the selected text and the word before/after the selection's [TextSelection.extent] position | Deletes from the caret location to the previous or the next word boundary |
/// | [DeleteToLineBreakIntent]        | Deletes the selected text, and deletes to the start/end of the line from the selection's [TextSelection.extent] position | Deletes from the caret location to the logical start or end of the current line |
///
/// ### Intents for Moving the [Caret](https://en.wikipedia.org/wiki/Caret_navigation)
///
/// | **Intent Class**                                                                     | **Default Behavior when there's selected text**                  | **Default Behavior when there is a caret ([TextSelection.collapsed])**  |
/// | :----------------------------------------------------------------------------------- | :--------------------------------------------------------------- | :---------------------------------------------------------------------- |
/// | [ExtendSelectionByCharacterIntent](`collapseSelection: true`)                       | Collapses the selection to the logical start/end of the selection | Moves the caret past the user-perceived character before or after the current caret location.  |
/// | [ExtendSelectionToNextWordBoundaryIntent](`collapseSelection: true`)                | Collapses the selection to the word boundary before/after the selection's [TextSelection.extent] position | Moves the caret to the previous/next word boundary.  |
/// | [ExtendSelectionToNextWordBoundaryOrCaretLocationIntent](`collapseSelection: true`) | Collapses the selection to the word boundary before/after the selection's [TextSelection.extent] position, or [TextSelection.base], whichever is closest in the given direction | Moves the caret to the previous/next word boundary.  |
/// | [ExtendSelectionToLineBreakIntent](`collapseSelection: true`)                       | Collapses the selection to the start/end of the line at the selection's [TextSelection.extent] position | Moves the caret to the start/end of the current line .|
/// | [ExtendSelectionVerticallyToAdjacentLineIntent](`collapseSelection: true`)          | Collapses the selection to the position closest to the selection's [TextSelection.extent], on the previous/next adjacent line | Moves the caret to the closest position on the previous/next adjacent line. |
/// | [ExtendSelectionToDocumentBoundaryIntent](`collapseSelection: true`)                | Collapses the selection to the start/end of the document | Moves the caret to the start/end of the document. |
///
/// #### Intents for Extending the Selection
///
/// | **Intent Class**                                                                     | **Default Behavior when there's selected text**                  | **Default Behavior when there is a caret ([TextSelection.collapsed])**  |
/// | :----------------------------------------------------------------------------------- | :--------------------------------------------------------------- | :---------------------------------------------------------------------- |
/// | [ExtendSelectionByCharacterIntent](`collapseSelection: false`)                       | Moves the selection's [TextSelection.extent] past the user-perceived character before/after it |
/// | [ExtendSelectionToNextWordBoundaryIntent](`collapseSelection: false`)                | Moves the selection's [TextSelection.extent] to the previous/next word boundary |
/// | [ExtendSelectionToNextWordBoundaryOrCaretLocationIntent](`collapseSelection: false`) | Moves the selection's [TextSelection.extent] to the previous/next word boundary, or [TextSelection.base] whichever is closest in the given direction | Moves the selection's [TextSelection.extent] to the previous/next word boundary. |
/// | [ExtendSelectionToLineBreakIntent](`collapseSelection: false`)                       | Moves the selection's [TextSelection.extent] to the start/end of the line |
/// | [ExtendSelectionVerticallyToAdjacentLineIntent](`collapseSelection: false`)          | Moves the selection's [TextSelection.extent] to the closest position on the previous/next adjacent line |
/// | [ExtendSelectionToDocumentBoundaryIntent](`collapseSelection: false`)                | Moves the selection's [TextSelection.extent] to the start/end of the document |
/// | [SelectAllTextIntent]  | Selects the entire document |
///
/// ### Other Intents
///
/// | **Intent Class**                        | **Default Behavior**                                 |
/// | :-------------------------------------- | :--------------------------------------------------- |
/// | [DoNothingAndStopPropagationTextIntent] | Does nothing in the input field, and prevents the key event from further propagating in the widget tree. |
/// | [ReplaceTextIntent]                     | Replaces the current [TextEditingValue] in the input field's [TextEditingController], and triggers all related user callbacks and [TextInputFormatter]s. |
/// | [UpdateSelectionIntent]                 | Updates the current selection in the input field's [TextEditingController], and triggers the [onSelectionChanged] callback. |
/// | [CopySelectionTextIntent]               | Copies or cuts the selected text into the clipboard |
/// | [PasteTextIntent]                       | Inserts the current text in the clipboard after the caret location, or replaces the selected text if the selection is not collapsed. |
///
/// ## Gesture Events Handling
///
/// This widget provides rudimentary, platform-agnostic gesture handling for
/// user actions such as tapping, long-pressing and scrolling when
/// [rendererIgnoresPointer] is false (false by default). To tightly conform
/// to the platform behavior with respect to input gestures in text fields, use
/// [TextField] or [CupertinoTextField]. For custom selection behavior, call
/// methods such as [RenderEditable.selectPosition],
/// [RenderEditable.selectWord], etc. programmatically.
///
/// {@template flutter.widgets.editableText.showCaretOnScreen}
/// ## Keep the caret visible when focused
///
/// When focused, this widget will make attempts to keep the text area and its
/// caret (even when [showCursor] is `false`) visible, on these occasions:
///
///  * When the user focuses this text field and it is not [readOnly].
///  * When the user changes the selection of the text field, or changes the
///    text when the text field is not [readOnly].
///  * When the virtual keyboard pops up.
/// {@endtemplate}
///
/// See also:
///
///  * [TextField], which is a full-featured, material-design text input field
///    with placeholder text, labels, and [Form] integration. ¿ \]ôÉ ¿ aD¿ aPÑº/// Creates a basic text input control.
///
/// The [maxLines] property can be set to null to remove the restriction on
/// the number of lines. By default, it is one, meaning this is a single-line
/// text field. [maxLines] must be null or greater than zero.
///
/// If [keyboardType] is not set or is null, its value will be inferred from
/// [autofillHints], if [autofillHints] is not empty. Otherwise it defaults to
/// [TextInputType.text] if [maxLines] is exactly one, and
/// [TextInputType.multiline] if [maxLines] is null or greater than one.
///
/// The text cursor is not shown if [showCursor] is false or if [showCursor]
/// is null (the default) and [readOnly] is true.
///
/// The [controller], [focusNode], [obscureText], [autocorrect], [autofocus],
/// [showSelectionHandles], [enableInteractiveSelection], [forceLine],
/// [style], [cursorColor], [cursorOpacityAnimates],[backgroundCursorColor],
/// [enableSuggestions], [paintCursorAboveText], [selectionHeightStyle],
/// [selectionWidthStyle], [textAlign], [dragStartBehavior], [scrollPadding],
/// [dragStartBehavior], [toolbarOptions], [rendererIgnoresPointer],
/// [readOnly], and [enableIMEPersonalizedLearning] arguments must not be null.@¿ aW¿ a]  ¿ ae¿ at  ¿ aÉ¿ aí  ¿ a†¿ a¶  ¿ aª¿ a¡  ¿ aﬁ¿ a‰  ¿ a¸¿ b  ¿ b ¿ b+  ¿ b? ¿ bQ  ¿ be¿ bk  ¿ bà¿ bó  ¿ b°¿ bÆ  ¿ bΩ¿ bÃ  ¿ b‹#¿ bÎ  ¿ c ¿ c  ¿ c+¿ c1  ¿ cC¿ cI  ¿ cT¿ cZ  ¿ cn¿ ct  ¿ cÖ¿ cã  ¿ cò¿ cû  ¿ c≤¿ c∏  ¿ cÕ¿ c”  ¿ cÍ+¿ c  ¿ d¿ d!  ¿ d7¿ d>  ¿ dM!¿ dS  ¿ dt¿ dz  ¿ dç¿ dì  ¿ d©¿ dπ  ¿ d ¿ d–  ¿ d‰1¿ dÍ  ¿ e¿ e!  ¿ e/¿ e5  ¿ eK¿ eQ  ¿ ea¿ eg  ¿ e¿ eÖ  ¿ eú¿ e¢  ¿ eæ)¿ eŸ  ¿ eÌ¿ eÛ  ¿ f#¿ f	  ¿ f,¿ f2  ¿ fH¿ fN  ¿ f_¿ fe  ¿ fv"¿ f|  ¿ fû¿ f§  ¿ fµ!¿ fª  ¿ f‹3¿ f‚  ¿ g1¿ g  ¿ gL/¿ gR  ¿ gÅ*¿ gá  ¿ g±0¿ g∑  ¿ gÁ ¿ gÓ  ¿ h¿ h  ¿ h(¿ h.  ¿ h@ ¿ hF  ¿ hf¿ hw  ¿ hä%¿ hê  ¿ hµ¿ hª  ¿ hŒ!¿ h‘  ¿ hı¿ h˚  ¿ i¿ i  ¿ i&¿ i,  ¿ iG)¿ iM  Å±¿ a∞¿ a’¿ aÒ¿ b¿ b~¿ c¿ c¿ c ¿ c~¿ cß¿ c√¿ d ¿ d¿ d¿ d,¿ di¿ d˛¿ e¿ e¿ f!¿ f?¿ fì¿ f—¿ f¯¿ f˙¿ f˚¿ g	¿ g
¿ g0¿ g2¿ g3¿ g@¿ gA¿ ga¿ gg¿ gq¿ gr¿ gu¿ gz¿ gv¿ gõ¿ g•¿ g¶¿ g ¿ g€¿ g‹¿ hü¿ h≠¿ hÆ¿ h•¿ h¨¿ h¶¿ h‚¿ hÊ¿ hÁ¿ i=¿ il¿ iy¿ i¿ ií¿ iã¿ iÄ¿ ié¿ iú¿ i¢¿ i¥¿ i≠¿ i£¿ i∞¿ iæ¿ iƒ¿ j¿ i‡¿ iÿ¿ i≈¿ i€¿ i˝¿ i„¿ iı¿ iˆ¿ j ¿ j¿ j¿ j%¿ j¿ j¿ j!¿ j/¿ j5¿ jI¿ jB¿ j6¿ jE¿ jc¿ jS¿ ju¿ je¿ jx¿ jπ¿ jÖ¿ j†¿ jy¿ já¿ jñ¿ jó¿ j¢¿ j±¿ j≤¿ j”¿ j√¿ jÂ¿ j’¿ jË¿ k)¿ jı¿ k¿ jÈ¿ j˜¿ k¿ k¿ k¿ k!¿ k"¿ k3¿ k9¿ kS¿ kL¿ k:¿ kO¿ k]¿ kc¿ kÄ¿ ky¿ kd¿ k|¿ kä¿ kê¿ k°¿ kö¿ kë¿ kù¿ k´¿ k±¿ k√¿ kº¿ k≤¿ kø¿ kÕ¿ k”¿ k·¿ k⁄¿ k‘¿ k›¿ kÎ¿ kÒ¿ l¿ k˛¿ kÚ¿ l¿ l¿ l¿ l3¿ l,¿ l¿ l/¿ l=¿ lC¿ l`¿ lY¿ lD¿ l\¿ lj¿ lp¿ lé¿ lá¿ lq¿ lä¿ lò¿ lû¿ lª¿ l¥¿ lü¿ l∑¿ l≈¿ lÀ¿ lÁ¿ l‡¿ lÃ¿ l„¿ lÒ¿ l˜¿ m	¿ m¿ l¯¿ m¿ m¿ m¿ m:¿ m+¿ m#¿ m¿ m&¿ m7¿ m.¿ m9¿ mD¿ mJ¿ mk¿ m\¿ mT¿ mK¿ mW¿ mh¿ m_¿ mj¿ mu¿ m{¿ m»¿ n¿ mØ¿ mô¿ mÜ¿ mó¿ mê¿ má¿ mì¿ mú¿ m≠¿ m¶¿ mù¿ m©¿ m≤¿ m«¿ mº¿ m≥¿ mø¿ m”¿ n¿ n¿ n%¿ n¿ n¿ n!¿ n/¿ n5¿ nr¿ n¿¿ nI¿ n@¿ nA¿ nL¿ nq¿ n^¿ nV¿ nM¿ nY¿ nj¿ na¿ nm¿ n}¿ n ¿ n–¿ nÓ¿ o¿ nﬁ¿ n—¿ n“¿ nÍ¿ n·¿ nÌ¿ n¿ o ¿ o&¿ o8¿ o1¿ o'¿ o4¿ oB¿ oH¿ og¿ o`¿ oI¿ oc¿ oq¿ ow¿ oç¿ oÜ¿ ox¿ oâ¿ oó¿ où¿ o∑¿ o∞¿ oû¿ o≥¿ o‹¿ o¡¿ o˘¿ oﬁ¿ o¸¿ p¿ p¿ o˝¿ o˛¿ p
¿ p¿ p/¿ p ¿ p@¿ p1¿ pN¿ s©¿ pj¿ q‡¿ pO¿ pl¿ qœ¿ p˚¿ qU¿ pm¿ p˝¿ q¿ q¿ q¿ qW¿ q]¿ qk¿ qŒ¿ qç¿ qÑ¿ qè¿ q±¿ q¨¿ q≥¿ q‚¿ s®¿ r.¿ rÈ¿ q„¿ r0¿ r6¿ rD¿ r¶¿ rf¿ r]¿ rh¿ râ¿ rÖ¿ rã¿ rÎ¿ rÒ¿ rˇ¿ sß¿ s¿ s¿ s¿ s>¿ s;¿ s@¿ sf¿ s]¿ sh¿ sä¿ sÖ¿ så¿ s≥¿ sπ¿ sŒ¿ s«¿ s∫¿ s ¿ sÿ¿ sﬁ¿ t¿ s˝¿ sﬂ¿ t ¿ t¿ t¿ t¿ t<¿ t/¿ tK¿ t>¿ tN¿ t`¿ të¿ tn¿ ta¿ tp¿ tá¿ t¿ tâ¿ t´¿ tõ¿ t∆¿ uâ¿ t∂¿ t≠¿ tπ¿ t‹¿ u|¿ t»¿ t€¿ t…¿ tÌ¿ u¿ u	¿ u-¿ u@¿ u0¿ uC¿ uI¿ uQ¿ ud¿ uR¿ ue¿ uf¿ uk¿ ul¿ uã¿ uÆ¿ u£¿ uª¿ u∞¿ uæ¿ uø¿ u–¿ u’¿ uﬁ¿ uŸ¿ u÷¿ u€@¿ u‰L¿ v&#/// Controls the text being edited. ¿ v5P¿ v|4/// Controls whether this widget has keyboard focus. ¿ väÅ¿ wñÄÚ/// {@template flutter.widgets.editableText.obscuringCharacter}
/// Character used for obscuring text if [obscureText] is true.
///
/// Must be only a single character.
///
/// Defaults to the character U+2022 BULLET (‚Ä¢).
/// {@endtemplate} ¿ w≠Å÷¿ yxÅ´/// {@template flutter.widgets.editableText.obscureText}
/// Whether to hide the text being edited (e.g., for passwords).
///
/// When this is set to true, all the characters in the text field are
/// replaced by [obscuringCharacter], and the text in the field cannot be
/// copied with copy or cut. If [readOnly] is also true, then the text cannot
/// be selected.
///
/// Defaults to false. Cannot be null.
/// {@endtemplate} ¿ yàV¿ yÃ'/// {@macro dart.ui.textHeightBehavior} ¿ y„^¿ z38/// {@macro flutter.painting.textPainter.textWidthBasis} ¿ zFÅE¿ {ÉÅ!/// {@template flutter.widgets.editableText.readOnly}
/// Whether the text can be changed.
///
/// When this is set to true, the text cannot be modified
/// by any shortcut or keyboard operation. The text is still selectable.
///
/// Defaults to false. Must not be null.
/// {@endtemplate} ¿ {êÅ|¿ }ÅS/// Whether the text will take the full width regardless of the text width.
///
/// When this is set to false, the width will be based on text width, which
/// will also be affected by [textWidthBasis].
///
/// Defaults to true. Must not be null.
///
/// See also:
///
///  * [textWidthBasis], which controls the calculation of text width. ¿ }Åe¿ ~hÅ5/// Configuration of toolbar options.
///
/// By default, all options are enabled. If [readOnly] is true, paste and cut
/// will be disabled regardless. If [obscureText] is true, cut and copy will
/// be disabled regardless. If [readOnly] and [obscureText] are both true,
/// select all will also be disabled. ¿ ~{Åq¿ ÿÅ?/// Whether to show selection handles.
///
/// When a selection is active, there will be two handles at each side of
/// boundary, or one handle if the selection is collapsed. The handles can be
/// dragged to adjust the selection.
///
/// See also:
///
///  * [showCursor], which controls the visibility of the cursor. ¿ ÒÅO¿ Å6Å'/// {@template flutter.widgets.editableText.showCursor}
/// Whether to show cursor.
///
/// The cursor refers to the blinking caret when the [EditableText] is focused.
/// {@endtemplate}
///
/// See also:
///
///  * [showSelectionHandles], which controls the visibility of the selection handles. ¿ ÅEÄº¿ ÅˆÄõ/// {@template flutter.widgets.editableText.autocorrect}
/// Whether to enable autocorrection.
///
/// Defaults to true. Cannot be null.
/// {@endtemplate} ¿ Çl¿ ÇcD/// {@macro flutter.services.TextInputConfiguration.smartDashesType} ¿ Çwl¿ Ç‘D/// {@macro flutter.services.TextInputConfiguration.smartQuotesType} ¿ ÇËe¿ É<F/// {@macro flutter.services.TextInputConfiguration.enableSuggestions} ¿ ÉRH¿ Éï0/// The text style to use for the editable text. ¿ âà¿ âö  ¿ â™Äÿ¿ äyÄ¥/// {@template flutter.widgets.editableText.textAlign}
/// How the text should be aligned horizontally.
///
/// Defaults to [TextAlign.start] and cannot be null.
/// {@endtemplate} ¿ äáÇ‚¿ ç\Ç°/// {@template flutter.widgets.editableText.textDirection}
/// The directionality of the text.
///
/// This decides how [textAlign] values like [TextAlign.start] and
/// [TextAlign.end] are interpreted.
///
/// This is also used to disambiguate how to render bidirectional text. For
/// example, if the text is an English phrase followed by a Hebrew phrase,
/// in a [TextDirection.ltr] context the English phrase will be on the left
/// and the Hebrew phrase to its right, while in a [TextDirection.rtl]
/// context, the English phrase will be on the right and the Hebrew phrase on
/// its left.
///
/// Defaults to the ambient [Directionality], if any.
/// {@endtemplate} ¿ çnÇ!¿ è}ÅŸ/// {@template flutter.widgets.editableText.textCapitalization}
/// Configures how the platform keyboard will select an uppercase or
/// lowercase keyboard.
///
/// Only supports text keyboards, other keyboard types will ignore this
/// configuration. Capitalization is locale-aware.
///
/// Defaults to [TextCapitalization.none]. Must not be null.
///
/// See also:
///
///  * [TextCapitalization], for a description of each capitalization behavior.
///
/// {@endtemplate} ¿ èîÅi¿ ê˜ÅF/// Used to select a font when the same Unicode character can
/// be rendered differently, depending on the locale.
///
/// It's rarely necessary to set this property. By default its value
/// is inherited from the enclosing app with `Localizations.localeOf(context)`.
///
/// See [RenderEditable.locale] for more information. ¿ ëÅ∑¿ í™Åá/// {@template flutter.widgets.editableText.textScaleFactor}
/// The number of font pixels for each logical pixel.
///
/// For example, if the text scale factor is 1.5, text will be 50% larger than
/// the specified font size.
///
/// Defaults to the [MediaQueryData.textScaleFactor] obtained from the ambient
/// [MediaQuery], or 1.0 if there is no [MediaQuery] in scope.
/// {@endtemplate} ¿ íæd¿ ìF/// The color to use when painting the cursor.
///
/// Cannot be null. ¿ ì'ÅÚ¿ î˛Åµ/// The color to use when painting the autocorrection Rect.
///
/// For [CupertinoTextField]s, the value is set to the ambient
/// [CupertinoThemeData.primaryColor] with 20% opacity. For [TextField]s, the
/// value is null on non-iOS platforms and the same color used in [CupertinoTextField]
/// on iOS.
///
/// Currently the autocorrection Rect only appears on iOS.
///
/// Defaults to null, which disables autocorrection Rect painting. ¿ ïÄ˛¿ ñÄ“/// The color to use when painting the background cursor aligned with the text
/// while rendering the floating cursor.
///
/// Cannot be null. By default it is the disabled grey color from
/// CupertinoColors. ¿ ñ!à™¿ û√à,/// {@template flutter.widgets.editableText.maxLines}
/// The maximum number of lines to show at one time, wrapping if necessary.
///
/// This affects the height of the field itself and does not limit the number
/// of lines that can be entered into the field.
///
/// If this is 1 (the default), the text will not wrap, but will scroll
/// horizontally instead.
///
/// If this is null, there is no limit to the number of lines, and the text
/// container will start with enough vertical space for one line and
/// automatically grow to accommodate additional lines as they are entered, up
/// to the height of its constraints.
///
/// If this is not null, the value must be greater than zero, and it will lock
/// the input to the given number of lines and take up enough horizontal space
/// to accommodate that number of lines. Setting [minLines] as well allows the
/// input to grow and shrink between the indicated range.
///
/// The full set of behaviors possible with [minLines] and [maxLines] are as
/// follows. These examples apply equally to [TextField], [TextFormField],
/// [CupertinoTextField], and [EditableText].
///
/// Input that occupies a single line and scrolls horizontally as needed.
/// ```dart
/// TextField()
/// ```
///
/// Input whose height grows from one line up to as many lines as needed for
/// the text that was entered. If a height limit is imposed by its parent, it
/// will scroll vertically when its height reaches that limit.
/// ```dart
/// TextField(maxLines: null)
/// ```
///
/// The input's height is large enough for the given number of lines. If
/// additional lines are entered the input scrolls vertically.
/// ```dart
/// TextField(maxLines: 2)
/// ```
///
/// Input whose height grows with content between a min and max. An infinite
/// max is possible with `maxLines: null`.
/// ```dart
/// TextField(minLines: 2, maxLines: 4)
/// ```
///
/// See also:
///
///  * [minLines], which sets the minimum number of lines visible.
/// {@endtemplate}
///  * [expands], which determines whether the field should fill the height of
///    its parent. ¿ û–áÅ¿ ¶Iá/// {@template flutter.widgets.editableText.minLines}
/// The minimum number of lines to occupy when the content spans fewer lines.
///
/// This affects the height of the field itself and does not limit the number
/// of lines that can be entered into the field.
///
/// If this is null (default), text container starts with enough vertical space
/// for one line and grows to accommodate additional lines as they are entered.
///
/// This can be used in combination with [maxLines] for a varying set of behaviors.
///
/// If the value is set, it must be greater than zero. If the value is greater
/// than 1, [maxLines] should also be set to either null or greater than
/// this value.
///
/// When [maxLines] is set as well, the height will grow between the indicated
/// range of lines. When [maxLines] is null, it will grow as high as needed,
/// starting from [minLines].
///
/// A few examples of behaviors possible with [minLines] and [maxLines] are as follows.
/// These apply equally to [TextField], [TextFormField], [CupertinoTextField],
/// and [EditableText].
///
/// Input that always occupies at least 2 lines and has an infinite max.
/// Expands vertically as needed.
/// ```dart
/// TextField(minLines: 2)
/// ```
///
/// Input whose height starts from 2 lines and grows up to 4 lines at which
/// point the height limit is reached. If additional lines are entered it will
/// scroll vertically.
/// ```dart
/// TextField(minLines:2, maxLines: 4)
/// ```
///
/// Defaults to null.
///
/// See also:
///
///  * [maxLines], which sets the maximum number of lines visible, and has
///    several examples of how minLines and maxLines interact to produce
///    various behaviors.
/// {@endtemplate}
///  * [expands], which determines whether the field should fill the height of
///    its parent. ¿ ¶VÉ¿ ©PÇƒ/// {@template flutter.widgets.editableText.expands}
/// Whether this widget's height will be sized to fill its parent.
///
/// If set to true and wrapped in a parent widget like [Expanded] or
/// [SizedBox], the input will expand to fill the parent.
///
/// [maxLines] and [minLines] must both be null when this is set to true,
/// otherwise an error is thrown.
///
/// Defaults to false.
///
/// See the examples in [maxLines] for the complete picture of how [maxLines],
/// [minLines], and [expands] interact to produce various behaviors.
///
/// Input that matches the height of its parent:
/// ```dart
/// Expanded(
///   child: TextField(maxLines: null, expands: true),
/// )
/// ```
/// {@endtemplate} ¿ ©\Å˛¿ ´QÅl/// {@template flutter.widgets.editableText.autofocus}
/// Whether this text field should focus itself if nothing else is already
/// focused.
///
/// If true, the keyboard will open as soon as this text field obtains focus.
/// Otherwise, the keyboard is only shown after the user taps the text field.
///
/// Defaults to false. Cannot be null.
/// {@endtemplate} ¿ ´_Å(¿ ¨yÅ/// The color to use when painting the selection.
///
/// For [CupertinoTextField]s, the value is set to the ambient
/// [CupertinoThemeData.primaryColor] with 20% opacity. For [TextField]s, the
/// value is set to the ambient [ThemeData.textSelectionColor]. ¿ ¨åÉ_¿ Ø⁄É/// {@template flutter.widgets.editableText.selectionControls}
/// Optional delegate for building the text selection handles and toolbar.
///
/// The [EditableText] widget used on its own will not trigger the display
/// of the selection toolbar by itself. The toolbar is shown by calling
/// [EditableTextState.showToolbar] in response to an appropriate user event.
///
/// See also:
///
///  * [CupertinoTextField], which wraps an [EditableText] and which shows the
///    selection toolbar upon user events that are appropriate on the iOS
///    platform.
///  * [TextField], a Material Design themed wrapper of [EditableText], which
///    shows the selection toolbar upon appropriate user events based on the
///    user's platform set in [ThemeData.platform].
/// {@endtemplate} ¿ ØÅ¿ ∞˛ÄÌ/// {@template flutter.widgets.editableText.keyboardType}
/// The type of keyboard to use for editing the text.
///
/// Defaults to [TextInputType.text] if [maxLines] is one and
/// [TextInputType.multiline] otherwise.
/// {@endtemplate} ¿ ±e¿ ±e</// The type of action button to use with the soft keyboard. ¿ ±yâ=¿ ∫≠à√/// {@template flutter.widgets.editableText.onChanged}
/// Called when the user initiates a change to the TextField's
/// value: when they have inserted or deleted text.
///
/// This callback doesn't run when the TextField's text is changed
/// programmatically, via the TextField's [controller]. Typically it
/// isn't necessary to be notified of such changes, since they're
/// initiated by the app itself.
///
/// To be notified of all changes to the TextField's text, cursor,
/// and selection, one can add a listener to its [controller] with
/// [TextEditingController.addListener].
///
/// [onChanged] is called before [onSubmitted] when user indicates completion
/// of editing, such as when pressing the "done" button on the keyboard. That default
/// behavior can be overridden. See [onEditingComplete] for details.
///
/// {@tool dartpad}
/// This example shows how onChanged could be used to check the TextField's
/// current value each time the user inserts or deletes a character.
///
/// ** See code in examples/api/lib/widgets/editable_text/editable_text.on_changed.0.dart **
/// {@end-tool}
/// {@endtemplate}
///
/// ## Handling emojis and other complex characters
/// {@template flutter.widgets.EditableText.onChanged}
/// It's important to always use
/// [characters](https://pub.dev/packages/characters) when dealing with user
/// input text that may contain complex characters. This will ensure that
/// extended grapheme clusters and surrogate pairs are treated as single
/// characters, as they appear to the user.
///
/// For example, when finding the length of some user input, use
/// `string.characters.length`. Do NOT use `string.length` or even
/// `string.runes.length`. For the complex character "üë®‚Äçüë©‚Äçüë¶", this
/// appears to the user as a single character, and `string.characters.length`
/// intuitively returns 1. On the other hand, `string.length` returns 8, and
/// `string.runes.length` returns 5!
/// {@endtemplate}
///
/// See also:
///
///  * [inputFormatters], which are called before [onChanged]
///    runs and can validate and change ("format") the input value.
///  * [onEditingComplete], [onSubmitted], [onSelectionChanged]:
///    which are more specialized input change notifications. ¿ ∫ªÉ•¿ æOÉ[/// {@template flutter.widgets.editableText.onEditingComplete}
/// Called when the user submits editable content (e.g., user presses the "done"
/// button on the keyboard).
///
/// The default implementation of [onEditingComplete] executes 2 different
/// behaviors based on the situation:
///
///  - When a completion action is pressed, such as "done", "go", "send", or
///    "search", the user's content is submitted to the [controller] and then
///    focus is given up.
///
///  - When a non-completion action is pressed, such as "next" or "previous",
///    the user's content is submitted to the [controller], but focus is not
///    given up because developers may want to immediately move focus to
///    another input widget within [onSubmitted].
///
/// Providing [onEditingComplete] prevents the aforementioned default behavior.
/// {@endtemplate} ¿ æeÅ∏¿ ¿ÅÄ/// {@template flutter.widgets.editableText.onSubmitted}
/// Called when the user indicates that they are done editing the text in the
/// field.
///
/// By default, [onSubmitted] is called after [onChanged] when the user
/// has finalized editing; or, if the default behavior has been overridden,
/// after [onEditingComplete]. See [onEditingComplete] for details.
/// {@endtemplate} ¿ ¿"Ñ¿ ƒ%Éø/// {@template flutter.widgets.editableText.onAppPrivateCommand}
/// This is used to receive a private command from the input method.
///
/// Called when the result of [TextInputClient.performPrivateCommand] is
/// received.
///
/// This can be used to provide domain-specific features that are only known
/// between certain input methods and their clients.
///
/// See also:
///   * [performPrivateCommand](https://developer.android.com/reference/android/view/inputmethod/InputConnection#performPrivateCommand\(java.lang.String,%20android.os.Bundle\)),
///     which is the Android documentation for performPrivateCommand, used to
///     send a command from the input method.
///   * [sendAppPrivateCommand](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager#sendAppPrivateCommand),
///     which is the Android documentation for sendAppPrivateCommand, used to
///     send a command to the input method.
/// {@endtemplate} ¿ ƒ=ÄÈ¿ ≈ÄÆ/// {@template flutter.widgets.editableText.onSelectionChanged}
/// Called when the user changes the selection of text (including the cursor
/// location).
/// {@endtemplate} ¿ ≈+s¿ ≈áE/// {@macro flutter.widgets.SelectionOverlay.onSelectionHandleTapped} ¿ ≈£Åï¿ «)ÅW/// {@template flutter.widgets.editableText.inputFormatters}
/// Optional input validation and formatting overrides.
///
/// Formatters are run in the provided order when the text input changes. When
/// this parameter changes, the new formatters will not be applied until the
/// next time the user inserts or deletes text.
/// {@endtemplate} ¿ «=Åÿ¿ …
Åß/// The cursor for a mouse pointer when it enters or is hovering over the
/// widget.
///
/// If this property is null, [SystemMouseCursors.text] will be used.
///
/// The [mouseCursor] is the only property of [EditableText] that controls the
/// appearance of the mouse pointer. All other properties related to "cursor"
/// stands for the text cursor, which is usually a blinking vertical line at
/// the editing position. ¿ …ÄÍ¿ …ÓÄ¿/// If true, the [RenderEditable] created by this widget will not handle
/// pointer events, see [RenderEditable] and [RenderEditable.ignorePointer].
///
/// This property is false by default. ¿  	Ç ¿ À˛Å—/// {@template flutter.widgets.editableText.cursorWidth}
/// How thick the cursor will be.
///
/// Defaults to 2.0.
///
/// The cursor will draw under the text. The cursor width will extend
/// to the right of the boundary between characters for left-to-right text
/// and to the left for right-to-left text. This corresponds to extending
/// downstream relative to the selected position. Negative values may be used
/// to reverse this behavior.
/// {@endtemplate} ¿ ÃÄÁ¿ ÃÈÄ¬/// {@template flutter.widgets.editableText.cursorHeight}
/// How tall the cursor will be.
///
/// If this property is null, [RenderEditable.preferredLineHeight] will be used.
/// {@endtemplate} ¿ Ã˙Ä‘¿ Õ¬ÄØ/// {@template flutter.widgets.editableText.cursorRadius}
/// How rounded the corners of the cursor should be.
///
/// By default, the cursor has no radius.
/// {@endtemplate} ¿ Õ”Å¿ Œ≈Ä‹/// Whether the cursor will animate from fully transparent to fully opaque
/// during each cursor blink.
///
/// By default, the cursor opacity will animate on iOS platforms and will not
/// animate on Android platforms. ¿ ŒﬂV¿ œ)9///{@macro flutter.rendering.RenderEditable.cursorOffset} ¿ œ:c¿ œâA///{@macro flutter.rendering.RenderEditable.paintCursorAboveText} ¿ œ¢Äª¿ –IÄà/// Controls how tall the selection highlight boxes are computed to be.
///
/// See [ui.BoxHeightStyle] for details on available styles. ¿ –bÄ∏¿ —Äá/// Controls how wide the selection highlight boxes are computed to be.
///
/// See [ui.BoxWidthStyle] for details on available styles. ¿ —ÄÆ¿ —ªÄÄ/// The appearance of the keyboard.
///
/// This setting is only honored on iOS devices.
///
/// Defaults to [Brightness.light]. ¿ —“ÇÉ¿ ‘HÇP/// {@template flutter.widgets.editableText.scrollPadding}
/// Configures padding to edges surrounding a [Scrollable] when the Textfield scrolls into view.
///
/// When this widget receives focus and is not completely visible (for example scrolled partially
/// off the screen or overlapped by the keyboard)
/// then it will attempt to make itself visible by scrolling a surrounding [Scrollable], if one is present.
/// This value controls how far from the edges of a [Scrollable] the TextField will be positioned after the scroll.
///
/// Defaults to EdgeInsets.all(20.0).
/// {@endtemplate} ¿ ‘ZÇ|¿ ÷ºÇ:/// {@template flutter.widgets.editableText.enableInteractiveSelection}
/// Whether to enable user interface affordances for changing the
/// text selection.
///
/// For example, setting this to true will enable features such as
/// long-pressing the TextField to select text and show the
/// cut/copy/paste menu, and tapping to move the text caret.
///
/// When this is false, the text selection cannot be adjusted by
/// the user, text cannot be copied, and the user cannot paste into
/// the text field from the clipboard.
///
/// Defaults to true.
/// {@endtemplate} ¿ ÷€Å°¿ ÿ\Åd/// Setting this property to true makes the cursor stop blinking or fading
/// on and off once the cursor appears on focus. This property is useful for
/// testing purposes.
///
/// It does not affect the necessity to focus the EditableText for the cursor
/// to appear in the first place.
///
/// Defaults to false, resulting in a typical blinking cursor.¿ ÿw¿ ÿÅe¿ ÿ’9/// {@macro flutter.widgets.scrollable.dragStartBehavior} ¿ ÿÎÅ0¿ ⁄Ä˘/// {@template flutter.widgets.editableText.scrollController}
/// The [ScrollController] to use when vertically scrolling the input.
///
/// If null, it will instantiate a new ScrollController.
///
/// See [Scrollable.controller].
/// {@endtemplate} ¿ ⁄ Å„¿ €ˆÅ™/// {@template flutter.widgets.editableText.scrollPhysics}
/// The [ScrollPhysics] to use when vertically scrolling the input.
///
/// If not specified, it will behave according to the current platform.
///
/// See [Scrollable.physics].
/// {@endtemplate}
///
/// If an explicit [ScrollBehavior] is provided to [scrollBehavior], the
/// [ScrollPhysics] provided by that behavior will take precedence after
/// [scrollPhysics]. ¿ ‹Äı¿ ‹ÓÄÃ/// {@template flutter.widgets.editableText.scribbleEnabled}
/// Whether iOS 14 Scribble features are enabled for this widget.
///
/// Only available on iPads.
///
/// Defaults to true.
/// {@endtemplate} ¿ ﬁ&é˘¿ ÌéG/// {@template flutter.widgets.editableText.autofillHints}
/// A list of strings that helps the autofill service identify the type of this
/// text input.
///
/// When set to null, this text input will not send its autofill information
/// to the platform, preventing it from participating in autofills triggered
/// by a different [AutofillClient], even if they're in the same
/// [AutofillScope]. Additionally, on Android and web, setting this to null
/// will disable autofill for this text field.
///
/// The minimum platform SDK version that supports Autofill is API level 26
/// for Android, and iOS 10.0 for iOS.
///
/// Defaults to an empty list.
///
/// ### Setting up iOS autofill:
///
/// To provide the best user experience and ensure your app fully supports
/// password autofill on iOS, follow these steps:
///
/// * Set up your iOS app's
///   [associated domains](https://developer.apple.com/documentation/safariservices/supporting_associated_domains_in_your_app).
/// * Some autofill hints only work with specific [keyboardType]s. For example,
///   [AutofillHints.name] requires [TextInputType.name] and [AutofillHints.email]
///   works only with [TextInputType.emailAddress]. Make sure the input field has a
///   compatible [keyboardType]. Empirically, [TextInputType.name] works well
///   with many autofill hints that are predefined on iOS.
///
/// ### Troubleshooting Autofill
///
/// Autofill service providers rely heavily on [autofillHints]. Make sure the
/// entries in [autofillHints] are supported by the autofill service currently
/// in use (the name of the service can typically be found in your mobile
/// device's system settings).
///
/// #### Autofill UI refuses to show up when I tap on the text field
///
/// Check the device's system settings and make sure autofill is turned on,
/// and there are available credentials stored in the autofill service.
///
/// * iOS password autofill: Go to Settings -> Password, turn on "Autofill
///   Passwords", and add new passwords for testing by pressing the top right
///   "+" button. Use an arbitrary "website" if you don't have associated
///   domains set up for your app. As long as there's at least one password
///   stored, you should be able to see a key-shaped icon in the quick type
///   bar on the software keyboard, when a password related field is focused.
///
/// * iOS contact information autofill: iOS seems to pull contact info from
///   the Apple ID currently associated with the device. Go to Settings ->
///   Apple ID (usually the first entry, or "Sign in to your iPhone" if you
///   haven't set up one on the device), and fill out the relevant fields. If
///   you wish to test more contact info types, try adding them in Contacts ->
///   My Card.
///
/// * Android autofill: Go to Settings -> System -> Languages & input ->
///   Autofill service. Enable the autofill service of your choice, and make
///   sure there are available credentials associated with your app.
///
/// #### I called `TextInput.finishAutofillContext` but the autofill save
/// prompt isn't showing
///
/// * iOS: iOS may not show a prompt or any other visual indication when it
///   saves user password. Go to Settings -> Password and check if your new
///   password is saved. Neither saving password nor auto-generating strong
///   password works without properly setting up associated domains in your
///   app. To set up associated domains, follow the instructions in
///   <https://developer.apple.com/documentation/safariservices/supporting_associated_domains_in_your_app>.
///
/// {@endtemplate}
/// {@macro flutter.services.AutofillConfiguration.autofillHints} ¿ Ì$Å¿ ÓÄ◊/// The [AutofillClient] that controls this input field's autofill behavior.
///
/// When null, this widget's [EditableTextState] will be used as the
/// [AutofillClient]. This property may override [autofillHints]. ¿ Ó-v¿ ÓóX/// {@macro flutter.material.Material.clipBehavior}
///
/// Defaults to [Clip.hardEdge]. ¿ Ó®ÇÓ¿ ÒâÇ∞/// Restoration ID to save and restore the scroll offset of the
/// [EditableText].
///
/// If a restoration id is provided, the [EditableText] will persist its
/// current scroll offset and restore it during state restoration.
///
/// The scroll offset is persisted in a [RestorationBucket] claimed from
/// the surrounding [RestorationScope] using the provided restoration ID.
///
/// Persisting and restoring the content of the [EditableText] is the
/// responsibility of the owner of the [controller], who may use a
/// [RestorableTextEditingController] for that purpose.
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter. ¿ ÒõÇˆ¿ ÙÉÇ≥/// {@template flutter.widgets.shadow.scrollBehavior}
/// A [ScrollBehavior] that will be applied to this widget individually.
///
/// Defaults to null, wherein the inherited [ScrollBehavior] is copied and
/// modified to alter the viewport decoration, like [Scrollbar]s.
/// {@endtemplate}
///
/// [ScrollBehavior]s also provide [ScrollPhysics]. If an explicit
/// [ScrollPhysics] is provided in [scrollPhysics], it will take precedence,
/// followed by [scrollBehavior], and then the inherited ancestor
/// [ScrollBehavior].
///
/// The [ScrollBehavior] of the inherited [ScrollConfiguration] will be
/// modified by default to only apply a [Scrollbar] if [maxLines] is greater
/// than 1. ¿ Ùñ}¿ ÙˆR/// {@macro flutter.services.TextInputConfiguration.enableIMEPersonalizedLearning} ¿ ÉüÖÊ¿ à’Ñˆ/// {@template flutter.widgets.editableText.strutStyle}
/// The strut style used for the vertical layout.
///
/// [StrutStyle] is used to establish a predictable vertical layout.
/// Since fonts may vary depending on user input and due to font
/// fallback, [StrutStyle.forceStrutHeight] is enabled by default
/// to lock all lines to the height of the base [TextStyle], provided by
/// [style]. This ensures the typed text fits within the allotted space.
///
/// If null, the strut used will inherit values from the [style] and will
/// have [StrutStyle.forceStrutHeight] set to true. When no [style] is
/// passed, the theme's [TextStyle] will be used to generate [strutStyle]
/// instead.
///
/// To disable strut-based vertical alignment and allow dynamic vertical
/// layout based on the glyphs typed, use [StrutStyle.disabled].
///
/// Flutter's strut is based on [typesetting strut](https://en.wikipedia.org/wiki/Strut_(typesetting))
/// and CSS's [line-height](https://www.w3.org/TR/CSS2/visudet.html#line-height).
/// {@endtemplate}
///
/// Within editable text and text fields, [StrutStyle] will not use its standalone
/// default values, and will instead inherit omitted/null properties from the
/// [TextStyle] instead. See [StrutStyle.inheritFromTextStyle].   ¿ ›Å ¿ ›ÛÄ€/// {@template flutter.widgets.editableText.selectionEnabled}
/// Same as [enableInteractiveSelection].
///
/// This getter exists primarily for consistency with
/// [RenderEditable.selectionEnabled].
/// {@endtemplate}   ¿ ı\¿ ı!    ¿ ı¡û~¿ ı÷  ¿ ıÔ(¿ ˆ  ¿ ˆ¿ ˆ,   ¿CC¿a   ¿C¿D¿äät¿õ  ¿Ø&¿Ã  ¿ä¿ã ¿¿Ã¿(/// State for a [EditableText].  ,¿ ¿   ¿ $$¿ ) ¿ C¿ LO¿ f ¿ Ç¿ è¿ î¿ ê¿ ï¿ ö¿ ñ¿ ü*¿ Ø ¿ æ¿ «¿ »¿ Õ[¿ Ï ¿!¿!¿ ˇ¿!¿!¿!&¿!'¿!-)¿!B  ¿!Z'¿!p  ¿!Ü+¿!ò  ¿"12¿"F  ¿"h/¿"x ¿"å¿"ï¿"ñ¿"õ3¿"´ ¿"√¿"Ã¿"Õ¿"“1¿"‚ ¿"¯¿#¿#¿#¿# ¿#¿#')¿#;  ¿&ÁA¿&˝ ¿'¿'¿''¿'"¿'¿'$¿'µL¿'À ¿'Ê¿'Ó¿( ¿'˚¿'Ô¿'˝¿(3¿(  ¿>I¿>N ¿>`¿O+Ç¿QÅ∆/// The last known [TextEditingValue] of the platform text input plugin.
///
/// This value is updated when the platform text input plugin sends a new
/// update via [updateEditingValue], or when [EditableText] calls
/// [TextInputConnection.setEditingState] to overwrite the platform text input
/// plugin's [TextEditingValue].
///
/// Used in [_updateRemoteEditingValueIfNeeded] to determine whether the
/// remote value is outdated and needs updating. ¿`D¿`J  ¿`º¿`   ¿a*¿a2  ¿a¿aá  ¿z¿z ¿z/¿íã(¿íê ¿íÆ¿®∑¿®Ω  ¿©ÀK¿©· ¿©˚¿™¿™¿™¿™¿™¿™>¿™- ¿™D¿™J¿™K¿™](¿™b ¿™Ä¿≤∂ ¿≤¬  ¿¬î$¿¬ò ¿¬∑¿¬º¿¬¡  ¿»v¿»{ ¿»ã¿“ˆ¿“˝ ¿”¿”¿”  ¿”+¿”0 ¿”>¿”B¿”C¿”K¿”O ¿”d¿”e¿”j¿”u  ¿Û‰¿ÛË ¿Ûˇ¿Ù ¿˚_"¿˚j  ¿;s¿` 	¿u¿É¿ï¿Ñ¿ñ¿≠¿ü¿ó¿°¿ÄÉ¿0 	¿I¿W¿m¿X¿n¿â¿w¿o¿y¿èÄ÷¿Ú ¿¿0¿^¿1¿_¿d¿`¿∑âZ¿‹ Ä„¿˝¿ ¿Á¿¸¿Ë¿Ó¿Ù¿˚¿ı¿(¿¿*¿9¿L¿E¿:¿G¿d¿S¿f¿ì¿~¿ï¿«¿±¿…¿ﬂ¿‡¿Ï¿Ì¿¿Ù¿¿¿¿¿ ¿@¿)¿!¿+¿k¿V¿m¿}¿¿¿~¿è¿•¿ê¿¶¿ø¿ß¿≠¿Â¿«¿Á¿˜¿B¿¯¿	¿(¿
¿)¿A¿*¿0¿`¿I¿b¿r¿Ø¿s¿Ñ¿ú¿Ö¿ù¿Æ¿û¿§¿Ù¿‘¿ˆ¿¿e¿¿!¿B¿"¿C¿d¿D¿J¿Q¿ì¿l¿ï¿•¿¿¶¿¿¿Ë¿¡¿È¿¿Í¿¿ˆ¿/¿¿1¿A¿ñ¿B¿\¿}¿]¿~¿ï¿¿Ö¿ã¿Ω¿ù¿ø¿œ¿'¿–¿ﬁ¿ˇ¿ﬂ¿ ¿&¿	¿¿¿U¿.¿W¿g¿Õ¿h¿v¿û¿w¿ü¿Ã¿®¿†¿™¿¿‘¿¿¿'¿¿U¿.¿W¿g¿ ¿h¿Ç¿™¿É¿´¿…¿¨¿≤¿∏¿¿—¿	¿¿X¿¿?¿W¿@¿F¿}¿_¿¿è¿„¿ê¿û¿Ω¿ü¿æ¿‚¿«¿ø¿…¿¿˝¿¿"¿9¿#¿3¿8¿4¿W¿@¿Y¿i¿Ñ¿j¿~¿É¿¿ö¿ã¿ú¿¨¿ ¿≠¿ª¿À¿º¿Ã¿ 
¿’¿Õ¿◊¿ 	¿!µx¿!     ¿#TM¿#s   ¿#T¿#U¿#•M¿#∏    ¿#ˆÇÉ¿&>Ç$/// Whether to create an input connection with the platform for text editing
/// or not.
///
/// Read-only input fields do not need a connection with the platform since
/// there's no need for text editing capabilities (e.g. virtual keyboard).
///
/// On the web, we always need a connection because we want some browser
/// functionalities to continue to work on read-only input fields like:
///
/// - Relevant context menu.
/// - cmd/ctrl+c shortcut to copy.
/// - cmd/ctrl+a to select all.
/// - Changing the selection using a physical keyboard.   ¿(>@¿(S   ¿(>¿(?¿(Ç_¿(å    ¿(Âh¿(˙   ¿(Â¿(Ê¿)QV¿)f   ¿)Q¿)R¿)´U¿)¿   ¿)´¿)¨¿*Äõ¿*   ¿*¿*¿+1Å¿+F    ¿Q;C¿Q\   ¿Q;¿Q<¿bÖV¿bê    ¿~7¿    ¿*M¿.  ¿5¿G   ¿{0¿Ñ    ¿Æ.¿∑    ¿â-H¿â6    ¿âxÄ»¿â‡Z/// Whether to send the autofill information to the autofill service. True by
/// default.   ¿¿Ä‚¿¿™|/// Whether the blinking cursor is actually visible at this precise moment
/// (it's hidden half the time, since it blinks).  ¿¿å¿¿ç¿¿ÒÅ¿¡–Ä∂/// The cursor blink interval (the amount of time the cursor is in the "on"
/// state or the "off" state). A complete cursor blink period is twice this
/// value (half on, half off).  ¿¡Æ¿¡Ø¿¬Äç¿¬j5/// The current status of the text selection handles.  ¿¬;¿¬<¿Á´Ä˛¿ÁΩ    ¿Ë≠Å!¿ÈyÄ∞/// The renderer for this widget's descendant.
///
/// This property is typically used to notify the renderer of input gestures
/// when [RenderEditable.ignorePointer] is true.   ¿È“<¿ÈÛ   ¿È“¿È”¿ÍH¿Í    ¿ı∏>¿ıœ   ¿ı∏¿ıπ¿ı˙Ñ‚¿ˆ!   ¿ı˙¿ı˚G¿*£Ää¿*®    ¿,AÑ∑¿,*/// Copy current selection to [Clipboard]. ¿,ç¿,§  ¿,n¿,o¿0¸Éb¿19)/// Cut current selection to [Clipboard]. ¿1F¿1]  ¿1(¿1)¿4bÖ"¿4û /// Paste text from [Clipboard]. ¿4®¿4ø  ¿4Ö¿4Ü¿9àÇ2¿9Ω!/// Select the entire text value. ¿9«¿9ﬁ  ¿9¨¿9≠¿;’Å˛¿;Ê   ¿;’¿;÷¿>iÑÖ¿>z   ¿>i¿>j¿BÚà≠¿C  ¿C¿C!  ¿BÚ¿BÛ¿K£É^¿K¥   ¿K£¿K§¿QÇâï¿Qì  ¿Q¶¿Q∏  ¿QÇ¿QÉ¿[ÑR¿[,  ¿[:¿[K  ¿[¿[¿_qÄÖ¿_Ç  ¿_ò¿_†  ¿_ß¿_Ω  ¿_q¿_r¿bﬂá™¿b  ¿c¿c  ¿bﬂ¿b‡¿jçÑµ¿jí    ¿oFäœ¿ox  ¿oâ¿oö  ¿o¢¿o±  ¿oF¿oG¿oM¿oo¿oN¿z5Åà¿{çÅF/// Begins a new batch edit, within which new updates made to the text editing
/// value will not be sent to the platform text input plugin.
///
/// Batch edits nest. When the outermost batch edit finishes, [endBatchEdit]
/// will attempt to send [currentTextEditingValue] to the text input plugin if
/// it detected a change.   ¿{¡Å÷¿|¬ÄÒ/// Ends the current batch edit started by the last call to [beginBatchEdit],
/// and send [currentTextEditingValue] to the text input plugin if needed.
///
/// Throws an error in debug mode if this [EditableText] is not in a batch
/// edit.   ¿}õÅQ¿}†    ¿Å‡áI¿ÅÔ  ¿Ç	¿Ç   ¿äDÜs¿äI    ¿êªÄ∆¿ê¿    ¿ëÖÅ¿ëä    ¿í∑ÄΩ¿íº    ¿îêÉœ¿îï    ¿òdÅ¿òu   ¿òd¿òe¿ôÉÇm¿õÅà/// Express interest in interacting with the keyboard.
///
/// If this control is already attached to the keyboard, this function will
/// request that the keyboard become visible. Otherwise, this function will
/// ask the focus system that it become focused. If successful in acquiring
/// focus, the control will then attach to the keyboard and request that the
/// keyboard become visible.   ¿õÙÅ¿õ˘    ¿ú˘W¿ú˛    ¿ùTã_¿ùÜ  ¿ùû¿ù≠  ¿ù∑¿ùœ  ¿ùT¿ùU¿ù[¿ù}¿ù\¿©1Q¿©6  ¿©J¿©P   ¿™äà(¿™è  ¿™´¿™∫   ¿≤€Çå¿≤Ï   ¿≤€¿≤‹¿µkâ≠¿µù  ¿µ∞¿µ¬  ¿µ»¿µ‡  ¿µÁ¿µÌ  ¿µk¿µl¿µr¿µî¿µs¿µ˛¿øÄÎ¿ø!    ¿¬›Ñ¿¬‚  ¿¬Ó¿¬ı   ¿∆„Ä˘¿∆Ë  ¿∆¸¿«   ¿»ïÅˆ¿»ö    ¿ èÅÍ¿ î  ¿ ß¿ ≠  ¿ Ω¿Ã}Ä˘¿ÃÇ    ¿ÕzÅ£¿Õ    ¿œ!É—¿œ&    ¿”äãv¿”è  ¿”¶¿”¨  ¿”≥¿ﬂÅ—¿ﬂ	    ¿‚PÉ¿‚U    ¿ÂpÇ7¿Âu    ¿Í^Ç¿Ío  ¿Íä¿Íú  ¿Í¢¿Í∫  ¿Í^¿Í_¿ÏfÅ?¿Ïw  ¿ÏÖ¿Ïì  ¿Ïf¿Ïg¿Ì©É'¿ÓúÄŸ/// Shows the selection toolbar at the location of the current cursor.
///
/// Returns `false` if a toolbar couldn't be shown, such as when the toolbar
/// is already shown, or when no text selection currently exists.  ¿Óã¿Óå¿‘ÅA¿Â  ¿Ú¿¯  ¿‘¿’¿Ò¿ÚÄ⁄¿ÚK*/// Toggles the visibility of the toolbar.   ¿ÙÅ¿Ù  ¿Ù-	¿Ù3  ¿Ù¿Ù¿ıÄô¿ı,   ¿ı¿ı¿˙‡O¿˙Ò  ¿˙˙¿˚  ¿˙‡¿˙·¿˚ÜÄ§¿˚ó  ¿˚¥	¿˚π  ¿˚ø¿˚ƒ  ¿˚Ü¿˚á¿¸.Ä˘¿¸<  ¿¸M¿¸e   ¿˝+Äı¿˝9  ¿˝I¿˝a   ¿˛$Å[¿˛2  ¿˛D¿˛\   ¿ˇ◊Å¿ˇÂ  ¿ˇ¯#¿    ¿ ÏÉŒ¿ ˙  ¿#¿*   ¿æÉ¯¿Ã  ¿◊#¿ı   ¿∫b¿»  ¿⁄#¿¯   ¿	 Äù¿	* ¿	;¿	;¿	M¿	X   ¿	¡Çw¿	∆  ¿	”¿	Ê   ¿#ÄÎ¿(  ¿B%¿b   ¿ÄÚ¿  ¿(¿?   ¿jÄŸ¿o  ¿í.¿ª   ¿GÄæ¿L  ¿h'¿ä   ¿	É÷¿  ¿¿%  ¿-¿<  ¿J¿P  ¿_¿„Ä–¿Î  ¿¿   ¿ ì◊¿ )  ¿ /¿ =  ¿ ¿ ¿3Òà€¿4≈Ä¬/// Builds [TextSpan] from current editing value.
///
/// By default makes text in composing range appear as underlined.
/// Descendants can override this method to customize appearance of text.    ¿<–ò‘¿<÷  ¿=	Öx ¿=	¿= (¿=¿=  ¿='¿=6  ¿=E¿=T  ¿=^"¿=m  ¿=Ü ¿=ï  ¿=¨¿=≤  ¿=¬¿=»  ¿=‚¿=Ò  ¿> ¿>  ¿>¿>,  ¿>9¿>?  ¿>V¿>e  ¿>x¿>á  ¿>î¿>£  ¿>∞¿>∂  ¿>√¿>“  ¿>ﬁ¿>‰  ¿>Û¿>˘  ¿?¿?  ¿?/¿?>  ¿?L¿?[  ¿?m¿?s  ¿?~ ¿?ç  ¿?§¿?≥  ¿?√¿?“  ¿?›¿?„  ¿?ˆ#¿?¸  ¿@¿@.  ¿@>¿@D  ¿@U¿@[  ¿@l¿@{  ¿@å"¿@õ  ¿@¥3¿@∫  ¿@Ì1¿@Û  ¿A$&¿A*  ¿AP#¿A_  ¿Ay¿Aà  ¿Aù¿A£  ¿A∑¿AΩ  ¿A—¿A‡  $¿@¿@–¿@“¿@”¿@·¿@‚¿A¿A
¿A¿A¿A¿AF¿AÙ¿A˙¿B¿B	¿A˚¿B¿B¿B ¿B?¿B8¿B!¿B;¿BI¿BN¿B¿BR¿BO¿BT¿Ba¿BY¿Bc¿Bs¿B~¿Bt'¿D¿D  ¿D,¿DC  ¿DL¿DY  ¿Dh$¿Dx  ¿Dê"¿D†  ¿D∂"¿D√  ¿D‹$¿Dˆ  ¿E¿E  ¿E¿E'  ¿E3¿E>  ¿EJ¿EU  ¿Ea¿El  ¿Ex¿EÉ  ¿Eé¿E†  ¿EÆ¿Eª  ¿EÕ¿E⁄  ¿EÌ¿E˝  ¿F
!¿F  ¿F/¿F=  ¿FG¿FT  ¿Fj¿Fu  ¿FÑ,¿Fû  ¿F¥#¿F…  ¿F€¿F  ¿F˙)¿G  ¿G'!¿G2  ¿GL¿GY  ¿Gh¿Gv  ¿GÜ¿Gî  ¿G§¿G±  ¿G¡¿GÃ  ¿G‰,¿G¸  ¿H*¿H+  ¿HB%¿HM  ¿Hk1¿Há  ¿H†¿H≠  ¿H¡ ¿H“  ¿HÂ¿HÚ  ¿I¿I   ¿CÅ¿C  ¿C&¿C2   ¿I!Ü0¿I<  ¿IO¿I]  ¿I!¿I"¿OUÜM¿Of  ¿Oy¿Oá  ¿Oè¿Oü  ¿OU¿OV ¿U¶ÅÙ¿U¨  ¿U⁄Ä◊ ¿U‡¿UÚ ¿U˘¿Uˇ  ¿V¿V  ¿V ¿V/  ¿V=¿VL  ¿V\"¿Vk  ¿VÑ¿Vì  ¿V°¿V¶¿VØ¿V™¿Vß¿V¨¿Vµ¿V¬  ¿VÀ¿V€  ¿VË¿V¯  ¿W'¿W  ¿W2¿W=   ¿WIO¿Wm   ¿WI¿WJ ¿Wúà»¿W¢  ¿W˙V ¿W˙¿X  
¿X(¿X¿X*¿XC¿XA¿X+¿XD¿XE¿XM¿XN¿[6%¿[A ¿[Z¿[_¿[l  ¿Z√o¿Z◊    ¿[É?¿[ö   ¿[É¿[Ñ¿^¬ÅO¿^◊   ¿^¬¿^√¿XTÄõ¿Xe   ¿XT¿XU¿XÛÅW¿Y  ¿Y¿Y(  ¿XÛ¿XÙ¿ZNq¿Z_   ¿ZN¿ZO¿[∆Äÿ¿[◊  ¿[Á¿[Ô  ¿[∆¿[«¿\¢Ç¿\≥  ¿\ƒ	¿\   ¿\¢¿\£¿`M¿`(  ¿`.¿`<  ¿`¿` ¿`fÑÒ¿`l  ¿`òÇi ¿`û¿`≤ ¿`π¿`   ¿`‘B¿`Ì  ¿a¿a+  ¿a8¿aD  ¿aN¿a]  A¿`¯¿`˙¿`˚¿a¿a¿ai¿ao¿a}¿av¿ap¿ay¿aá¿aç¿b}¿aü¿aó¿aé¿aö¿a¢¿a£¿b|¿b2¿aÍ¿aÆ¿a∑¿aË¿a∏¿a√¿a≈¿a∆¿a⁄¿a€¿aˆ¿aˇ¿b0¿b ¿b¿b¿b¿b"¿b#¿b>¿bG¿bs¿bH¿bS¿bU¿bV¿bj¿bk¿bá¿bå¿bˇ¿b†¿bó¿b¢¿bæ¿b∂¿b¿¿bÿ¿b”¿b⁄¿bÔ¿bÍ¿bÒ¿cl¿cmZ/// The size of the span, used in place of adding a placeholder size to the [TextPainter].  ¿cvÅﬂ¿cá  ¿cç¿c¢  ¿c¨¿c¥  ¿c '¿cË  ¿cv¿cw¿c≈ ¿eYÜU¿izÑ/// An interface for retriving the logical text boundary (left-closed-right-open)
/// at a given location in a document.
///
/// Depending on the implementation of the [_TextBoundary], the input
/// [TextPosition] can either point to a code unit, or a position between 2 code
/// units (which can be visually represented by the caret if the selection were
/// to collapse to that position).
///
/// For example, [_LineBreak] interprets the input [TextPosition] as a caret
/// location, since in Flutter the caret is generally painted between the
/// character the [TextPosition] points to and its previous character, and
/// [_LineBreak] cares about the affinity of the input [TextPosition]. Most
/// other text boundaries however, interpret the input [TextPosition] as the
/// location of a code unit in the document, since it's easier to reason about
/// the text boundary given a code unit in the text.
///
/// To convert a "code-unit-based" [_TextBoundary] to "caret-location-based",
/// use the [_CollapsedSelectionBoundary] combinator. ¿iå ¿ií¿iü    ¿i¶&¿iª    ¿i–Äá¿j'G/// Returns the leading text boundary at the given location, inclusive. ¿j@¿jN   ¿j[Äâ¿j≥H/// Returns the trailing text boundary at the given location, exclusive. ¿jÕ¿j€   ¿jËÄƒ¿jÚ  ¿k¿k    ¿lÅ≥¿l  ¿l3/ ¿l9¿lJ ¿lK¿lQ   ¿lf3¿lâ ¿lf¿lg ¿lûr¿l∑  ¿l–¿lﬁ  ¿lû¿lü¿mÄü¿m,  ¿mF¿mT  ¿m¿m ¿nàÉk¿né  ¿nº1 ¿n¬¿n’ ¿n÷¿n‹   ¿nÒ3¿o ¿nÒ¿nÚ ¿o)ÅH¿oB  ¿o[¿oi  ¿o)¿o*¿puÅ|¿pé  ¿p®¿p∂  ¿pu¿pv ¿rÃÑ—¿r“  ¿rˇ0 ¿s¿s ¿s¿s   ¿s33¿sV ¿s3¿s4 ¿skÅ,¿sÑ  ¿sù¿s´  ¿sk¿sl¿tõÅs¿t¥  ¿tŒ¿t‹  ¿tõ¿tú¿vÅâ¿v(  ¿v:¿vH  ¿v¿v ¿wËÉc¿wÓ  ¿x< ¿x¿x) ¿x*¿x0  ¿x;¿xA   ¿xV"¿xn  ¿x}3¿x† ¿x}¿x~ ¿xµÅI¿xŒ  ¿xÁ¿xı  ¿xµ¿x∂¿zÅH¿z  ¿z4¿zB  ¿z¿z ¿{¸ÇP¿|  ¿|'F ¿|-¿|7 ¿|=¿|C  ¿|R¿|X   ¿|q"¿|â  ¿|ò3¿|ª ¿|ò¿|ô ¿|–Ä®¿|È  ¿}¿}  ¿|–¿|—¿}|ÄŒ¿}ï  ¿}Ø¿}Ω  ¿}|¿}} ¿~¶ÅŒ¿~¨  ¿~ÿ/ ¿~ﬁ¿~Ô ¿~¿~ˆ   ¿3¿. ¿¿ ¿Cj¿\  ¿u¿É  ¿C¿D¿∞Ä¬¿…  ¿„¿Ò  ¿∞¿± ¿Å É,¿Å  ¿Å6F ¿Å6¿ÅK ¿ÅL¿ÅR  ¿Åd¿Åj   ¿ÅÄ%¿Åî  ¿Å©%¿ÅΩ  ¿Å”Äº¿ÅÙ   ¿Å”¿Å‘¿ÇìÄ»¿Ç¨  ¿Ç≈¿Ç”  ¿Çì¿Çî¿É_ÄÀ¿Éx  ¿Éí¿É†  ¿É_¿É` ¿Ö%Éó¿Ö+  ¿ÖaD ¿Öa¿Ö| ¿Ö}¿ÖÉ  ¿Öï¿Öõ   ¿Ö©%¿ÖΩ  ¿Ö“¿Ö›  ¿ÖÎX¿Ü   ¿ÖÎ¿ÖÏ¿ÜGÅ6¿Ü`  ¿Üy¿Üá  ¿ÜG¿ÜH¿áÅÅ9¿áö  ¿á¥¿á¬  ¿áÅ¿áÇ ¿âhÇ•¿ân  ¿âóD ¿âó¿â• ¿â¶¿â¨  ¿â¿¿â∆   ¿âﬂ'¿âÛ  ¿ä
(¿ä  ¿ä7Ä√¿äX   ¿ä7¿ä8¿ä˛ÄÉ¿ã  ¿ã0¿ã>  ¿ä˛¿äˇ¿ãÖÄÜ¿ãû  ¿ã∏¿ã∆  ¿ãÖ¿ãÜ ¿å`á≤¿åf ¿åx&¿åx¿åΩ? ¿åΩ¿åŒ ¿åœ
¿å’  ¿å€¿å·   ¿ç ¿ç  ¿ç!A¿çH  ¿ìØa¿ìƒ   ¿ìØ¿ì∞¿çgÇ!¿çq  ¿çä¿çú   ¿èåÑ¿è†  ¿èß¿è™  ¿è≤¿è¡  ¿èå¿èç ¿îêø¿î ¿î5(¿î5¿î|{ ¿î|¿îñ ¿îú
¿î¢  ¿î¨ ¿î≤  ¿î“¿îÿ   ¿î˚¿ï  ¿ï&¿ï'  ¿ïFA¿ïm  ¿ïå'¿ïù ¿ï±¿§äG¿§ü   ¿§ä¿§ã¿ñÅz¿ñ  ¿ñ5¿ñC   ¿ó˘Å@¿ó˛  ¿ò¿ò$   ¿ô=ãI¿ôQ  ¿ôX¿ô[  ¿ôc¿ôr  ¿ô=¿ô> ¿§’ÜË¿§€  ¿•SS ¿•S¿•x ¿•y
¿•  ¿•Ö¿•ã   ¿•™¿•¬  ¿•Àv¿¶'  ¿´Sh¿´h   ¿´S¿´T¿¶FÖ	¿¶Z  ¿¶a=¿¶ô  ¿¶°¿¶∞  ¿¶F¿¶G ¿´øâ]¿´≈ ¿´Ó(¿´Ó¿¨55 ¿¨5¿¨] ¿¨^
¿¨d   ¿¨n¿¨Ü  ¿¨ê.¿¨™  ¿¨¬¿¨—  ¿¥”G¿¥Ë   ¿¥”¿¥‘¿¨„Ç»¿¨Ë    ¿ØØÖ ¿Ø¿  ¿Ø«¿Ø   ¿Ø“¿Ø·  ¿ØØ¿Ø∞ ¿µÅ¸¿µ$  ¿µd ¿µd¿µt ¿µu
¿µ{   ¿µÖ¿µù  ¿∂“F¿∂Á   ¿∂“¿∂”¿µßÅ'¿µª  ¿µ¬¿µ◊  ¿µﬂ¿µÓ  ¿µß¿µ® ¿∑ÅÁ¿∑"  ¿∑j! ¿∑j¿∑~ ¿∑
¿∑Ö   ¿∑è¿∑ß  ¿∏ìn¿∏®   ¿∏ì¿∏î¿∑±Äﬁ¿∑¬  ¿∑…¿∑‚  ¿∑Í¿∑˘  ¿∑±¿∑≤ ¿πòÖæ¿ª∞Ç/// Provides undo/redo capabilities for text editing.
///
/// Listens to [controller] as a [ValueNotifier] and saves relevant values for
/// undoing/redoing. The cadence at which values are saved is a best
/// approximation of the native behaviors of a hardware keyboard on Flutter's
/// desktop platforms, as there are subtle differences between each of these
/// platforms.
///
/// Listens to keyboard undo/redo shortcuts and calls [onTriggered] when a
/// shortcut is triggered that would affect the state of the [controller]. ¿ªﬂÄÀ ¿º¿º,1/// Creates an instance of [_TextEditingHistory].¿º3¿º9  ¿ºA¿ºP  ¿ºZ¿ºi  ¿ºx¿ºá  ¿ºö¿ºü¿º®¿º£¿º†¿º•¿ºÆC¿ºÏ./// The child widget of [_TextEditingHistory]. ¿ºˆh¿ΩT?/// The [TextEditingController] to save the state of over time. ¿ΩcÅô¿æÒÅ^/// Called when an undo or redo causes a state change.
///
/// If the state would still be the same before and after the undo/redo, this
/// will not be called. For example, receiving a redo when there is nothing
/// to redo will not call this method.
///
/// It is also not called when the controller is changed for reasons other
/// than undo/redo.  ¿øS¿ø(   ¿ø¿ø ¿øXàà¿ø^   ¿øûJ¿ø¡ ¿ø ¿ø‘¿øÂ¿ø’¿øÊ¿øÁ¿øÏ6¿¿  ¿¿&¿¿-  ¿¿ÈF¿¿ˇ ¿¡¿¡¿¡.¿¡)¿¡¿¡+ ¿¡4C¿¡9  ¿¡?¿¡O   ¿¡{C¿¡Ä  ¿¡Ü¿¡ñ   ¿¡¬Å+¿¡«  ¿¡œ¿¡‚   ¿¬ÒÄ¢¿¬ˆ    ¿√óÄÍ¿√®   ¿√ó¿√ò¿ƒÖÅ¿ƒñ  ¿ƒ¶¿ƒª  ¿ƒÖ¿ƒÜ¿≈£ÄÄ¿≈¥   ¿≈£¿≈§¿∆'Å∑¿∆:  ¿∆@¿∆N  ¿∆'¿∆( ¿«‚à¿»Lc/// A data structure representing a chronological list of states that can be
/// undone and redone.¿»W¿»W¿»^8 ¿»â¿»ì(/// Creates an instance of [_UndoStack].  ¿»ö¿»® ¿»≥¿»¥¿»∞¿»≤¿»±¿»˝¿…  ¿…j¿…F+/// Returns the current value of the stack.   ¿…Çe¿…˜l/// Add a new state change to the stack.
///
/// Pushing identical objects will not create multiple entries. ¿…¸¿…ˇ   ¿ÀËÅ¶¿Ã Ä“/// Returns the current value after an undo operation.
///
/// An undo operation moves the current value to the previously pushed value,
/// if any.
///
/// Iff the stack is completely empty, then returns null.   ¿ÕíÅµ¿ŒuÄ”/// Returns the current value after a redo operation.
///
/// A redo operation moves the current value to the value that was last
/// undone, if any.
///
/// Iff the stack is completely empty, then returns null.   ¿œK^¿œx%/// Remove everything from the stack.   ¿œ≠C¿œ¿   ¿œ≠¿œÆ     ¿–‹É+¿—™Äø/// Returns a _Throttled that will call through to the given function only a
/// maximum of once per duration.
///
/// Only works for functions that take exactly one argument and return void.¿—¥¿—¥¿—ª¿—Œ  ¿—Ÿ"¿—Ù  ¿“.¿“4  ¿“A ÖGÄ›Öƒt/// Signature for the callback that reports when the user changes the selection
/// (including the cursor location).  ÖÌÖ¸  ÜÜ   Ü&ÄùÜ{L/// Signature for the callback that reports the app private command results.  Ü•   Ü≠    ¿πÄë¿πU4/// A void function that takes a [TextEditingValue].  ¿π~¿πê  ¿π:¿π;¿œÙx¿–=@/// A function that can be throttled with the throttle function.¿–K¿–K ¿–^¿–a   ¿–nl¿–≠6/// A function that has been throttled by [_throttle].¿–∏¿–∏ ¿–Ã¿–œ    áÜDáï áØá∑á…áƒá∏á∆à$Fà3 àOàWàiàdàXàfàﬂ0àÈ ââì!â† âÆë⁄ <ÄÜÄ§Ä•Ä∫Ä÷Ä˝Ä˛ÅQÅ{Å∫Å„ÇÇ4Ç5ÇLÇdÇàÇùÇ¥ÇÕÇ‚ÇˇÉÉ9ÉRÉoÉäÉÆÉœÉÌÑÑ Ñ4ÑXÑvÑïÑ∞Ñ±ÖFÖGÖóÖºÜ%Ü&ÜsÜƒÜ≈áá[áÜáÃáÕàà$àlàmà∏àﬂâââ]âìâ∂â∑â‰âËä'ävä≈ãã ã$ãpã±ãµååSåóåõåÈç2çÇç–ééeé∞éÔè4è8èÖèßè´è˘êCêWê£êÓëëërëÇëÜëîëòëÈííZíåì:ìÄì∑ìΩî
îîBîïîñîîˆï:ïZïïï£ïıñEñññøñ»ñˆñ˜ó%óFóóóÂò2òpòvò≥òˇôLôsôêô¨ô¡ô˝öö&ö*ö+ö7ö`ölö±õõTõ{õÇõûõ¢õ£õ◊õ›ú.únú⁄ù1ùÇù“ûûXûâûèû¯ü:üOücüüøü—üÚ†*†5†t†}†Ñ†à†â†Æ†¥°°"°T°•°Û¢@¢~¢Ñ¢¡££U£|£Ç£–£˝§+§_§¢§≈••6•U•£•ß•®•»•Œ¶¶K¶Q¶¢¶ßAßßêß„ßÁßË®® ®n®π®«®Õ©©l©Ω©˚™™M™Q™R™ñ™‘´´#´$´g´™¨¨¨¨¨<¨@¨é¨€¨Ô¨Û≠G≠ö≠¶≠Ω≠ˆ≠¸Æ?ÆXÆoÆÖÆùÆπÆ÷ÆÚØØ2Ø3ØaØgØíØ•Ø¶Ø”ØŸ∞+∞1∞\∞n∞o∞û∞§∞¯∞˛±)±=±>±r±x±£±ª±Ω±æ±‹±‡≤0≤x≤ø≤“≤÷≤Ò≤ı≥E≥ñ≥‡≥‰¥)¥-¥}¥»¥Ãµµµ(µ,µwµ∆µÂµÈ∂7∂~∂…∑∑d∑≤∑˝∏L∏r∏v∏≠∏æ∏¬ππ/π3ππÃπ˜π˚∫<∫@∫ç∫œ∫”ªªkª´ªæª¬ºº`ºÑºàº¬º∆ΩΩ_Ω£ΩÛæ:æ\æ`æ∞æ˜øFørøvø≥ø∑¿ @§¿ AO¿ A˙¿ B’¿ CÀ¿ Cœ¿ D&¿ D*¿ E¿ E˛¿ Fˇ¿ G˛¿ IC¿ JA¿ Kk¿ L6¿ L:¿ Lg¿ Lk¿ MU¿ N?¿ N˝¿ O¨¿ PÛ¿ Qú¿ Rc¿ S¿ SM¿ SQ¿ Sg¿ Sk¿ S“¿ T9¿ T‘¿ Uü¿ VM¿ V≥¿ Wj¿ Wn¿ Wç¿ Wë¿ Wﬁ¿ X!¿ Xn¿ Xæ¿ Y¿ Y@¿ Yx¿ Y|¿ Yª¿ YÊ¿ YÍ¿ Z9¿ ZÑ¿ Zà¿ Zœ¿ [¿ [O¿ [y¿ [å¿ [ê¿ [û¿ [¢¿ [Ò¿ \/¿ \[¿ \Ö¿ \ã¿ \Ÿ¿ ])¿ ]i¿ ]o¿ ]æ¿ ^¿ ^L¿ ^ó¿ ^ù¿ ^Ï¿ _ ¿ _&¿ _v¿ _ø¿ `¿ `Y¿ `©¿ `¿ aB¿ aS¿ aa¿ a¿ aú¿ a∑¿ a⁄¿ a¯¿ b¿ b;¿ ba¿ bÑ¿ bù¿ bπ¿ bÿ¿ c¿ c'¿ c?¿ cP¿ cj¿ cÅ¿ cî¿ cÆ¿ c…¿ cÊ¿ d¿ d3¿ dI¿ dp¿ dâ¿ d•¿ d∆¿ d‡¿ e¿ e+¿ eG¿ e]¿ e{¿ eò¿ e∫¿ eÈ¿ eˇ¿ f(¿ fD¿ f[¿ fr¿ fö¿ f±¿ fÿ¿ g¿ gH¿ g}¿ g≠¿ g„¿ h	¿ h$¿ h<¿ hb¿ hÜ¿ h±¿ h ¿ hÒ¿ i	¿ i"¿ iC¿ ir¿ iï¿ i∑¿ j¿ j(¿ jL¿ jº¿ k,¿ kV¿ kÉ¿ k§¿ k∆¿ k‰¿ l¿ l6¿ lc¿ lë¿ læ¿ lÍ¿ m¿ m=¿ mn¿ m}¿ m ¿ m˛¿ n¿ n(¿ n7¿ nt¿ nπ¿ n√¿ o¿ o;¿ oj¿ oê¿ o∫¿ p¿ pC¿ p[¿ pv¿ pÀ¿ pË¿ q¿ qB¿ qm¿ qï¿ qπ¿ q—¿ qÏ¿ r¿ rF¿ rn¿ rë¿ r®¿ r÷¿ s¿ s$¿ sF¿ sn¿ sí¿ s¨¿ s—¿ t¿ t(¿ tî¿ tª¿ tﬁ¿ u¿ uo¿ u~¿ uú¿ u…¿ u·¿ u‚¿ v¿ v2¿ v3¿ vj¿ vá¿ và¿ v ¿ w¿ w¿ w9¿ w?¿ wr¿ wá¿ w™¿ w´¿ wÊ¿ x)¿ x/¿ xx¿ xƒ¿ y¿ y'¿ y-¿ yV¿ yk¿ yÖ¿ yÜ¿ y∞¿ y‡¿ y·¿ z¿ zC¿ zD¿ z|¿ z£¿ z©¿ zÂ¿ {0¿ {6¿ {a¿ {v¿ {ç¿ {é¿ {‹¿ {‚¿ |0¿ |a¿ |g¿ |ë¿ |ó¿ |ß¿ |≠¿ |ˆ¿ }¿ }¿ }7¿ }=¿ }ç¿ }‹¿ ~)¿ ~Q¿ ~x¿ ~y¿ ~¢¿ ~®¿ ~Ù¿ D¿ k¿ q¿ Å¿ á¿ À¿ Ó¿ Ô¿ Ä)¿ ÄG¿ ÄM¿ Äü¿ Ä¥¿ Ä∫¿ Ä ¿ Ä–¿ Å)¿ ÅB¿ ÅC¿ Å~¿ Å¶¿ Å¨¿ Å‘¿ ÅÈ¿ Ç¿ Ç¿ ÇK¿ Çt¿ Çu¿ Çº¿ ÇÂ¿ ÇÊ¿ É/¿ ÉO¿ ÉP¿ ÉÉ¿ Éú¿ Éù¿ É◊¿ Ñ¿ Ñ¿ ÑX¿ Ñõ¿ Ñﬂ¿ Ö*¿ Öu¿ Ö{¿ Ö«¿ Ü¿ Ü\¿ Ük¿ Üq¿ Üº¿ Üˇ¿ á¿ án¿ á¬¿ á◊¿ á›¿ à2¿ àÇ¿ àƒ¿ à‚¿ â¿ âG¿ âM¿ âÇ¿ âÜ¿ âß¿ â®¿ â·¿ ä¿ ä¿ äR¿ äg¿ äÑ¿ äÖ¿ ä¬¿ äË¿ äÓ¿ ã3¿ ãZ¿ ã`¿ ãÆ¿ ã˚¿ åI¿ åí¿ å‚¿ åÚ¿ å¯¿ ç0¿ çE¿ çk¿ çl¿ çÆ¿ çı¿ é¿ é¿ é_¿ éî¿ éö¿ éŸ¿ éﬂ¿ éÔ¿ éı¿ èG¿ èM¿ èb¿ èë¿ èí¿ è“¿ ê
¿ ê¿ êW¿ ê©¿ êØ¿ êÁ¿ êˇ¿ ë ¿ ë?¿ ëw¿ ë}¿ ëŒ¿ ëÌ¿ ëÛ¿ íD¿ íÖ¿ íö¿ íª¿ íº¿ íÌ¿ íÛ¿ ì	¿ ì$¿ ì%¿ ìc¿ ìi¿ ì™¿ ì˙¿ îS¿ îa¿ îg¿ î§¿ î™¿ îÔ¿ ï¿ ï¿ ïm¿ ïò¿ ïû¿ ï‚¿ ï˘¿ ñ¿ ñ¿ ñW¿ ñ•¿ ñ´¿ ñ˚¿ ó.¿ ó4¿ ó~¿ óö¿ ó†¿ óÓ¿ ò5¿ òÜ¿ òÆ¿ ò¥¿ ô¿ ôV¿ ôß¿ ô„¿ ôÈ¿ ö8¿ öÖ¿ öµ¿ öª¿ õ¿ õ¿ õ'¿ õ1¿ õ7¿ õÜ¿ õ÷¿ ú¿ ú%¿ úE¿ úO¿ úU¿ ú†¿ ú·¿ úÔ¿ ù¿ ù¿ ù¿ ùk¿ ùò¿ ù¶¿ ù–¿ ù⁄¿ ù‡¿ ù¿ ùˆ¿ û;¿ ûP¿ û°¿ û∂¿ ûÕ¿ ûŒ¿ ü¿ üV¿ ü\¿ ü¨¿ üﬂ¿ üÂ¿ †7¿ †â¿ †è¿ †Â¿ †Î¿ °<¿ °á¿ °ô¿ °ü¿ °¿ ¢?¿ ¢_¿ ¢e¿ ¢ø¿ £¿ £*¿ £0¿ £{¿ £ü¿ £≠¿ £ ¿ £‘¿ £⁄¿ §(¿ §y¿ §í¿ §†¿ §…¿ §”¿ §Ÿ¿ §Ò¿ §˜¿ •¿ •¿ •Z¿ ••¿ •¡¿ •÷¿ ¶'¿ ¶<¿ ¶S¿ ¶T¿ ¶ã¿ ¶–¿ ¶÷¿ ß¿ ßY¿ ß_¿ ß´¿ ßœ¿ ß’¿ ßÓ¿ ßÙ¿ ®E¿ ®å¿ ®í¿ ®≈¿ ®”¿ ®„¿ ©¿ ©$¿ ©.¿ ©C¿ ©Y¿ ©Z¿ ©ì¿ ©‡¿ ©Ô¿ ©ı¿ ™E¿ ™ï¿ ™õ¿ ™ƒ¿ ™Ÿ¿ ´,¿ ´D¿ ´\¿ ´]¿ ´ë¿ ´ó¿ ´ÿ¿ ¨(¿ ¨j¿ ¨â¿ ¨ä¿ ¨À¿ ≠¿ ≠¿ ≠k¿ ≠µ¿ Æ¿ Æ¿ Æ¿ Æ!¿ Ær¿ Ææ¿ Æ—¿ Ø!¿ Øp¿ Ø¶¿ Øª¿ ØÌ¿ ØÓ¿ ∞*¿ ∞b¿ ∞h¿ ∞®¿ ∞”¿ ∞Ë¿ ±¿ ±¿ ±L¿ ±v¿ ±w¿ ±∞¿ ±Ò¿ ≤'¿ ≤-¿ ≤r¿ ≤π¿ ≤˝¿ ≥ ¿ ≥&¿ ≥k¿ ≥∞¿ ≥€¿ ≥·¿ ¥1¿ ¥â¿ ¥–¿ ¥÷¿ ¥Ï¿ µ:¿ µÅ¿ µá¿ µÊ¿ µ¯¿ ∂¿ ∂¿ ∂I¿ ∂Ç¿ ∂•¿ ∂Ù¿ ∑@¿ ∑ã¿ ∑π¿ ∑ø¿ ∏¿ ∏G¿ ∏è¿ ∏ﬂ¿ π.¿ πU¿ πj¿ πp¿ πÄ¿ πÜ¿ π∆¿ ∫¿ ∫O¿ ∫è¿ ∫∏¿ ∫π¿ ∫˙¿ ªM¿ ªl¿ ªr¿ ªø¿ ªÁ¿ ªÌ¿ º<¿ ºå¿ º®¿ ºÆ¿ º˛¿ ΩM¿ Ωò¿ ΩÃ¿ Ω“¿ æ$¿ æ9¿ æb¿ æc¿ æû¿ æÓ¿ æ˚¿ ø¿ øK¿ øô¿ øﬂ¿ øÙ¿ ¿¿ ¿ ¿ ¿c¿ ¿™¿ ¿∞¿ ¿˚¿ ¡¿ ¡¿ ¡`¿ ¡ó¿ ¡ù¿ ¡≠¿ ¬a¿ ¬±¿ ¬·¿ √o¿ √ø¿ √Ì¿ ƒ¿ ƒ:¿ ƒ;¿ ƒ}¿ ƒÃ¿ ƒ›¿ ƒÚ¿ ≈(¿ ≈)¿ ≈q¿ ≈†¿ ≈°¿ ≈‡¿ ∆¿ ∆ ¿ ∆q¿ ∆¿¿ ∆Ú¿ «¿ «:¿ «;¿ «á¿ «ï¿ «õ¿ «„¿ «È¿ »:¿ »ä¿ »Ÿ¿ »ı¿ …¿ …¿ …c¿ …≤¿ …∏¿ …·¿  ¿  ¿  B¿  f¿  l¿  É¿  â¿  —¿ À¿ Àj¿ À∫¿ À⁄¿ ÀÔ¿ Ã¿ Ã¿ ÃH¿ Ãk¿ Ãq¿ Ãƒ¿ ÃŸ¿ Ã˜¿ Ã¯¿ Õ4¿ Õk¿ Õq¿ Õù¿ Õ≤¿ Õ–¿ Õ—¿ Œ¿ Œ>¿ ŒD¿ Œî¿ Œ∏¿ Œ‹¿ Œ›¿ œ¿ œ7¿ œ8¿ œ|¿ œü¿ œ†¿ œÍ¿ œ¿ –/¿ –_¿ –`¿ –™¿ –∞¿ –Ó¿ —¿ —¿ —C¿ —I¿ —|¿ —Ç¿ —®¿ —œ¿ —–¿ “¿ “p¿ “v¿ “⁄¿ ”¿ ”|¿ ”Ú¿ ”¯¿ ‘ ¿ ‘5¿ ‘W¿ ‘X¿ ‘¢¿ ‘Ê¿ ‘¸¿ ’¿ ’G¿ ’Ö¿ ’ƒ¿ ’ ¿ ÷¿ ÷S¿ ÷|¿ ÷Ç¿ ÷ö¿ ÷Ø¿ ÷ÿ¿ ÷Ÿ¿ ◊&¿ ◊u¿ ◊ç¿ ◊ì¿ ◊„¿ ÿ¿ ÿ¿ ÿN¿ ÿ~¿ ÿ¿ ÿª¿ ÿË¿ ÿÈ¿ Ÿ)¿ Ÿr¿ Ÿx¿ Ÿ≥¿ Ÿπ¿ Ÿ‹¿ ŸÒ¿ ⁄¿ ⁄¿ ⁄[¿ ⁄°¿ ⁄ß¿ ⁄Ò¿ ⁄˜¿ €¿ €,¿ €2¿ €}¿ €»¿ €ﬂ¿ ‹¿ ‹¿ ‹E¿ ‹â¿ ‹è¿ ‹Æ¿ ‹¥¿ ‹Ã¿ ‹·¿ ‹ˇ¿ › ¿ ›@¿ ›l¿ ›r¿ ›™¿ ›”¿ ›Ë¿ ﬁ#¿ ﬁ$¿ ﬁa¿ ﬁ≥¿ ﬁ≈¿ ﬁÀ¿ ﬂ¿ ﬂi¿ ﬂ¨¿ ﬂ˙¿ ‡+¿ ‡1¿ ‡¿ ‡®¿ ‡Æ¿ ‡œ¿ ‡’¿ ‡¯¿ ‡˛¿ ·K¿ ·¿ ·Ö¿ ·£¿ ‚%¿ ‚w¿ ‚Ã¿ „"¿ „r¿ „Ø¿ „µ¿ „ÿ¿ „ﬁ¿ ‰.¿ ‰¿ ‰À¿ ‰Ï¿ ‰Ú¿ Â9¿ Â?¿ Âç¿ Â◊¿ Â›¿ Ê*¿ Êz¿ Ê∆¿ Á¿ Áb¿ Á≤¿ Á∏¿ Ë¿ ËS¿ Ë°¿ ËÒ¿ ÈB¿ ÈS¿ ÈY¿ È§¿ ÈÛ¿ Í:¿ Í@¿ Íå¿ Íß¿ Í≠¿ Í˚¿ ÎI¿ Îó¿ ÎÂ¿ Ï+¿ Ïô¿ Ïü¿ Ï¥¿ Ï¯¿ Ì!¿ Ì"¿ Ìq¿ Ìw¿ Ìæ¿ Ó¿ Ó*¿ Ó+¿ Óa¿ Óg¿ Óä¿ Ó•¿ Ó¶¿ ÓË¿ Ó˛¿ Ô¿ ÔO¿ Ôî¿ Ôö¿ ÔÂ¿ 1¿ 7¿ ¿ ƒ¿ ˛¿ Ò¿ Ò¿ Ò¿ Òg¿ Òy¿ Òò¿ Òô¿ Ò—¿ Ú¿ Ú"¿ Úo¿ Ú≥¿ Ú»¿ ÚŒ¿ Û¿ Ûb¿ Û¶¿ Ûæ¿ Ûƒ¿ Ù¿ Ù]¿ Ùk¿ Ùì¿ Ùî¿ ÙÈ¿ ı¿ ı¿ ıu¿ ıv¿ ıø¿ ıÎ¿ ˆ¿ ˆ5¿ ˆ<¿ ˆv¿ ˆ¡¿ ˆ«¿ ˆ»¿ ˆ˛¿ ˆˇ¿ ˜P¿ ˜£¿ ˜ı¿ ¯I¿ ¯P¿ ¯°¿ ¯Ú¿ ˘)¿ ˘<¿ ˘c¿ ˘Ñ¿ ˘ß¿ ˘˛¿ ˙:¿ ˙ó¿ ˙‘¿ ˚¿ ˚f¿ ˚§¿ ˚ﬂ¿ ¸!¿ ¸[¿ ¸∏¿ ˝¿ ˝r¿ ˝ß¿ ˛¿ ˛a¿ ˛ù¿ ˛Ÿ¿ ˇ6¿ ˇt¿ ˇ—¿ 
¿ E¿ à¿ Â¿B¿Ç¿ﬂ¿¿%¿&¿t¿ö¿ª¿«¿ÿ¿˝¿"¿E¿j¿{¿É¿â¿ä¿£¿…¿œ¿–¿#¿b¿©¿È¿ ¿Z¿ñ¿—¿	¿?¿Ü¿Ã¿¿[¿ö¿ÿ¿¿P¿ç¿–¿		¿	A¿	v¿	ª¿	Ï¿
 ¿
N¿
Å¿
¥¿
¿(¿]¿å¿¡¿ˆ¿,¿b¿ï¿À¿¿9¿i¿™¿Û¿?¿v¿Ω¿¿K¿í¿ÿ¿¿d¿£¿ﬁ¿!¿g¿®¿Ï¿,¿r¿∏¿˚¿S¿ë¿æ¿Ò¿¯¿˘¿<¿@¿A¿M¿á¿à¿î¿Ÿ¿¿^¿™¿
¿d¿√¿j¿¿|¿ß¿ ¿e¿º¿¿`¿´¿¿_¿…¿>¿™¿¿î¿˚¿~¿˚¿ˇ¿¿¿"¿ ¿ "¿ J¿ ù¿ À¿!*¿!+¿!X¿!É¿!Ñ¿!≥¿".¿"/¿"e¿"f¿"ô¿"–¿#¿#¿#$¿#%¿#R¿#^¿#¢¿#£¿#Û¿#Ù¿$C¿$Q¿$W¿$•¿$Ú¿$¯¿%C¿%ç¿%ì¿%≤¿%◊¿%˘¿&3¿&z¿&{¿&Ã¿&Â¿'*¿'+¿'v¿'≥¿(¿(¿(;¿(<¿(H¿(¿(Ä¿(‚¿(„¿(Ô¿)N¿)O¿)[¿)®¿)©¿)µ¿*¿*¿*¿*†¿*°¿*∆¿*ÿ¿+"¿+*¿+.¿+/¿+n¿+µ¿+›¿,¿,¿,:¿,>¿,?¿,l¿,x¿,¨¿,Ï¿-¿-B¿-P¿-V¿-Ö¿-Õ¿-ˇ¿.7¿.Q¿.R¿.y¿.ö¿.´¿.Œ¿.Û¿/¿/;¿/`¿/¶¿/Ã¿/Í¿0¿0o¿0~¿0©¿0∂¿0«¿0œ¿0’¿0ı¿0˘¿0˙¿1&¿12¿1e¿1ñ¿1§¿1™¿1Í¿2¿28¿2Y¿2g¿2m¿2µ¿3¿34¿3~¿3π¿3–¿4¿4¿4 ¿45¿4;¿4[¿4_¿4`¿4É¿4è¿4Õ¿4Ë¿4ˆ¿4¸¿5<¿5[¿5y¿5á¿5ç¿5Ω¿5¯¿6G¿6_¿6m¿6s¿6t¿6¡¿6ÿ¿73¿7Ö¿7À¿7“¿7”¿7Û¿84¿8A¿8H¿8z¿8ƒ¿8ˇ¿9¿9R¿9\¿9f¿9{¿9Å¿9Ö¿9Ü¿9™¿9∂¿9Ê¿:¿:a¿:x¿:Ü¿:å¿:¨¿:Õ¿;*¿;3¿;@¿;G¿;y¿;±¿;∑¿;ª¿;º¿;“¿;”¿;ﬂ¿;Ù¿<¿<D¿<W¿<v¿<û¿<‹¿=¿=R¿=ó¿=–¿=‘¿=’¿>%¿>G¿>f¿>g¿>s¿>î¿>∑¿>∏¿?¿?8¿?m¿?ù¿?ﬁ¿?‰¿?Â¿@¿@/¿@j¿@õ¿@Ÿ¿@„¿@Ì¿@Û¿@Ù¿A8¿Ar¿A°¿AÀ¿A˘¿B¿BS¿B†¿B¿¿B›¿BÂ¿BÎ¿BÔ¿B¿B¸¿C-¿CS¿Cà¿Cœ¿D¿D;¿DA¿Dä¿D≥¿Dπ¿D˛¿Dˇ¿E<¿Eô¿E⁄¿E‡¿E·¿F¿FS¿Få¿F•¿F´¿F¨¿FÌ¿G`¿Gß¿G≠¿GÆ¿G◊¿G˛¿H0¿HN¿HT¿HU¿H~¿H±¿I¿I¿I¿I¿IH¿It¿I≈¿I‰¿J¿J-¿JU¿Jy¿J°¿J ¿JÒ¿J¸¿K¿K
¿Kt¿Kñ¿Kú¿K†¿K°¿K≠¿K¿¿KÍ¿L¿L_¿Lé¿Lπ¿Lﬁ¿M ¿M¿M5¿Mc¿Mç¿MØ¿MÕ¿N¿N9¿Nz¿Nõ¿N∞¿N˛¿O¿O¿O(¿O)¿Ot¿Oz¿O∆¿P
¿P[¿P~¿PÑ¿Pœ¿Q¿Q8¿Q9¿QE¿Q¿QÄ¿Qå¿Q¿¿R¿R]¿R¶¿Rß¿Rı¿S¿S?¿SM¿SS¿ST¿So¿S¿¿S⁄¿T¿T¿TI¿TJ¿Te¿T±¿TÎ¿U-¿U;¿UA¿UB¿Ué¿U∑¿V^¿Vk¿VÄ¿V¶¿Vß¿V‚¿W¿WÇ¿W÷¿W◊¿X:¿Xî¿X’¿X€¿X‹¿Y+¿Y{¿Y»¿YÊ¿Z¿Z:¿Zâ¿Zƒ¿ZÛ¿[¿[¿[¿[¿[%¿[T¿[j¿[é¿[Ÿ¿\!¿\5¿\P¿\â¿\ò¿\π¿\ÿ¿\˘¿]¿]A¿]b¿]ô¿]®¿]”¿]˝¿^¿^?¿^a¿^â¿^‘¿_¿_U¿_d¿_j¿_n¿_o¿_{¿_ƒ¿_Û¿_˜¿_¯¿`B¿`[¿`\¿`≠¿`∫¿`›¿`ﬁ¿a(¿aF¿aG¿a}¿aõ¿aú¿aÌ¿b=¿bÉ¿b‹¿b›¿bÈ¿c%¿ca¿ct¿c§¿cæ¿cË¿d#¿dU¿d}¿dá¿dÿ¿d˙¿e%¿e&¿eì¿eÁ¿eË¿f6¿fg¿f«¿f÷¿g¿gK¿g≥¿g¥¿h¿h¢¿i¿i¿i9¿iq¿i∏¿iÔ¿jg¿jq¿jÄ¿jÜ¿jä¿jã¿j±¿k.¿ke¿kÕ¿l¿lô¿m¿m6¿mV¿mw¿mò¿m•¿mÎ¿nK¿n´¿n¨¿o9¿o?¿oC¿oD¿oq¿o¬¿p¿p9¿pE¿pj¿pç¿p√¿p„¿p˚¿q¿qm¿qy¿qÅ¿qé¿qÃ¿r¿r]¿rá¿r¢¿rº¿r·¿s¿s2¿sU¿s|¿s°¿s–¿sı¿t¿tI¿tq¿tô¿t¨¿t—¿t˚¿u¿u7¿ue¿ux¿uÇ¿uä¿uê¿uë¿u”¿uÚ¿v ¿v¿v¿vJ¿vT¿vt¿vï¿v…¿vÁ¿v˝¿w¿we¿wo¿wu¿wv¿wƒ¿x¿xb¿xè¿xÀ¿x“¿y#¿ys¿y¡¿yœ¿yË¿z¿z¿z¿z¿z2¿z3¿zÑ¿zƒ¿z ¿{¿{j¿{Ü¿{†¿{∫¿{æ¿{ø¿|¿|\¿|b¿|Ø¿|ª¿|”¿|Ì¿|˘¿}¿}d¿}k¿}î¿}ò¿}ô¿}∆¿}˚¿~	¿~9¿~q¿~¿~∂¿~È¿~Ì¿~Ó¿(¿O¿t¿x¿y¿¨¿›¿ﬁ¿Ä+¿Äz¿Ä…¿Ä›¿Ä‚¿Å.¿Å¿ÅÕ¿Åﬁ¿Ç¿ÇP¿Çõ¿Çú¿Çœ¿ÇÚ¿É¿É¿É)¿Éc¿Éè¿É¡¿Ñ
¿ÑK¿Ñå¿Ñ≥¿Ñ¿¿Ö¿Ö_¿Öï¿Ö∆¿Ö„¿Ö˛¿ÜI¿ÜR¿ÜS¿Üó¿Ü“¿á$¿áK¿áQ¿áR¿á†¿á≥¿à¿à¿àC¿àw¿àÄ¿àÅ¿à…¿â&¿â*¿â+¿âv¿â∆¿â’¿äA¿äB¿äb¿äã¿äô¿äü¿äø¿äÒ¿äÚ¿ãA¿ãÜ¿ãú¿ã•¿ãÚ¿å?¿åê¿å±¿å˝¿ç[¿çÆ¿çœ¿çı¿é¿éC¿é_¿és¿éõ¿éø¿éÁ¿è¿è7¿èA¿èg¿èy¿èï¿è‰¿ê¿ê@¿êH¿ê}¿êä¿êÆ¿ê¥¿ê∏¿êπ¿ê‚¿ë¿ë&¿ëI¿ëx¿ë~¿ëÇ¿ëÉ¿ë≤¿ëÚ¿í¿í-¿íT¿í~¿íÑ¿íà¿íâ¿íµ¿í€¿ì¿ì¿ì¿ì>¿ìq¿ìu¿ì¿¿ì≈¿î¿î_¿îé¿î¥¿î›¿ï¿ï,¿ï2¿ïU¿ïv¿ï£¿ï§¿ñ¿ñp¿ñ¬¿ñÏ¿ñÌ¿ó¿ó)¿ó8¿óJ¿óp¿óí¿ó∏¿óﬂ¿ò¿ò¿ò-¿ò\¿ò`¿òa¿òb¿òn¿òä¿ò©¿ò·¿ô¿ô3¿ôv¿ô|¿ôÄ¿ôÅ¿ô∫¿ô¿¿ö¿ö\¿ö™¿ö˘¿õ¿õ3¿õH¿õf¿õs¿õÁ¿õÌ¿õÒ¿õÚ¿ú&¿úK¿úb¿úç¿úú¿ú¬¿ú‰¿úÏ¿úÚ¿úˆ¿ú˜¿ù#¿ùM¿ùQ¿ùR¿ù¿ù◊¿û&¿ût¿ûó¿û⁄¿ûË¿ûÈ¿ü¿ü¿ü[¿üü¿ü„¿†!¿†O¿†d¿†u¿†°¿†»¿†ı¿°!¿°L¿°r¿°ú¿°∑¿°∆¿°Ò¿¢
¿¢'¿¢1¿¢@¿¢F¿¢r¿¢ñ¿¢∂¿¢√¿¢Í¿£¿£I¿£e¿£~¿£¢¿£—¿§¿§;¿§c¿§ö¿§Ω¿§Ù¿•7¿•B¿•Q¿•|¿•Ñ¿•À¿•Û¿•˘¿¶F¿¶m¿¶•¿¶Ø¿¶Ë¿ß	¿ß=¿ß[¿ßq¿ßç¿ßﬂ¿ßÈ¿ßÔ¿ß¿®@¿®`¿®è¿®™¿®∞¿®¥¿®µ¿®–¿©/¿©\¿©¿©É¿©Ñ¿©…¿™¿™Z¿™[¿™á¿™à¿™À¿™Ú¿´ ¿´¿´.¿´p¿´õ¿´„¿´Û¿´˚¿´¸¿¨@¿¨A¿¨è¿¨…¿≠¿≠=¿≠á¿≠¥¿≠Ì¿Æ¿Æ)¿Æ4¿Æx¿Æî¿Æ√¿Æ€¿ÆË¿Ø*¿ØL¿ØÇ¿Øõ¿Ø¶¿ØÆ¿ØØ¿ØÍ¿∞¿∞¿∞l¿∞m¿∞à¿∞≠¿∞Ã¿∞˘¿± ¿±+¿±P¿±ç¿±∫¿±·¿±Ï¿±˚¿≤2¿≤W¿≤î¿≤ü¿≤ß¿≤Ø¿≤≥¿≤¥¿≤ÿ¿≤Ÿ¿≤Â¿≥¿≥U¿≥ô¿≥«¿≥—¿¥&¿¥z¿¥œ¿µ	¿µ¿µ¿µd¿µh¿µi¿µñ¿∂¿∂Z¿∂©¿∂∂¿∑¿∑Q¿∑û¿∑Ï¿∏$¿∏[¿∏∏¿∏ˇ¿π ¿π¿π#¿πc¿πt¿πÈ¿π˝¿∫ ¿∫V¿∫v¿∫é¿∫¨¿∫Ù¿ª ¿ª¿ª¿ª¿ª\¿ªù¿ª≥¿ª«¿º¿ºc¿º∂¿º∆¿º‚¿º˛¿Ω3¿Ωi¿Ω°¿Ωß¿Ωæ¿Ω ¿Ω˜¿æ¿æP¿æp¿æà¿æ¶¿æÊ¿æÚ¿æ˙¿ø ¿ø¿ø¿ø¿ø¿ø8¿øü¿¿¿¿¿¿	¿¿V¿¿ä¿¿ü¿¿Ó¿¿Ô¿¡=¿¡ã¿¡¨¿¡¡¿¬ ¿¬¿¬9¿¬N¿¬ë¿¬í¿¬∫¿¬⁄¿¬€¿¬˝¿√5¿√{¿√£¿√Ù¿ƒE¿ƒî¿ƒ©¿ƒ≤¿≈¿≈D¿≈ö¿≈ß¿≈„¿≈È¿≈Í¿∆¿∆*¿∆ê¿∆Ω¿∆Ã¿∆÷¿∆‹¿∆‡¿∆·¿«¿«@¿«t¿«ê¿«Ÿ¿«›¿«ﬁ¿»)¿»t¿»í¿»ì¿»∞¿»“¿»Ï¿…¿…¿…¿…@¿…p¿…ü¿…≠¿…’¿ *¿ 7¿ Ç¿ à¿ å¿ ç¿ «¿ ‚¿ ˛¿À¿À<¿Àl¿Àõ¿À©¿À¡¿ÀÈ¿Ã¿Ã>¿Ãp¿Ãv¿Ãz¿Ã{¿Ã¶¿ÃÒ¿Õ¿ÕY¿Õs¿Õw¿Õx¿Õû¿Õ«¿ÕÓ¿Œ¿Œn¿Œè¿Œ÷¿œ¿œ¿œ¿œ>¿œi¿œê¿œ¿¿œ’¿–#¿–T¿–£¿–¡¿–˙¿—¿—)¿—¿—€¿—„¿—‰¿—¸¿“¿“:¿“Y¿“f¿“ö¿““¿“ÿ¿“Ô¿“Û¿“Ù¿”¿”)¿”I¿”h¿”á¿”à¿”Ω¿”ﬁ¿”Ï¿‘!¿‘/¿‘t¿‘ƒ¿‘“¿‘”¿’2¿’∑¿÷¿÷r¿÷ù¿÷œ¿◊¿◊T¿◊Ü¿◊÷¿ÿp¿ÿä¿ÿÆ¿ÿ’¿ÿÔ¿Ÿ ¿ŸN¿Ÿï¿Ÿº¿ŸŒ¿Ÿ˜¿⁄¿⁄¿⁄c¿€¿€7¿€P¿€Q¿€é¿€Ø¿€Õ¿€⁄¿‹(¿‹V¿‹o¿‹{¿‹õ¿‹¶¿‹’¿‹¯¿›¿›ö¿›≤¿ﬁ<¿ﬁT¿ﬁi¿ﬁ¡¿ﬁ˜¿ﬁ˝¿ﬂ¿ﬂ¿ﬂ%¿ﬂD¿ﬂq¿ﬂ∂¿‡ ¿‡¿‡Ä¿‡≠¿‡Ã¿‡“¿‡÷¿‡◊¿·'¿·v¿·ƒ¿‚¿‚N¿‚v¿‚≠¿‚Ã¿‚„¿„8¿„Ä¿„£¿„Í¿‰8¿‰ì¿‰õ¿‰¿¿‰˝¿Âc¿Âi¿Âm¿Ân¿Âí¿Â±¿Ê¿Ê7¿Ê§¿Ê˝¿Á4¿Á<¿Áû¿Á§¿Á®¿Á©¿ÁŒ¿Ë#¿Ëì¿Ë¶¿Ë™¿Ë´¿Ë‹¿Ë‚¿È1¿Èd¿Èœ¿È–¿È‹¿Í¿Í¿Í[¿Í\¿Íh¿Í¬¿Î¿ÎT¿ÎÖ¿Î±¿Î ¿ÎÂ¿Ï¿Ï"¿Ï_¿Ïc¿Ïd¿Ïp¿Ïû¿ÏË¿Ì4¿Ì5¿Ìh¿Ì¢¿Ì¶¿Ìß¿Ì¿Ìˆ¿ÓE¿Óâ¿Óï¿Ó¨¿Ó˝¿ÔH¿Ôó¿Ô„¿Ôı¿	¿¿¿\¿p¿v¿ñ¿º¿Õ¿—¿“¿ﬁ¿Ò¿Ò%¿ÒP¿Òq¿Ò∞¿Ò‰¿Ú¿Ú¿Ú¿Ú¿ÚD¿Ú]¿ÚÑ¿Ú≥¿Ú»¿Ú’¿ÚÍ¿Ú¿ÚÙ¿Úı¿ÛA¿ÛL¿ÛQ¿Ûú¿Û‚¿Ù¿Ù¿Ù¿Ù:¿Ù[¿Ùi¿Ùj¿Ùò¿Ù¶¿Ùß¿Ùπ¿ı¿ı¿ı¿ı¿ı%¿ıF¿ıg¿ıu¿ıv¿ıà¿ı©¿ı±¿ıµ¿ı∂¿ı¬¿ı˜¿ı¯¿ˆ¿ˆ:¿ˆë¿ˆﬂ¿ˆ˛¿˜&¿˜N¿˜Ü¿˜ê¿˜∏¿˜π¿˜‹¿¯¿¯#¿¯J¿¯q¿¯†¿¯œ¿˘¿˘B¿˘ü¿˘¡¿˘‡¿˘È¿˙¿˙S¿˙á¿˙“¿˙Ÿ¿˙›¿˙ﬁ¿˙Í¿˚0¿˚1¿˚]¿˚É¿˚Ñ¿˚ê¿˚ ¿˚‹¿¸¿¸'¿¸+¿¸,¿¸p¿¸ì¿¸™¿¸ø¿¸Ì¿˝¿˝$¿˝(¿˝)¿˝l¿˝è¿˝•¿˝∫¿˝Á¿˛¿˛¿˛!¿˛"¿˛g¿˛ä¿˛¢¿˛∑¿˛Ê¿ˇD¿ˇn¿ˇ|¿ˇÄ¿ˇÅ¿ˇÇ¿ˇ‘¿ˇ’¿ ¿ ô¿ Â¿ È¿ Í¿3¿_¿Å¿Ç¿†¿÷¿¿¿f¿ß¿◊¿W¿]¿^¿ñ¿À¿¿O¿p¿∑¿ª¿º¿˛¿*¿L¿M¿k¿°¿Õ¿⁄¿1¿r¿±¿∑¿∏¿¿(¿w¿¬¿Á¿¿Y¿≥¿∑¿∏¿	¿	¿	h¿	∫¿	æ¿	ø¿	Ô¿
¿
l¿
ã¿
©¿
∞¿
Ë¿
È¿4¿Å¿–¿Î¿¿/¿5¿9¿∞¿±¿˛¿!¿k¿Ö¿ƒ¿—¿¿¿¿¿H¿w¿ó¿Ê¿˙¿¿¿å¿ç¿g¿h¿ƒ¿¿@¿D¿E¿ì¿Œ¿¿¿¿i¿¬¿Ï¿˙¿ ¿¿b¿ï¿≈¿Ï¿¿¿>¿w¿∞¿±¿7¿W¿á¿≠¿¥¿‹¿‡¿·¿¿Q¿k¿~¿Ñ¿∞¿¥¿µ¿ˇ¿O¿z¿≠¿¿C¿D¿R¿√¿E¿≤¿≥¿–¿h¿¿ô¿*¿–¿*¿Õ¿[¿Ê¿Á¿˘¿<¿á¿ ¿ ¿ ¿  ¿ G¿ u¿ µ¿ ∂¿ ¸¿!¿!Q¿!g¿!Ç¿!¶¿!œ¿"¿"P¿"]¿"u¿"û¿"√¿"Î¿#
¿#4¿#ä¿#∑¿#‰¿$¿$R¿$£¿$Ò¿%&¿%á¿%±¿%‘¿%Â¿&4¿&f¿&ë¿&µ¿&Ì¿'#¿']¿'å¿'ø¿'¿('¿(X¿(à¿(ƒ¿(›¿)¿)0¿)u¿)∂¿)Î¿*¿*E¿*í¿*‹¿+!¿+Z¿+è¿+¬¿+Ô¿,"¿,U¿,Ü¿,Ω¿,¸¿-f¿-õ¿-“¿.¿.q¿.∞¿.˜¿/0¿/X¿/ï¿/‰¿0¿0X¿0ì¿0›¿1(¿1q¿1º¿2¿2C¿2Ä¿2¬¿3¿3J¿3c¿3z¿3è¿3¢¿3≥¿3¬¿3œ¿3⁄¿3„¿3Í¿3Ó¿3Ô¿4#¿4)¿4n¿4∫¿4◊¿4ı¿5¿5L¿5ñ¿5€¿6'¿60¿6ñ¿6Ó¿7¿7i¿7ù¿7Ï¿7Ù¿8,¿82¿8Ö¿8’¿9&¿9@¿9©¿:¿:x¿:á¿:Ë¿:¿;3¿;|¿;ó¿;›¿;Ë¿;Ò¿;˜¿;¯¿</¿<[¿<s¿<é¿<¬¿<…¿<Õ¿<œ¿<–¿=¿=¿=#¿=A¿=Z¿=Ç¿=®¿=æ¿=ﬁ¿=¸¿>¿>5¿>R¿>t¿>ê¿>¨¿>ø¿>⁄¿>Ô¿?¿?+¿?H¿?i¿?z¿?†¿?ø¿?Ÿ¿?Ú¿@¿@:¿@Q¿@h¿@à¿@∞¿@È¿A ¿AL¿Au¿Aô¿A≥¿AÕ¿AÌ¿B¿BB¿BÇ¿BÉ¿BÀ¿Bˇ¿C9¿Ce¿Cê¿C∞¿C–¿Cÿ¿CÎ¿CÛ¿D¿D
¿D¿D*¿DJ¿Df¿Dé¿D¥¿D⁄¿E¿E¿E1¿EH¿E_¿Ev¿Eå¿E¨¿EÀ¿EÎ¿F¿F-¿FE¿Fh¿FÇ¿F≤¿FŸ¿F¯¿G%¿GJ¿Gf¿GÑ¿G¢¿Gø¿G‚¿H¿H@¿Hi¿Hû¿Hø¿H„¿I¿I¿I¿I+¿Ig¿IÇ¿Iö¿I∫¿IÏ¿J¿JN¿Jl¿Jà¿J¢¿Jº¿J÷¿J¿K¿K&¿KL¿Kt¿Kê¿K¥¿KÚ¿L¿L*¿LP¿L}¿L´¿LÀ¿L˘¿M¿M?¿Ma¿MÉ¿M•¿M◊¿N	¿N9¿Nw¿N´¿N’¿N˝¿O%¿OG¿ON¿OR¿OS¿O_¿OÆ¿Oø¿OŸ¿O˚¿P/¿P_¿P¿Pù¿Pπ¿P’¿PÒ¿Q¿Q'¿QG¿Qo¿Qô¿Q∑¿Q›¿R¿RA¿RY¿RÅ¿R∞¿R‡¿S¿S8¿SZ¿S|¿S†¿Sƒ¿SË¿T¿TN¿Té¿Tƒ¿T¿U$¿UN¿Ur¿Uü¿U£¿U•¿U¶¿Uÿ¿Uı¿V¿V¿V9¿VX¿VÄ¿Võ¿V≤¿V≥¿V…¿VÊ¿W¿W0¿WF¿WG¿WS¿Wô¿Wõ¿Wú¿W¯¿XQ¿XR¿X^¿Xs¿Xä¿X§¿XÊ¿XÏ¿X¿XÒ¿X˝¿Y4¿YZ¿Yä¿YÃ¿Y“¿Y”¿Z¿ZA¿ZG¿ZK¿ZL¿ZX¿Zk¿Zß¿Zº¿Z¿¿Z¡¿[3¿[4¿[]¿[Ä¿[Å¿[ç¿[√¿[ƒ¿[–¿[¯¿\¿\x¿\õ¿\ü¿\†¿\¨¿\—¿\˚¿]&¿]:¿]a¿]u¿]ü¿]≥¿]Û¿^%¿^g¿^ª¿^ø¿^¿¿^Ã¿^‡¿_%¿_W¿_o¿_ß¿`¿`¿`¿`¿`F¿`_¿`c¿`e¿`f¿`ñ¿`µ¿`–¿a¿a4¿aJ¿ab¿aÄ¿a•¿aÌ¿b5¿bu¿bÄ¿bé¿b≠¿b ¿b·¿b¯¿c¿c¿c`¿cs¿ct¿cÄ¿c˜¿d¿dB¿dV¿d¶¿d¨¿d»¿d⁄¿dÌ¿d˛¿e¿e#¿e7¿eL¿eR¿eV¿eX¿eY¿e´¿e“¿e÷¿f¿fm¿fΩ¿f‡¿f‰¿g1¿g{¿g∆¿h¿h_¿hÆ¿h„¿hÁ¿i5¿ik¿iä¿i£¿i§¿iÕ¿iŒ¿j¿jX¿jY¿j§¿jÂ¿jÊ¿k¿k3¿kk¿k¢¿k©¿k≠¿kØ¿k∞¿l ¿l¿l1¿lc¿ld¿lp¿lõ¿lú¿l®¿m¿m¿m≥¿mµ¿m∂¿n¿nT¿nà¿n∫¿nÓ¿nÔ¿n˚¿o&¿o'¿o3¿ot¿o¥¿p
¿p6¿p>¿pD¿pn¿pr¿ps¿p¿p¡¿q¿qq¿q°¿q©¿qØ¿qÓ¿qÚ¿qÙ¿qı¿r@¿rã¿rÃ¿r˝¿s0¿s1¿s=¿sh¿si¿su¿s∂¿t¿t&¿tç¿tî¿tò¿tô¿t•¿tÁ¿u>¿u•¿uæ¿v¿v¿v¿v¿v¿vS¿v™¿w¿w'¿wN¿wë¿wò¿wú¿wû¿wü¿wË¿x¿xS¿xT¿xz¿x{¿xá¿x≤¿x≥¿xø¿y ¿y¿yS¿yü¿yÙ¿y˚¿yˇ¿z¿zM¿zf¿zû¿zÍ¿{?¿{F¿{J¿{L¿{M¿{ô¿{‰¿{¸¿|%¿|9¿|N¿|i¿|n¿|o¿|ï¿|ñ¿|¢¿|Õ¿|Œ¿|⁄¿}¿}4¿}n¿}u¿}y¿}z¿}Ü¿}»¿}·¿~¿~@¿~G¿~K¿~M¿~N¿~ô¿~¶¿~÷¿¿	¿¿@¿A¿M¿Æ¿∫¿¸¿Ä¿ÄA¿Äh¿Äo¿Äs¿Äu¿Äv¿Ä∆¿Ä«¿Å ¿Å4¿Å}¿Å~¿Åß¿Å–¿Å—¿Å›¿Ç¿Ç]¿Çå¿Çê¿Çë¿Çù¿Çﬁ¿É¿ÉQ¿ÉX¿É\¿É]¿Éi¿É´¿É„¿Ñ ¿Ñ'¿Ñ+¿Ñ-¿Ñ.¿Ñ}¿Ñ™¿Ñ≠¿Ñ˙¿Ö%¿Ö_¿Ö¶¿Öß¿Ö–¿ÖË¿ÖÈ¿Öı¿ÜD¿ÜE¿ÜQ¿Üí¿Üß¿Ü‰¿áz¿á~¿á¿áã¿áÕ¿á‚¿à ¿à∑¿àª¿àΩ¿àæ¿â¿âV¿âh¿âï¿â‹¿â›¿ä¿ä4¿ä5¿äA¿äk¿ä∆¿ä˜¿ä˚¿ä¸¿ã¿ãÇ¿ãÉ¿ãè¿å¿å¿å¿å`¿åª¿å˝¿å˛¿ç¿çd¿çe¿ç§¿ç’¿çÙ¿é¿éZ¿é{¿éû¿éü¿éµ¿è¿è~¿èÖ¿èâ¿èä¿èñ¿èÃ¿ê¿ê'¿ê(¿êJ¿êg¿êy¿êÓ¿ê˜¿ê˝¿ê˛¿ëI¿ëÖ¿ëò¿ëû¿ëﬁ¿ë˚¿í¿íì¿íú¿í¢¿í£¿íæ¿íŒ¿íÁ¿ì¿ì¿ìp¿ìò¿ì°¿ì®¿ì¨¿ì≠¿ìπ¿î¿î¿î¿îz¿îò¿î®¿îŒ¿îÛ¿î¯¿î˘¿ï¿ïD¿ïâ¿ïä¿ïµ¿ï∂¿ñ ¿ñ¿ñN¿ñy¿ñª¿ñ‚¿ñÈ¿ó8¿óë¿óï¿óñ¿ó›¿ó˜¿ò/¿ò\¿ò†¿òß¿òŸ¿ô6¿ô:¿ô;¿ôG¿ô}¿ôπ¿ôÿ¿ôŸ¿ö8¿öb¿öô¿ö∫¿ö‡¿õ¿õG¿õè¿õò¿õû¿õü¿õˆ¿ú¿ú%¿úà¿úë¿úó¿úò¿ú„¿ù<¿ùf¿ùy¿ù¿ù‚¿ùˇ¿û¿ûÄ¿ûâ¿ûè¿ûê¿û»¿û…¿ü¿üO¿üq¿üÆ¿üÕ¿üÓ¿ü˘¿†@¿†_¿†Ä¿†´¿†∂¿†æ¿†ƒ¿†≈¿†˜¿°.¿°e¿°f¿°ü¿°Õ¿¢ ¿¢¿¢M¿¢â¿¢∆¿£¿£#¿£5¿£T¿£l¿£¢¿£Ã¿£◊¿£‡¿£Ê¿£Á¿§¿§¿§|¿§É¿§á¿§à¿§î¿§“¿§‘¿§’¿•Q¿•ß¿•®¿•…¿¶C¿¶D¿¶P¿¶ª¿¶˜¿ß¿ß¿ßb¿ßª¿ßÂ¿ß¯¿ß˛¿ßˇ¿®=¿®o¿®¶¿®›¿®ﬁ¿©â¿©±¿©È¿™t¿™|¿™Ø¿™∞¿™À¿™€¿´E¿´L¿´P¿´Q¿´]¿´º¿´æ¿´ø¿¨3¿¨k¿¨l¿¨ç¿¨é¿¨¿¿¨‡¿¨·¿≠¿≠L¿≠l¿≠ò¿≠¶¿≠¨¿≠ÿ¿Æ&¿ÆÉ¿Æ·¿ØD¿Øc¿ØÜ¿Ø¢¿Ø®¿Ø¨¿Ø≠¿Øπ¿ØÏ¿∞¿∞¿∞x¿∞»¿∞Ï¿∞˙¿± ¿±¿±3¿±V¿±r¿±x¿±y¿±æ¿≤ ¿≤!¿≤Å¿≤Ø¿≤ ¿≥5¿≥n¿≥ú¿≥…¿≥ ¿≥ﬁ¿≥Ó¿¥@¿¥G¿¥y¿¥¢¿¥∆¿¥Ã¿¥–¿¥—¿¥›¿µ¿µ¿µ¿µb¿µÇ¿µÉ¿µ§¿µ•¿µ±¿µ˘¿∂¿∂$¿∂A¿∂W¿∂•¿∂ª¿∂ƒ¿∂À¿∂œ¿∂–¿∂‹¿∑¿∑¿∑¿∑h¿∑å¿∑ç¿∑Æ¿∑Ø¿∑ª¿∏¿∏(¿∏P¿∏]¿∏Ü¿∏å¿∏ê¿∏ë¿∏ù¿π¿π¿π¿π:¿πM¿πó¿πò¿πŒ¿π“¿∫!¿∫f¿∫¥¿ª¿ª¿ª¿ª_¿ª™¿ª›¿º¿º/¿º=¿ºV¿ºt¿ºì¿º´¿º¨¿º›¿ºÛ¿ºÙ¿Ω6¿Ω`¿Ωa¿Ωö¿Ω†¿Ω¿æ>¿æg¿æm¿æ∫¿æ–¿æ˛¿æˇ¿ø¿øU¿øW¿øX¿øú¿øÍ¿¿$¿¿=¿¿>¿¿ä¿¿Ÿ¿¿Á¿¡1¿¡2¿¡X¿¡t¿¡x¿¡y¿¡ü¿¡ª¿¡ø¿¡¿¿¡Ó¿¬¿¬¿¬¿¬S¿¬a¿¬g¿¬†¿¬º¿¬‚¿¬Í¿¬Ó¿¬Ô¿√ ¿√=¿√K¿√Q¿√R¿√ê¿√î¿√ï¿√°¿√∂¿√Õ¿√ˇ¿ƒ#¿ƒ@¿ƒG¿ƒT¿ƒ~¿ƒÇ¿ƒÉ¿ƒè¿ƒ«¿ƒÌ¿≈"¿≈8¿≈j¿≈ñ¿≈ú¿≈†¿≈°¿≈≠¿≈¿¿≈Ì¿∆¿∆ ¿∆$¿∆%¿∆1¿∆X¿∆l¿∆î¿«"¿«∞¿«π¿«‘¿«€¿«ﬂ¿«·¿«‚¿»/¿»F¿»\¿»á¿»ó¿»ò¿»∑¿»∏¿»˚¿…¿…¿…=¿…|¿…}¿…®¿…Æ¿…¿ ¿  ¿ 2¿ J¿ X¿ ^¿ _¿ ë¿ í¿ ≥¿ ¡¿ «¿ »¿À¿À;¿Às¿À¶¿À¨¿À¬¿À·¿ÀÂ¿ÀÊ¿Ã¿Ã%¿Ãu¿ÃÉ¿Ãâ¿Ã≈¿Ã”¿ÃÏ¿Ãˇ¿Õ¿Õ¿Õ8¿Õ9¿ÕP¿Õk¿Õq¿Õr¿Õã¿Õè¿Õê¿Õ»¿ÕŒ¿Œ¿Œ.¿Œ4¿Œp¿Œ~¿Œó¿Œ™¿Œ∞¿Œ±¿Œ„¿Œ‰¿œ	¿œ$¿œ*¿œ+¿œD¿œH¿œI¿œq¿œÇ¿œï¿œ¶¿œ™¿œ´¿œ∑¿œÕ¿œÌ¿œÒ¿œÛ¿œÙ¿–5¿–m¿–n¿–•¿–€¿–‹¿—)¿—K¿—O¿—ú¿—π¿—◊¿—˝¿“,¿“H¿“M¿“]¿“¿“ç¿“é¿“®¿“æ¿“◊¿“˜¿”¿”¿”)¿”>¿”D¿”c¿”Ñ¿”≥¿” ¿”“¿”Ê¿”Ó¿‘¿‘¿‘     íª