Ä¡bodyappBar	bodyScrimbottomSheetsnackBarmaterialBannerpersistentFooterbottomNavigationBarfloatingActionButtondrawer	endDrawer	statusBarchildofmaybeOfcreateState
_scaffolds_materialBanners_materialBannerController
_snackBars_snackBarController_snackBarTimer_accessibleNavigationdidChangeDependencies	_register_unregister_updateScaffolds_isRootshowSnackBar_handleSnackBarStatusChangedremoveCurrentSnackBarhideCurrentSnackBarclearSnackBarsshowMaterialBanner"_handleMaterialBannerStatusChangedremoveCurrentMaterialBannerhideCurrentMaterialBannerclearMaterialBannersbuilddispose_scaffoldMessengerStateupdateShouldNotifyfloatingActionButtonSizebottomSheetSizecontentBottom
contentTop	minInsetsminViewPaddingscaffoldSizesnackBarSizematerialBannerSizetextDirectionbeginendanimatorprogress	getOffsettoStringbottomNavigationBarTopfloatingActionButtonArea_scaleFloatingActionButtoncopyWithcontextfloatingActionButtonScalegeometryvalue_updateWithbottomWidgetsHeightappBarHeightmaterialBannerHeight==hashCode
extendBodyextendBodyBehindAppBargeometryNotifier$previousFloatingActionButtonLocation#currentFloatingActionButtonLocation)floatingActionButtonMoveAnimationProgress"floatingActionButtonMotionAnimatorisSnackBarFloatingsnackBarWidthextendBodyBehindMaterialBannerperformLayoutshouldRelayoutfabMoveAnimationfabMotionAnimatorcurrentController_previousController_previousScaleAnimation_previousRotationAnimation_currentScaleAnimation_extendedCurrentScaleAnimation_currentRotationAnimation_previousChild	initStatedidUpdateWidget_entranceTurnTween_updateAnimations%_handlePreviousAnimationStatusChanged_isExtendedFloatingActionButton_onProgressChanged_updateGeometryScalefloatingActionButtonLocationfloatingActionButtonAnimatorpersistentFooterButtonsonDrawerChangedonEndDrawerChangeddrawerScrimColorbackgroundColorresizeToAvoidBottomInsetprimarydrawerDragStartBehaviordrawerEdgeDragWidthdrawerEnableOpenDragGestureendDrawerEnableOpenDragGesturerestorationId
geometryOf	hasDrawerrestoreState
_drawerKey_endDrawerKey	hasAppBarhasEndDrawerhasFloatingActionButton_appBarMaxHeightappBarMaxHeight_drawerOpened_endDrawerOpenedisDrawerOpenisEndDrawerOpen_drawerOpenedCallback_endDrawerOpenedCallback
openDraweropenEndDrawer_scaffoldMessenger_handleSnackBarStatusChange_messengerSnackBar_updateSnackBar_messengerMaterialBanner_updateMaterialBanner_dismissedBottomSheets_currentBottomSheet_currentBottomSheetKey _maybeBuildPersistentBottomSheet_closeCurrentBottomSheetcloseDrawercloseEndDrawer_updatePersistentBottomSheet_buildBottomSheetshowBottomSheet#_floatingActionButtonMoveController_floatingActionButtonAnimator%_previousFloatingActionButtonLocation_floatingActionButtonLocation)_floatingActionButtonVisibilityController$_floatingActionButtonVisibilityValue_showFloatingActionButton_moveFloatingActionButton_handleStatusBarTap_geometryNotifier_resizeToAvoidBottomInset_addIfNonNull_buildEndDrawer_buildDrawer_showBodyScrim_bodyScrimColorshowBodyScrim_widget
_completerclosedclosesetStatestartingPointcurve	transformanimationController
enableDrag	onClosingonDismissed	onDisposebuilderisPersistent	elevationshapeclipBehaviorconstraintsanimationCurve_handleDragStart_handleDragEnd_handleStatusChangeextentChanged_wrapBottomSheet_isLocalHistoryEntry%_kDefaultFloatingActionButtonLocation%_kDefaultFloatingActionButtonAnimator_standardBottomSheetCurve _kBottomSheetDominatesPercentage_kMinBottomSheetScrimOpacity_kMaxBottomSheetScrimOpacity_ScaffoldSlotScaffoldMessengerScaffoldMessengerState_ScaffoldMessengerScopeScaffoldPrelayoutGeometry_TransitionSnapshotFabLocationScaffoldGeometry_ScaffoldGeometryNotifier_BodyBoxConstraints_BodyBuilder_ScaffoldLayout_FloatingActionButtonTransition$_FloatingActionButtonTransitionStateScaffoldScaffoldStateScaffoldFeatureController_BottomSheetSuspendedCurve_StandardBottomSheet_StandardBottomSheetStatePersistentBottomSheetController_ScaffoldScopeÅ∆
lerpDoubleDragStartBehaviorFloatingActionButtonLocationendFloatFloatingActionButtonAnimatorscalingCurvestandardEasingdoubleSnackBarMaterialBannerBuildContextofshowSnackBarshowMaterialBannerdebugCheckHasScaffoldMessengerStatefulWidgetKeykeyWidget	GlobalKeyMaterialAppscaffoldMessengerKey"dependOnInheritedWidgetOfExactType_scaffoldMessengerStateoverrideStateTickerProviderStateMixinLinkedHashSetQueueMaterialBannerClosedReasonAnimationControllerSnackBarClosedReasonTimerboolvoidMediaQueryData
MediaQuerycontextaccessibleNavigationisActivereasontimeoutdidChangeDependenciesadd
isNotEmpty_updateSnackBar_updateMaterialBannerremovescaffoldfindAncestorStateOfTypecontainsdurationclosecreateAnimationControllervsyncaddStatusListenerisEmptyisDismissedforward_withAnimationfallbackKey	UniqueKey	CompleterfirstsetStateaddLastAnimationStatus	dismissedremoveFirst	completedreverse
_completerisCompletedcompletecancelvaluehidestatusthenmountedcleardebugCheckHasMediaQuery
ModalRoutedynamic	isCurrent_widgetactionscaffoldMessengerStatechildwidgetdisposeInheritedWidgetFloatingActionButtonOffset	immutableSizefloatingActionButtonzeroBottomSheetbodybottomNavigationBar
EdgeInsetsbottomappBartoppaddingresizeToAvoidBottomInsetviewPadding
viewInsetsTextDirection	getOffsetbeginendprogressStringobjectRuntimeTypeValueNotifier
geometryOfBottomAppBarRectbottomNavigationBarToplerpcenterfloatingActionButtonAreaChangeNotifierValueListenableRenderObjectfindRenderObjectownerdebugDoingPaintFlutterError_scaleFloatingActionButtonfloatingActionButtonScalecopyWithnotifyListenersBoxConstraintsinfinityminWidthmaxWidth	minHeight	maxHeightObjectmaterialBannerHeightbottomWidgetsHeightappBarHeightinthashhashCodeStatelessWidgetLayoutBuilderbuilderconstraintsmaxdataMultiChildLayoutDelegateloosetightenwidthheighthasChildlayoutChildpositionChildpersistentFootermaterialBannerclamp	bodyScrimsnackBarbottomSheetbottomSheetSizecontentBottom
contentTopfloatingActionButtonSize	minInsetsscaffoldSizesnackBarSizematerialBannerSizetextDirectionminViewPaddingsizemin	statusBardrawertight	endDrawer_updateWith)floatingActionButtonMoveAnimationProgress$previousFloatingActionButtonLocation#currentFloatingActionButtonLocation
extendBodyextendBodyBehindAppBar	Animation	initStatekFloatingActionButtonSeguecurrentControllerdidUpdateWidgetfabMotionAnimatorfabMoveAnimation
AnimatableTween!kFloatingActionButtonTurnIntervalchain
CurveTweencurveCurveseaseInCurvedAnimationparentanimatedrivegetScaleAnimationgetRotationAnimationAnimationMinIntervalTrainHoppingAnimationaddListener
isExtendedStack	alignment	AlignmentcenterRightchildrenFadeTransitionopacityScaleTransitionscaleRotationTransitionturnsgeometryNotifiershowBottomSheetTextCenterAppBarcenterDockedSafeAreaTabBar
TabBarViewTabControllerDrawerBottomNavigationBarstartCircularNotchedRectanglebackgroundColorPreferredSizeWidgetSizedBoxexpandListView
TextButtonOverflowBarListltrrtl
openDrawercloseDrawer	NavigatorpopdrawerEnableOpenDragGestureDrawerCallbackopenEndDrawercloseEndDrawerendDrawerEnableOpenDragGestureDrawerThemeData
scrimColorColorsblack54ColorMaterial	ThemeDatascaffoldBackgroundColorshowModalBottomSheetLocalHistoryEntryprimaryRestorationBucketRestorationScopeRestorationManagerBuilder	fromPartsDiagnosticsNodeErrorSummaryErrorDescription	ErrorHintdescribeElementregisterForUpdates	hasDrawerRestorationMixinrestorationIdregisterForRestorationDrawerControllerStateRestorableBoolonDrawerChangedcallonEndDrawerChanged
IconButtoncurrentStateopenhideCurrentSnackBarremoveCurrentSnackBar
Deprecated
_snackBars_materialBannersDraggableScrollableNotificationextentinitialExtentonRemoveDraggableScrollableActuatorresetaddLocalHistoryEntryremoveLocalHistoryEntryNotificationListeneronNotificationStatefulBuilderStateSetteranimationController_isLocalHistoryEntryfuturewhenCompleteWidgetBuilderShapeBorderClip
enableDrag	onClosingonDismissed	onDispose shouldDisposeAnimationControllerisPersistent	elevationshapeclipBehaviorVoidCallbackfntransitionAnimationController
lowerBound
upperBoundTickerFutureisAnimatinggetAnimationRestartfromScrollControllerPrimaryScrollController
hasClients	animateToDurationmillisecondseaseOutCircfloatingActionButtonLocationfloatingActionButtonAnimatormaybeOf_unregister	_registerLayoutIdremovePadding
removeLeftremoveLeftPadding	removeTopremoveTopPaddingremoveRightremoveRightPaddingremoveBottomremoveBottomPaddingremoveBottomInsetremoveViewInsetsmaintainBottomViewPaddingidDrawerControllerDrawerAlignmentdrawerCallbackdragStartBehaviordrawerDragStartBehaviordrawerScrimColoredgeDragWidthdrawerEdgeDragWidthenableOpenDragGestureisDrawerOpenblackModalBarrierwithOpacitydebugCheckHasDirectionalityThemeDirectionalitypersistentFooterButtonsdismissiblecolorpreferredHeightForpreferredSizeisFiniteConstrainedBoxFlexibleSpaceBarcreateSettingscurrentExtentbottomCenterSnackBarBehaviorbehaviorsnackBarThemefixedfloatingMaterialBannerThemeDataMaterialBannerTheme	Container
decorationBoxDecorationborderBorderDividercreateBorderSideIntrinsicHeightAlignmentDirectional	centerEndallspacingoverflowAlignmentOverflowBarAlignmentplatformTargetPlatformiOSmacOSGestureDetectorHitTestBehavioropaqueonTapexcludeFromSemanticsandroidfuchsialinuxwindowsScrollNotificationObserverAnimatedBuilder	animationCustomMultiChildLayoutdelegate"floatingActionButtonMotionAnimatorisSnackBarFloatingextendBodyBehindMaterialBannersnackBarWidthFutureeaseOutParametricCurveeaseOutCubic	transformdescribeIdentityDragStartDetailslinearDragEndDetails$_floatingActionButtonVisibilityValueshowBodyScrim	minExtent	Semantics	container	onDismissAligntopStartheightFactoronDragStart	onDragEndStatefulWidgetStateTickerProviderStateMixinInheritedWidgetFloatingActionButtonLocationChangeNotifierValueListenableBoxConstraintsStatelessWidgetMultiChildLayoutDelegateRestorationMixinParametricCurveScaffoldFeatureController»’≈«°◊Á¡EÑÖOHj0    
dart:async dart:collection 	dart:math dart:ui package:flutter/foundation.dart package:flutter/gestures.dart package:flutter/widgets.dart app_bar.dart banner.dart banner_theme.dart bottom_sheet.dart colors.dart curves.dart 
debug.dart divider.dart drawer.dart flexible_space_bar.dart floating_action_button.dart $floating_action_button_location.dart material.dart snack_bar.dart snack_bar_theme.dart 
theme.dart 	dart:core¿ Ìß ¿ç< <ÄÜÄ§Ä•Ä∫Ä‘ÄÅÅÅ=Å|Å£Å§ÅªÅ—ÅÌÇ	ÇÇ5ÇJÇaÇwÇôÇøÇÓÉÉÉ>ÉSÉTÉlÉëÉ∑É”ÉÈÑÑÑÉÑÙÑıÖ-ÖyÖùÖ“ÜÜ4Ü5ÜJÜRÜ\ÜiÜxÜÑÜñÜ™Ü¡ÜŸÜ„ÜÜ˝Üˇá áJáNáûáŒá“à!àkàúà◊à€â#âtâ«ää5ä9äMäúä†äÛãããããgã∏å
å^å¨å◊ç1çbçÆç çÿçÒéé'é(éXé^éèé•é¶éˆèèè!èmèÆè¥êêê$êwê…ëë_ëîëöë∞í íMíîíﬂì+ìPìVìÆì¿ì∆îîLîRîbîhî∏î˜ïGïtïØïÃñññtñûñ¢ñ£ñÛó
óócóióyóó»òòXòuòvòËôôôô$ôhôjôkôêôîô€ö,öwö¬ö–ö‘õõeõ∑úoú°ù;ùgùÄùüù†ù¨ùÕûû[û•ûıüüDüpüíü∫ü˚††>†a†e†f†ë†Ø†∞†Õ†°°°°F°p°x°~°Ç°É°∞°Ê¢¢.¢2¢3¢O¢Ü¢•¢…¢Û¢˚££££V£û£«§$§_§c§d§v§w§¥§∫•	•V•••≥•π¶
¶¶a¶°¶ßß%ßnßéßîß™ß˚®®k®}®€©'©`©~©Æ©‘©⁄™)™w™∆´´5´É´¨´π´Î¨¨¨p¨w¨â¨Ø¨∑¨œ¨Ê¨Í¨Î≠)≠?≠e≠å≠¢≠∆≠“≠ÓÆÆ=ÆGÆVÆ|ÆíÆºØØØ5ØDØhØwØõØ™Ø∞Ø¥ØµØˇ∞∞∞i∞∑±±1±M±[±Æ±Œ±≤≤)≤c≤â≤ç≤é≤Ÿ≤ﬂ≥%≥≥õ≥Û¥¥T¥v¥û¥¿¥Õµµ%µIµoµyµµùµ∏µºµΩ∂∂G∂a∂π∂«∑/∑G∑l∑á∑ã∑å∑•∑¶∑Ë∑Ó∏C∏ú∏Ò∏ˇππbπ¢π˜∫,∫2∫{∫õ∫°∫∑ªªªÑªñººjº©ºÕΩΩ/Ω5ΩêΩÍæ@æêæØø	ø8øGø}ø¢ø´¿ @
¿ @¿ @#¿ @O¿ @W¿ @o¿ @Ü¿ @ä¿ @ã¿ @œ¿ @Â¿ A¿ A8¿ AN¿ Ax¿ AÑ¿ A†¿ AÀ¿ A˚¿ B¿ B¿ B:¿ BV¿ Be¿ Bâ¿ Bò¿ Bº¿ BÀ¿ B—¿ B’¿ B÷¿ C&¿ C9¿ C?¿ Cñ¿ CÍ¿ DZ¿ Dv¿ Dò¿ D¶¿ E¿ E%¿ EG¿ EH¿ EÇ¿ EÆ¿ E≤¿ E≥¿ F¿ F
¿ FP¿ Fº¿ Fÿ¿ G<¿ GJ¿ G©¿ GÀ¿ G˘¿ H¿ H(¿ Hm¿ HÜ¿ H™¿ H–¿ H⁄¿ H‡¿ H‰¿ HÂ¿ I4¿ I{¿ Iõ¿ Iˇ¿ J¿ Jç¿ J´¿ J‹¿ J˝¿ K¿ K¿ K¿ K5¿ Kc¿ K°¿ Kﬁ¿ Kﬂ¿ L ¿ LA¿ Lo¿ Lπ¿ L˜¿ M0¿ MD¿ Må¿ M÷¿ MÂ¿ N*¿ Np¿ Nº¿ N“¿ O¿ O'¿ O1¿ O9¿ O?¿ O@¿ Od¿ Oà¿ O£¿ O™¿ OÆ¿ OØ¿ Oª¿ OŒ¿ OÚ¿ P¿ P+¿ P@¿ PD¿ PF¿ PG¿ P¿ P°¿ PØ¿ P ¿ Q¿ Q?¿ Qd¿ Qe¿ Qù¿ Qû¿ Q™¿ R¿ R¿ R¿ Rl¿ Rì¿ Ró¿ R—¿ S¿ SU¿ SY¿ Sô¿ SŒ¿ SŸ¿ S˚¿ TL¿ Tî¿ T∏¿ T€¿ T¸¿ U¿ UF¿ Uc¿ UÖ¿ U•¿ U≈¿ UÎ¿ V¿ V¿ V¿ VH¿ VN¿ Vö¿ V¡¿ V¬¿ Vˆ¿ V¸¿ W>¿ W^¿ W|¿ W}¿ W≈¿ W‹¿ W‚¿ X'¿ Xq¿ Xø¿ X÷¿ X‹¿ Y,¿ Yy¿ Y…¿ Y„¿ Z¿ Z¿ ZI¿ Z`¿ Zf¿ Z´¿ ZÚ¿ [ ¿ [&¿ [v¿ [√¿ \¿ \'¿ \B¿ \C¿ \ã¿ \§¿ \™¿ \Ù¿ ]¿ ]k¿ ]ò¿ ]û¿ ]‹¿ ^¿ ^0¿ ^1¿ ^~¿ ^ó¿ ^ù¿ ^Ï¿ _:¿ _Ü¿ _÷¿ _˘¿ `¿ `¿ `G¿ `M¿ `ú¿ `Ë¿ a¿ a#¿ ap¿ aæ¿ b¿ b7¿ b=¿ bå¿ bØ¿ b ¿ bÀ¿ b¸¿ c¿ cQ¿ cl¿ cm¿ c§¿ c™¿ cˇ¿ d ¿ d!¿ d_¿ dÑ¿ dÜ¿ dá¿ d”¿ d◊¿ e ¿ eÅ¿ eå¿ eÿ¿ eŸ¿ f5¿ f6¿ fb¿ få¿ fª¿ f‘¿ f’¿ f·¿ g"¿ gA¿ gq¿ gù¿ g∑¿ gæ¿ g¬¿ g√¿ gœ¿ gÂ¿ h_¿ hc¿ he¿ hf¿ h≥¿ h∑¿ h˘¿ i(¿ i,¿ iw¿ iÀ¿ iœ¿ j¿ j]¿ jy¿ j}¿ jÀ¿ k¿ k¿ k4¿ kx¿ kì¿ k¥¿ k◊¿ k›¿ kﬁ¿ l'¿ lt¿ lz¿ l∞¿ lÿ¿ lŸ¿ m¿ m¿ mc¿ mã¿ må¿ m–¿ mÏ¿ mˇ¿ n ¿ n¿ n=¿ nu¿ n~¿ nÑ¿ nÖ¿ nÆ¿ n‚¿ o¿ o¿ o¿ oZ¿ o^¿ o_¿ o∑¿ oÕ¿ oÎ¿ p¿ p3¿ p:¿ pW¿ p¨¿ q¿ q¿ q¿ q¿ q¿ q{¿ q¥¿ q‘¿ q’¿ qÛ¿ r¿ r5¿ r6¿ rB¿ ra¿ rq¿ r∂¿ r˛¿ s¿ sn¿ sƒ¿ t#¿ t.¿ tA¿ tK¿ tó¿ tõ¿ tú¿ t±¿ t’¿ t˘¿ u ¿ u'¿ uâ¿ u´¿ u·¿ v¿ v"¿ v9¿ v=¿ v?¿ v@¿ vå¿ vﬁ¿ v·¿ w,¿ w¿ wŒ¿ x¿ xk¿ xç¿ x¿¿ xﬁ¿ x˘¿ y ¿ y<¿ yd¿ yã¿ y´¿ y”¿ yˇ¿ z(¿ zM¿ zo¿ zú¿ z∆¿ {(¿ {)¿ {M¿ {j¿ {è¿ {ê¿ {·¿ |2¿ |Ö¿ |Œ¿ |⁄¿ |˝¿ }¿ })¿ }Q¿ }è¿ }À¿ }˙¿ }˛¿ }ˇ¿ ~¿ ~w¿ ~y¿ ~z¿ ~œ¿ ¿ :¿ =¿ í¿ ·¿ Ä¿ Ä%¿ Ä3¿ ÄQ¿ Ä{¿ Äì¿ Ä∂¿ ÄÂ¿ Å¿ Å¿ Å¿ Å0¿ ÅI¿ Ån¿ Åo¿ Å{¿ Å¢¿ Å“¿ ÅÂ¿ ÅÊ¿ Ç ¿ ÇD¿ Çú¿ Ç€¿ Ç‹¿ É¿ ÉW¿ É{¿ É|¿ ÉÆ¿ Éÿ¿ Ñ+¿ ÑL¿ ÑM¿ Ñh¿ Ñä¿ Ñπ¿ Ñ—¿ ÑÔ¿ Ñ˛¿ Ö¿ Ö"¿ Ö-¿ Ö6¿ Ö=¿ ÖA¿ ÖC¿ ÖD¿ Ö}¿ Öë¿ ÖÆ¿ Ö–¿ ÖÒ¿ Ü¿ Ü7¿ Üo¿ Ü¶¿ Ü„¿ á¿ á?¿ á`¿ á~¿ á®¿ á⁄¿ á¸¿ à"¿ àK¿ àà¿ àƒ¿ àÁ¿ â¿ â¿ â0¿ âU¿ âs¿ âñ¿ âª¿ âÔ¿ â¿ ä;¿ äÖ¿ äø¿ ã¿ ã	¿ ã*¿ ãI¿ ãJ¿ ãw¿ ãx¿ ãÑ¿ ã¶¿ ãÓ¿ ãÔ¿ å=¿ åå¿ å‹¿ ç¿ ç¿ çv¿ çù¿ ç∫¿ ç‡¿ çˇ¿ é ¿ é*¿ é¿ éø¿ é˜¿ é˝¿ é˛¿ è"¿ èY¿ è’¿ ê¿ êY¿ ê∂¿ êº¿ êΩ¿ êÒ¿ ë0¿ ëa¿ ëÆ¿ ë∑¿ í*¿ í_¿ íŒ¿ í‘¿ í’¿ í˛¿ ì0¿ ìå¿ ì⁄¿ ì€¿ î¿ î;¿ îl¿ ît¿ îz¿ î{¿ î…¿ ï¿ ï/¿ ïô¿ ïö¿ ï¬¿ ñ
¿ ñ¿ ñ#¿ ñQ¿ ñ¨¿ ó¿ ó¿ ó¿ óP¿ óÅ¿ ó£¿ ó‹¿ ò!¿ òE¿ òN¿ òÜ¿ ò»¿ òŒ¿ òœ¿ ô!¿ ôp¿ ô∑¿ ö¿ ö¿ ö]¿ ö†¿ öÓ¿ õ;¿ õã¿ õ≤¿ õ≥¿ õŸ¿ õ¸¿ ú)¿ úr¿ ú£¿ ú≈¿ úŒ¿ ù¿ ùR¿ ùX¿ ùY¿ ùü¿ ùÀ¿ û¿ û^¿ ûd¿ ûe¿ ûî¿ ûÿ¿ ü	¿ üG¿ üP¿ ü®¿ †4¿ †:¿ †;¿ †c¿ †õ¿ †˘¿ †˙¿ °H¿ °l¿ °ø¿ °È¿ ¢¿ ¢Y¿ ¢º¿ ¢ﬁ¿ £	¿ £'¿ £C¿ £g¿ £ó¿ £Ω¿ £Â¿ £Ó¿ §T¿ §º¿ •	¿ •+¿ •J¿ •á¿ •ê¿ •‘¿ ¶
¿ ¶¿ ¶¿ ¶=¿ ¶ï¿ ¶º¿ ¶‡¿ ß¿ ßF¿ ßQ¿ ßY¿ ßZ¿ ßÇ¿ ß–¿ ®¿ ®¿ ®_¿ ®Ø¿ © ¿ ©L¿ ©a¿ ©≠¿ ©ﬁ¿ ™¿ ™.¿ ™6¿ ™7¿ ™é¿ ™˜¿ ™˝¿ ™˛¿ ´+¿ ´å¿ ´«¿ ´Õ¿ ´Œ¿ ´¯¿ ¨=¿ ¨u¿ ¨{¿ ¨|¿ ¨©¿ ¨Ò¿ ≠,¿ ≠2¿ ≠3¿ ≠U¿ ≠ã¿ ≠≈¿ ≠Ã¿ ≠–¿ ≠—¿ ≠›¿ Æ¿ Æ@¿ Æv¿ Æ‰¿ ØH¿ Ø™¿ Ø⁄¿ ∞#¿ ∞'¿ ∞)¿ ∞*¿ ∞w¿ ∞{¿ ∞ƒ¿ ∞»¿ ±¿ ±H¿ ±á¿ ±¡¿ ≤ ¿ ≤*¿ ≤8¿ ≤Q¿ ≤u¿ ≤ö¿ ≤æ¿ ≤„¿ ≥¿ ≥6¿ ≥`¿ ≥x¿ ≥y¿ ≥ê¿ ≥º¿ ≥Ù¿ ¥(¿ ¥)¿ ¥d¿ ¥ì¿ ¥î¿ ¥†¿ µ ¿ µ¿ µ¿ µ}¿ µ◊¿ ∂¿ ∂<¿ ∂n¿ ∂£¿ ∑¿ ∑M¿ ∑Ü¿ ∑∫¿ ∑‘¿ ∑’¿ ∑·¿ ∑ˆ¿ ∏¿ ∏¿ ∏=¿ ∏i¿ ∏|¿ ∏Ω¿ ∏÷¿ ∏◊¿ ∏˜¿ πJ¿ πd¿ πê¿ πù¿ πÁ¿ ∫7¿ ∫X¿ ∫^¿ ∫b¿ ∫c¿ ∫o¿ ∫Ç¿ ∫•¿ ∫∫¿ ∫æ¿ ∫ø¿ ∫À¿ ª¿ ª5¿ ªn¿ ª§¿ ª˚¿ º	¿ ºÖ¿ º“¿ ºÌ¿ ºÛ¿ Ω6¿ Ωx¿ Ω¥¿ æ¿ æ>¿ æ]¿ æ¿ æ≠¿ æº¿ ø¿ øY¿ ø§¿ øŒ¿ øÍ¿ ¿¿ ¿"¿ ¿P¿ ¿X¿ ¿^¿ ¿b¿ ¿c¿ ¿©¿ ¿›¿ ¿Î¿ ¡¿ ¡¿ ¡6¿ ¡g¿ ¡Ø¿ ¡“¿ ¡Ó¿ ¡ı¿ ¬^¿ ¬u¿ ¬ö¿ ¬∏¿ ¬¡¿ ¬»¿ ¬…¿ √¿ √<¿ √X¿ √_¿ √“¿ √”¿ ƒ	¿ ƒá¿ ≈¿ ≈¿ ≈-¿ ≈ë¿ ≈˜¿ ∆g¿ ∆h¿ ∆÷¿ «F¿ «G¿ «É¿ «¿¿ «ƒ¿ «≈¿ »¿ »¿ »O¿ »ù¿ »ø¿ »Ì¿ »ı¿ »˝¿ …¿ …¿ …;¿ …e¿ …É¿ …á¿ …à¿ …î¿ …ª¿ …Õ¿ …ı¿  ¿  T¿  ì¿  Ø¿  ﬂ¿ À¿ À¿ À!¿ À>¿ Àl¿ Àï¿ À»¿ ÀÔ¿ Ã ¿ Ã¿ ÃJ¿ Ãe¿ Ãò¿ Ãª¿ ÃÍ¿ Õ¿ Õ¿ Õ(¿ Õ5¿ ÕP¿ Õ{¿ Õ¢¿ Õ“¿ Õı¿ Œ¿ Œ¿ Œ¿ Œ!¿ Œ%¿ Œ&¿ ŒD¿ Œ•¿ Œ©¿ Œ™¿ Œ÷¿ Œˇ¿ œ'¿ œ.¿ œ2¿ œ4¿ œ5¿ œw¿ œ{¿ œø¿ œ√¿ œ¯¿ –I¿ –w¿ –{¿ –è¿ –›¿ —)¿ —q¿ —ô¿ —ù¿ “â¿ “ç¿ “÷¿ “Ê¿ “Í¿ “˛¿ ”L¿ ”õ¿ ”Í¿ ‘$¿ ‘(¿ ‘ç¿ ‘ë¿ ‘⁄¿ ‘Í¿ ‘Ó¿ ’¿ ’O¿ ’†¿ ’Ï¿ ÷$¿ ÷s¿ ÷™¿ ÷Æ¿ ◊¿ ◊¿ ◊^¿ ◊n¿ ◊r¿ ◊Æ¿ ◊≤¿ ◊˘¿ ÿ@¿ ÿá¿ ÿŒ¿ Ÿ¿ ŸG¿ Ÿã¿ ŸÕ¿ Ÿ‹¿ Ÿ‡¿ ⁄ ¿ ⁄f¿ ⁄¶¿ ⁄Á¿ €¿ €`¿ €z¿ €~¿ €ï¿ €ô¿ €≤¿ €∂¿ €Û¿ ‹*¿ ‹h¿ ‹ñ¿ ‹ö¿ ‹·¿ ›¿ ›l¿ ›∂¿ ›˚¿ ﬁ¿ ﬁ
¿ ﬁ¿ ﬁo¿ ﬁπ¿ ﬁΩ¿ ﬁ…¿ ﬂ¿ ﬂB¿ ﬂX¿ ﬂú¿ ﬂ“¿ ﬂﬁ¿ ﬂÊ¿ ﬂÌ¿ ﬂı¿ ‡¿ ‡	¿ ‡M¿ ‡å¿ ‡√¿ ‡«¿ ‡’¿ ‡Ÿ¿ ·)¿ ·M¿ ·ú¿ ·◊¿ ‚(¿ ‚y¿ ‚«¿ „¿ „ ¿ „o¿ „∏¿ „…¿ ‰¿ ‰i¿ ‰∫¿ ‰¯¿ Â@¿ Âá¿ Â‰¿ Ê¿ ÊI¿ Ê\¿ Êj¿ Ê{¿ Êä¿ Ê©¿ Ê–¿ Ê˜¿ Á¿ Á*¿ ÁD¿ ÁX¿ Áu¿ Áì¿ Á©¿ Á√¿ ÁÊ¿ Áˇ¿ Ë;¿ ËX¿ ËÅ¿ Ëú¿ Ë∫¿ ËÁ¿ È¿ È/¿ ÈO¿ Èr¿ È°¿ È—¿ ÈÈ¿ ÈÍ¿ Í0¿ Í{¿ Í√¿ ÍÎ¿ ÍÒ¿ Î>¿ Îå¿ Îí¿ ÎŸ¿ Ï¿ Ïk¿ Ï¥¿ Ï˙¿ Ì ¿ Ì¿ Ì¿ Ì^¿ ÌÉ¿ Ìú¿ Ìù¿ ÌÎ¿ Ó7¿ Óe¿ Ók¿ Ó±¿ Ó ¿ Ó–¿ Ô¿ Ô¿ Ô$¿ Ô*¿ Ôt¿ Ôé¿ Ô≥¿ Ô¥¿ ÔÏ¿ ¿ ¿ =¿ C¿ á¿ »¿ Ò¿ Òa¿ Òî¿ Òö¿ ÒË¿ Ú9¿ Úà¿ Úœ¿ Ú¯¿ Ú˛¿ ÛL¿ Ûú¿ ÛÈ¿ Ù¿ Ù4¿ Ù5¿ ÙÅ¿ Ùá¿ Ù±¿ Ù◊¿ Ùÿ¿ ı&¿ ı,¿ ıó¿ ı€¿ ı‹¿ ˆ7¿ ˆ=¿ ˆß¿ ˆÎ¿ ˆÏ¿ ˜5¿ ˜;¿ ˜Ö¿ ˜Õ¿ ˜”¿ ¯¿ ¯¿ ¯M¿ ¯¿ ¯Æ¿ ¯Ø¿ ¯˘¿ ˘E¿ ˘o¿ ˘u¿ ˘ë¿ ˘ó¿ ˘ﬁ¿ ˘‰¿ ˙)¿ ˙@¿ ˙F¿ ˙\¿ ˙å¿ ˙Õ¿ ˚¿ ˚(¿ ˚.¿ ˚Ä¿ ˚í¿ ˚™¿ ˚´¿ ¸¿ ¸+¿ ¸,¿ ¸v¿ ¸ª¿ ¸Â¿ ¸Î¿ ˝¿ ˝¿ ˝W¿ ˝]¿ ˝•¿ ˝º¿ ˝¬¿ ˝ÿ¿ ˛¿ ˛L¿ ˛ö¿ ˛™¿ ˛∞¿ ˇ¿ ˇ¿ ˇ3¿ ˇ4¿ ˇé¿ ˇ∫¿ ˇª¿ ¿ ¿ f¿ †¿ ¡¿ ¬¿¿¿W¿w¿x¿¿¿∆¿¿5¿;¿ã¿°¿∆¿«¿ı¿˚¿J¿ò¿Œ¿‘¿$¿u¿¡¿Ë¿Ó¿6¿É¿±¿∑¿¿M¿b¿h¿¥¿ˇ¿K¿k¿q¿Å¿á¿’¿¿R¿o¿p¿π¿	¿	T¿	Z¿	¢¿	Û¿
?¿
E¿
]¿
Ö¿
Ü¿
œ¿
’¿"¿k¿q¿µ¿÷¿Ï¿Ì¿0¿c¿d¿Æ¿º¿¬¿¿S¿°¿Î¿¿I¿n¿o¿≥¿¬¿»¿˜¿!¿"¿d¿x¿~¿≠¿⁄¿€¿!¿'¿r¿•¿´¿¯¿I¿O¿_¿e¿≤¿ƒ¿„¿‰¿1¿S¿Y¿¶¿Í¿¿0¿6¿L¿ú¿Õ¿”¿!¿3¿9¿O¿ü¿Í¿7¿à¿œ¿·¿Á¿5¿G¿M¿ö¿Â¿5¿Ö¿ø¿≈¿¿^¿¢¿®¿ı¿<¿n¿ã¿ﬂ¿˜¿¿@¿T¿•¿Æ¿∆¿1¿ì¿Ê¿Ô¿ ¿c¿ª¿Ë¿/¿8¿I¿©¿¿e¿∆¿#¿}¿™¿≥¿Í¿Ú¿ˆ¿˜¿ D¿ f¿ l¿ Ω¿!¿!¿!K¿!Q¿!a¿!g¿!∞¿!˚¿"¿"K¿"h¿"•¿"©¿"™¿"˜¿#'¿#-¿#p¿#v¿#¿¿$
¿$X¿$j¿$p¿$Ω¿%¿%Q¿%Ä¿%Ü¿%—¿& ¿&o¿&π¿&À¿'¿'Å¿'†¿'÷¿'Ï¿(G¿(R¿(l¿(–¿)%¿)0¿)C¿)®¿*¿*1¿*z¿*Ö¿*ò¿*˙¿+Z¿+∫¿,$¿,/¿,h¿,r¿,ù¿,°¿,¢¿,¿,˛¿-¿-Q¿-ü¿-Ï¿.=¿.R¿.X¿.ò¿.û¿.Æ¿.¥¿/¿/J¿/û¿/∆¿/„¿0¿0f¿0ë¿0û¿0ˆ¿1!¿1'¿1+¿1,¿18¿1j¿1l¿1m¿1â¿1ç¿1Ÿ¿2¿2_¿2k¿2†¿2°¿2≠¿2ˆ¿30¿3q¿3u¿3v¿3Ü¿3á¿3·¿4>¿4?¿4}¿4¨¿4Í¿5¿5Z¿5è¿5€¿6&¿6'¿6C¿6t¿6z¿6√¿6ˆ¿74¿7u¿7v¿7•¿7´¿7ª¿7¡¿8¿8"¿8R¿8S¿8Ö¿8ã¿8õ¿8°¿8Ò¿9¿9>¿9?¿9m¿9ò¿9¨¿9‘¿9ﬁ¿:¿:¿:¿:¿:H¿:v¿:ä¿:µ¿:ø¿:¿:ˆ¿:˙¿:˚¿;¿;$¿;u¿;ß¿;≠¿;˚¿<K¿<Y¿<_¿<ß¿<æ¿<ƒ¿=¿=+¿=q¿=ú¿=¡¿=≈¿=∆¿=Ú¿=¯¿>L¿>á¿>ç¿>€¿?+¿?9¿??¿?á¿?û¿?§¿?ı¿@¿@N¿@v¿@û¿@¢¿@£¿@‹¿A
¿A)¿A*¿A<¿A÷¿B¿B¿B¿Bl¿B∫¿B“¿Bÿ¿C'¿Ct¿C√¿C—¿C◊¿D(¿D.¿Di¿D§¿D˘¿E;¿Eq¿Ew¿E¿¿E‡¿EÊ¿E¸¿FM¿FS¿F≥¿F≈¿FÀ¿F€¿F·¿G3¿GB¿Gm¿G®¿G¨¿H
¿HV¿Hé¿H¨¿H‹¿I¿I¿IW¿I•¿IÙ¿JD¿Jc¿J±¿J⁄¿JÂ¿K¿K4¿K=¿Kñ¿Kù¿KØ¿K’¿K›¿KÙ¿K¯¿K˘¿L6¿LL¿Lr¿Lô¿LØ¿L”¿Lﬂ¿M¿M,¿M;¿Ma¿Mw¿M°¿MÚ¿M˛¿N¿N1¿NU¿Nd¿Nj¿Nn¿No¿N∏¿O¿O0¿O6¿Oá¿O’¿O€¿OÎ¿OÒ¿PC¿PR¿PÜ¿P¡¿P≈¿Q#¿Q?¿Q@¿Që¿Q÷¿R&¿Ri¿R∂¿R‹¿S¿SG¿SU¿Sy¿SÃ¿T¿T`¿Tí¿Tõ¿T‹¿TÍ¿T¿TÒ¿U¿U¿Un¿Ué¿U∞¿UŒ¿UÈ¿V¿V¿V¿V[¿V¨¿V„¿VÈ¿W/¿W5¿WE¿WK¿Wù¿W¨¿Wﬁ¿X¿X¿Xw¿Xì¿Xî¿XÂ¿Y*¿Yz¿YΩ¿Z
¿Z0¿Zd¿Zõ¿Z©¿ZÕ¿[ ¿[g¿[¥¿[Ê¿[Ô¿\.¿\<¿\B¿\C¿\õ¿\©¿\Á¿]:¿]e¿]ç¿]Ø¿]º¿]˚¿^¿^8¿^^¿^h¿^n¿^å¿^ß¿^´¿^¨¿^˘¿_.¿_¿_Ä¿_Õ¿_Ë¿`k¿`ö¿`™¿`´¿`ﬁ¿`Ú¿a"¿a,¿a2¿a6¿a7¿aP¿aQ¿a™¿aﬂ¿bB¿bC¿bñ¿b∑¿cR¿cá¿có¿cò¿c◊¿cÎ¿d'¿d1¿d7¿d;¿d<¿d]¿d^¿d£¿dÔ¿e¿eX¿eô¿e—¿e“¿e˛¿fC¿fò¿fÍ¿g¿gÖ¿gª¿h¿hZ¿hè¿h⁄¿i ¿ii¿iy¿i¢¿i‹¿j¿j¿jv¿jÇ¿jº¿k¿k¿k5¿k=¿k>¿ks¿kî¿k‹¿l¿lM¿ls¿l†¿l˛¿m¿m¿m+¿m6¿mD¿mv¿m¿mÖ¿mâ¿mä¿mÆ¿m’¿n¿n3¿n;¿nM¿né¿nΩ¿n…¿nﬁ¿nÍ¿n¿nÙ¿nı¿o/¿o5¿oÜ¿où¿o¡¿oË¿oÌ¿oÒ¿oÚ¿p/¿p5¿pÜ¿p†¿pÀ¿pˆ¿p¸¿q ¿q¿q)¿qc¿qg¿qh¿q£¿qæ¿q◊¿r¿r)¿r@¿rX¿rp¿rë¿rß¿rŸ¿r‡¿r¿sG¿sc¿sÆ¿sÔ¿tK¿tV¿t^¿tq¿t{¿t|¿tØ¿u¿uB¿uC¿ub¿uÅ¿u®¿u√¿uÏ¿u¸¿v¿v?¿vr¿vï¿vñ¿v¬¿v÷¿v˙¿w¿w¿wJ¿w{¿wÉ¿wü¿w•¿w¶¿wÿ¿wÂ¿x¿xm¿xñ¿x¢¿xÆ¿xØ¿x—¿x˝¿y¿y5¿yR¿yZ¿y`¿ya¿yâ¿y§¿y‘¿z¿z¿zD¿zV¿z`¿zù¿zΩ¿z∆¿zﬁ¿{¿{2¿{j¿{x¿{Ç¿{ã¿{°¿{æ¿{ﬁ¿|¿|7¿|A¿|J¿|b¿|Ñ¿|¨¿|»¿|‹¿|˛¿}¿}%¿}&¿}=¿}y¿}z¿}´¿}æ¿}œ¿}„¿}˙¿~¿~g¿~|¿~É¿~á¿~à¿~÷¿¿¿o¿É¿â¿ ¿Ä¿Ä,¿Ä2¿Ä}¿ÄÃ¿Ä¿Äˆ¿ÅI¿Åè¿Å‹¿Å‚¿Ç2¿ÇÄ¿Ç¥¿Ç∫¿É	¿ÉW¿Éç¿Éì¿É„¿Ñ4¿ÑÄ¿Ñß¿Ñ≠¿Ñ√¿Ö¿ÖW¿Öá¿Öç¿Ö¿Ü¿Ü¿Ü¿Üg¿Ü{¿Ü«¿á¿á$¿áu¿áœ¿à¿à%¿àA¿àX¿àp¿àà¿à©¿àø¿à˜¿à˛¿â¿â6¿âR¿âù¿âﬁ¿ä:¿äE¿äM¿ä`¿äj¿äò¿äô¿äπ¿ã?¿ãQ¿ãÉ¿ãî¿ã£¿ãÃ¿ãˆ¿å¿å*¿åN¿åp¿åê¿å·¿åÍ¿åÚ¿ç9¿ç=¿ç>¿ç^¿çû¿ç·¿é(¿ég¿éh¿éÆ¿éØ¿é¿è¿è}¿è~¿èø¿ê¿êB¿ê`¿ê¶¿ê‚¿ë¿ë%¿ë)¿ë*¿ë[¿ëà¿ë»¿ëÃ¿ëÕ¿í¿ír¿í∆¿íÌ¿ìc¿ìû¿îi¿î‰¿îÍ¿îÎ¿î˝¿ï=¿ïp¿ïx¿ïy¿ï◊¿ñ4¿ñI¿ññ¿ñö¿ñõ¿ñÃ¿ñÕ¿ó¿ój¿óî¿ó≥¿ò¿ò_¿òà¿òï¿òÀ¿òÓ¿ò˜¿ò˝¿ô¿ô¿ô¿ô¿ôF¿ôG¿ôn¿ô¢¿ô¶¿ôß¿ô≥¿ô»¿ôﬂ¿ö5¿öß¿õ¿õd¿õ£¿õ∂¿õ»¿õ¯¿õˇ¿ú ¿úE¿úq¿úÑ¿úã¿úè¿úê¿úú¿ú…¿úÔ¿ùb¿ùª¿û/¿û5¿ûé¿û˝¿ü¿ü:¿üL¿üÆ¿üË¿†¿†[¿†ï¿†§¿†ª¿†Ù¿°Q¿°å¿°õ¿°©¿°≥¿°»¿°‘¿°¸¿¢ ¿¢p¿¢ú¿¢´¿¢”¿¢€¿¢·¿¢Â¿¢Ê¿¢Ú¿£¿£d¿£õ¿£¸¿§L¿§r¿§–¿§˝¿•¿•H¿•{¿•§¿••¿•Ù¿¶2¿¶Ç¿¶Ã¿ß¿ßB¿ßk¿ßï¿ßµ¿ß€¿®¿®"¿®_¿®`¿®à¿®´¿®Ø¿®∞¿®º¿®œ¿©¿©B¿©`¿©{¿©|¿©ù¿©–¿™	¿™4¿™I¿™M¿™N¿™d¿™Å¿™î¿™™¿™œ¿™Û¿´¿´@¿´d¿´ê¿´ó¿´◊¿´¸¿¨¿¨F¿¨o¿¨v¿¨ë¿¨…¿¨ ¿≠¿≠,¿≠u¿≠~¿≠Ñ¿≠Ö¿≠û¿≠≤¿≠ƒ¿≠€¿Æ¿Æ¿Æ&¿Æ,¿Æ0¿Æ1¿ÆÄ¿Æ§¿Æ¿¿Æ’¿ÆÁ¿Ø¿Ø¿ØI¿Ø}¿Ø∫¿ØÈ¿∞¿∞f¿∞ñ¿∞∫¿∞≈¿∞Ê¿±*¿±i¿±ä¿± ¿±Ó¿±˜¿±˝¿≤¿≤¿≤N¿≤o¿≤à¿≤ù¿≤Ø¿≤…¿≤‰¿≥¿≥A¿≥~¿≥≠¿≥‚¿¥'¿¥T¿¥u¿¥Ä¿¥û¿¥‚¿µ!¿µB¿µÇ¿µ¶¿µØ¿µµ¿µπ¿µ∫¿µŸ¿∂¿∂¿∂H¿∂N¿∂|¿∂Ø¿∂ ¿∑¿∑!¿∑'¿∑9¿∑W¿∑í¿∑ö¿∑û¿∑ü¿∑´¿∑“¿∏ ¿∏2¿∏p¿∏£¿∏Á¿∏Ë¿π7¿πt¿πï¿π÷¿∫¿∫N¿∫å¿∫≈¿∫Ÿ¿ª!¿ªk¿ªz¿ªø¿º¿ºQ¿ºg¿ºÆ¿ºº¿º∆¿º’¿º˜¿Ω¿Ω¿Ω$¿Ω%¿ΩW¿Ωj¿Ωz¿Ω´¿Ω“¿æ¿æ-¿æ6¿æP¿æp¿æü¿æ¿¿ø)¿ø]¿ød¿ø~¿øì¿ø•¿øª¿øŸ¿ø˚¿¿¿¿'¿¿H¿¿h¿¿ä¿¿≠¿¿∂¿¿º¿¿Ω¿¿ﬁ¿¡-¿¡ï¿¡€¿¡¿¬¿¬¿¬_¿¬ë¿¬ø¿¬‚¿¬Ô¿¬˙¿√¿√:¿√[¿√~¿√°¿√™¿√∞¿√±¿√÷¿√Ò¿ƒA¿ƒÜ¿ƒ–¿ƒÌ¿ƒ˘¿≈1¿≈Ñ¿≈¿¿≈«¿≈»¿∆¿∆6¿∆a¿∆}¿∆¢¿∆Î¿∆ˆ¿∆ˇ¿«¿«&¿«5¿«X¿«z¿«ö¿«Ω¿«ı¿«˛¿»¿»¿».¿»T¿»©¿»’¿»¯¿…B¿…{¿…|¿…ë¿…£¿…»¿…Ë¿ 
¿ *¿ M¿ ∏¿ ˜¿À ¿À¿À¿À'¿Àv¿Àó¿ÀÈ¿Ã¿Ã8¿ÃÇ¿Ã∏¿Ãπ¿ÃŒ¿Ã‡¿Õ¿Õ"¿ÕD¿Õd¿Õá¿ÕÚ¿Œ1¿Œ:¿Œ@¿ŒA¿Œr¿Œ°¿ŒÕ¿œ ¿œå¿œ≈¿œ∆¿œ€¿œÌ¿–¿–>¿–`¿–ë¿–¥¿–◊¿—¿—¿—%¿—&¿—X¿—m¿—¿—í¿—∑¿—”¿“¿“$¿“1¿“L¿“d¿“à¿“®¿“„¿”¿”9¿”W¿”ñ¿””¿”Ê¿”˜¿‘¿‘¿‘¿‘F¿‘h¿‘à¿‘´¿‘Ï¿’+¿’4¿’:¿’;¿’i¿’~¿’ê¿’¥¿’ﬂ¿÷¿÷!¿÷D¿÷h¿÷ß¿÷∞¿÷∂¿÷∑¿÷ ¿÷⁄¿◊¿◊@¿◊z¿◊ß¿◊Ì¿ÿ¿ÿ"¿ÿL¿ÿk¿ÿâ¿ÿ©¿ÿ ¿ÿ—¿ÿ“¿ÿÙ¿Ÿ¿Ÿ4¿ŸK¿Ÿ_¿Ÿz¿Ÿ®¿Ÿ–¿⁄1¿⁄Y¿⁄f¿⁄â¿⁄≠¿⁄œ¿⁄Ù¿€¿€$¿€3¿€V¿€y¿€ö¿€Ω¿€Ã¿€“¿€”¿€ı¿‹"¿‹R¿‹_¿‹è¿‹º¿‹¬¿‹√¿›¿›I¿›ó¿›û¿›ü¿›È¿ﬁ ¿ﬁg¿ﬁ≈¿ﬁÃ¿ﬁÕ¿ﬁ¸¿ﬂD¿ﬂE¿ﬂ`¿ﬂ|¿ﬂß¿ﬂ–¿ﬂÈ¿‡7¿‡π¿‡‰¿·¿·5¿·|¿·¢¿·“¿‚'¿‚ç¿‚‡¿„¿„s¿„°¿„Ÿ¿‰)¿‰W¿‰h¿‰ä¿‰ô¿‰ß¿‰≤¿‰ª¿‰¬¿‰∆¿‰»¿‰…¿Â¿Â	¿ÂM¿Âr¿Â©¿Ê¿Ê¿Ê<¿Ê=¿Êé¿Êª¿Êº¿Á¿Á8¿Á9¿Áâ¿Á®¿Á™¿Á´¿Á˜¿ËG¿Ëò¿ËÈ¿È¿È!¿Èl¿È∂¿Í¿Í¿Í!¿Ín¿Íª¿Î¿ÎV¿Îé¿Îí¿Î“¿Ï¿Ï6¿ÏZ¿Ïv¿Ï†¿Ï ¿ÏÈ¿ÏÍ¿Ì"¿Ì(¿ÌV¿Ìt¿Ìu¿Ì≠¿Ì¬¿Ì√¿Ìœ¿ÌÓ¿Ó¿ÓJ¿ÓK¿Óh¿Óx¿Ó~¿Ó¿Óì¿Ó£¿Ó©¿Ó™¿Óˆ¿Ô5¿Ôl¿Ôp¿Ôq¿Ô}¿Ôì¿Ô”¿Ô◊¿ÔŸ¿Ô⁄¿¿-¿;¿b¿~¿õ¿∫¿’¿Ù¿Ò¿Ò"¿Ò2¿ÒI¿Ò_¿Òs¿Òã¿Òå¿Ò˛¿Ú¿Ú8¿Ú[¿Ú|¿Úõ¿Ú∂¿Ú÷¿ÚÒ¿Û¿Û)¿ÛN¿ÛO¿Û[¿Û•¿Ûß¿Û®¿ÛÓ¿Ù4¿Ù5¿ÙA¿ÙV¿Ùm¿Ùù¿Ù©¿ÙÏ¿ı7¿ı>¿ıÖ¿ıâ¿ıä¿ıñ¿ı©¿ı«¿ı‹¿ı‡¿ı·¿ıÌ¿ˆ&¿ˆL¿ˆï¿ˆô¿ˆö¿ˆ´¿ˆ€¿˜¿˜#¿˜'¿˜(¿˜\¿˜°¿˜≈¿˜…¿˜ ¿¯¿¯\¿¯ç¿¯µ¿¯›¿¯‰¿¯Ë¿¯È¿˘¿˘M¿˘o¿˘u¿˘y¿˘z¿˘ø¿˘˝¿˙6¿˙t¿˙„¿˚¿˚7¿˚ç¿˚ó¿˚§¿˚ﬂ¿¸	¿¸¿¸\¿¸º¿¸À¿¸—¿¸„¿¸Á¿¸Ë¿˝¿˝.¿˝E¿˝]¿˝¢¿˝…¿˝Â¿˝Ó¿˝ı¿˝˘¿˝˙¿˛¿˛-¿˛I¿˛v¿˛≠¿˛√¿˛˜¿ˇK¿ˇc¿ˇn¿ˇw¿ˇñ¿ˇ´¿ˇÊ¿ ¿ 8¿ ]¿ Ö¿ ®¿ €¿¿!¿N¿y¿Ñ¿ç¿î¿ò¿ô¿õ¿ú¿⁄¿ﬁ¿+¿/¿z¿º¿ÿ¿>¿i¿ä¿¶¿æ¿ÿ¿˜¿*¿+¿N¿P¿Q¿Ä¿ô¿ß¿ƒ¿Ë¿¿%¿K¿L¿d¿ò¿ô¿•¿€¿¿¿    Ä•  Ä∫  Ä‘ÄÎ Ä ÅÅÅ  Å= ÅdÅzÅ|  Å§  Åª  Å—  ÅÌ  Ç	  Ç  Ç5  ÇJ  Ça  Çw  Çô  Çø  ÇÓ  É  É  É>    á íiç7Ü0/// Manages [SnackBar]s and [MaterialBanner]s for descendant [Scaffold]s.
///
/// This class provides APIs for showing snack bars and material banners at the
/// bottom and top of the screen, respectively.
///
/// To display one of these notifications, obtain the [ScaffoldMessengerState]
/// for the current [BuildContext] via [ScaffoldMessenger.of] and use the
/// [ScaffoldMessengerState.showSnackBar] or the
/// [ScaffoldMessengerState.showMaterialBanner] functions.
///
/// When the [ScaffoldMessenger] has nested [Scaffold] descendants, the
/// ScaffoldMessenger will only present the notification to the root Scaffold of
/// the subtree of Scaffolds. In order to show notifications for the inner, nested
/// Scaffolds, set a new scope by instantiating a new ScaffoldMessenger in
/// between the levels of nesting.
///
/// {@tool dartpad}
/// Here is an example of showing a [SnackBar] when the user presses a button.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [SnackBar], which is a temporary notification typically shown near the
///    bottom of the app using the [ScaffoldMessengerState.showSnackBar] method.
///  * [MaterialBanner], which is a temporary notification typically shown at the
///    top of the app using the [ScaffoldMessengerState.showMaterialBanner] method.
///  * [debugCheckHasScaffoldMessenger], which asserts that the given context
///    has a [ScaffoldMessenger] ancestor.
///  * Cookbook: [Display a SnackBar](https://flutter.dev/docs/cookbook/design/snackbars) çdÄ¬ ç∂ç«I/// Creates a widget that manages [SnackBar]s for [Scaffold] descendants.çŒç‘  ç‹çÎ  ç¯ç˛ééçˇéééé$ééé!é*yéû`/// The widget below this widget in the tree.
///
/// {@macro flutter.widgets.ProxyWidget.child}  é®á˘ïîÜÖ/// The state from the closest instance of this class that encloses the given
/// context.
///
/// {@tool dartpad}
/// Typical usage of the [ScaffoldMessenger.of] function is to call it in
/// response to a user gesture or an application state change.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger.of.0.dart **
/// {@end-tool}
///
/// A less elegant but more expedient solution is to assign a [GlobalKey] to the
/// [ScaffoldMessenger], then use the `key.currentState` property to obtain the
/// [ScaffoldMessengerState] rather than using the [ScaffoldMessenger.of]
/// function. The [MaterialApp.scaffoldMessengerKey] refers to the root
/// ScaffoldMessenger that is provided by default.
///
/// {@tool dartpad}
/// Sometimes [SnackBar]s are produced by code that doesn't have ready access
/// to a valid [BuildContext]. One such example of this is when you show a
/// SnackBar from a method outside of the `build` function. In these
/// cases, you can assign a [GlobalKey] to the [ScaffoldMessenger]. This
/// example shows a key being used to obtain the [ScaffoldMessengerState]
/// provided by the [MaterialApp].
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger.of.1.dart **
/// {@end-tool}
///
/// If there is no [ScaffoldMessenger] in scope, then this will assert in
/// debug mode, and throw an exception in release mode.
///
/// See also:
///
///  * [maybeOf], which is a similar function but will return null instead of
///    throwing if there is no [ScaffoldMessenger] ancestor.
///  * [debugCheckHasScaffoldMessenger], which asserts that the given context
///    has a [ScaffoldMessenger] ancestor. ïóï•   ñ•Çqò8Åa/// The state from the closest instance of this class that encloses the given
/// context, if any.
///
/// Will return null if a [ScaffoldMessenger] is not found in the given context.
///
/// See also:
///
///  * [of], which is a similar function, except that it will throw an
///    exception if a [ScaffoldMessenger] is not found in the given context. ò@òN   ôMô=   ôô ôk∂⁄õÅõ/// State for a [ScaffoldMessenger].
///
/// A [ScaffoldMessengerState] object can be used to [showSnackBar] or
/// [showMaterialBanner] for every registered [Scaffold] that is a descendant of
/// the associated [ScaffoldMessenger]. Scaffolds will register to receive
/// [SnackBar]s and [MaterialBanner]s from their closest ScaffoldMessenger
/// ancestor.
///
/// Typically obtained via [ScaffoldMessenger.of].  õgNõä õóõ§õ≤õ•õ≥õ¥õπÄ¥ú 
úú$újú%ú>úiú?úOúkúlúq.úÜ  ú£ÄñúÍ 
ú˜ú¸ù6ú˝ùù5ùù!ù7ù8ù=(ùR  ùiùp  ùÇùà   ù¢Ç¬ù≥   ù¢ù£†hÅ†m  †w†Ü   °ÖÄ¨°ä  °ñ°•   ¢5Äœ¢:    £†Ä¬£•  £≠£º   §yàp®πÉŸ/// Shows  a [SnackBar] across all registered [Scaffold]s.
///
/// A scaffold can show at most one snack bar at a time. If this function is
/// called while another snack bar is already visible, the given snack bar
/// will be added to a queue and displayed after the earlier snack bars have
/// closed.
///
/// To control how long a [SnackBar] remains visible, use [SnackBar.duration].
///
/// To remove the [SnackBar] with an exit animation, use [hideCurrentSnackBar]
/// or call [ScaffoldFeatureController.close] on the returned
/// [ScaffoldFeatureController]. To remove a [SnackBar] suddenly (without an
/// animation), use [removeCurrentSnackBar].
///
/// See [ScaffoldMessenger.of] for information about how to obtain the
/// [ScaffoldMessengerState].
///
/// {@tool dartpad}
/// Here is an example of showing a [SnackBar] when the user presses a button.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger_state.show_snack_bar.0.dart **
/// {@end-tool} ®∆®–   ¨ÌÇ∆¨Ú  ≠≠    Ø∑Ç’∞æÄ˜/// Removes the current [SnackBar] (if any) immediately from registered
/// [Scaffold]s.
///
/// The removed snack bar does not run its normal exit animation. If there are
/// any queued snack bars, they begin their entrance animation immediately. ∞÷9∞Ï  ∞Ù±±	≤êÉ+≥,Äê/// Removes the current [SnackBar] by running its normal exit animation.
///
/// The closed completer is called after the animation is complete. ≥B7≥X  ≥`≥t≥uµøÅÀ∂NÄÖ/// Removes all the snackBars currently in queue by clearing the queue
/// and running normal exit animation on the current snackBar.   ∑®à·ªﬁÉ«/// Shows a [MaterialBanner] across all registered [Scaffold]s.
///
/// A scaffold can show at most one material banner at a time. If this function is
/// called while another material banner is already visible, the given material banner
/// will be added to a queue and displayed after the earlier material banners have
/// closed.
///
/// To remove the [MaterialBanner] with an exit animation, use [hideCurrentMaterialBanner]
/// or call [ScaffoldFeatureController.close] on the returned
/// [ScaffoldFeatureController]. To remove a [MaterialBanner] suddenly (without an
/// animation), use [removeCurrentMaterialBanner].
///
/// See [ScaffoldMessenger.of] for information about how to obtain the
/// [ScaffoldMessengerState].
///
/// {@tool dartpad}
/// Here is an example of showing a [MaterialBanner] when the user presses a button.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger_state.show_material_banner.0.dart **
/// {@end-tool} ªÒº   ¿ @çÇG¿ @í  ¿ @µ¿ @∆   ¿ BÿÇŸ¿ CÒÅ	/// Removes the current [MaterialBanner] (if any) immediately from registered
/// [Scaffold]s.
///
/// The removed material banner does not run its normal exit animation. If there are
/// any queued material banners, they begin their entrance animation immediately. ¿ DE¿ D+  ¿ D3¿ DM¿ DN¿ EµÉ.¿ FWÄñ/// Removes the current [MaterialBanner] by running its normal exit animation.
///
/// The closed completer is called after the animation is complete. ¿ FsC¿ Fè  ¿ Fó¿ F±¿ F≤¿ HÁÇ¿ IÇÄë/// Removes all the materialBanners currently in queue by clearing the queue
/// and running normal exit animation on the current materialBanner.   ¿ KÑ©¿ K  ¿ K¿ K+  ¿ K¿ K¿ O±Äí¿ O¬   ¿ O±¿ O≤ ¿ PGÅ÷¿ PM  ¿ PÅÄ‚ ¿ Pá¿ Pû ¿ P•¿ P´  ¿ P≥¿ Pƒ  ¿ PŒ6¿ PÔ  ¿ Q%¿ Q¿ Q'¿ QE¿ QJ¿ Qa¿ QN¿ QK¿ QP¿ QZ¿ QU¿ Q\¿ Qg4¿ QÑ   ¿ Q†{¿ Q±  ¿ Qƒ¿ Q›  ¿ Q†¿ Q° ¿ Ríf¿ SﬂÅÆ/// The geometry of the [Scaffold] after all its contents have been laid out
/// except the [FloatingActionButton].
///
/// The [Scaffold] passes this pre-layout geometry to its
/// [FloatingActionButtonLocation], which produces an [Offset] that the
/// [Scaffold] uses to position the [FloatingActionButton].
///
/// For a description of the [Scaffold]'s geometry after it has
/// finished laying out, see the [ScaffoldGeometry]. ¿ S˝Ç ¿ Tú¿ TµÄî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.
¿ Tº¿ TÀ  ¿ Tﬂ¿ TÓ  ¿ U ¿ U  ¿ U&¿ U-  ¿ UJ¿ UY  ¿ Ug¿ Uv  ¿ Uâ¿ Uò  ¿ U©¿ U∏  ¿ U… ¿ Uÿ  ¿ UÔ¿ U˛   
¿ VÄ™¿ VßÄÄ/// The [Size] of [Scaffold.floatingActionButton].
///
/// If [Scaffold.floatingActionButton] is null, this will be [Size.zero]. ¿ VƒÄ∂¿ WkÄì/// The [Size] of the [Scaffold]'s [BottomSheet].
///
/// If the [Scaffold] is not currently showing a [BottomSheet],
/// this will be [Size.zero]. ¿ WÇÄ¿ YÚÇM/// The vertical distance from the Scaffold's origin to the bottom of
/// [Scaffold.body].
///
/// This is useful in a [FloatingActionButtonLocation] designed to
/// place the [FloatingActionButton] at the bottom of the screen, while
/// keeping it above the [BottomSheet], the [Scaffold.bottomNavigationBar],
/// or the keyboard.
///
/// The [Scaffold.body] is laid out with respect to [minInsets] already. This
/// means that a [FloatingActionButtonLocation] does not need to factor in
/// [EdgeInsets.bottom] of [minInsets] when aligning a [FloatingActionButton]
/// to [contentBottom]. ¿ ZÇ<¿ \6Ç/// The vertical distance from the [Scaffold]'s origin to the top of
/// [Scaffold.body].
///
/// This is useful in a [FloatingActionButtonLocation] designed to
/// place the [FloatingActionButton] at the top of the screen, while
/// keeping it below the [Scaffold.appBar].
///
/// The [Scaffold.body] is laid out with respect to [minInsets] already. This
/// means that a [FloatingActionButtonLocation] does not need to factor in
/// [EdgeInsets.top] of [minInsets] when aligning a [FloatingActionButton] to
/// [contentTop]. ¿ \EÅÈ¿ ^%Å∫/// The minimum padding to inset the [FloatingActionButton] by for it
/// to remain visible.
///
/// This value is the result of calling [MediaQueryData.padding] in the
/// [Scaffold]'s [BuildContext],
/// and is useful for insetting the [FloatingActionButton] to avoid features like
/// the system status bar or the keyboard.
///
/// If [Scaffold.resizeToAvoidBottomInset] is set to false,
/// [EdgeInsets.bottom] of [minInsets] will be 0.0. ¿ ^3ÅÁ¿ `Å∑/// The minimum padding to inset interactive elements to be within a safe,
/// un-obscured space.
///
/// This value reflects the [MediaQueryData.viewPadding] of the [Scaffold]'s
/// [BuildContext] when [Scaffold.resizeToAvoidBottomInset] is false or and
/// the [MediaQueryData.viewInsets] > 0.0. This helps distinguish between
/// different types of obstructions on the screen, such as software keyboards
/// and physical device notches. ¿ `Ç©¿ bºÇw/// The [Size] of the whole [Scaffold].
///
/// If the [Size] of the [Scaffold]'s contents is modified by values such as
/// [Scaffold.resizeToAvoidBottomInset] or the keyboard opening, then the
/// [scaffoldSize] will not reflect those changes.
///
/// This means that [FloatingActionButtonLocation]s designed to reposition
/// the [FloatingActionButton] based on events such as the keyboard popping
/// up should use [minInsets] to make sure that the [FloatingActionButton] is
/// inset by enough to remain visible.
///
/// See [minInsets] and [MediaQueryData.padding] for more information on the
/// appropriate insets to apply. ¿ bÕÄù¿ c^/// The [Size] of the [Scaffold]'s [SnackBar].
///
/// If the [Scaffold] is not showing a [SnackBar], this will be [Size.zero]. ¿ coÄØ¿ dÄã/// The [Size] of the [Scaffold]'s [MaterialBanner].
///
/// If the [Scaffold] is not showing a [MaterialBanner], this will be [Size.zero]. ¿ d#_¿ du;/// The [TextDirection] of the [Scaffold]'s [BuildContext].   ¿ SŒ¿ Sœ¿ dáÉ›¿ eíÄ˘/// A snapshot of a transition between two [FloatingActionButtonLocation]s.
///
/// [ScaffoldState] uses this to seamlessly change transition animations
/// when a running [FloatingActionButtonLocation] transition is interrupted by a new transition. ¿ e€Y ¿ e·¿ eˇ ¿ f 
¿ f  ¿ f¿ f  ¿ f¿ f  ¿ f%¿ f+   ¿ f8(¿ f[  ¿ fd&¿ fá  ¿ fé+¿ f±  ¿ fΩ¿ f    ¿ f◊ÄÍ¿ fÍ  ¿ fÙ*¿ g  ¿ f◊¿ fÿ¿ g≈Äù¿ gÿ   ¿ g≈¿ g∆¿ eÅ¿ eÇ¿ hfà≠¿ k!Ç©/// Geometry information for [Scaffold] components after layout is finished.
///
/// To get a [ValueNotifier] for the scaffold geometry of a given
/// [BuildContext], use [Scaffold.geometryOf].
///
/// The ScaffoldGeometry is only available during the paint phase, because
/// its value is computed during the animation and layout phases prior to painting.
///
/// For an example of using the [ScaffoldGeometry], see the [BottomAppBar],
/// which uses the [ScaffoldGeometry] to paint a notch around the
/// [FloatingActionButton].
///
/// For information about the [Scaffold]'s geometry that is used while laying
/// out the [FloatingActionButton], see [ScaffoldPrelayoutGeometry]. ¿ k6Ä¶ ¿ kÄ¿ kêA/// Create an object that describes the geometry of a [Scaffold].¿ kó¿ kù  ¿ k∏¿ kæ   ¿ k‡Äˆ¿ l¿Ä…/// The distance from the [Scaffold]'s top edge to the top edge of the
/// rectangle in which the [Scaffold.bottomNavigationBar] bar is laid out.
///
/// Null if [Scaffold.bottomNavigationBar] is null. ¿ l€ÄÆ¿ mqÄÉ/// The [Scaffold.floatingActionButton]'s bounding rectangle.
///
/// This is null when there is no floating action button showing.  ¿ méÅœ¿ mü  ¿ m∫¿ m¬   ¿ oaÅ∞¿ o‡i/// Creates a copy of this [ScaffoldGeometry] but with the given fields replaced with
/// the new values. ¿ oÔ¿ o¯  ¿ p¿ p   ¿ k¿ k¿ qÖ)¿ q  ¿ q}V ¿ q}¿ qñ ¿ qó¿ qù  ¿ q¶¿ q¨  ¿ q∫¿ q¡¿ q—¿ q ¿ q¬¿ qÕ¿ q◊¿ qÍ  ¿ qı!¿ q˝  ¿ r¿ r+  ¿ r8Çb¿ rY   ¿ r8¿ r9¿ tûÅû¿ t£  ¿ tµ¿ tæ  ¿ tŸ¿ t‡  ¿ t˝!¿ u    ¿ xçÖÎ¿ xì  ¿ x¬Çe ¿ x»¿ x€ ¿ x‚¿ xÍ  ¿ x˝!¿ y  ¿ y$¿ y,  ¿ y@"¿ yH  ¿ yh!¿ yw  ¿ yè¿ yû  ¿ yØ"¿ yæ  ;¿ xÙ¿ y¿ y¿ y¿ y7¿ yS¿ yY¿ yZ¿ y⁄¿ y‡¿ y¸¿ yı¿ y·¿ y¯¿ z¿ z¿ z%¿ z!¿ z¿ z$¿ z/¿ z5¿ zJ¿ zC¿ z6¿ zF¿ zT¿ zZ¿ zl¿ zh¿ z[¿ zk¿ zv¿ z|¿ zô¿ zí¿ z}¿ zï¿ z£¿ z©¿ z√¿ zø¿ z™¿ z¬¿ zÕ¿ z“¿ {%¿ z€¿ z”¿ z›¿ zÔ¿ zÁ¿ zÒ¿ {¿ z˚¿ {¿ {¿ {¿ {¿ {+ ¿ {8  ¿ {O¿ {\  ¿ {l!¿ {y  ¿ ~u¿ ~   ¿ ~¿ ~¿ |–Å-¿ |Í  ¿ |Ì¿ |ı  ¿ |–¿ |— ¿ ·Öa¿ Á  ¿ ÄÅ	 ¿ Ä¿ Ä" ¿ Ä)¿ Ä/  ¿ Ä7¿ ÄF  ¿ ÄU$¿ Äd  ¿ Ä¿ Äé  ¿ Äö¿ Ä†¿ Ä≥¿ Ä¨¿ Ä°¿ ÄØ¿ ÄΩ¿ Ä√¿ Ä‚¿ Ä€¿ Äƒ¿ Äﬁ¿ ÄÏ¿ ÄÚ¿ Äˇ¿ Ä¯¿ ÄÛ¿ Ä˚¿ Å	¿ Å¿ Å¿ Å¿ Å¿ Å¿ Å¿ Å*  ¿ Å2¿ Å=  ¿ ÅK!¿ ÅV   ¿ ÅqÉœ¿ ÅÑ  ¿ Åä¿ Åò  ¿ Åq¿ År ¿ ÖD™‰¿ ÖJ  ¿ ÖÉñ ¿ Ö¿ Öé ¿ Öï¿ Ö§  ¿ Ö≤¿ Ö¡  ¿ Ö‘¿ Ö„  ¿ Öı¿ Ü  ¿ Ü;2¿ ÜJ  ¿ Üs1¿ ÜÇ  ¿ Ü™7¿ Üπ  ¿ ÜÁ0¿ Üˆ  ¿ á ¿ á,  ¿ áC¿ áR  ¿ ád¿ ás  ¿ áÇ$¿ áë  ¿ á¨,¿ áª  *¿ á·¿ áÁ¿ á˘¿ áÚ¿ áË¿ áı¿ à¿ à	¿ à¿ à¿ à
¿ à¿ à)¿ à/¿ àH¿ àA¿ à0¿ àD¿ àR¿ àX¿ àÖ¿ à~¿ àY¿ àÅ¿ àè¿ àï¿ à¡¿ à∫¿ àñ¿ àΩ¿ àÀ¿ à—¿ à‰¿ à›¿ à“¿ à‡¿ àÓ¿ àÙ¿ â¿ â¿ àı¿ â¿ â¿ â$  ¿ â2!¿ â=  ¿ âW¿ âh  ¿ âu¿ âÜ  ¿ âò!¿ â¨  ¿ âΩ0¿ â›  ¿ âÚG¿ ä  ¿ ä=F¿ ä`  ¿ äá6¿ äî  ¿ ä¡E¿ ä‰  ¿ ã¿ ã  ¿ ã,¿ ã:  ¿ ãL)¿ ãW   ¿ ãz¢U¿ ãã  ¿ ãô	¿ ãü  ¿ ãz¿ ã{¿ ≠”ÇS¿ ≠‰  ¿ ≠Û¿ Æ  ¿ ≠”¿ ≠‘ ¿ ∞*Ñ◊¿ ±«Åñ/// Handler for scale and rotation animations in the [FloatingActionButton].
///
/// Currently, there are two types of [FloatingActionButton] animations:
///
/// * Entrance/Exit animations, which this widget triggers
///   when the [FloatingActionButton] is added, updated, or removed.
/// * Motion animations, which are triggered by the [Scaffold]
///   when its [FloatingActionButtonLocation] is updated. ¿ ≤Åu ¿ ≤¿ ≤' ¿ ≤.¿ ≤4  ¿ ≤<¿ ≤K  ¿ ≤U¿ ≤d  ¿ ≤y¿ ≤à  ¿ ≤û¿ ≤≠  ¿ ≤¬¿ ≤—  ¿ ≤Í¿ ≤¿ ≥	¿ ≥¿ ≤Ò¿ ≥¿ ≥¿ ≥¿ ≥3¿ ≥,¿ ≥¿ ≥/¿ ≥=¿ ≥C¿ ≥]¿ ≥V¿ ≥D¿ ≥Y¿ ≥g¿ ≥l¿ ≥u¿ ≥p¿ ≥m¿ ≥r¿ ≥{¿ ≥â  ¿ ≥í(¿ ≥™  ¿ ≥æ4¿ ≥·  ¿ ≥ˆ0¿ ¥  ¿ ¥+f¿ ¥Ä8/// Controls the current child widget.child as it exits.  ¿ ¥ñi¿ ¥«   ¿ ¥ñ¿ ¥ó ¿ µö0¿ µ	   ¿ ∂,¿ ∂'  ¿ ∂>.¿ ∂U  ¿ ∂p1¿ ∂á  ¿ ∑-¿ ∑5  ¿ ∑O5¿ ∑f  ¿ ∑à0¿ ∑ü  ¿ ∑º¿ ∑ƒ  ¿ ¿eÄ±¿ ¿Ö ¿ ¿ö¿ ¿ü¿ ¿¶¿ ¿†¿ ¿ß¿ ¿Ì¿ ¿≤¿ ¿≠¿ ¿∏¿ ¿¥¿ ¿∫¿ ¿‰¿ ¿·¿ ¿Ê¿ ¿Ó¿ ¿Ô¿ ¿Ù¿ ¡¿ ¿ı¿ ¿ˇ¿ ¡¿ ¡¿ ¡ ¿ ¡¿ ¡¿ ¡ 	¿ ∑◊Çä¿ ∑Ë   ¿ ∑◊¿ ∑ÿ¿ ∫eX¿ ∫v   ¿ ∫e¿ ∫f¿ ∫¡Ö†¿ ∫“  ¿ ∫‚)¿ ª  ¿ ∫¡¿ ∫¬¿ ¡Ü®¿ ¡     ¿ ««Å9¿ «Ã  ¿ «Ú¿ »   ¿ …ÄÇ¿ …	  ¿ …)¿ …2   ¿ …äÑö¿ …ù  ¿ …£¿ …±  ¿ …ä¿ …ã¿ Œ(ÄÄ¿ Œ-    ¿ Œ¨ÄÖ¿ Œ±  ¿ Œ∆¿ ŒŒ    ¿ œ5¿ b6¿ ÂÍñÆ/// Implements the basic material design visual layout structure.
///
/// This class provides APIs for showing drawers and bottom sheets.
///
/// To display a persistent bottom sheet, obtain the
/// [ScaffoldState] for the current [BuildContext] via [Scaffold.of] and use the
/// [ScaffoldState.showBottomSheet] function.
///
/// {@tool dartpad}
/// This example shows a [Scaffold] with a [body] and [FloatingActionButton].
/// The [body] is a [Text] placed in a [Center] in order to center the text
/// within the [Scaffold]. The [FloatingActionButton] is connected to a
/// callback that increments a counter.
///
/// ![The Scaffold has a white background with a blue AppBar at the top. A blue FloatingActionButton is positioned at the bottom right corner of the Scaffold.](https://flutter.github.io/assets-for-api-docs/assets/material/scaffold.png)
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.0.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This example shows a [Scaffold] with a blueGrey [backgroundColor], [body]
/// and [FloatingActionButton]. The [body] is a [Text] placed in a [Center] in
/// order to center the text within the [Scaffold]. The [FloatingActionButton]
/// is connected to a callback that increments a counter.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/material/scaffold_background_color.png)
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.1.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This example shows a [Scaffold] with an [AppBar], a [BottomAppBar] and a
/// [FloatingActionButton]. The [body] is a [Text] placed in a [Center] in order
/// to center the text within the [Scaffold]. The [FloatingActionButton] is
/// centered and docked within the [BottomAppBar] using
/// [FloatingActionButtonLocation.centerDocked]. The [FloatingActionButton] is
/// connected to a callback that increments a counter.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/material/scaffold_bottom_app_bar.png)
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.2.dart **
/// {@end-tool}
///
/// ## Scaffold layout, the keyboard, and display "notches"
///
/// The scaffold will expand to fill the available space. That usually
/// means that it will occupy its entire window or device screen. When
/// the device's keyboard appears the Scaffold's ancestor [MediaQuery]
/// widget's [MediaQueryData.viewInsets] changes and the Scaffold will
/// be rebuilt. By default the scaffold's [body] is resized to make
/// room for the keyboard. To prevent the resize set
/// [resizeToAvoidBottomInset] to false. In either case the focused
/// widget will be scrolled into view if it's within a scrollable
/// container.
///
/// The [MediaQueryData.padding] value defines areas that might
/// not be completely visible, like the display "notch" on the iPhone
/// X. The scaffold's [body] is not inset by this padding value
/// although an [appBar] or [bottomNavigationBar] will typically
/// cause the body to avoid the padding. The [SafeArea]
/// widget can be used within the scaffold's body to avoid areas
/// like display notches.
///
/// ## Troubleshooting
///
/// ### Nested Scaffolds
///
/// The Scaffold is designed to be a top level container for
/// a [MaterialApp]. This means that adding a Scaffold
/// to each route on a Material app will provide the app with
/// Material's basic visual layout structure.
///
/// It is typically not necessary to nest Scaffolds. For example, in a
/// tabbed UI, where the [bottomNavigationBar] is a [TabBar]
/// and the body is a [TabBarView], you might be tempted to make each tab bar
/// view a scaffold with a differently titled AppBar. Rather, it would be
/// better to add a listener to the [TabController] that updates the
/// AppBar
///
/// {@tool snippet}
/// Add a listener to the app's tab controller so that the [AppBar] title of the
/// app's one and only scaffold is reset each time a new tab is selected.
///
/// ```dart
/// TabController(vsync: tickerProvider, length: tabCount)..addListener(() {
///   if (!tabController.indexIsChanging) {
///     setState(() {
///       // Rebuild the enclosing scaffold with a new AppBar title
///       appBarTitle = 'Tab ${tabController.index}';
///     });
///   }
/// })
/// ```
/// {@end-tool}
///
/// Although there are some use cases, like a presentation app that
/// shows embedded flutter content, where nested scaffolds are
/// appropriate, it's best to avoid nesting scaffolds.
///
/// See also:
///
///  * [AppBar], which is a horizontal bar typically shown at the top of an app
///    using the [appBar] property.
///  * [BottomAppBar], which is a horizontal bar typically shown at the bottom
///    of an app using the [bottomNavigationBar] property.
///  * [FloatingActionButton], which is a circular button typically shown in the
///    bottom right corner of the app using the [floatingActionButton] property.
///  * [Drawer], which is a vertical panel that is typically displayed to the
///    left of the body (and often hidden on phones) using the [drawer]
///    property.
///  * [BottomNavigationBar], which is a horizontal array of buttons typically
///    shown along the bottom of the app using the [bottomNavigationBar]
///    property.
///  * [BottomSheet], which is an overlay typically shown near the bottom of the
///    app. A bottom sheet can either be persistent, in which case it is shown
///    using the [ScaffoldState.showBottomSheet] method, or modal, in which case
///    it is shown using the [showModalBottomSheet] function.
///  * [ScaffoldState], which is the state associated with this widget.
///  * <https://material.io/design/layout/responsive-layout-grid.html>
///  * Cookbook: [Add a Drawer to a screen](https://flutter.dev/docs/cookbook/design/drawer) ¿ ÊÉ⁄ ¿ ÊQ¿ ÊY:/// Creates a visual scaffold for material design widgets.¿ Ê`¿ Êf  ¿ Ên¿ Êt  ¿ Ê	¿ ÊÖ  ¿ Êé¿ Êî  ¿ Ê≠!¿ Ê≥  ¿ Ê‘!¿ Ê⁄  ¿ Ê˚¿ Á  ¿ Á¿ Á#  ¿ Á.¿ Á4  ¿ ÁH¿ ÁN  ¿ Á\¿ Áb  ¿ Áy¿ Á  ¿ Áó¿ Áù  ¿ Á≠¿ Á≥  ¿ Á«¿ ÁÕ  ¿ ÁÍ¿ Á  ¿ Ë6¿ Ë	  ¿ Ë?¿ ËE  ¿ Ë\#¿ Ëb  ¿ ËÖ¿ Ëã  ¿ Ë†¿ Ë¶  ¿ Ëæ'¿ Ëƒ  ¿ ËÎ*¿ ËÒ  ¿ È¿ È!  &¿ Á˘¿ Ë"¿ Ë3¿ Ë4¿ ËQ¿ Ëz¿ Ë·¿ È¿ È6¿ È<¿ ÈL¿ ÈE¿ È=¿ ÈH¿ ÈV¿ È\¿ Èo¿ Èh¿ È]¿ Èk¿ Èy¿ È¿ Èû¿ Èó¿ ÈÄ¿ Èö¿ È®¿ ÈÆ¿ ÈŒ¿ È«¿ ÈØ¿ È ¿ Èÿ¿ È›¿ ÈÊ¿ È·¿ Èﬁ¿ È„¿ ÈÏÉÆ¿ ÌêÉt/// If true, and [bottomNavigationBar] or [persistentFooterButtons]
/// is specified, then the [body] extends to the bottom of the Scaffold,
/// instead of only extending to the top of the [bottomNavigationBar]
/// or the [persistentFooterButtons].
///
/// If true, a [MediaQuery] widget whose bottom padding matches the height
/// of the [bottomNavigationBar] will be added above the scaffold's [body].
///
/// This property is often useful when the [bottomNavigationBar] has
/// a non-rectangular shape, like [CircularNotchedRectangle], which
/// adds a [FloatingActionButton] sized notch to the top edge of the bar.
/// In this case specifying `extendBody: true` ensures that scaffold's
/// body will be visible through the bottom navigation bar's notch.
///
/// See also:
///
///  * [extendBodyBehindAppBar], which extends the height of the body
///    to the top of the scaffold. ¿ ÌüÇ¿ ÔõÅ÷/// If true, and an [appBar] is specified, then the height of the [body] is
/// extended to include the height of the app bar and the top of the body
/// is aligned with the top of the app bar.
///
/// This is useful if the app bar's [AppBar.backgroundColor] is not
/// completely opaque.
///
/// This property is false by default. It must not be null.
///
/// See also:
///
///  * [extendBody], which extends the height of the body to the bottom
///    of the scaffold. ¿ Ô∂Y¿ 	5/// An app bar to display at the top of the scaffold. ¿ Ñ¿ Ù.ÉÁ/// The primary content of the scaffold.
///
/// Displayed below the [appBar], above the bottom of the ambient
/// [MediaQuery]'s [MediaQueryData.viewInsets], and behind the
/// [floatingActionButton] and [drawer]. If [resizeToAvoidBottomInset] is
/// false then the body is not resized when the onscreen keyboard appears,
/// i.e. it is not inset by `viewInsets.bottom`.
///
/// The widget in the body of the scaffold is positioned at the top-left of
/// the available space between the app bar and the bottom of the scaffold. To
/// center this widget instead, consider putting it in a [Center] widget and
/// having that be the body. To expand this widget instead, consider
/// putting it in a [SizedBox.expand].
///
/// If you have a column of widgets that should normally fit on the screen,
/// but may overflow and would in such cases need to scroll, consider using a
/// [ListView] as the body of the scaffold. This is also a good choice for
/// the case where your body is a scrollable list. ¿ Ù7Äû¿ Ù¡u/// A button displayed floating above [body], in the bottom right corner.
///
/// Typically a [FloatingActionButton]. ¿ Ù⁄Äˇ¿ ıΩÄ∏/// Responsible for determining where the [floatingActionButton] should go.
///
/// If null, the [ScaffoldState] will use the default location, [FloatingActionButtonLocation.endFloat]. ¿ ıﬁÅ¿ ˆÕÄƒ/// Animator to move the [floatingActionButton] to a new [floatingActionButtonLocation].
///
/// If null, the [ScaffoldState] will use the default animator, [FloatingActionButtonAnimator.scaling]. ¿ ˆÓÅæ¿ ¯ïÅÄ/// A set of buttons that are displayed at the bottom of the scaffold.
///
/// Typically this is a list of [TextButton] widgets. These buttons are
/// persistently visible, even if the [body] of the scaffold scrolls.
///
/// These widgets will be wrapped in an [OverflowBar].
///
/// The [persistentFooterButtons] are rendered above the
/// [bottomNavigationBar] but below the [body]. ¿ ¯±Ç˜¿ ˚¢Çº/// A panel displayed to the side of the [body], often hidden on mobile
/// devices. Swipes in from either left-to-right ([TextDirection.ltr]) or
/// right-to-left ([TextDirection.rtl])
///
/// Typically a [Drawer].
///
/// To open the drawer, use the [ScaffoldState.openDrawer] function.
///
/// To close the drawer, use either [ScaffoldState.closeDrawer] or
/// [Navigator.pop].
///
/// {@tool dartpad}
/// To disable the drawer edge swipe, set the
/// [Scaffold.drawerEnableOpenDragGesture] to false. Then, use
/// [ScaffoldState.openDrawer] to open the drawer and [Navigator.pop] to close
/// it.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.drawer.0.dart **
/// {@end-tool} ¿ ˚≠|¿ ¸T/// Optional callback that is called when the [Scaffold.drawer] is opened or closed. ¿ ¸.É¿ ˇ(Ç≈/// A panel displayed to the side of the [body], often hidden on mobile
/// devices. Swipes in from right-to-left ([TextDirection.ltr]) or
/// left-to-right ([TextDirection.rtl])
///
/// Typically a [Drawer].
///
/// To open the drawer, use the [ScaffoldState.openEndDrawer] function.
///
/// To close the drawer, use either [ScaffoldState.closeEndDrawer] or
/// [Navigator.pop].
///
/// {@tool dartpad}
/// To disable the drawer edge swipe, set the
/// [Scaffold.endDrawerEnableOpenDragGesture] to false. Then, use
/// [ScaffoldState.openEndDrawer] to open the drawer and [Navigator.pop] to
/// close it.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.end_drawer.0.dart **
/// {@end-tool} ¿ ˇ6ÄÇ¿ ˇ¶W/// Optional callback that is called when the [Scaffold.endDrawer] is opened or closed. ¿ ˇΩÅ¿ ØÄ‹/// The color to use for the scrim that obscures primary content while a drawer is open.
///
/// If this is null, then [DrawerThemeData.scrimColor] is used. If that
/// is also null, then it defaults to [Colors.black54]. ¿ ƒÄ±¿fÄé/// The color of the [Material] widget that underlies the entire Scaffold.
///
/// The theme's [ThemeData.scaffoldBackgroundColor] by default. ¿zÅJ¿±Å/// A bottom navigation bar to display at the bottom of the scaffold.
///
/// Snack bars slide from underneath the bottom navigation bar while bottom
/// sheets are stacked on top.
///
/// The [bottomNavigationBar] is rendered below the [persistentFooterButtons]
/// and the [body]. ¿…Ö§¿bÖP/// The persistent bottom sheet to display.
///
/// A persistent bottom sheet shows information that supplements the primary
/// content of the app. A persistent bottom sheet remains visible even when
/// the user interacts with other parts of the app.
///
/// A closely related widget is a modal bottom sheet, which is an alternative
/// to a menu or a dialog and prevents the user from interacting with the rest
/// of the app. Modal bottom sheets can be created and displayed with the
/// [showModalBottomSheet] function.
///
/// Unlike the persistent bottom sheet displayed by [showBottomSheet]
/// this bottom sheet is not a [LocalHistoryEntry] and cannot be dismissed
/// with the scaffold appbar's back button.
///
/// If a persistent bottom sheet created with [showBottomSheet] is already
/// visible, it must be closed before building the Scaffold with a new
/// [bottomSheet].
///
/// The value of [bottomSheet] can be any widget at all. It's unlikely to
/// actually be a [BottomSheet], which is used by the implementations of
/// [showBottomSheet] and [showModalBottomSheet]. Typically it's a widget
/// that includes [Material].
///
/// See also:
///
///  * [showBottomSheet], which displays a bottom sheet as a route that can
///    be dismissed with the scaffold's back button.
///  * [showModalBottomSheet], which displays a modal bottom sheet. ¿rÇ¿
kÅ⁄/// If true the [body] and the scaffold's floating widgets should size
/// themselves to avoid the onscreen keyboard whose height is defined by the
/// ambient [MediaQuery]'s [MediaQueryData.viewInsets] `bottom` property.
///
/// For example, if there is an onscreen keyboard displayed above the
/// scaffold, the body can be resized to avoid overlapping the keyboard, which
/// prevents widgets inside the body from being obscured by the keyboard.
///
/// Defaults to true. ¿
àÅb¿„ÅA/// Whether this scaffold is being displayed at the top of the screen.
///
/// If true then the height of the [appBar] will be extended by the height
/// of the screen's status bar, i.e. the top padding for [MediaQuery].
///
/// The default value of this property, like the default value of
/// [AppBar.primary], is true. ¿Ôr¿J@/// {@macro flutter.material.DrawerController.dragStartBehavior} ¿fÇ¿YÅ“/// The width of the area within which a horizontal swipe will open the
/// drawer.
///
/// By default, the value used is 20.0 added to the padding edge of
/// `MediaQuery.of(context).padding` that corresponds to the surrounding
/// [TextDirection]. This ensures that the drag area for notched devices is
/// not obscured. For example, if `TextDirection.of(context)` is set to
/// [TextDirection.ltr], 20.0 will be added to
/// `MediaQuery.of(context).padding.left`. ¿qÄÆ¿/// Determines if the [Scaffold.drawer] can be opened with a drag
/// gesture.
///
/// By default, the drag gesture is enabled. ¿$Ä¥¿∫ÄÇ/// Determines if the [Scaffold.endDrawer] can be opened with a
/// drag gesture.
///
/// By default, the drag gesture is enabled. ¿›Ç¿‘Å–/// Restoration ID to save and restore the state of the [Scaffold].
///
/// If it is non-null, the scaffold will persist and restore whether the
/// [drawer] and [endDrawer] was open or closed.
///
/// The state of this widget is persisted in a [RestorationBucket] claimed
/// from the surrounding [RestorationScope] using the provided restoration ID.
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter.  ¿Êé¿Sá/// Finds the [ScaffoldState] from the closest instance of this class that
/// encloses the given context.
///
/// If no instance of this class encloses the given context, will cause an
/// assert in debug mode, and throw an exception in release mode.
///
/// This method can be expensive (it walks the element tree).
///
/// {@tool dartpad}
/// Typical usage of the [Scaffold.of] function is to call it from within the
/// `build` method of a child of a [Scaffold].
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.of.0.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// When the [Scaffold] is actually created in the same `build` function, the
/// `context` argument to the `build` function can't be used to find the
/// [Scaffold] (since it's "above" the widget being returned in the widget
/// tree). In such cases, the following technique with a [Builder] can be used
/// to provide a new scope with a [BuildContext] that is "under" the
/// [Scaffold]:
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.of.1.dart **
/// {@end-tool}
///
/// A more efficient solution is to split your build function into several
/// widgets. This introduces a new context from which you can obtain the
/// [Scaffold]. In this solution, you would have an outer widget that creates
/// the [Scaffold] populated by instances of your new inner widgets, and then
/// in these inner widgets you would use [Scaffold.of].
///
/// A less elegant but more expedient solution is assign a [GlobalKey] to the
/// [Scaffold], then use the `key.currentState` property to obtain the
/// [ScaffoldState] rather than using the [Scaffold.of] function.
///
/// If there is no [Scaffold] in scope, then this will throw an exception.
/// To return null if there is no [Scaffold], use [maybeOf] instead. ¿V¿d   ¿˘ÇØ¿"+Ç/// Finds the [ScaffoldState] from the closest instance of this class that
/// encloses the given context.
///
/// If no instance of this class encloses the given context, will return null.
/// To throw an exception instead, use [of] instead of this function.
///
/// This method can be expensive (it walks the element tree).
///
/// See also:
///
///  * [of], a similar function to this one that throws if no instance
///    encloses the given context. Also includes some sample code in its
///    documentation. ¿"3¿"A   ¿"¨âÙ¿&ˆÉ¯/// Returns a [ValueListenable] for the [ScaffoldGeometry] for the closest
/// [Scaffold] ancestor of the given context.
///
/// The [ValueListenable.value] is only available at paint time.
///
/// Notifications are guaranteed to be sent before the first paint pass
/// with the new geometry, but there is no guarantee whether a build or
/// layout passes are going to happen between the notification and the next
/// paint pass.
///
/// The closest [Scaffold] ancestor for the context might change, e.g when
/// an element is moved from one scaffold to another. For [StatefulWidget]s
/// using this listenable, a change of the [Scaffold] ancestor will
/// trigger a [State.didChangeDependencies].
///
/// A typical pattern for listening to the scaffold geometry would be to
/// call [Scaffold.geometryOf] in [State.didChangeDependencies], compare the
/// return value with the previous listenable, if it has changed, unregister
/// the listener, and register a listener to the new [ScaffoldGeometry]
/// listenable. ¿'¿'   ¿,§ÑÜ¿/XÇâ/// Whether the Scaffold that most tightly encloses the given context has a
/// drawer.
///
/// If this is being used during a build (for example to decide whether to
/// show an "open drawer" button), set the `registerForUpdates` argument to
/// true. This will then set up an [InheritedWidget] relationship with the
/// [Scaffold] so that the client widget gets rebuilt whenever the [hasDrawer]
/// value changes.
///
/// This method can be expensive (it walks the element tree).
///
/// See also:
///
///  * [Scaffold.of], which provides access to the [ScaffoldState] object as a
///    whole, from which you can show bottom sheets, and so forth. ¿/b¿/p  ¿/z¿/Ä  ¿/î¿1.;¿1H   ¿1.¿1/ ¿1m¿ ≥Z¿2Äì/// State for a [Scaffold].
///
/// Can display [BottomSheet]s. Retrieve a [ScaffoldState] from the current
/// [BuildContext] using [Scaffold.of].  ¿3âV¿3∞ ¿3Ω¿3∆¿3‹¿3«¿3›¿3ﬁ¿3„Y¿4
 ¿4¿4#¿49¿4$¿4:¿4;¿6)¿61  ¿6¯:¿7 ¿7¿7+¿71¿7,¿76=¿7K ¿7^¿7l¿7r¿7m¿@ﬁ*¿@ˆ  ¿A¿A  ¿A>Äñ¿AÖ 
¿Aí¿Aó¿A—¿Aò¿A±¿A–¿A≤¿Aº¿A“¿A”¿Aÿ(¿AÌ  ¿B¿B  ¿_0M¿_k  ¿a·_¿b(  ¿eR¿e% ¿eT¿eU¿e>¿eS¿e?¿eZ=¿eÑ  ¿eõ4¿e´ ¿eƒ¿eÕ¿eŒ¿ç`<¿çy  ¿ç†?¿ç¬  ¿ç„C¿é  ¿é*;¿éH  ¿éjB¿éÉ  ¿ô0¿ô3  ¿µº¿µ¡ ¿µ“¿µ€$¿µ· ¿µÛ¿µ˘¿µ˙¿2a>¿2y   ¿2a¿2b¿4Aj¿4à;/// Whether this scaffold has a non-null [Scaffold.appBar].   ¿4Æj¿4ı;/// Whether this scaffold has a non-null [Scaffold.drawer].   ¿5s¿5e>/// Whether this scaffold has a non-null [Scaffold.endDrawer].   ¿5ëÄî¿5ÊI/// Whether this scaffold has a non-null [Scaffold.floatingActionButton].   ¿6EÄ∞¿6—y/// The max height the [Scaffold.appBar] uses.
///
/// This is based on the appBar preferred height plus the top padding.   ¿7xÄŸ¿8-Äü/// Whether the [Scaffold.drawer] is opened.
///
/// See also:
///
///  * [ScaffoldState.openDrawer], which opens the [Scaffold.drawer] of a
///    [Scaffold].   ¿8UÄË¿9Ä®/// Whether the [Scaffold.endDrawer] is opened.
///
/// See also:
///
///  * [ScaffoldState.openEndDrawer], which opens the [Scaffold.endDrawer] of
///    a [Scaffold].   ¿é±ÄÀ¿è$c/// Gets the current value of the visibility animation for the
/// [Scaffold.floatingActionButton].   ¿èÄÅ®¿ê
ÄÅ/// Sets the current value of the visibility animation for the
/// [Scaffold.floatingActionButton].  This value must not be null. ¿ê/¿ê7   ¿ôI\¿ôR    ¿2£Ä—¿2¥  ¿2¡¿2’  ¿2ﬂ¿2Â  ¿2£¿2§¿9AÄ‘¿9F  ¿9\¿9b   ¿:Ä‡¿:  ¿:7¿:=   ¿:˝Ç«¿=Åˇ/// Opens the [Drawer] (if any).
///
/// If the scaffold has a non-null [Scaffold.drawer], this function will cause
/// the drawer to begin its entrance animation.
///
/// Normally this is not needed since the [Scaffold] automatically shows an
/// appropriate [IconButton], and handles the edge-swipe gesture, to show the
/// drawer.
///
/// To close the drawer, use either [ScaffoldState.closeEndDrawer] or
/// [Navigator.pop].
///
/// See [Scaffold.of] for information about how to obtain the [ScaffoldState].   ¿=»ÇŸ¿?¸Ç/// Opens the end side [Drawer] (if any).
///
/// If the scaffold has a non-null [Scaffold.endDrawer], this function will cause
/// the end side drawer to begin its entrance animation.
///
/// Normally this is not needed since the [Scaffold] automatically shows an
/// appropriate [IconButton], and handles the edge-swipe gesture, to show the
/// drawer.
///
/// To close the drawer, use either [ScaffoldState.closeEndDrawer] or
/// [Navigator.pop].
///
/// See [Scaffold.of] for information about how to obtain the [ScaffoldState].   ¿BâŸ¿GËÑ‹/// [ScaffoldMessengerState.showSnackBar] shows a [SnackBar] at the bottom of
/// the scaffold. This method should not be used, and will be deprecated in
/// the near future..
///
/// A scaffold can show at most one snack bar at a time. If this function is
/// called while another snack bar is already visible, the given snack bar
/// will be added to a queue and displayed after the earlier snack bars have
/// closed.
///
/// To control how long a [SnackBar] remains visible, use [SnackBar.duration].
///
/// To remove the [SnackBar] with an exit animation, use
/// [ScaffoldMessengerState.hideCurrentSnackBar] or call
/// [ScaffoldFeatureController.close] on the returned [ScaffoldFeatureController].
/// To remove a [SnackBar] suddenly (without an animation), use
/// [ScaffoldMessengerState.removeCurrentSnackBar].
///
/// See [ScaffoldMessenger.of] for information about how to obtain the
/// [ScaffoldMessengerState].
///
/// {@tool dartpad}
/// Here is an example of showing a [SnackBar] when the user presses a button.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_state.show_snack_bar.0.dart **
/// {@end-tool}
///
/// See also:
///
///   * [ScaffoldMessenger], this should be used instead to manage [SnackBar]s. ¿Gı¿Gˇ  ¿G5¿G6¿G@¿G™¿GF¿Gq¿K˚Çr¿L   ¿L¿L-   ¿Nqá°¿PÃÅø/// [ScaffoldMessengerState.removeCurrentSnackBar] removes the current
/// [SnackBar] (if any) immediately. This method should not be used, and will
/// be deprecated in the near future.
///
/// The removed snack bar does not run its normal exit animation. If there are
/// any queued snack bars, they begin their entrance animation immediately.
///
/// See also:
///
///   * [ScaffoldMessenger], this should be used instead to manage [SnackBar]s. ¿P‰9¿P˙  	¿PE¿PF¿PP¿P√¿PV¿Pä¿Q¿Q¿Q¿Vàî¿X$Åv/// [ScaffoldMessengerState.hideCurrentSnackBar] removes the current
/// [SnackBar] by running its normal exit animation. This method should not be
/// used, and will be deprecated in the near future.
///
/// The closed completer is called after the animation is complete.
///
/// See also:
///
///   * [ScaffoldMessenger], this should be used instead to manage [SnackBar]s. ¿X:7¿XP  	¿Wü¿W†¿W™¿X¿W∞¿W‚¿XX¿Xl¿Xm¿_œÅf¿_‘    ¿bòÅ¢¿bù    ¿e‘á¥¿eŸ    ¿måÅg¿më    ¿n˜Ä˘¿oçÄä/// Closes [Scaffold.drawer] if it is currently opened.
///
/// See [Scaffold.of] for information about how to obtain the [ScaffoldState].   ¿oÙÅ¿pçÄç/// Closes [Scaffold.endDrawer] if it is currently opened.
///
/// See [Scaffold.of] for information about how to obtain the [ScaffoldState].   ¿qc¿q    ¿qjç¿qç ¿qü¿qü
¿qß¿q∂  ¿q¬¿q»  ¿q€0¿q˘  ¿r¿r  ¿r-¿r6  ¿rD¿rR  ¿r\¿rc  ¿rt¿rÖ  ¿rï¿rú  ¿r´,¿r±  ¿r”¿~äé≤¿áÙàË/// Shows a material design bottom sheet in the nearest [Scaffold]. To show
/// a persistent bottom sheet, use the [Scaffold.bottomSheet].
///
/// Returns a controller that can be used to close and otherwise manipulate the
/// bottom sheet.
///
/// To rebuild the bottom sheet (e.g. if it is stateful), call
/// [PersistentBottomSheetController.setState] on the controller returned by
/// this method.
///
/// The new bottom sheet becomes a [LocalHistoryEntry] for the enclosing
/// [ModalRoute] and a back button is added to the app bar of the [Scaffold]
/// that closes the bottom sheet.
///
/// The [transitionAnimationController] controls the bottom sheet's entrance and
/// exit animations. It's up to the owner of the controller to call
/// [AnimationController.dispose] when the controller is no longer needed.
///
/// To create a persistent bottom sheet that is not a [LocalHistoryEntry] and
/// does not add a back button to the enclosing Scaffold's app bar, use the
/// [Scaffold.bottomSheet] constructor parameter.
///
/// A persistent bottom sheet shows information that supplements the primary
/// content of the app. A persistent bottom sheet remains visible even when
/// the user interacts with other parts of the app.
///
/// A closely related widget is a modal bottom sheet, which is an alternative
/// to a menu or a dialog and prevents the user from interacting with the rest
/// of the app. Modal bottom sheets can be created and displayed with the
/// [showModalBottomSheet] function.
///
/// {@tool dartpad}
/// This example demonstrates how to use `showBottomSheet` to display a
/// bottom sheet when a user taps a button. It also demonstrates how to
/// close a bottom sheet using the Navigator.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_state.show_bottom_sheet.0.dart **
/// {@end-tool}
/// See also:
///
///  * [BottomSheet], which becomes the parent of the widget returned by the
///    `builder`.
///  * [showBottomSheet], which calls this method given a [BuildContext].
///  * [showModalBottomSheet], which can be used to display a modal bottom
///    sheet.
///  * [Scaffold.of], for information about how to obtain the [ScaffoldState].
///  * <https://material.io/design/components/sheets-bottom.html#standard-bottom-sheet>¿à¿à¿à¿à  ¿à)¿à1  ¿àE¿àN  ¿à\¿àj  ¿àt¿à{  ¿àå¿àù  ¿à≠¿à¥  ¿à√2¿àŸ   ¿ë,Äü¿ëj./// Shows the [Scaffold.floatingActionButton].   ¿í!Ñx¿í&  ¿í@.¿íd   ¿óñÅj¿óõ    ¿ô©ÇÂ¿ô∫   ¿ô©¿ô™¿úíÜR¿ú£  ¿ú≥¿úΩ  ¿úí¿úì¿¢ËÖ∆¿¢˘   ¿¢Ë¿¢È¿®≤Åö¿®√   ¿®≤¿®≥¿™PÉﬂ¿™U  	¿™h¿™x  ¿™Ö¿™é  ¿™ò¿™†  ¿™Æ¿™Ω  ¿™”¿™‚  ¿™˜ ¿´  ¿´!¿´,  ¿´D¿´J  ¿´h&¿´n  ¿´]¿´â¿Æ3ÉÕ¿Æ8  ¿ÆH¿ÆX  ¿Æa¿Æp   ¿≤É¥¿≤	  ¿≤¿≤&  ¿≤/¿≤>   ¿∂Åô¿∂És/// Whether to show a [ModalBarrier] over the body of the scaffold.
///
/// The `value` parameter must not be null. ¿∂ë
¿∂ó  ¿∂ù¿∂•   ¿∑°≠$¿∑¥  ¿∑∫¿∑»  ¿∑°¿∑¢ ¿‰…Ç‡¿ÂxÄ®/// An interface for controlling a feature of a [Scaffold].
///
/// Commonly obtained from [ScaffoldMessengerState.showSnackBar] or
/// [ScaffoldState.showBottomSheet].¿Âí¿Âí¿Â§¿Â§¿Â´\¿Â ¿ÂÀ¿ÂÃ ¿ÂÕ¿Â”  ¿Â€¿Â·  ¿ÂÏ
¿ÂÚ  ¿Â¯¿Â˛   ¿Ê
¿Ê  ¿Ê¿Ê0  ¿Êæx¿Á1]/// Remove the feature (e.g., bottom sheet, snack bar, or material banner) from the scaffold. ¿Á;k¿ÁûM/// Mark the feature (e.g., bottom sheet or snack bar) as needing to rebuild. ¿Ê?{¿ÊûN/// Completes when the feature controlled by this object is no longer visible.     ¿ËGáë¿ÎÿÉä/// A curve that progresses linearly until a specified [startingPoint], at which
/// point [curve] will begin. Unlike [Interval], [curve] will not start at zero,
/// but will use [startingPoint] as the Y position.
///
/// For example, if [startingPoint] is set to `0.5`, and [curve] is set to
/// [Curves.easeOut], then the bottom-left quarter of the curve will be a
/// straight line, and the top-right quarter will contain the entire contents of
/// [Curves.easeOut].
///
/// This is useful in situations where a widget must track the user's finger
/// (which requires a linear animation), and afterwards can be flung using a
/// curve specified with the [curve] argument, after the finger is released. In
/// such a case, the value of [startingPoint] would be the progress of the
/// animation at the time when the finger was released.
///
/// The [startingPoint] and [curve] arguments must not be null. ¿ÏÄ— ¿Ï>¿ÏX/// Creates a suspended curve.¿Ï`¿Ïf  ¿Ï~ ¿ÏÑ  ¿Ïã¿Ïë¿Ïí¿Ï´¿Ï±¿Ï«¿Ï¿¿Ï≤¿Ï√¿Ï“¿Ïÿ¿ÏÊ¿Ïﬂ¿ÏŸ¿Ï‚¿ÏÏÄÜ¿Ìee/// The progress value at which [curve] should begin.
///
/// This defaults to [Curves.easeOutCubic]. ¿ÌwI¿Ìª5/// The curve to use when [startingPoint] is reached.  ¿Ì≈Å™¿Ìÿ  ¿Ì‚¿ÌÍ  ¿Ì≈¿Ì∆¿Ôsc¿ÔÜ   ¿Ôs¿Ôt ¿Ô⁄ÉÃ¿Ô‡  ¿Åz ¿¿* ¿1¿7  ¿?!¿N  ¿f¿l  ¿Ç¿ë  ¿ü¿Æ  ¿æ¿Õ  ¿Ÿ¿ﬂ  ¿¯¿˛  ¿Ò¿Ò  ¿Ò&
¿Ò,  ¿Ò6¿Ò<  ¿ÒM¿ÒS  ¿Òc¿Òi  ¿x¿Ì¿Òz¿Ò¿Òà¿ÒÉ¿ÒÄ¿ÒÖ¿Òé-¿Ò®  ¿Ú ¿Ú  ¿Ú¿Ú-  ¿Ú:¿ÚN  ¿Ú]¿Úq  ¿Ú~¿Úí  ¿Úù¿Ú®  ¿Ú∏¿Ú≈  ¿Úÿ¿ÚÊ  ¿ÚÛ¿Û  ¿Û¿Û  ¿Û+!¿ÛA   ¿ÛQS¿Ûw   ¿ÛQ¿ÛR ¿Û®çÚ¿ÛÆ   ¿ÛB¿Ù ¿Ù 
¿Ù7ÅQ¿ÙH   ¿Ù7¿Ù8¿ıåS¿ıù   ¿ıå¿ıç¿ı„Äµ¿ıÙ  ¿ˆ¿ˆ  ¿ı„¿ı‰¿ˆúÄä¿ˆ°    ¿˜*Äû¿˜/  ¿˜@¿˜R   ¿˜ÃÅ¿˜—  ¿˜‡¿˜  ¿˜˙¿¯   ¿¯ÎÄç¿¯  ¿˘¿˘   ¿˘|Éj¿˘Å  ¿˘è,¿˘∞   ¿¸ÍÅ¿¸Ò  ¿˝¿˝
   ¿˝¸Éõ¿˛  ¿˛¿˛#  ¿˝¸¿˝˝ ¿úÇ≥¿ﬁÅ;/// A [ScaffoldFeatureController] for standard bottom sheets.
///
/// This is the type of objects returned by [ScaffoldState.showBottomSheet].
///
/// This controller is used to display both standard and persistent bottom
/// sheets. A bottom sheet is only persistent if it is set as the
/// [Scaffold.bottomSheet].¿˛¿˛¿@ÄÈ¿e¿f¿g ¿m¿É  ¿é¿ú  ¿™¿∏  ¿¬¿œ  ¿‹¿‚  	¿˝¿¿¿¿'¿¿¿¿¿-¿8     ¿QÅº¿W  ¿ÇÄ» ¿à¿ñ ¿ù¿£  ¿´¿∫  ¿»¿◊  ¿Ï¿˝  ¿
¿¿"¿¿¿¿,¿1¿H¿5¿2¿7¿A¿<¿C¿N¿Y  ¿f0¿Ü   ¿õp¿¨  ¿ø¿œ  ¿õ¿ú  Ü5Ä…Ü:   ÜLÜL  ÜTÜT  Ü^	Ü^  ÜkÜk  ÜzÜz  ÜÜÜÜ  ÜòÜò  Ü¨Ü¨  Ü√Ü√  Ü€Ü€  ÜÂ	ÜÂ  ÜÚ	ÜÚ           ÑpÑ4 Ñ\ÑxÑyÑÉoÑ¶ ÑŒÑÍÑÎÑı6Ö ÖÖù3Ö™ ÖÕÖ“/Öﬂ Ö˛Ü/Ü Ü/ç< <ÄÜÄ§Ä•Ä∫Ä‘ÄÅÅÅ=Å|Å£Å§ÅªÅ—ÅÌÇ	ÇÇ5ÇJÇaÇwÇôÇøÇÓÉÉÉ>ÉSÉTÉlÉëÉ∑É”ÉÈÑÑÑÉÑÙÑıÖ-ÖyÖùÖ“ÜÜ4Ü5ÜJÜRÜ\ÜiÜxÜÑÜñÜ™Ü¡ÜŸÜ„ÜÜ˝Üˇá áJáNáûáŒá“à!àkàúà◊à€â#âtâ«ää5ä9äMäúä†äÛãããããgã∏å
å^å¨å◊ç1çbçÆç çÿçÒéé'é(éXé^éèé•é¶éˆèèè!èmèÆè¥êêê$êwê…ëë_ëîëöë∞í íMíîíﬂì+ìPìVìÆì¿ì∆îîLîRîbîhî∏î˜ïGïtïØïÃñññtñûñ¢ñ£ñÛó
óócóióyóó»òòXòuòvòËôôôô$ôhôjôkôêôîô€ö,öwö¬ö–ö‘õõeõ∑úoú°ù;ùgùÄùüù†ù¨ùÕûû[û•ûıüüDüpüíü∫ü˚††>†a†e†f†ë†Ø†∞†Õ†°°°°F°p°x°~°Ç°É°∞°Ê¢¢.¢2¢3¢O¢Ü¢•¢…¢Û¢˚££££V£û£«§$§_§c§d§v§w§¥§∫•	•V•••≥•π¶
¶¶a¶°¶ßß%ßnßéßîß™ß˚®®k®}®€©'©`©~©Æ©‘©⁄™)™w™∆´´5´É´¨´π´Î¨¨¨p¨w¨â¨Ø¨∑¨œ¨Ê¨Í¨Î≠)≠?≠e≠å≠¢≠∆≠“≠ÓÆÆ=ÆGÆVÆ|ÆíÆºØØØ5ØDØhØwØõØ™Ø∞Ø¥ØµØˇ∞∞∞i∞∑±±1±M±[±Æ±Œ±≤≤)≤c≤â≤ç≤é≤Ÿ≤ﬂ≥%≥≥õ≥Û¥¥T¥v¥û¥¿¥Õµµ%µIµoµyµµùµ∏µºµΩ∂∂G∂a∂π∂«∑/∑G∑l∑á∑ã∑å∑•∑¶∑Ë∑Ó∏C∏ú∏Ò∏ˇππbπ¢π˜∫,∫2∫{∫õ∫°∫∑ªªªÑªñººjº©ºÕΩΩ/Ω5ΩêΩÍæ@æêæØø	ø8øGø}ø¢ø´¿ @
¿ @¿ @#¿ @O¿ @W¿ @o¿ @Ü¿ @ä¿ @ã¿ @œ¿ @Â¿ A¿ A8¿ AN¿ Ax¿ AÑ¿ A†¿ AÀ¿ A˚¿ B¿ B¿ B:¿ BV¿ Be¿ Bâ¿ Bò¿ Bº¿ BÀ¿ B—¿ B’¿ B÷¿ C&¿ C9¿ C?¿ Cñ¿ CÍ¿ DZ¿ Dv¿ Dò¿ D¶¿ E¿ E%¿ EG¿ EH¿ EÇ¿ EÆ¿ E≤¿ E≥¿ F¿ F
¿ FP¿ Fº¿ Fÿ¿ G<¿ GJ¿ G©¿ GÀ¿ G˘¿ H¿ H(¿ Hm¿ HÜ¿ H™¿ H–¿ H⁄¿ H‡¿ H‰¿ HÂ¿ I4¿ I{¿ Iõ¿ Iˇ¿ J¿ Jç¿ J´¿ J‹¿ J˝¿ K¿ K¿ K¿ K5¿ Kc¿ K°¿ Kﬁ¿ Kﬂ¿ L ¿ LA¿ Lo¿ Lπ¿ L˜¿ M0¿ MD¿ Må¿ M÷¿ MÂ¿ N*¿ Np¿ Nº¿ N“¿ O¿ O'¿ O1¿ O9¿ O?¿ O@¿ Od¿ Oà¿ O£¿ O™¿ OÆ¿ OØ¿ Oª¿ OŒ¿ OÚ¿ P¿ P+¿ P@¿ PD¿ PF¿ PG¿ P¿ P°¿ PØ¿ P ¿ Q¿ Q?¿ Qd¿ Qe¿ Qù¿ Qû¿ Q™¿ R¿ R¿ R¿ Rl¿ Rì¿ Ró¿ R—¿ S¿ SU¿ SY¿ Sô¿ SŒ¿ SŸ¿ S˚¿ TL¿ Tî¿ T∏¿ T€¿ T¸¿ U¿ UF¿ Uc¿ UÖ¿ U•¿ U≈¿ UÎ¿ V¿ V¿ V¿ VH¿ VN¿ Vö¿ V¡¿ V¬¿ Vˆ¿ V¸¿ W>¿ W^¿ W|¿ W}¿ W≈¿ W‹¿ W‚¿ X'¿ Xq¿ Xø¿ X÷¿ X‹¿ Y,¿ Yy¿ Y…¿ Y„¿ Z¿ Z¿ ZI¿ Z`¿ Zf¿ Z´¿ ZÚ¿ [ ¿ [&¿ [v¿ [√¿ \¿ \'¿ \B¿ \C¿ \ã¿ \§¿ \™¿ \Ù¿ ]¿ ]k¿ ]ò¿ ]û¿ ]‹¿ ^¿ ^0¿ ^1¿ ^~¿ ^ó¿ ^ù¿ ^Ï¿ _:¿ _Ü¿ _÷¿ _˘¿ `¿ `¿ `G¿ `M¿ `ú¿ `Ë¿ a¿ a#¿ ap¿ aæ¿ b¿ b7¿ b=¿ bå¿ bØ¿ b ¿ bÀ¿ b¸¿ c¿ cQ¿ cl¿ cm¿ c§¿ c™¿ cˇ¿ d ¿ d!¿ d_¿ dÑ¿ dÜ¿ dá¿ d”¿ d◊¿ e ¿ eÅ¿ eå¿ eÿ¿ eŸ¿ f5¿ f6¿ fb¿ få¿ fª¿ f‘¿ f’¿ f·¿ g"¿ gA¿ gq¿ gù¿ g∑¿ gæ¿ g¬¿ g√¿ gœ¿ gÂ¿ h_¿ hc¿ he¿ hf¿ h≥¿ h∑¿ h˘¿ i(¿ i,¿ iw¿ iÀ¿ iœ¿ j¿ j]¿ jy¿ j}¿ jÀ¿ k¿ k¿ k4¿ kx¿ kì¿ k¥¿ k◊¿ k›¿ kﬁ¿ l'¿ lt¿ lz¿ l∞¿ lÿ¿ lŸ¿ m¿ m¿ mc¿ mã¿ må¿ m–¿ mÏ¿ mˇ¿ n ¿ n¿ n=¿ nu¿ n~¿ nÑ¿ nÖ¿ nÆ¿ n‚¿ o¿ o¿ o¿ oZ¿ o^¿ o_¿ o∑¿ oÕ¿ oÎ¿ p¿ p3¿ p:¿ pW¿ p¨¿ q¿ q¿ q¿ q¿ q¿ q{¿ q¥¿ q‘¿ q’¿ qÛ¿ r¿ r5¿ r6¿ rB¿ ra¿ rq¿ r∂¿ r˛¿ s¿ sn¿ sƒ¿ t#¿ t.¿ tA¿ tK¿ tó¿ tõ¿ tú¿ t±¿ t’¿ t˘¿ u ¿ u'¿ uâ¿ u´¿ u·¿ v¿ v"¿ v9¿ v=¿ v?¿ v@¿ vå¿ vﬁ¿ v·¿ w,¿ w¿ wŒ¿ x¿ xk¿ xç¿ x¿¿ xﬁ¿ x˘¿ y ¿ y<¿ yd¿ yã¿ y´¿ y”¿ yˇ¿ z(¿ zM¿ zo¿ zú¿ z∆¿ {(¿ {)¿ {M¿ {j¿ {è¿ {ê¿ {·¿ |2¿ |Ö¿ |Œ¿ |⁄¿ |˝¿ }¿ })¿ }Q¿ }è¿ }À¿ }˙¿ }˛¿ }ˇ¿ ~¿ ~w¿ ~y¿ ~z¿ ~œ¿ ¿ :¿ =¿ í¿ ·¿ Ä¿ Ä%¿ Ä3¿ ÄQ¿ Ä{¿ Äì¿ Ä∂¿ ÄÂ¿ Å¿ Å¿ Å¿ Å0¿ ÅI¿ Ån¿ Åo¿ Å{¿ Å¢¿ Å“¿ ÅÂ¿ ÅÊ¿ Ç ¿ ÇD¿ Çú¿ Ç€¿ Ç‹¿ É¿ ÉW¿ É{¿ É|¿ ÉÆ¿ Éÿ¿ Ñ+¿ ÑL¿ ÑM¿ Ñh¿ Ñä¿ Ñπ¿ Ñ—¿ ÑÔ¿ Ñ˛¿ Ö¿ Ö"¿ Ö-¿ Ö6¿ Ö=¿ ÖA¿ ÖC¿ ÖD¿ Ö}¿ Öë¿ ÖÆ¿ Ö–¿ ÖÒ¿ Ü¿ Ü7¿ Üo¿ Ü¶¿ Ü„¿ á¿ á?¿ á`¿ á~¿ á®¿ á⁄¿ á¸¿ à"¿ àK¿ àà¿ àƒ¿ àÁ¿ â¿ â¿ â0¿ âU¿ âs¿ âñ¿ âª¿ âÔ¿ â¿ ä;¿ äÖ¿ äø¿ ã¿ ã	¿ ã*¿ ãI¿ ãJ¿ ãw¿ ãx¿ ãÑ¿ ã¶¿ ãÓ¿ ãÔ¿ å=¿ åå¿ å‹¿ ç¿ ç¿ çv¿ çù¿ ç∫¿ ç‡¿ çˇ¿ é ¿ é*¿ é¿ éø¿ é˜¿ é˝¿ é˛¿ è"¿ èY¿ è’¿ ê¿ êY¿ ê∂¿ êº¿ êΩ¿ êÒ¿ ë0¿ ëa¿ ëÆ¿ ë∑¿ í*¿ í_¿ íŒ¿ í‘¿ í’¿ í˛¿ ì0¿ ìå¿ ì⁄¿ ì€¿ î¿ î;¿ îl¿ ît¿ îz¿ î{¿ î…¿ ï¿ ï/¿ ïô¿ ïö¿ ï¬¿ ñ
¿ ñ¿ ñ#¿ ñQ¿ ñ¨¿ ó¿ ó¿ ó¿ óP¿ óÅ¿ ó£¿ ó‹¿ ò!¿ òE¿ òN¿ òÜ¿ ò»¿ òŒ¿ òœ¿ ô!¿ ôp¿ ô∑¿ ö¿ ö¿ ö]¿ ö†¿ öÓ¿ õ;¿ õã¿ õ≤¿ õ≥¿ õŸ¿ õ¸¿ ú)¿ úr¿ ú£¿ ú≈¿ úŒ¿ ù¿ ùR¿ ùX¿ ùY¿ ùü¿ ùÀ¿ û¿ û^¿ ûd¿ ûe¿ ûî¿ ûÿ¿ ü	¿ üG¿ üP¿ ü®¿ †4¿ †:¿ †;¿ †c¿ †õ¿ †˘¿ †˙¿ °H¿ °l¿ °ø¿ °È¿ ¢¿ ¢Y¿ ¢º¿ ¢ﬁ¿ £	¿ £'¿ £C¿ £g¿ £ó¿ £Ω¿ £Â¿ £Ó¿ §T¿ §º¿ •	¿ •+¿ •J¿ •á¿ •ê¿ •‘¿ ¶
¿ ¶¿ ¶¿ ¶=¿ ¶ï¿ ¶º¿ ¶‡¿ ß¿ ßF¿ ßQ¿ ßY¿ ßZ¿ ßÇ¿ ß–¿ ®¿ ®¿ ®_¿ ®Ø¿ © ¿ ©L¿ ©a¿ ©≠¿ ©ﬁ¿ ™¿ ™.¿ ™6¿ ™7¿ ™é¿ ™˜¿ ™˝¿ ™˛¿ ´+¿ ´å¿ ´«¿ ´Õ¿ ´Œ¿ ´¯¿ ¨=¿ ¨u¿ ¨{¿ ¨|¿ ¨©¿ ¨Ò¿ ≠,¿ ≠2¿ ≠3¿ ≠U¿ ≠ã¿ ≠≈¿ ≠Ã¿ ≠–¿ ≠—¿ ≠›¿ Æ¿ Æ@¿ Æv¿ Æ‰¿ ØH¿ Ø™¿ Ø⁄¿ ∞#¿ ∞'¿ ∞)¿ ∞*¿ ∞w¿ ∞{¿ ∞ƒ¿ ∞»¿ ±¿ ±H¿ ±á¿ ±¡¿ ≤ ¿ ≤*¿ ≤8¿ ≤Q¿ ≤u¿ ≤ö¿ ≤æ¿ ≤„¿ ≥¿ ≥6¿ ≥`¿ ≥x¿ ≥y¿ ≥ê¿ ≥º¿ ≥Ù¿ ¥(¿ ¥)¿ ¥d¿ ¥ì¿ ¥î¿ ¥†¿ µ ¿ µ¿ µ¿ µ}¿ µ◊¿ ∂¿ ∂<¿ ∂n¿ ∂£¿ ∑¿ ∑M¿ ∑Ü¿ ∑∫¿ ∑‘¿ ∑’¿ ∑·¿ ∑ˆ¿ ∏¿ ∏¿ ∏=¿ ∏i¿ ∏|¿ ∏Ω¿ ∏÷¿ ∏◊¿ ∏˜¿ πJ¿ πd¿ πê¿ πù¿ πÁ¿ ∫7¿ ∫X¿ ∫^¿ ∫b¿ ∫c¿ ∫o¿ ∫Ç¿ ∫•¿ ∫∫¿ ∫æ¿ ∫ø¿ ∫À¿ ª¿ ª5¿ ªn¿ ª§¿ ª˚¿ º	¿ ºÖ¿ º“¿ ºÌ¿ ºÛ¿ Ω6¿ Ωx¿ Ω¥¿ æ¿ æ>¿ æ]¿ æ¿ æ≠¿ æº¿ ø¿ øY¿ ø§¿ øŒ¿ øÍ¿ ¿¿ ¿"¿ ¿P¿ ¿X¿ ¿^¿ ¿b¿ ¿c¿ ¿©¿ ¿›¿ ¿Î¿ ¡¿ ¡¿ ¡6¿ ¡g¿ ¡Ø¿ ¡“¿ ¡Ó¿ ¡ı¿ ¬^¿ ¬u¿ ¬ö¿ ¬∏¿ ¬¡¿ ¬»¿ ¬…¿ √¿ √<¿ √X¿ √_¿ √“¿ √”¿ ƒ	¿ ƒá¿ ≈¿ ≈¿ ≈-¿ ≈ë¿ ≈˜¿ ∆g¿ ∆h¿ ∆÷¿ «F¿ «G¿ «É¿ «¿¿ «ƒ¿ «≈¿ »¿ »¿ »O¿ »ù¿ »ø¿ »Ì¿ »ı¿ »˝¿ …¿ …¿ …;¿ …e¿ …É¿ …á¿ …à¿ …î¿ …ª¿ …Õ¿ …ı¿  ¿  T¿  ì¿  Ø¿  ﬂ¿ À¿ À¿ À!¿ À>¿ Àl¿ Àï¿ À»¿ ÀÔ¿ Ã ¿ Ã¿ ÃJ¿ Ãe¿ Ãò¿ Ãª¿ ÃÍ¿ Õ¿ Õ¿ Õ(¿ Õ5¿ ÕP¿ Õ{¿ Õ¢¿ Õ“¿ Õı¿ Œ¿ Œ¿ Œ¿ Œ!¿ Œ%¿ Œ&¿ ŒD¿ Œ•¿ Œ©¿ Œ™¿ Œ÷¿ Œˇ¿ œ'¿ œ.¿ œ2¿ œ4¿ œ5¿ œw¿ œ{¿ œø¿ œ√¿ œ¯¿ –I¿ –w¿ –{¿ –è¿ –›¿ —)¿ —q¿ —ô¿ —ù¿ “â¿ “ç¿ “÷¿ “Ê¿ “Í¿ “˛¿ ”L¿ ”õ¿ ”Í¿ ‘$¿ ‘(¿ ‘ç¿ ‘ë¿ ‘⁄¿ ‘Í¿ ‘Ó¿ ’¿ ’O¿ ’†¿ ’Ï¿ ÷$¿ ÷s¿ ÷™¿ ÷Æ¿ ◊¿ ◊¿ ◊^¿ ◊n¿ ◊r¿ ◊Æ¿ ◊≤¿ ◊˘¿ ÿ@¿ ÿá¿ ÿŒ¿ Ÿ¿ ŸG¿ Ÿã¿ ŸÕ¿ Ÿ‹¿ Ÿ‡¿ ⁄ ¿ ⁄f¿ ⁄¶¿ ⁄Á¿ €¿ €`¿ €z¿ €~¿ €ï¿ €ô¿ €≤¿ €∂¿ €Û¿ ‹*¿ ‹h¿ ‹ñ¿ ‹ö¿ ‹·¿ ›¿ ›l¿ ›∂¿ ›˚¿ ﬁ¿ ﬁ
¿ ﬁ¿ ﬁo¿ ﬁπ¿ ﬁΩ¿ ﬁ…¿ ﬂ¿ ﬂB¿ ﬂX¿ ﬂú¿ ﬂ“¿ ﬂﬁ¿ ﬂÊ¿ ﬂÌ¿ ﬂı¿ ‡¿ ‡	¿ ‡M¿ ‡å¿ ‡√¿ ‡«¿ ‡’¿ ‡Ÿ¿ ·)¿ ·M¿ ·ú¿ ·◊¿ ‚(¿ ‚y¿ ‚«¿ „¿ „ ¿ „o¿ „∏¿ „…¿ ‰¿ ‰i¿ ‰∫¿ ‰¯¿ Â@¿ Âá¿ Â‰¿ Ê¿ ÊI¿ Ê\¿ Êj¿ Ê{¿ Êä¿ Ê©¿ Ê–¿ Ê˜¿ Á¿ Á*¿ ÁD¿ ÁX¿ Áu¿ Áì¿ Á©¿ Á√¿ ÁÊ¿ Áˇ¿ Ë;¿ ËX¿ ËÅ¿ Ëú¿ Ë∫¿ ËÁ¿ È¿ È/¿ ÈO¿ Èr¿ È°¿ È—¿ ÈÈ¿ ÈÍ¿ Í0¿ Í{¿ Í√¿ ÍÎ¿ ÍÒ¿ Î>¿ Îå¿ Îí¿ ÎŸ¿ Ï¿ Ïk¿ Ï¥¿ Ï˙¿ Ì ¿ Ì¿ Ì¿ Ì^¿ ÌÉ¿ Ìú¿ Ìù¿ ÌÎ¿ Ó7¿ Óe¿ Ók¿ Ó±¿ Ó ¿ Ó–¿ Ô¿ Ô¿ Ô$¿ Ô*¿ Ôt¿ Ôé¿ Ô≥¿ Ô¥¿ ÔÏ¿ ¿ ¿ =¿ C¿ á¿ »¿ Ò¿ Òa¿ Òî¿ Òö¿ ÒË¿ Ú9¿ Úà¿ Úœ¿ Ú¯¿ Ú˛¿ ÛL¿ Ûú¿ ÛÈ¿ Ù¿ Ù4¿ Ù5¿ ÙÅ¿ Ùá¿ Ù±¿ Ù◊¿ Ùÿ¿ ı&¿ ı,¿ ıó¿ ı€¿ ı‹¿ ˆ7¿ ˆ=¿ ˆß¿ ˆÎ¿ ˆÏ¿ ˜5¿ ˜;¿ ˜Ö¿ ˜Õ¿ ˜”¿ ¯¿ ¯¿ ¯M¿ ¯¿ ¯Æ¿ ¯Ø¿ ¯˘¿ ˘E¿ ˘o¿ ˘u¿ ˘ë¿ ˘ó¿ ˘ﬁ¿ ˘‰¿ ˙)¿ ˙@¿ ˙F¿ ˙\¿ ˙å¿ ˙Õ¿ ˚¿ ˚(¿ ˚.¿ ˚Ä¿ ˚í¿ ˚™¿ ˚´¿ ¸¿ ¸+¿ ¸,¿ ¸v¿ ¸ª¿ ¸Â¿ ¸Î¿ ˝¿ ˝¿ ˝W¿ ˝]¿ ˝•¿ ˝º¿ ˝¬¿ ˝ÿ¿ ˛¿ ˛L¿ ˛ö¿ ˛™¿ ˛∞¿ ˇ¿ ˇ¿ ˇ3¿ ˇ4¿ ˇé¿ ˇ∫¿ ˇª¿ ¿ ¿ f¿ †¿ ¡¿ ¬¿¿¿W¿w¿x¿¿¿∆¿¿5¿;¿ã¿°¿∆¿«¿ı¿˚¿J¿ò¿Œ¿‘¿$¿u¿¡¿Ë¿Ó¿6¿É¿±¿∑¿¿M¿b¿h¿¥¿ˇ¿K¿k¿q¿Å¿á¿’¿¿R¿o¿p¿π¿	¿	T¿	Z¿	¢¿	Û¿
?¿
E¿
]¿
Ö¿
Ü¿
œ¿
’¿"¿k¿q¿µ¿÷¿Ï¿Ì¿0¿c¿d¿Æ¿º¿¬¿¿S¿°¿Î¿¿I¿n¿o¿≥¿¬¿»¿˜¿!¿"¿d¿x¿~¿≠¿⁄¿€¿!¿'¿r¿•¿´¿¯¿I¿O¿_¿e¿≤¿ƒ¿„¿‰¿1¿S¿Y¿¶¿Í¿¿0¿6¿L¿ú¿Õ¿”¿!¿3¿9¿O¿ü¿Í¿7¿à¿œ¿·¿Á¿5¿G¿M¿ö¿Â¿5¿Ö¿ø¿≈¿¿^¿¢¿®¿ı¿<¿n¿ã¿ﬂ¿˜¿¿@¿T¿•¿Æ¿∆¿1¿ì¿Ê¿Ô¿ ¿c¿ª¿Ë¿/¿8¿I¿©¿¿e¿∆¿#¿}¿™¿≥¿Í¿Ú¿ˆ¿˜¿ D¿ f¿ l¿ Ω¿!¿!¿!K¿!Q¿!a¿!g¿!∞¿!˚¿"¿"K¿"h¿"•¿"©¿"™¿"˜¿#'¿#-¿#p¿#v¿#¿¿$
¿$X¿$j¿$p¿$Ω¿%¿%Q¿%Ä¿%Ü¿%—¿& ¿&o¿&π¿&À¿'¿'Å¿'†¿'÷¿'Ï¿(G¿(R¿(l¿(–¿)%¿)0¿)C¿)®¿*¿*1¿*z¿*Ö¿*ò¿*˙¿+Z¿+∫¿,$¿,/¿,h¿,r¿,ù¿,°¿,¢¿,¿,˛¿-¿-Q¿-ü¿-Ï¿.=¿.R¿.X¿.ò¿.û¿.Æ¿.¥¿/¿/J¿/û¿/∆¿/„¿0¿0f¿0ë¿0û¿0ˆ¿1!¿1'¿1+¿1,¿18¿1j¿1l¿1m¿1â¿1ç¿1Ÿ¿2¿2_¿2k¿2†¿2°¿2≠¿2ˆ¿30¿3q¿3u¿3v¿3Ü¿3á¿3·¿4>¿4?¿4}¿4¨¿4Í¿5¿5Z¿5è¿5€¿6&¿6'¿6C¿6t¿6z¿6√¿6ˆ¿74¿7u¿7v¿7•¿7´¿7ª¿7¡¿8¿8"¿8R¿8S¿8Ö¿8ã¿8õ¿8°¿8Ò¿9¿9>¿9?¿9m¿9ò¿9¨¿9‘¿9ﬁ¿:¿:¿:¿:¿:H¿:v¿:ä¿:µ¿:ø¿:¿:ˆ¿:˙¿:˚¿;¿;$¿;u¿;ß¿;≠¿;˚¿<K¿<Y¿<_¿<ß¿<æ¿<ƒ¿=¿=+¿=q¿=ú¿=¡¿=≈¿=∆¿=Ú¿=¯¿>L¿>á¿>ç¿>€¿?+¿?9¿??¿?á¿?û¿?§¿?ı¿@¿@N¿@v¿@û¿@¢¿@£¿@‹¿A
¿A)¿A*¿A<¿A÷¿B¿B¿B¿Bl¿B∫¿B“¿Bÿ¿C'¿Ct¿C√¿C—¿C◊¿D(¿D.¿Di¿D§¿D˘¿E;¿Eq¿Ew¿E¿¿E‡¿EÊ¿E¸¿FM¿FS¿F≥¿F≈¿FÀ¿F€¿F·¿G3¿GB¿Gm¿G®¿G¨¿H
¿HV¿Hé¿H¨¿H‹¿I¿I¿IW¿I•¿IÙ¿JD¿Jc¿J±¿J⁄¿JÂ¿K¿K4¿K=¿Kñ¿Kù¿KØ¿K’¿K›¿KÙ¿K¯¿K˘¿L6¿LL¿Lr¿Lô¿LØ¿L”¿Lﬂ¿M¿M,¿M;¿Ma¿Mw¿M°¿MÚ¿M˛¿N¿N1¿NU¿Nd¿Nj¿Nn¿No¿N∏¿O¿O0¿O6¿Oá¿O’¿O€¿OÎ¿OÒ¿PC¿PR¿PÜ¿P¡¿P≈¿Q#¿Q?¿Q@¿Që¿Q÷¿R&¿Ri¿R∂¿R‹¿S¿SG¿SU¿Sy¿SÃ¿T¿T`¿Tí¿Tõ¿T‹¿TÍ¿T¿TÒ¿U¿U¿Un¿Ué¿U∞¿UŒ¿UÈ¿V¿V¿V¿V[¿V¨¿V„¿VÈ¿W/¿W5¿WE¿WK¿Wù¿W¨¿Wﬁ¿X¿X¿Xw¿Xì¿Xî¿XÂ¿Y*¿Yz¿YΩ¿Z
¿Z0¿Zd¿Zõ¿Z©¿ZÕ¿[ ¿[g¿[¥¿[Ê¿[Ô¿\.¿\<¿\B¿\C¿\õ¿\©¿\Á¿]:¿]e¿]ç¿]Ø¿]º¿]˚¿^¿^8¿^^¿^h¿^n¿^å¿^ß¿^´¿^¨¿^˘¿_.¿_¿_Ä¿_Õ¿_Ë¿`k¿`ö¿`™¿`´¿`ﬁ¿`Ú¿a"¿a,¿a2¿a6¿a7¿aP¿aQ¿a™¿aﬂ¿bB¿bC¿bñ¿b∑¿cR¿cá¿có¿cò¿c◊¿cÎ¿d'¿d1¿d7¿d;¿d<¿d]¿d^¿d£¿dÔ¿e¿eX¿eô¿e—¿e“¿e˛¿fC¿fò¿fÍ¿g¿gÖ¿gª¿h¿hZ¿hè¿h⁄¿i ¿ii¿iy¿i¢¿i‹¿j¿j¿jv¿jÇ¿jº¿k¿k¿k5¿k=¿k>¿ks¿kî¿k‹¿l¿lM¿ls¿l†¿l˛¿m¿m¿m+¿m6¿mD¿mv¿m¿mÖ¿mâ¿mä¿mÆ¿m’¿n¿n3¿n;¿nM¿né¿nΩ¿n…¿nﬁ¿nÍ¿n¿nÙ¿nı¿o/¿o5¿oÜ¿où¿o¡¿oË¿oÌ¿oÒ¿oÚ¿p/¿p5¿pÜ¿p†¿pÀ¿pˆ¿p¸¿q ¿q¿q)¿qc¿qg¿qh¿q£¿qæ¿q◊¿r¿r)¿r@¿rX¿rp¿rë¿rß¿rŸ¿r‡¿r¿sG¿sc¿sÆ¿sÔ¿tK¿tV¿t^¿tq¿t{¿t|¿tØ¿u¿uB¿uC¿ub¿uÅ¿u®¿u√¿uÏ¿u¸¿v¿v?¿vr¿vï¿vñ¿v¬¿v÷¿v˙¿w¿w¿wJ¿w{¿wÉ¿wü¿w•¿w¶¿wÿ¿wÂ¿x¿xm¿xñ¿x¢¿xÆ¿xØ¿x—¿x˝¿y¿y5¿yR¿yZ¿y`¿ya¿yâ¿y§¿y‘¿z¿z¿zD¿zV¿z`¿zù¿zΩ¿z∆¿zﬁ¿{¿{2¿{j¿{x¿{Ç¿{ã¿{°¿{æ¿{ﬁ¿|¿|7¿|A¿|J¿|b¿|Ñ¿|¨¿|»¿|‹¿|˛¿}¿}%¿}&¿}=¿}y¿}z¿}´¿}æ¿}œ¿}„¿}˙¿~¿~g¿~|¿~É¿~á¿~à¿~÷¿¿¿o¿É¿â¿ ¿Ä¿Ä,¿Ä2¿Ä}¿ÄÃ¿Ä¿Äˆ¿ÅI¿Åè¿Å‹¿Å‚¿Ç2¿ÇÄ¿Ç¥¿Ç∫¿É	¿ÉW¿Éç¿Éì¿É„¿Ñ4¿ÑÄ¿Ñß¿Ñ≠¿Ñ√¿Ö¿ÖW¿Öá¿Öç¿Ö¿Ü¿Ü¿Ü¿Üg¿Ü{¿Ü«¿á¿á$¿áu¿áœ¿à¿à%¿àA¿àX¿àp¿àà¿à©¿àø¿à˜¿à˛¿â¿â6¿âR¿âù¿âﬁ¿ä:¿äE¿äM¿ä`¿äj¿äò¿äô¿äπ¿ã?¿ãQ¿ãÉ¿ãî¿ã£¿ãÃ¿ãˆ¿å¿å*¿åN¿åp¿åê¿å·¿åÍ¿åÚ¿ç9¿ç=¿ç>¿ç^¿çû¿ç·¿é(¿ég¿éh¿éÆ¿éØ¿é¿è¿è}¿è~¿èø¿ê¿êB¿ê`¿ê¶¿ê‚¿ë¿ë%¿ë)¿ë*¿ë[¿ëà¿ë»¿ëÃ¿ëÕ¿í¿ír¿í∆¿íÌ¿ìc¿ìû¿îi¿î‰¿îÍ¿îÎ¿î˝¿ï=¿ïp¿ïx¿ïy¿ï◊¿ñ4¿ñI¿ññ¿ñö¿ñõ¿ñÃ¿ñÕ¿ó¿ój¿óî¿ó≥¿ò¿ò_¿òà¿òï¿òÀ¿òÓ¿ò˜¿ò˝¿ô¿ô¿ô¿ô¿ôF¿ôG¿ôn¿ô¢¿ô¶¿ôß¿ô≥¿ô»¿ôﬂ¿ö5¿öß¿õ¿õd¿õ£¿õ∂¿õ»¿õ¯¿õˇ¿ú ¿úE¿úq¿úÑ¿úã¿úè¿úê¿úú¿ú…¿úÔ¿ùb¿ùª¿û/¿û5¿ûé¿û˝¿ü¿ü:¿üL¿üÆ¿üË¿†¿†[¿†ï¿†§¿†ª¿†Ù¿°Q¿°å¿°õ¿°©¿°≥¿°»¿°‘¿°¸¿¢ ¿¢p¿¢ú¿¢´¿¢”¿¢€¿¢·¿¢Â¿¢Ê¿¢Ú¿£¿£d¿£õ¿£¸¿§L¿§r¿§–¿§˝¿•¿•H¿•{¿•§¿••¿•Ù¿¶2¿¶Ç¿¶Ã¿ß¿ßB¿ßk¿ßï¿ßµ¿ß€¿®¿®"¿®_¿®`¿®à¿®´¿®Ø¿®∞¿®º¿®œ¿©¿©B¿©`¿©{¿©|¿©ù¿©–¿™	¿™4¿™I¿™M¿™N¿™d¿™Å¿™î¿™™¿™œ¿™Û¿´¿´@¿´d¿´ê¿´ó¿´◊¿´¸¿¨¿¨F¿¨o¿¨v¿¨ë¿¨…¿¨ ¿≠¿≠,¿≠u¿≠~¿≠Ñ¿≠Ö¿≠û¿≠≤¿≠ƒ¿≠€¿Æ¿Æ¿Æ&¿Æ,¿Æ0¿Æ1¿ÆÄ¿Æ§¿Æ¿¿Æ’¿ÆÁ¿Ø¿Ø¿ØI¿Ø}¿Ø∫¿ØÈ¿∞¿∞f¿∞ñ¿∞∫¿∞≈¿∞Ê¿±*¿±i¿±ä¿± ¿±Ó¿±˜¿±˝¿≤¿≤¿≤N¿≤o¿≤à¿≤ù¿≤Ø¿≤…¿≤‰¿≥¿≥A¿≥~¿≥≠¿≥‚¿¥'¿¥T¿¥u¿¥Ä¿¥û¿¥‚¿µ!¿µB¿µÇ¿µ¶¿µØ¿µµ¿µπ¿µ∫¿µŸ¿∂¿∂¿∂H¿∂N¿∂|¿∂Ø¿∂ ¿∑¿∑!¿∑'¿∑9¿∑W¿∑í¿∑ö¿∑û¿∑ü¿∑´¿∑“¿∏ ¿∏2¿∏p¿∏£¿∏Á¿∏Ë¿π7¿πt¿πï¿π÷¿∫¿∫N¿∫å¿∫≈¿∫Ÿ¿ª!¿ªk¿ªz¿ªø¿º¿ºQ¿ºg¿ºÆ¿ºº¿º∆¿º’¿º˜¿Ω¿Ω¿Ω$¿Ω%¿ΩW¿Ωj¿Ωz¿Ω´¿Ω“¿æ¿æ-¿æ6¿æP¿æp¿æü¿æ¿¿ø)¿ø]¿ød¿ø~¿øì¿ø•¿øª¿øŸ¿ø˚¿¿¿¿'¿¿H¿¿h¿¿ä¿¿≠¿¿∂¿¿º¿¿Ω¿¿ﬁ¿¡-¿¡ï¿¡€¿¡¿¬¿¬¿¬_¿¬ë¿¬ø¿¬‚¿¬Ô¿¬˙¿√¿√:¿√[¿√~¿√°¿√™¿√∞¿√±¿√÷¿√Ò¿ƒA¿ƒÜ¿ƒ–¿ƒÌ¿ƒ˘¿≈1¿≈Ñ¿≈¿¿≈«¿≈»¿∆¿∆6¿∆a¿∆}¿∆¢¿∆Î¿∆ˆ¿∆ˇ¿«¿«&¿«5¿«X¿«z¿«ö¿«Ω¿«ı¿«˛¿»¿»¿».¿»T¿»©¿»’¿»¯¿…B¿…{¿…|¿…ë¿…£¿…»¿…Ë¿ 
¿ *¿ M¿ ∏¿ ˜¿À ¿À¿À¿À'¿Àv¿Àó¿ÀÈ¿Ã¿Ã8¿ÃÇ¿Ã∏¿Ãπ¿ÃŒ¿Ã‡¿Õ¿Õ"¿ÕD¿Õd¿Õá¿ÕÚ¿Œ1¿Œ:¿Œ@¿ŒA¿Œr¿Œ°¿ŒÕ¿œ ¿œå¿œ≈¿œ∆¿œ€¿œÌ¿–¿–>¿–`¿–ë¿–¥¿–◊¿—¿—¿—%¿—&¿—X¿—m¿—¿—í¿—∑¿—”¿“¿“$¿“1¿“L¿“d¿“à¿“®¿“„¿”¿”9¿”W¿”ñ¿””¿”Ê¿”˜¿‘¿‘¿‘¿‘F¿‘h¿‘à¿‘´¿‘Ï¿’+¿’4¿’:¿’;¿’i¿’~¿’ê¿’¥¿’ﬂ¿÷¿÷!¿÷D¿÷h¿÷ß¿÷∞¿÷∂¿÷∑¿÷ ¿÷⁄¿◊¿◊@¿◊z¿◊ß¿◊Ì¿ÿ¿ÿ"¿ÿL¿ÿk¿ÿâ¿ÿ©¿ÿ ¿ÿ—¿ÿ“¿ÿÙ¿Ÿ¿Ÿ4¿ŸK¿Ÿ_¿Ÿz¿Ÿ®¿Ÿ–¿⁄1¿⁄Y¿⁄f¿⁄â¿⁄≠¿⁄œ¿⁄Ù¿€¿€$¿€3¿€V¿€y¿€ö¿€Ω¿€Ã¿€“¿€”¿€ı¿‹"¿‹R¿‹_¿‹è¿‹º¿‹¬¿‹√¿›¿›I¿›ó¿›û¿›ü¿›È¿ﬁ ¿ﬁg¿ﬁ≈¿ﬁÃ¿ﬁÕ¿ﬁ¸¿ﬂD¿ﬂE¿ﬂ`¿ﬂ|¿ﬂß¿ﬂ–¿ﬂÈ¿‡7¿‡π¿‡‰¿·¿·5¿·|¿·¢¿·“¿‚'¿‚ç¿‚‡¿„¿„s¿„°¿„Ÿ¿‰)¿‰W¿‰h¿‰ä¿‰ô¿‰ß¿‰≤¿‰ª¿‰¬¿‰∆¿‰»¿‰…¿Â¿Â	¿ÂM¿Âr¿Â©¿Ê¿Ê¿Ê<¿Ê=¿Êé¿Êª¿Êº¿Á¿Á8¿Á9¿Áâ¿Á®¿Á™¿Á´¿Á˜¿ËG¿Ëò¿ËÈ¿È¿È!¿Èl¿È∂¿Í¿Í¿Í!¿Ín¿Íª¿Î¿ÎV¿Îé¿Îí¿Î“¿Ï¿Ï6¿ÏZ¿Ïv¿Ï†¿Ï ¿ÏÈ¿ÏÍ¿Ì"¿Ì(¿ÌV¿Ìt¿Ìu¿Ì≠¿Ì¬¿Ì√¿Ìœ¿ÌÓ¿Ó¿ÓJ¿ÓK¿Óh¿Óx¿Ó~¿Ó¿Óì¿Ó£¿Ó©¿Ó™¿Óˆ¿Ô5¿Ôl¿Ôp¿Ôq¿Ô}¿Ôì¿Ô”¿Ô◊¿ÔŸ¿Ô⁄¿¿-¿;¿b¿~¿õ¿∫¿’¿Ù¿Ò¿Ò"¿Ò2¿ÒI¿Ò_¿Òs¿Òã¿Òå¿Ò˛¿Ú¿Ú8¿Ú[¿Ú|¿Úõ¿Ú∂¿Ú÷¿ÚÒ¿Û¿Û)¿ÛN¿ÛO¿Û[¿Û•¿Ûß¿Û®¿ÛÓ¿Ù4¿Ù5¿ÙA¿ÙV¿Ùm¿Ùù¿Ù©¿ÙÏ¿ı7¿ı>¿ıÖ¿ıâ¿ıä¿ıñ¿ı©¿ı«¿ı‹¿ı‡¿ı·¿ıÌ¿ˆ&¿ˆL¿ˆï¿ˆô¿ˆö¿ˆ´¿ˆ€¿˜¿˜#¿˜'¿˜(¿˜\¿˜°¿˜≈¿˜…¿˜ ¿¯¿¯\¿¯ç¿¯µ¿¯›¿¯‰¿¯Ë¿¯È¿˘¿˘M¿˘o¿˘u¿˘y¿˘z¿˘ø¿˘˝¿˙6¿˙t¿˙„¿˚¿˚7¿˚ç¿˚ó¿˚§¿˚ﬂ¿¸	¿¸¿¸\¿¸º¿¸À¿¸—¿¸„¿¸Á¿¸Ë¿˝¿˝.¿˝E¿˝]¿˝¢¿˝…¿˝Â¿˝Ó¿˝ı¿˝˘¿˝˙¿˛¿˛-¿˛I¿˛v¿˛≠¿˛√¿˛˜¿ˇK¿ˇc¿ˇn¿ˇw¿ˇñ¿ˇ´¿ˇÊ¿ ¿ 8¿ ]¿ Ö¿ ®¿ €¿¿!¿N¿y¿Ñ¿ç¿î¿ò¿ô¿õ¿ú¿⁄¿ﬁ¿+¿/¿z¿º¿ÿ¿>¿i¿ä¿¶¿æ¿ÿ¿˜¿*¿+¿N¿P¿Q¿Ä¿ô¿ß¿ƒ¿Ë¿¿%¿K¿L¿d¿ò¿ô¿•¿€¿¿¿     ™≠