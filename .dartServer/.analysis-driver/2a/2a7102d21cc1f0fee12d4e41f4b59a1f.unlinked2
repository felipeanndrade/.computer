ÅnametoStringlabelhintactionhashCode==_nextId_actions_idsgetIdentifier	getActionstring
attributes+showWhenEmptyisInterestingvalueToStringflagsactionsattributedLabelvalueattributedValueincreasedValueattributedIncreasedValuedecreasedValueattributedDecreasedValueattributedHinttextDirectiontextSelectionscrollChildCountscrollIndexscrollPositionscrollExtentMaxscrollExtentMinplatformViewIdmaxValueLengthcurrentValueLengthrecttags	transform	elevation	thicknesscustomSemanticsActionIdshasFlag	hasActiontoStringShortdebugFillProperties_sortedListsEqual
childOrdergetChildren	onTapHintonLongPressHint
isNotEmptyenabledcheckedtoggledselectedbuttonlinkheader	textFieldsliderkeyboardKeyreadOnly	focusablefocusedinMutuallyExclusiveGrouphiddenobscured	multilinescopesRoute
namesRouteimage
liveRegionhintOverridessortKeytagForChildrenonTaponLongPressonScrollLeftonScrollRight
onScrollUponScrollDown
onIncrease
onDecreaseonCopyonCutonPasteonMoveCursorForwardByCharacteronMoveCursorBackwardByCharacteronMoveCursorForwardByWordonMoveCursorBackwardByWordonSetSelection	onSetTextonDidGainAccessibilityFocusonDidLoseAccessibilityFocus	onDismisscustomSemanticsActions$_maxFrameworkAccessibilityIdentifier_lastIdentifier_generateNewIdkeyid_id_showOnScreen
_transform_rectparentSemanticsClipRectparentPaintClipRectelevationAdjustmentindexInParentisInvisibleisMergedIntoParent_isMergedIntoParentisPartOfNodeMergingmergeAllDescendantsIntoThisNode _mergeAllDescendantsIntoThisNode	_children_debugPreviousSnapshot_replaceChildrenhasChildren_deadchildrenCountvisitChildren_visitDescendantsownerparentredepthChildrenattachdetach_dirty
_markDirty)_isDifferentFromCurrentSemanticAnnotation_customSemanticsActions_actionsAsBitsisTagged_flags_attributedLabel_attributedValue_attributedIncreasedValue_attributedDecreasedValue_attributedHint
_elevation
_thickness_hintOverrides_textDirection_sortKey_textSelectionisMultiline_isMultiline_scrollChildCount_scrollIndex_scrollPosition_scrollExtentMax_scrollExtentMin_platformViewId_maxValueLength_currentValueLength_canPerformAction_kEmptyConfig
updateWithgetSemanticsData_initIdentityTransform_kEmptyChildList!_kEmptyCustomSemanticsActionsList_kIdentityTransform_addToUpdate_childrenInTraversalOrder	sendEventtoStringDeeptoDiagnosticsNodedebugDescribeChildrendebugListChildrenInOrderisLeadingEdgeoffsetnode	compareTostartOffsetnodessortedWithinVerticalGroupsortedWithinKnotposition_dirtyNodes_nodes_detachedNodesrootSemanticsNodedisposesendSemanticsUpdate_getSemanticsActionHandlerForIdperformAction%_getSemanticsActionHandlerForPositionperformActionAtisSemanticBoundary_isSemanticBoundaryexplicitChildNodes+isBlockingSemanticsOfPreviouslyPaintedNodeshasBeenAnnotated_hasBeenAnnotated
_addAction_addArgumentlessAction_onTap_onLongPress_onScrollLeft
_onDismiss_onScrollRight_onScrollUp_onScrollDown_onIncrease_onDecrease_onCopy_onCut_onPasteonShowOnScreen_onShowOnScreen_onMoveCursorForwardByCharacter _onMoveCursorBackwardByCharacter_onMoveCursorForwardByWord_onMoveCursorBackwardByWord_onSetSelection
_onSetText_onDidGainAccessibilityFocus_onDidLoseAccessibilityFocusgetActionHandler_indexInParentisMergingSemanticsOfDescendants _isMergingSemanticsOfDescendants_onCustomSemanticsActionisImage
isSelected	isEnabled	isChecked	isToggledisInMutuallyExclusiveGroupisFocusable	isFocusedisButtonisLinkisHeaderisSliderisKeyboardKeyisHiddenisTextField
isReadOnly
isObscuredhasImplicitScrollingtagsForChildren_tagsForChildrenaddTagForChildren_setFlag_hasFlagisCompatibleWithabsorbcopyinverseHitTesttraversalOrder	doCompareorderSemanticsNodeVisitorMoveCursorHandlerSetSelectionHandlerSetTextHandlerSemanticsActionHandlerSemanticsTagCustomSemanticsActionAttributedStringAttributedStringPropertySemanticsData_SemanticsDiagnosticableNodeSemanticsHintOverridesSemanticsPropertiesdebugResetSemanticsIdCounterSemanticsNode_BoxEdge_SemanticsSortGroup_pointInParentCoordinates_childrenInDefaultOrder_TraversalSortNodeSemanticsOwnerSemanticsConfigurationDebugSemanticsDumpOrder_concatAttributedStringSemanticsSortKeyOrdinalSortKeyÅëOffsetRectSemanticsActionSemanticsFlagTextDirectionStringAttributeMatrixUtilsTransformPropertySemanticsBindingSpellOutStringAttributeLocaleStringAttributevisitChildrenboolvoidsetSelectionTextSelectionsetTextStringgetActionHandlerObjectRenderSemanticsGestureHandleroverrideobjectRuntimeType	immutableinthashruntimeTypelabelhintactionMap	TextRange
isNotEmptyisEmptylength	attributerangestartendListstringof
attributescopyadd
listEqualsDiagnosticsPropertykNoDefaultValueDiagnosticLevelinfoshowNameleveldefaultValuedescriptionvalueisInterestingTextTreeConfigurationparentConfigurationlineBreakProperties
replaceAllmergeAllDescendantsIntoThisNodegetSemanticsDataDiagnosticableincreasedecreaseScrollPositionpixelsdoublemaxScrollExtentminScrollExtentAndroidView	UiKitViewisTextFieldSetMatrix4	elevation	thicknessindexDiagnosticPropertiesBuilderdebugFillPropertiesDoublePropertyvaluesdescribeEnummap	getActionactionIdtoListIterablePropertyifEmptyflagEnumPropertyisValidMessagePropertyIntPropertyflagsactionsattributedLabelattributedValueattributedIncreasedValueattributedDecreasedValueattributedHinttextDirectionrect	setEqualstagsscrollChildCountscrollIndextextSelectionscrollPositionscrollExtentMaxscrollExtentMinplatformViewIdmaxValueLengthcurrentValueLength	transformcustomSemanticsActionIdshashAlliDiagnosticableNodeDiagnosticsTreeStylenamestyleDiagnosticsNodedebugDescribeChildren
childOrderDiagnosticableTree	onTapHintonLongPressHintStringPropertyexplicitChildNodesscopesRoute
namesRouteisImageSnackBarisLiveRegion
liveRegionDirectionalityincreasedValuedecreasedValueRenderObjectaddTagForChildrentapVoidCallback	longPress
scrollLeftscrollRightscrollUp
scrollDowncutpastemoveCursorForwardByCharactermoveCursorBackwardByCharactermoveCursorForwardByWordmoveCursorBackwardByWorddidGainAccessibilityFocus	FocusNode
FocusScopeFocusManagerdidLoseAccessibilityFocusdismisscustomActionid_lastIdentifierPipelineOwnerflushSemanticsAbstractNodeDiagnosticableTreeMixinshowOnScreenKeymatrixEquals
isIdentityzeroisFiniteisMergingSemanticsOfDescendantsanychild	identicalErrorDescriptionErrorSpacertoDiagnosticsNode
singleLineFlutterError	fromPartsErrorSummary	ErrorHintnodeisMergedIntoParentparent_deadisInvisible	dropChildattached
adoptChild_visitDescendantsownerforEachredepthChildattach_nodescontainsKey_detachedNodesremovecontainsdetach_dirtyNodes_flags_sortKey_textSelection_scrollPosition_scrollExtentMax_scrollExtentMin_actionsAsBitsindexInParent_maxValueLength_currentValueLength_actions_customSemanticsActionsPhysicalModelAconfigchildrenInInversePaintOrderhintOverridessortKeyisMultiline_platformViewIdkeysgetIdentifieroverridingAction_textDirection_scrollChildCount_scrollIndex_attributedValue_attributedIncreasedValue_attributedDecreasedValueaddAllthisAttributedStringthisTextDirectionotherAttributedString_attributedLabelotherTextDirection_attributedHintmax
_thickness
_elevationsortFloat64Listidentitystorage	Int32ListSemanticsUpdateBuilder
updateNodelabelAttributesvalueAttributesincreasedValueAttributesdecreasedValueAttributeshintAttributestextSelectionBase
baseOffsettextSelectionExtentextentOffsetscrollChildrennanchildrenInTraversalOrderchildrenInHitTestOrderadditionalActionspositionclearsortNodeSemanticsEventSystemChannelsaccessibilitysendtoMapnodeIdFlagPropertyifTrueifFalsehiddengetAsTranslationshift
getAsScaletoStringAsFixedtoStringsplittakeline	substringjointagwhereisHiddendebugtraversalOrdertoStringDeepprefixLineOneprefixOtherLinesminLevelsparseinverseHitTest
Comparable	compareTooffsetstartOffsetdeflateisLeadingEdgetopLeftdxbottomRightedgenodesrtlreversedexpandsortedWithinKnot	directioncenternextNodeltrpiabdyVector3
transform3xysortedWithinVerticalGroupensureSemanticsSemanticsHandleChangeNotifierdisposedepth_dirtyisPartOfNodeMerging
_markDirtyinstancecreateSemanticsUpdateBuilder_addToUpdateupdateCustomAction
overrideIdplatformDispatcherupdateSemanticsbuildnotifyListeners_canPerformActionargs_showOnScreencopyInversetransformPointhasChildren	_childrendescribeIdentityvisitChildrenForSemantics	addActionGestureDetectordynamiccastListTileselected
isSelectedExcludeSemanticshasEnabledState	isEnabledhasCheckedState	isCheckedhasToggledState	isToggledRadioisInMutuallyExclusiveGroupisFocusable	isFocusedisButtonisLinkisHeaderisSliderisKeyboardKey
isReadOnly
isObscuredListViewTabBarhasImplicitScrollingIterableRenderViewportexcludeFromScrollinghasBeenAnnotated_hintOverrides_hasBeenAnnotated_isSemanticBoundary+isBlockingSemanticsOfPreviouslyPaintedNodes _isMergingSemanticsOfDescendants_tagsForChildren_indexInParentdebugDumpSemanticsTreeUnicodeRLEPDFLRE	protectedinfinitynegativeInfinityorder	DiagnosticsPropertyDiagnosticableDiagnosticableNodeDiagnosticableTreeAbstractNodeDiagnosticableTreeMixin
ComparableChangeNotifierSemanticsSortKey,|8ÎÈòãsàÉLé´ dart:ui semantics_event.dart   	dart:math dart:typed_data dart:ui dart:ui package:flutter/foundation.dart package:flutter/painting.dart package:flutter/services.dart 'package:vector_math/vector_math_64.dart binding.dart semantics_event.dart 	dart:core¿ ¡ ¿Õ í! <ÄÜÄ§Ä•Ä¡Ä€ÄÛÅ7Å^Å_ÅâÅ’Å˝Ç/Ç0Ç]Ç|Ç}ÇÂÉÉÉKÉOÉxÉ|ÉßÉÈÉÍÑ%Ñ)ÑwÑ∆ÖÖÖTÖìÖŸÖ⁄Ü"ÜJÜÜÄÜ¥Ü∏ÜÛá1á2áSáWáñá„à/à3àÅàŒà‹à‡â.â|â âŸâÓääädä¥ããã6ã7ãtãzã¿ã’ã÷ã‚å.å0å1åaåeåßåÔç7ççŒéé+é/é~é≤é∂èèèèdèèèìè°è•èˆêêêLêRêäê∆ê„ê˛ëë&ë'ëwëÖëãë¬í4íPíjíàíúíùí€íÚíÛì/ìEìFìÄì°ì¢ìÆìÊìÁìÛîî@îTî~îûîºîﬂî„î‰îïïcïgïhï±ï ï‰ñ>ñîñïñƒñˇóó9óSópóëóóó™óÆóØóﬁòò+ò/ò1ò2òjòuòéò±ò∑ôôôôbôqôÖôòô…öööRödöööÃõõ!õ+õ@õLõMõÖõúõùõ«õÕúú9ú:ú}úÉú‘ùùUùoùÉùâù©ùºù¬ù√ùËûûrûôû¡üü1übüèüöüÌ††#†)†l†p†q†Ω†…†Ï°°=°_°•°©°™°∂°Ó°Ô°˚¢¢r¢v¢x¢y¢√££P£ñ£ú£Ÿ£ı§§%§?§_§ã§Ω§÷§˜••#•2•B•_•Ñ•õ•æ•»•…¶¶Q¶W¶|¶ò¶ô¶•ßßß%ßlßÉßòßπß‡®®O®z®Ä®•®Ω®√©0©4©6©7©o©s©ø™™`™r™v™¥™ø™È´´´d´j´µ´«´‡´˚¨¨A¨m¨ô¨ª¨‹¨Ù≠≠.≠O≠n≠í≠¥≠◊≠˙ÆÆ>ÆdÆsÆáÆ™Æ»ÆËØØ8ØiØöØ¡∞b±±ø≤{≥≥6≥7≥v≥â≥ä≥À≥‡≥·¥ ¥&¥_¥e¥ü¥Õ¥Œµµ0µ6µoµuµÆµÿµŸ∂∂∂W∂]∂ó∂≈∂∆∑∑(∑.∑g∑m∑¶∑–∑—∏∏6∏<∏u∏{∏æ∏˛∏ˇπ;πÅπáπ¿π∆∫∫;∫<∫x∫°∫ß∫‡∫Êª)ªiªjª¶ªÏªÚº+º1ºsº¶ºßºıº˚Ω4Ω:ΩsΩüΩ†ΩÌæææPæVæéæ∑æ∏æˆø,øRøSø§ø–øˆø˜¿ @C¿ @I¿ @ñ¿ @¢¿ @¡¿ @¬¿ A¿ A"¿ A#¿ As¿ AÖ¿ Aã¿ A€¿ B'¿ Bm¿ Bs¿ BÉ¿ Bâ¿ B”¿ BÛ¿ BÙ¿ CC¿ CU¿ C[¿ Cñ¿ Cú¿ C¨¿ C≤¿ D¿ D&¿ D'¿ Dv¿ Dà¿ Dé¿ D…¿ Dœ¿ Dﬂ¿ DÂ¿ E8¿ EY¿ EZ¿ E§¿ E¡¿ E«¿ F¿ F_¿ Ft¿ Fz¿ Fä¿ Fê¿ F–¿ G
¿ G'¿ G(¿ Gt¿ GÜ¿ Gå¿ GŸ¿ GÌ¿ GÛ¿ HC¿ HÖ¿ H¢¿ H£¿ HÚ¿ I¿ I
¿ IW¿ Ik¿ Iq¿ I¬¿ IÌ¿ J¿ J¿ JN¿ Ja¿ Jb¿ Jû¿ Jø¿ J¿¿ K¿ K ¿ Kg¿ K∏¿ K«¿ K„¿ K‰¿ L,¿ L2¿ LB¿ LH¿ Lò¿ L∫¿ L‘¿ L’¿ M¿ M!¿ M1¿ M7¿ MÉ¿ Mù¿ Mû¿ MÈ¿ N¿ N¿ NA¿ NG¿ NW¿ N]¿ N•¿ N“¿ N”¿ O¿ OC¿ OD¿ Ow¿ O¬¿ O√¿ Oœ¿ P¿ P¿ P"¿ Pg¿ Pí¿ P‡¿ QD¿ Qì¿ Q‚¿ R¿ R]¿ Rà¿ R®¿ RØ¿ S ¿ SX¿ Si¿ S¿¿ T-¿ T.¿ T]¿ T°¿ T»¿ TÊ¿ TÌ¿ U@¿ Uà¿ U–¿ V*¿ VÑ¿ V ¿ W/¿ WX¿ Wƒ¿ X¿ Xr¿ X—¿ Y*¿ Y{¿ Y◊¿ Z1¿ Zç¿ Zë¿ Zí¿ Zû¿ Z¡¿ Z„¿ [¿ ['¿ [[¿ [è¿ [’¿ \¿ \M¿ \}¿ \õ¿ \¬¿ \¯¿ ]$¿ ]T¿ ]Ü¿ ]∫¿ ]Ó¿ ^ ¿ ^R¿ ^å¿ ^¥¿ ^‹¿ _¿ _\¿ _`¿ _a¿ _m¿ _ê¿ _õ¿ _®¿ _Ω¿ _“¿ _¿ `¿ `"¿ `5¿ `?¿ `I¿ `\¿ `r¿ `É¿ `ó¿ `¨¿ `¡¿ `’¿ `È¿ a¿ a¿ a#¿ a4¿ aE¿ a†¿ aß¿ a¨¿ a≠¿ aÚ¿ b¿ b,¿ bU¿ b|¿ bí¿ bæ¿ bﬂ¿ b˜¿ c
¿ c¿ c"¿ c&¿ c(¿ c)¿ cx¿ cô¿ c´¿ cÕ¿ c˜¿ d¿ d#¿ d3¿ dE¿ dW¿ d\¿ d]¿ dâ¿ dä¿ dñ¿ dÙ¿ dˆ¿ d˜¿ e>¿ eM¿ eQ¿ e~¿ eâ¿ e√¿ eÌ¿ f¿ f"¿ f<¿ f\¿ fÇ¿ fÉ¿ f©¿ fØ¿ f·¿ fÁ¿ g.¿ g[¿ ga¿ gâ¿ g§¿ gø¿ g¿¿ gÌ¿ gÛ¿ h%¿ h+¿ hu¿ hØ¿ hµ¿ hÁ¿ i¿ i$¿ i%¿ iW¿ iû¿ iü¿ i´¿ iÍ¿ iÎ¿ i˜¿ j¿ jD¿ jX¿ jÉ¿ j´¿ j‡¿ j‰¿ jÂ¿ jÒ¿ k6¿ ka¿ k±¿ l¿ l¿ l¿ l¿ lc¿ lx¿ l|¿ lÃ¿ l‡¿ lÎ¿ m"¿ mG¿ me¿ mw¿ mâ¿ mú¿ mÆ¿ mø¿ mŒ¿ mﬂ¿ mÛ¿ n¿ n¿ n-¿ nA¿ nS¿ nv¿ ná¿ nö¿ nÆ¿ nƒ¿ nŸ¿ nÈ¿ n˛¿ o¿ o4¿ oD¿ o^¿ on¿ oà¿ o°¿ oƒ¿ o›¿ p ¿ p¿ p(¿ p@¿ pX¿ pj¿ pÉ¿ pì¿ p©¿ p¿¿ pÿ¿ pÌ¿ q¿ q¿ q.¿ q?¿ qO¿ qa¿ qä¿ q¥¿ qÿ¿ q˝¿ r¿ r*¿ rP¿ rv¿ rä¿ r´¿ s¿ sì¿ t+¿ t√¿ u3¿ u4¿ uÑ¿ u´¿ u±¿ uˇ¿ vJ¿ v|¿ vì¿ vî¿ vŸ¿ w¿ w.¿ w4¿ we¿ w|¿ w}¿ w«¿ x¿ x¿ x¿ xO¿ xf¿ xg¿ x∂¿ x˛¿ y¿ yT¿ yy¿ yë¿ yí¿ y÷¿ y‹¿ z)¿ z;¿ zQ¿ zR¿ zî¿ zö¿ zÍ¿ {4¿ {B¿ {V¿ {W¿ {õ¿ {°¿ {¿ |>¿ |c¿ |y¿ |z¿ |¬¿ |»¿ }¿ }$¿ }=¿ }>¿ }Ç¿ }à¿ }œ¿ }Ë¿ }˛¿ }ˇ¿ ~I¿ ~d¿ ~e¿ ~¢¿ ~®¿ ~ÿ¿ ~ﬁ¿ !¿ 9¿ :¿ {¿ Å¿ »¿ Œ¿ Ä ¿ Äj¿ Äª¿ Ä˙¿ Å¿ Å¿ ÅU¿ Å[¿ Å¨¿ ÅÏ¿ ÅÚ¿ ÇD¿ Çé¿ Çﬂ¿ É¿ É5¿ É6¿ ÉÉ¿ Éâ¿ ÉŸ¿ Ñ¿ ÑB¿ ÑC¿ Ñ}¿ ÑÉ¿ Ñ“¿ Ö#¿ Ö)¿ Öy¿ Ö∆¿ Öÿ¿ Öﬁ¿ Ü.¿ ÜM¿ ÜS¿ Ü§¿ ÜÚ¿ á?¿ áw¿ áç¿ áé¿ á≈¿ áÀ¿ à¿ àh¿ à≠¿ à≈¿ à∆¿ â¿ â#¿ â)¿ âs¿ â≠¿ â≥¿ âË¿ ä¿ ä¿ äO¿ ä}¿ äÉ¿ ä¥¿ ã¿ ã8¿ ã>¿ ãN¿ ãT¿ ã†¿ ãº¿ ã◊¿ ãÿ¿ å%¿ å+¿ å;¿ åA¿ åê¿ å™¿ å´¿ å‰¿ åÍ¿ å˙¿ ç ¿ çF¿ ç[¿ ç\¿ ç§¿ ç™¿ çˆ¿ éC¿ év¿ é|¿ é ¿ è¿ èf¿ è´¿ è˙¿ ê$¿ ê*¿ ê:¿ ê@¿ êë¿ êË¿ ë¿ ë¿ ëO¿ ëa¿ ëg¿ ë¥¿ ë»¿ ëŒ¿ í¿ íQ¿ ín¿ ío¿ íæ¿ í–¿ í÷¿ ì#¿ ì7¿ ì=¿ ìÜ¿ ì•¿ ì∆¿ ì«¿ ì˚¿ î¿ îP¿ îâ¿ îè¿ îﬁ¿ îÚ¿ î¯¿ ï¿ ï¿ ï_¿ ïÉ¿ ï“¿ ïÈ¿ ïÍ¿ ñ=¿ ñC¿ ñç¿ ñ◊¿ ñ›¿ ó,¿ ó@¿ óF¿ óV¿ ó\¿ ó¨¿ ó€¿ ò¿ òD¿ òE¿ òÜ¿ òå¿ ò€¿ ô¿ ô¿ ôi¿ ô}¿ ôÉ¿ ôì¿ ôô¿ ôÍ¿ ö¿ ö]¿ öt¿ öu¿ ö∆¿ ö€¿ ö·¿ õ+¿ õu¿ õ{¿ õ ¿ õﬁ¿ õ‰¿ õÙ¿ õ˙¿ úJ¿ úy¿ ú∑¿ ú‚¿ ú„¿ ù)¿ ùt¿ ùz¿ ù≈¿ û¿ û(¿ û.¿ ûg¿ û£¿ û©¿ ûπ¿ ûø¿ ü¿ ü=¿ üã¿ üû¿ üæ¿ üø¿ †¿ †]¿ †c¿ †¥¿ †˛¿ °&¿ °,¿ °e¿ °°¿ °ß¿ °∑¿ °Ω¿ ¢¿ ¢E¿ ¢å¿ ¢¿¿ ¢¡¿ £¿ £R¿ £X¿ ££¿ £Ó¿ §¿ §¿ §E¿ §Å¿ §á¿ §ó¿ §ù¿ §Ï¿ •¿ •i¿ •|¿ •ú¿ •ù¿ •Ó¿ ¶;¿ ¶A¿ ¶í¿ ¶‹¿ ß¿ ß
¿ ßC¿ ßã¿ ßë¿ ß°¿ ßß¿ ß˜¿ ®/¿ ®v¿ ®™¿ ®´¿ ®˚¿ ©¿ ©¿ ©d¿ ©ù¿ ©£¿ ©¿ ™¿ ™
¿ ™¿ ™ ¿ ™p¿ ™î¿ ™‚¿ ™¯¿ ™˘¿ ´J¿ ´}¿ ´É¿ ´Ã¿ ¨¿ ¨¿ ¨i¿ ¨}¿ ¨É¿ ¨ì¿ ¨ô¿ ¨Ë¿ ≠¿ ≠T¿ ≠~¿ ≠¿ ≠»¿ ≠Ÿ¿ ≠ﬂ¿ Æ+¿ Æz¿ Æ±¿ Æ∑¿ Ø¿ Ø5¿ Ø6¿ Ø}¿ Ø°¿ Øß¿ Ø◊¿ Ø˝¿ Ø˛¿ ∞M¿ ∞_¿ ∞e¿ ∞≥¿ ±¿ ±(¿ ±K¿ ±L¿ ±î¿ ±ö¿ ±Â¿ ≤4¿ ≤U¿ ≤[¿ ≤•¿ ≤ˆ¿ ≥?¿ ≥E¿ ≥U¿ ≥[¿ ≥´¿ ≥…¿ ≥Ô¿ ≥¿ ¥¿ ¥#¿ ¥s¿ ¥√¿ ¥—¿ ¥◊¿ µ#¿ µj¿ µá¿ µà¿ µª¿ µ¡¿ ∂¿ ∂L¿ ∂R¿ ∂û¿ ∂Ì¿ ∂ˇ¿ ∑"¿ ∑#¿ ∑W¿ ∑]¿ ∑¨¿ ∑˙¿ ∏¿ ∏¿ ∏o¿ ∏ª¿ π¿ πU¿ πh¿ πå¿ πç¿ π¬¿ π»¿ ∫¿ ∫e¿ ∫Ñ¿ ∫ä¿ ∫€¿ ª'¿ ªt¿ ªƒ¿ ª◊¿ ª¸¿ ª˝¿ º/¿ º5¿ ºÑ¿ º“¿ ºÔ¿ ºı¿ ΩC¿ Ωè¿ Ω⁄¿ æ)¿ æ<¿ æ^¿ æ_¿ æì¿ æô¿ æË¿ ø6¿ øS¿ øY¿ ø©¿ øı¿ ¿B¿ ¿í¿ ¿•¿ ¿…¿ ¿ ¿ ¿¸¿ ¡¿ ¡O¿ ¡ì¿ ¡ô¿ ¡ﬂ¿ ¬,¿ ¬2¿ ¬~¿ ¬Œ¿ ¬Ê¿ √¿ √	¿ √;¿ √A¿ √é¿ √“¿ √ÿ¿ ƒ¿ ƒk¿ ƒq¿ ƒø¿ ≈¿ ≈)¿ ≈K¿ ≈L¿ ≈z¿ ≈Ä¿ ≈»¿ ≈Œ¿ ∆¿ ∆F¿ ∆d¿ ∆e¿ ∆í¿ ∆ò¿ ∆·¿ ∆Ú¿ ∆¯¿ «G¿ «p¿ «ç¿ «é¿ «Ω¿ «√¿ »
¿ »¿ »_¿ »à¿ »ß¿ »®¿ »Ó¿ »Ù¿ …>¿ …i¿ …o¿ …Ω¿ …„¿  ¿  ¿  f¿  l¿  ∂¿  ‚¿  Ë¿ À8¿ À^¿ Àö¿ Àõ¿ À‹¿ À‚¿ Ã,¿ ÃS¿ ÃY¿ Ã©¿ Ãœ¿ Õ¿ Õ¿ ÕH¿ ÕN¿ Õò¿ Õø¿ Õ≈¿ Œ¿ Œ;¿ Œr¿ Œs¿ Œ©¿ ŒØ¿ œ ¿ œJ¿ œP¿ œõ¿ œ›¿ –
¿ –¿ –<¿ –B¿ –ì¿ –π¿ –ø¿ —¿ —+¿ —N¿ —O¿ —í¿ —ò¿ —Ê¿ “$¿ “l¿ “∂¿ “‡¿ “Ê¿ ”7¿ ”à¿ ”÷¿ ”‹¿ ”Ï¿ ”Ú¿ ‘B¿ ‘k¿ ‘Ω¿ ‘¿ ‘Ò¿ ’4¿ ’:¿ ’Ç¿ ’¬¿ ÷¿ ÷X¿ ÷Ç¿ ÷à¿ ÷Ÿ¿ ◊*¿ ◊x¿ ◊~¿ ◊é¿ ◊î¿ ◊·¿ ◊ˇ¿ ÿQ¿ ÿÑ¿ ÿÖ¿ ÿ∂¿ ÿº¿ ÿ˚¿ Ÿ¿ ŸN¿ Ÿù¿ Ÿª¿ Ÿ‹¿ Ÿ›¿ ⁄,¿ ⁄2¿ ⁄|¿ ⁄À¿ €¿ €j¿ €p¿ €Ä¿ €Ü¿ €Œ¿ ‹¿ ‹¿ ‹%¿ ‹j¿ ‹ï¿ ‹Ï¿ ›E¿ ›ç¿ ›Û¿ ﬁ;¿ ﬁ°¿ ﬁÚ¿ ﬂj¿ ﬂª¿ ‡3¿ ‡y¿ ‡›¿ ·B¿ ·•¿ ‚¿ ‚¿ ‚¿ ‚+¿ ‚≠¿ ‚Ø¿ ‚∞¿ ‚ı¿ „¿ „3¿ „X¿ „Z¿ „[¿ „ä¿ „é¿ „ﬁ¿ ‰%¿ ‰r¿ ‰è¿ ‰◊¿ ‰ˆ¿ ‰¸¿ ÂL¿ Â^¿ Âp¿ Â~¿ Âû¿ ÂΩ¿ Â‚¿ Â„¿ Ê.¿ Ê4¿ Êk¿ ÊÇ¿ Êê¿ Ê∞¿ Ê”¿ Ê„¿ Á	¿ Á¿ Á ¿ Á!¿ Á"¿ Áh¿ Ám¿ Á–¿ Ë2¿ Ëc¿ Ë™¿ Ë´¿ ËÕ¿ ËÌ¿ ÈA¿ È]¿ Èa¿ Èb¿ È§¿ È™¿ È˙¿ Í¿ Í-¿ Í.¿ ÍY¿ Í_¿ Í®¿ Í¯¿ Î&¿ Î,¿ Ît¿ Î¿¿ Î˙¿ Ï¿ Ï¿ Ï¿ Ï@¿ ÏA¿ ÏO¿ ÏP¿ Ï™¿ Ï∞¿ Ï˜¿ ÌH¿ ÌW¿ Ì¿ Ìñ¿ Ì∏¿ Ì¿ ÓB¿ ÓV¿ Ó\¿ Ó`¿ Óa¿ Ó†¿ Ó∫¿ Ó‘¿ ÓÌ¿ Ô¿ Ô[¿ Ôu¿ Ôä¿ Ôû¿ Ô§¿ Ô®¿ Ô©¿ ÔÒ¿ Ô˜¿ H¿ \¿ b¿ ≤¿ Ò¿ ÒR¿ Ò†¿ Òœ¿ Ò’¿ Ú¿ ÚX¿ Ú^¿ Úö¿ ÚÈ¿ Ú˙¿ Û¿ Û¿ Ûa¿ Ûg¿ Û∏¿ ÛÃ¿ Û“¿ Ù"¿ Ùq¿ Ù¿¿ ı ¿ ı¿ ıK¿ ıQ¿ ıõ¿ ı∏¿ ıπ¿ ı˛¿ ˆ¿ ˆN¿ ˆò¿ ˆ‡¿ ˜*¿ ˜z¿ ˜á¿ ˜ç¿ ˜⁄¿ ¯"¿ ¯(¿ ¯8¿ ¯>¿ ¯Ç¿ ¯°¿ ¯¢¿ ¯Ó¿ ¯Ù¿ ˘<¿ ˘ã¿ ˘€¿ ˙¿ ˙#¿ ˙$¿ ˙I¿ ˙O¿ ˙û¿ ˙Ï¿ ˚2¿ ˚N¿ ˚T¿ ˚°¿ ˚¿ ¸¿ ¸P¿ ¸Q¿ ¸^¿ ¸_¿ ¸Æ¿ ¸‰¿ ˝¿ ˝/¿ ˝J¿ ˝p¿ ˝~¿ ˝ü¿ ˝±¿ ˝µ¿ ˝∂¿ ˛¿ ˛¿ ˛X¿ ˛à¿ ˛é¿ ˛û¿ ˛§¿ ˛¬¿ ˛Ì¿ ˇF¿ ˇG¿ ˇ£¿ ˇÛ¿ L¿ M¿ N¿ \¿ ]¿ ß¿ …¿  ¿¿h¿{¿Æ¿Ø¿Í¿0¿@¿o¿π¿¸¿+¿~¿ß¿µ¿∆¿ˇ¿H¿w¿™¿∫¿¿ù¿'¿5¿A¿K¿t¿Æ¿%¿°¿—¿¿˛¿¿¿x¿y¿Ω¿æ¿„¿	¿	7¿	É¿	ñ¿	†¿	∞¿	Ò¿
&¿
k¿
~¿
à¿
â¿
¡¿
ﬁ¿¿.¿4¿i¿’¿¿ˆ¿¿/¿e¿Ä¿¶¿Î¿#¿A¿M¿i¿s¿{¿Å¿∂¿ÿ¿¸¿H¿ë¿◊¿¿W¿Å¿ã¿¨¿«¿·¿È¿Ô¿¿=¿t¿ì¿«¿¸¿¿)¿3¿;¿A¿^¿q¿Ö¿â¿ä¿≈¿ˇ¿¿¿B¿Ç¿É¿µ¿ª¿¿X¿m¿¢¿ø¿ı¿¿$¿,¿2¿6¿7¿e¿k¿∫¿¿1¿j¿á¿Ω¿ˇ¿¿¿%¿6¿:¿;¿W¿X¿d¿£¿§¿∞¿Ô¿¿¸¿¿=¿A¿B¿N¿t¿ç¿∏¿	¿M¿k¿q¿é¿µ¿«¿›¿Ò¿˜¿¿H¿e¿k¿o¿p¿|¿é¿π¿Ï¿
¿/¿C¿^¿{¿±¿˛¿.¿P¿j¿r¿x¿º¿˝¿¿1¿5¿6¿L¿M¿d¿z¿ä¿ò¿´¿ø¿Ù¿¿¿"¿#¿u¿´¿ﬂ¿	¿3¿i¿±¿˘¿¿N¿u¿®¿›¿ ¿ K¿ ~¿ Ø¿ ‚¿!¿!T¿!´¿!Ø¿!∞¿!À¿!Ã¿"¿"ä¿"ã¿"¿¿"¡¿"ı¿"˚¿#K¿#l¿#á¿#à¿#∂¿$ ¿$¿$&¿$'¿$f¿$¶¿$ß¿$—¿$◊¿%¿%¿%P¿%¿%Ä¿%«¿%Õ¿&¿&¿&E¿&Å¿&∆¿&«¿'¿'¿'E¿'K¿'Ö¿'¥¿'µ¿'ˆ¿(¿(¿(V¿(\¿(ï¿(—¿)¿)¿)h¿)Ç¿)à¿)÷¿)Ù¿)˙¿*3¿*9¿*|¿*Ω¿*æ¿+¿+[¿+a¿+Ø¿+Õ¿+”¿,¿,¿,T¿,¢¿,˘¿,˙¿-K¿-e¿-k¿-π¿-◊¿-›¿.¿.¿._¿.†¿.°¿.¿/>¿/D¿/í¿/∞¿/∂¿/Ô¿/ı¿07¿0Ö¿0‹¿0›¿1+¿11¿1j¿1p¿1©¿1÷¿1◊¿2$¿2H¿2N¿2á¿2ç¿2≈¿2ˇ¿3B¿3C¿3î¿3∑¿3Ω¿4¿4U¿4~¿4Ñ¿4î¿4ö¿4„¿5#¿5p¿5ñ¿5≈¿5∆¿6¿6¿6d¿6±¿7 ¿7I¿7ô¿7‚¿7Ë¿7˛¿8J¿8r¿8x¿8»¿9¿93¿99¿9â¿:
¿:¿:`¿:≠¿:˙¿;¿;,¿;F¿;c¿;{¿;ï¿;π¿;‰¿<¿<!¿<H¿<j¿<â¿<≠¿<º¿<…¿<‘¿<‹¿<Ê¿<¯¿<˛¿=¿=¿=^¿=Æ¿=‘¿>¿>¿>M¿>^¿>ù¿>«¿>»¿?¿?0¿?f¿?•¿?¶¿?ı¿@¿@¿@[¿@©¿@–¿@˝¿A¿A¿Am¿Aô¿Aœ¿A¿AÒ¿B@¿B^¿Bá¿Bù¿Bû¿BÍ¿B¿C=¿CI¿C{¿Cï¿Cñ¿C‹¿D¿D¿D¿Dj¿D|¿DÇ¿D“¿E¿Ed¿Ej¿Ez¿EÄ¿E ¿E˚¿F¿F¿Ff¿Fx¿F~¿Fπ¿Fø¿Fœ¿F’¿G(¿G[¿Gw¿Gx¿G«¿GŸ¿Gﬂ¿H¿H ¿H0¿H6¿Hà¿Hª¿H◊¿Hÿ¿I"¿I?¿IE¿Iì¿I›¿IÚ¿I¯¿J¿J¿JN¿Jà¿J∂¿JŒ¿Jœ¿K¿K-¿K3¿KÄ¿Kî¿Kö¿KÍ¿L,¿LZ¿Lr¿Ls¿L¬¿L‘¿L⁄¿M'¿M;¿MA¿Mê¿M∏¿MÓ¿N
¿N¿N]¿N^¿NÆ¿NØ¿N˛¿OE¿Os¿Oy¿O∆¿OÙ¿O˙¿PK¿Pô¿P≠¿P⁄¿Q¿Q¿Q5¿Qp¿QÑ¿QÖ¿Që¿R¿RM¿RT¿RU¿RÑ¿R≥¿RÙ¿S5¿Sb¿Sç¿S∞¿S”¿SÔ¿T¿T9¿Tä¿Tı¿U!¿UM¿Ut¿U¢¿U“¿V¿VQ¿VÇ¿V©¿V”¿W¿W/¿We¿W≥¿W¥¿W¿¿X¿Xû¿X•¿X±¿Y¿Yè¿Yñ¿Yö¿Yõ¿Yú¿Y‘¿Y⁄¿Z+¿Zw¿Z™¿Zœ¿ZÁ¿[	¿[B¿[{¿[∆¿\¿\H¿\{¿\“¿]¿]4¿]Y¿]á¿]∑¿]Á¿^¿^=¿^p¿^ô¿^º¿^Û¿_@¿_ë¿_≤¿_‡¿`5¿``¿`á¿`í¿`Â¿`Ì¿a!¿av¿aß¿a‘¿aﬂ¿b2¿b:¿b@¿bA¿bl¿bõ¿bƒ¿b‚¿c
¿c9¿ch¿cù¿c»¿c˘¿d,¿d_¿dê¿d¡¿d˙¿e?¿er¿e…¿f¿fe¿f™¿fÀ¿fˆ¿g ¿g*¿g{¿g–¿g˙¿h1¿hä¿hæ¿hÈ¿h¯¿iO¿i[¿iò¿iÒ¿j+¿j\¿jk¿j¬¿jŒ¿jÿ¿k¿k<¿kh¿k†¿k”¿kﬁ¿l¿l@¿ll¿l£¿l÷¿l·¿l‚¿m.¿m/¿mD¿mN¿mT¿mU¿mo¿mÉ¿mõ¿m√¿mÎ¿n%¿n_¿nÖ¿n©¿nª¿n◊¿nÛ¿o¿o'¿oK¿ou¿oï¿oª¿o„¿p¿p1¿pW¿pÖ¿p–¿p◊¿p€¿p‹¿q¿q3¿q7¿q8¿qr¿qΩ¿r¿r	¿rk¿r¿r≤¿r‡¿s¿sG¿sz¿s´¿s∏¿sË¿t6¿tn¿tû¿t⁄¿t‚¿u3¿uC¿uy¿uÆ¿uı¿u˝¿v¿v,¿vj¿vΩ¿w¿wN¿wù¿w•¿w´¿w√¿w—¿wÍ¿x¿x¿xH¿xÄ¿x™¿x‚¿y¿yh¿y§¿yÓ¿z¿zL¿zu¿z–¿{/¿{`¿{ë¿{ ¿{¸¿|'¿|`¿|õ¿|÷¿}¿}8¿}Y¿}ì¿}…¿~!¿~(¿~<¿~@¿~A¿~ë¿~≈¿ ¿&¿g¿û¿¿¿∆¿«¿¯¿Ä"¿Ä~¿Äã¿ÄÕ¿Ä˜¿Ä˝¿Ä˛¿ÅM¿Åú¿ÅÈ¿Ç0¿Ç~¿Ç≈¿ÇË¿É?¿ÉÉ¿É∫¿É€¿Ñ¿Ñ&¿Ñj¿Ñ¶¿ÑË¿Ö.¿Ö~¿Öû¿Ö¡¿Ö›¿ÖÁ¿Ü¿Ü.¿Ü6¿Ü7¿Ü_¿Üt¿Üé¿Ü™¿Ü¥¿Ü∫¿Üª¿á¿á#¿áB¿áZ¿á`¿áà¿áâ¿á•¿áÔ¿à ¿à¿à¿àJ¿àP¿àô¿àÍ¿â¿â&¿â4¿ât¿âx¿ây¿âÖ¿â‘¿â’¿â·¿ä&¿äQ¿äl¿ä~¿ä“¿ã>¿ã^¿ãd¿ãÔ¿åZ¿å‰¿çD¿ç^¿çº¿ç…¿é$¿é?¿éZ¿é†¿éÌ¿èp¿è®¿è∞¿ê¿ê ¿êï¿ë¿ëb¿ë¶¿ë∑¿í¿ío¿ì1¿ì~¿ìÿ¿î@¿îâ¿î“¿ï-¿ïà¿ïœ¿ñ5¿ñò¿ñ¬¿ó1¿óà¿óﬂ¿ò>¿òó¿òË¿ôD¿ôû¿ô˙¿öI¿öò¿öú¿öù¿öÂ¿öÎ¿õ;¿õk¿õw¿õè¿õÆ¿õÃ¿ú¿úS¿úZ¿úz¿ù¿ù¿ù¿ù$¿ùJ¿ù\¿ùõ¿ùÏ¿ùÛ¿û¿û.¿ûA¿ûU¿ûs¿ûz¿û~¿û¿ûã¿ü¿ü<¿ü†¿ü±¿üµ¿ü∂¿†¿†Z¿†z¿†ï¿†ª¿†º¿†÷¿°	¿°$¿°W¿°É¿°â¿°ç¿°è¿°ê¿°⁄¿¢¿¢¿¢l¿¢π¿£¿£b¿£≠¿£ﬁ¿£Î¿§¿§&¿§>¿§d¿§É¿§£¿§¿¿§¡¿•
¿•0¿•6¿•V¿•\¿•∞¿¶¿¶R¿¶f¿¶Ç¿¶É¿¶Õ¿¶Ô¿ß¿ß¿ß.¿ßJ¿ßK¿ßW¿ßy¿ß§¿ß®¿ß™¿ß´¿ß˙¿®0¿®4¿®}¿®¡¿®Ÿ¿®¯¿©¿©=¿©>¿©à¿©™¿©∞¿©¸¿™!¿™=¿™>¿™c¿™d¿™ñ¿™Õ¿™Œ¿™⁄¿´¿´<¿´@¿´A¿´ë¿´ó¿´Â¿¨¿¨I¿¨x¿¨ß¿¨ı¿≠+¿≠E¿≠b¿≠™¿≠ø¿≠…¿≠„¿Æ¿ÆM¿Æb¿Æl¿Ær¿ÆÑ¿ÆÖ¿Æœ¿ÆÔ¿Ø¿Ø+¿ØK¿Ø_¿ØÜ¿Ø™¿Ø“¿Ø›¿∞¿∞¿∞$¿∞,¿∞D¿∞j¿∞Ä¿∞à¿∞é¿∞´¿∞¨¿∞⁄¿±¿±¿±¿±:¿±Å¿±í¿±ñ¿±ó¿±„¿±È¿≤8¿≤Y¿≤_¿≤≠¿≤˙¿≥J¿≥q¿≥w¿≥¬¿¥¿¥`¿¥Ø¿¥€¿µ¿µ#¿µI¿µ]¿µc¿µß¿µ’¿∂¿∂"¿∂q¿∂•¿∂Ô¿∑;¿∑`¿∑t¿∑~¿∑¿∑‹¿∏¿∏H¿∏Ä¿∏À¿π¿π[¿π¶¿πÿ¿∫ ¿∫
¿∫¿∫¿∫¿∫B¿∫k¿∫–¿ª¿ªh¿ª´¿ª ¿ªË¿ª¿º"¿º*¿º+¿ºE¿ºj¿ºz¿ºÇ¿ºú¿ºø¿º€¿º„¿º¸¿Ω¿Ω¿ΩM¿Ω´¿ΩØ¿Ω±¿Ω≤¿ΩÛ¿æ8¿æX¿æj¿æn¿æ©¿æœ¿æÙ¿æˆ¿æ˜¿øG¿øU¿øY¿øß¿ø¯¿¿2¿¿6¿¿h¿¿ù¿¿°¿¿˜¿¡`¿¡ç¿¡Ω¿¡ﬁ¿¬*¿¬^¿¬v¿¬ë¿¬◊¿¬Í¿¬Ú¿√
¿√&¿√p¿√É¿√ã¿√è¿√ü¿√†¿√Ï¿ƒ
¿ƒ¿ƒB¿ƒ`¿ƒr¿ƒó¿ƒπ¿ƒﬂ¿ƒË¿≈
¿≈¿≈)¿≈/¿≈E¿≈g¿≈{¿≈Å¿≈Ö¿≈û¿≈ü¿≈∑¿∆¿∆¿∆¿∆¿∆^¿∆ì¿∆ó¿∆·¿∆Â¿«4¿«|¿«¡¿«ÿ¿«¿»¿»¿»#¿»?¿»_¿»`¿»ô¿»µ¿»∂¿»ı¿»˚¿…:¿…L¿…o¿…p¿…Ω¿… ¿…‡¿…·¿…Ì¿ ¿ M¿ u¿ {¿ ™¿ Æ¿ ∞¿ ±¿ ˚¿À¿À¿Àf¿À≠¿Àº¿ÀÍ¿Ã&¿Ãg¿Ã¶¿Ãß¿Ã⁄¿Ã‡¿Õ¿ÕI¿ÕJ¿ÕV¿Õi¿ÕÇ¿Õñ¿Õ≤¿Õ«¿ÕÀ¿ÕÃ¿Œ¿Œ:¿ŒW¿Œe¿Œú¿Œ‹¿œ¿œá¿œ¢¿œ¿¿–¿–A¿–{¿–ò¿–˝¿—%¿—t¿—“¿“¿“m¿“Ω¿“…¿“”¿“€¿“·¿”1¿”ô¿”Œ¿‘+¿‘m¿‘≤¿‘¯¿’9¿’]¿’û¿’·¿÷'¿÷k¿÷Ä¿÷®¿÷Ê¿÷Ï¿◊¿◊@¿◊ó¿ÿ¿ÿ¿ÿp¿ÿá¿ÿã¿ÿå¿ÿË¿Ÿ¿Ÿm¿Ÿ£¿Ÿ—¿ŸÍ¿⁄¿⁄&¿⁄L¿⁄V¿⁄\¿⁄ö¿⁄≠¿⁄“¿⁄÷¿⁄◊¿€%¿€+¿€z¿€ú¿€¢¿€Ô¿‹¿‹T¿‹p¿‹…¿‹‰¿‹˘¿›¿›¿›¿›C¿›ò¿›º¿›¿¿›¡¿ﬁ@¿ﬁb¿ﬁî¿ﬁÀ¿ﬁ‡¿ﬂ ¿ﬂ&¿ﬂM¿ﬂ`¿ﬂê¿ﬂ≠¿ﬂ‚¿‡¿‡+¿‡C¿‡M¿‡b¿‡l¿‡ì¿‡ô¿‡µ¿‡˘¿·i¿·Ü¿·†¿·®¿·Æ¿·–¿·‘¿·’¿‚'¿‚-¿‚|¿‚û¿‚§¿‚Ò¿„¿„a¿„}¿„∞¿„∆¿„‘¿‰?¿‰X¿‰m¿‰q¿‰r¿‰~¿‰≠¿‰Ø¿‰∞¿‰Ú¿Â¿Â
¿ÂT¿Âh¿Âá¿Âà¿Â®¿Â©¿Â˜¿Ê¿Ê¿Êg¿Ê∂¿Á¿Á¿Á!¿Áo¿Áπ¿ÁÊ¿ÁÏ¿Ë9¿Ëo¿Ëì¿Ë∫¿ËÒ¿È¿È¿È¿Èh¿È∑¿ÈÍ¿È¿Í=¿Íã¿Íø¿Î¿Î[¿Îå¿Îí¿Îﬂ¿Ï.¿ÏQ¿ÏR¿Ï°¿ÏÔ¿Ïˇ¿Ì¿ÌT¿Ì†¿ÌÔ¿Ó¿Ó ¿Óp¿Óæ¿Ô¿Ô¿Ô[¿Ôñ¿Ô“¿Ô”¿ÔÌ¿'¿G¿H¿s¿y¿«¿¯¿Ò*¿ÒL¿ÒM¿Òô¿Òœ¿Ò’¿ÒÂ¿ÒÎ¿Ú¿Ú¿ÚÄ¿Úö¿Úõ¿Ú…¿Úœ¿Û¿Û'¿Ûs¿Ûê¿Û∞¿Û‘¿ÛÚ¿Ûˆ¿Û˜¿ÙE¿ÙZ¿Ù`¿Ù®¿Ù∏¿ı¿ı#¿ıK¿ıg¿ıx¿ıÄ¿ıÑ¿ıÖ¿ı≤¿ı∏¿ˆ¿ˆX¿ˆf¿ˆl¿ˆ∏¿ˆˇ¿˜¿˜P¿˜û¿˜Ô¿¯=¿¯ç¿¯ﬁ¿˘)¿˘w¿˘ø¿˙¿˙P¿˙u¿˙ç¿˙∞¿˙È¿˙˝¿˚¿˚¿˚5¿˚;¿˚ã¿˚∆¿˚Ã¿¸¿¸g¿¸y¿¸™¿¸»¿¸Ò¿˝0¿˝J¿˝N¿˝O¿˝É¿˝â¿˝ÿ¿˛&¿˛E¿˛K¿˛õ¿˛Á¿ˇ2¿ˇÅ¿ˇî¿ˇ«¿ˇÊ¿ ¿ P¿ k¿ o¿ p¿ °¿ ß¿ Ê¿ Ï¿9¿à¿¶¿”¿Ô¿¿S¿k¿o¿p¿•¿´¿˙¿H¿g¿m¿æ¿
¿W¿ß¿∫¿Ô¿¿:¿{¿ó¿õ¿ú¿Œ¿‘¿#¿q¿é¿î¿‚¿.¿y¿»¿€¿
¿'¿O¿ç¿¶¿™¿´¿ﬂ¿Â¿	4¿	Ç¿	ü¿	•¿	ı¿
A¿
é¿
ﬁ¿
Ò¿$¿C¿m¿≠¿»¿Ã¿Õ¿ˇ¿¿R¿ñ¿ú¿Â¿%¿=¿C¿è¿ﬂ¿˜¿&¿C¿k¿©¿¬¿∆¿«¿˘¿ˇ¿L¿ê¿ñ¿ﬂ¿¿7¿=¿ã¿€¿ı¿$¿A¿i¿ß¿¿¿ƒ¿≈¿Û¿˘¿A¿G¿ñ¿ø¿Ê¿ˇ¿#¿]¿r¿v¿w¿§¿™¿Û¿¿
¿Y¿Ç¿ß¿ø¿‚¿¿/¿3¿4¿c¿i¿∞¿∂¿¿.¿W¿q¿ñ¿—¿Á¿Î¿Ï¿"¿(¿v¿∆¿Í¿¿9¿Å¿£¿⁄¿˚¿'¿i¿Ü¿ä¿ã¿—¿◊¿!¿L¿R¿†¿∆¿"¿X¿ô¿¥¿¿4¿S¿[¿à¿å¿ç¿‘¿⁄¿$¿P¿V¿¶¿Ã¿*¿a¿£¿æ¿¿?¿^¿f¿î¿ò¿ô¿⁄¿‡¿ *¿ Q¿ W¿ ß¿ Õ¿!¿!P¿!å¿!ß¿!¿""¿"A¿"I¿"v¿"z¿"{¿"Ω¿"√¿#¿#4¿#:¿#ä¿#∞¿$¿$6¿$s¿$é¿$ÿ¿%
¿%)¿%1¿%_¿%c¿%d¿%ö¿%†¿%Ò¿&;¿&A¿&å¿&Œ¿'¿'4¿'g¿'Ç¿'¿¿'Î¿(J¿(ß¿(√¿(Î¿)¿)!¿))¿)F¿)J¿)K¿)|¿)Ç¿)”¿)˘¿)ˇ¿*N¿*k¿*ö¿*∏¿*·¿*¸¿+5¿+c¿+é¿+¢¿+™¿+¬¿+∆¿+«¿,
¿,¿,^¿,ú¿,‰¿-.¿-X¿-^¿-Ø¿. ¿.N¿.T¿.d¿.j¿.∫¿.„¿/5¿/Ü¿/¥¿/Ì¿0<¿0f¿0j¿0k¿0Æ¿0¥¿0¸¿1<¿1à¿1“¿1¸¿2¿2S¿2§¿2Ú¿2¯¿3¿3¿3[¿3y¿3À¿4¿4J¿4É¿4“¿4¸¿5 ¿5¿5N¿5`¿5∏¿5π¿6¿6¿6 ¿6n¿6º¿6„¿6È¿78¿7É¿7…¿7Ò¿8¿8<¿8e¿8Ä¿8ñ¿8¥¿8∏¿8π¿9¿9¿9S¿9¢¿9Ú¿:$¿:P¿:g¿:â¿:•¿:√¿:«¿:»¿;¿;¿;g¿;s¿;•¿;ø¿;‰¿<¿<¿<4¿<R¿<V¿<W¿<°¿<≤¿<⁄¿<Ô¿=¿=-¿=;¿=U¿=s¿=w¿=x¿=¬¿=ﬂ¿>¿>%¿>H¿>i¿>w¿>î¿>≤¿>∂¿>∑¿?¿?¿?¿?h¿?|¿?Ç¿?Œ¿@¿@5¿@M¿@p¿@ë¿@ü¿@º¿@⁄¿@ﬁ¿@ﬂ¿A.¿A@¿AF¿Aì¿Aß¿A≠¿A¯¿B¿BM¿Bi¿Bê¿Bµ¿B√¿B‰¿C¿C¿C¿CX¿Cû¿C§¿CÈ¿D.¿Dl¿Dr¿Dæ¿E¿E?¿Es¿Eì¿E¡¿Eﬂ¿E„¿E‰¿F#¿F)¿Fu¿Fø¿G¿G?¿G°¿H¿H^¿H|¿H∂¿H€¿I"¿I&¿I'¿IW¿I∞¿I»¿I÷¿J¿J4¿JF¿JJ¿JK¿JÖ¿Jã¿JÕ¿J”¿K¿K¿K"¿K(¿Kv¿K•¿K¡¿K‹¿L¿L*¿L.¿L/¿L~¿Lå¿Lí¿L‹¿M+¿Mw¿M¿¿N¿N¿N@¿NF¿NV¿N\¿Nñ¿N“¿O¿OH¿Op¿Oé¿Oí¿Oì¿O„¿OÈ¿P+¿P1¿Pj¿Pp¿PÄ¿PÜ¿P‘¿Q"¿Qh¿Q∂¿Q¸¿R+¿RG¿Rb¿Rí¿R∞¿R¥¿Rµ¿S¿S(¿S.¿Sx¿S«¿T¿T\¿Tù¿T£¿T‹¿T‚¿TÚ¿T¯¿U2¿UÇ¿U≤¿V¿V2¿Vn¿V™¿V‰¿W¿W*¿W.¿W/¿Wi¿Wí¿Wò¿W„¿WÈ¿X8¿XÇ¿X≠¿X≥¿XÏ¿XÚ¿Y¿Y¿Y_¿Y†¿YŒ¿YÚ¿Z4¿ZR¿ZV¿ZW¿Zë¿Z◊¿Z›¿[,¿[v¿[°¿[ß¿[‡¿[Ê¿[ˆ¿[¸¿\?¿\ç¿\“¿]¿]X¿]v¿]z¿]{¿]µ¿]ﬁ¿]‰¿^/¿^5¿^Ñ¿^Œ¿^˘¿^ˇ¿_8¿_>¿_ï¿_÷¿`¿`(¿`j¿`à¿`å¿`ç¿`«¿a¿a¿ab¿a¨¿a◊¿a›¿b¿b¿b,¿b2¿bu¿b√¿c¿cT¿cé¿c¨¿c∞¿c±¿cˇ¿d¿dF¿dL¿dÖ¿dã¿dõ¿d°¿dÓ¿e¿e5¿eO¿e}¿eõ¿eü¿e†¿e¿f¿f¿f`¿fØ¿f¸¿gE¿gÜ¿gå¿g≈¿gÀ¿g€¿g·¿h¿hT¿hè¿h«¿hÌ¿i¿i¿i¿iY¿ij¿i©¿i”¿j¿j¿j-¿jI¿jg¿jk¿jl¿jµ¿j€¿k¿k¿k<¿kg¿kÜ¿kî¿kö¿k≤¿k–¿k‘¿k’¿l&¿l<¿lB¿lí¿l·¿lı¿m¿m6¿mV¿mÅ¿m†¿mÆ¿m¥¿mÃ¿mÍ¿mÓ¿mÔ¿n:¿nU¿n[¿nk¿nq¿n¿¿nˇ¿o¿oO¿oS¿oT¿oî¿oö¿o™¿o∞¿o˝¿p:¿pY¿pà¿på¿pç¿p√¿p˙¿q¿qB¿qF¿qG¿qz¿qÄ¿qÃ¿r¿rL¿rR¿r†¿rÓ¿s<¿sÅ¿s–¿s˙¿t ¿t¿t¿tl¿t´¿t ¿t˚¿tˇ¿u ¿uF¿ut¿u™¿uÀ¿uˇ¿v#¿vA¿vE¿vF¿vë¿vó¿v‰¿w7¿wâ¿w¡¿w˛¿x¿xL¿xP¿xQ¿xè¿xï¿xÊ¿y5¿yj¿yp¿y¿¿y‰¿yÍ¿z9¿zf¿zl¿zø¿{¿{#¿{ê¿{Ø¿{‚¿|¿|¿|¿|g¿|≤¿|∆¿|Ã¿}¿}d¿}j¿}≥¿}“¿~?¿~^¿~ë¿~¿¿~ƒ¿~≈¿¿d¿j¿ª¿˜¿˝¿ÄF¿ÄZ¿Ä«¿ÄÊ¿Å¿ÅH¿ÅL¿ÅM¿Åù¿Å”¿ÅŸ¿Ç&¿Çn¿ÇÀ¿Ç˙¿É9¿É=¿É>¿ÉÄ¿Éø¿Éﬂ¿Ñ¿Ñ¿Ñ¿Ñ]¿Ñò¿Ñ∂¿Ñ‰¿ÑË¿ÑÈ¿Ö4¿Öm¿Öä¿Ö∑¿Öª¿Öº¿Ü¿Ü:¿ÜU¿ÜÄ¿ÜÑ¿ÜÖ¿Ü–¿á	¿á&¿áS¿áW¿áX¿á£¿á‹¿á˘¿à&¿à*¿à+¿às¿àÄ¿à√¿àÂ¿â¿â¿â¿âZ¿â`¿âØ¿ä ¿ä¿äV¿ä£¿äµ¿äª¿ã¿ã*¿ã0¿ãÅ¿ãœ¿å¿åT¿åç¿å™¿å◊¿å€¿å‹¿ç¿çT¿çt¿ç§¿ç®¿ç©¿çﬂ¿çÂ¿é¿éT¿és¿é¢¿é¶¿éß¿é÷¿é‹¿è+¿è{¿è¡¿è˛¿ê¿êL¿êP¿êQ¿ê|¿êÇ¿ê—¿ë
¿ëI¿ëi¿ëô¿ëù¿ëû¿ëÓ¿í¿í¿ío¿íΩ¿ì¿ì9¿ìä¿ì≥¿ìÏ¿ì¿ìÒ¿î:¿îs¿î©¿î ¿îˆ¿ï¿ï-¿ïK¿ïO¿ïP¿ï†¿ï≤¿ï∏¿ñ¿ñT¿ñö¿ñ†¿ñ∞¿ñ∂¿ó ¿ó1¿óL¿ór¿óç¿ó™¿ó»¿óÃ¿óÕ¿ò¿ò.¿ò4¿òo¿òu¿òÖ¿òã¿òﬁ¿ô¿ô-¿ôT¿ôo¿ôç¿ô´¿ôØ¿ô∞¿ôˇ¿ö¿ö¿öR¿öX¿öh¿ön¿ö¡¿öÙ¿õ¿õ7¿õR¿õp¿õé¿õí¿õì¿õù¿õû¿õÊ¿õ˛¿ú¿ú¿ú¿úi¿úy¿úº¿ú„¿ú‰¿ù3¿ùQ¿ùW¿ùõ¿ùÏ¿û
¿û¿û\¿û≠¿û˙¿ü ¿ü¿ü¿üW¿üs¿ü†¿üÀ¿üÎ¿üÔ¿ü¿†¿†¿†!¿†S¿†d¿†Ä¿†ç¿†™¿†∞¿†Œ¿†“¿†”¿°¿°¿°<¿°=¿°Ü¿°õ¿°°¿°¿¢5¿¢n¿¢µ¿¢»¿¢¸¿£¿£6¿£J¿£é¿£¢¿£®¿£Ï¿§ ¿§¿§R¿§f¿§l¿•¿•¿•'¿•+¿•,¿•x¿•~¿•Ã¿•¿•ˆ¿¶E¿¶¿¶Ö¿¶œ¿ß!¿ß[¿ßâ¿ß™¿ß´¿ßÃ¿ß⁄¿ß€¿® ¿®C¿®o¿®ã¿®∏¿®Á¿©¿©I¿©v¿©¢¿©À¿©˛¿™-¿™\¿™ì¿™î¿™ø¿™‡¿´¿´>¿´f¿´õ¿´ ¿´—¿¨¿¨E¿¨ö¿¨›¿≠2¿≠u¿≠§¿≠—¿≠˘¿Æ-¿Æ\¿Æc¿Æd¿Æ∞¿Æ±¿Æ˜¿Æ˚¿Æ¸¿Ø/¿ØQ¿Øu¿Øß¿Ø◊¿∞9¿∞g¿∞≥¿∞€¿∞˜¿±#¿±a¿±ç¿±À¿±ı¿≤¿≤=¿≤]¿≤u¿≤°¿≤…¿≤Û¿≥¿≥K¿≥s¿≥ö¿≥æ¿≥Ï¿¥¿¥@¿¥r¿¥î¿¥’¿¥Ÿ¿¥€¿¥‹¿µ+¿µ<¿µ[¿µà¿µé¿µ€¿∂)¿∂]¿∂o¿∂p¿∂ü¿∂•¿∂Ù¿∑¿∑%¿∑'¿∑(¿∑S¿∑Ö¿∑∏¿∑Â¿∏¿∏¿∏D¿∏e¿∏¥¿∏÷¿∏Ù¿πk¿πz¿πò¿∫¿∫¿∫$¿∫(¿∫S¿∫u¿∫v¿∫∆¿∫»¿∫…¿ª¿ª7¿ª;¿ªà¿ªÿ¿º¿º¿ºb¿ºè¿ºì¿º‰¿Ω¿Ω¿Ω"¿Ω&¿Ωj¿Ω»¿æ¿æa¿æà¿æâ¿æ⁄¿æÌ¿æÛ¿ø3¿ø9¿øá¿ø∂¿øÃ¿øÕ¿øŸ¿¿¿¿9¿¿∏¿¿π¿¡¿¡)¿¡G¿¡f¿¡l¿¡m¿¡ø¿¡Œ¿¡¸¿¬¿¬B¿¬R¿¬X¿¬Y¿¬Ç¿¬Ü¿¬á¿¬∞¿¬∂¿√¿√¿√#¿√t¿√ƒ¿ƒ¿ƒ¿ƒ,¿ƒ_¿ƒ`¿ƒl¿ƒ±¿ƒ‹¿≈"¿≈&¿≈(¿≈)¿≈v¿≈Å¿≈Ö¿≈À¿≈˜¿≈˚¿∆K¿∆ö¿∆€¿∆Ú¿∆ˆ¿«B¿«o¿«s¿«ø¿»¿»J¿»Ä¿»∞¿… ¿…¿…G¿…_¿…q¿…É¿…°¿…≈¿…ı¿ ¿ 7¿ 8¿ Ü¿ ÷¿ Ê¿ Ï¿À:¿Àá¿Àù¿Àû¿À™¿À“¿Ã¿Ã(¿ÃQ¿ÃU¿ÃV¿Ãb¿Ãß¿Ã“¿Õ¿Õ¿Õ     
Ä•Äº Ä¡  Ä€Ä ÄÛ ÅÅ\Å_  Åâ Å∞Å”Å’  Å˝  Ç0 ÇFÇ[Ç]  Ç}ÇéÇ„ÇÂ  á2Ñ˝âﬂÇ¶/// A tag for a [SemanticsNode].
///
/// Tags can be interpreted by the parent of a [SemanticsNode]
/// and depending on the presence of a tag the parent can for example decide
/// how to add the tagged node as a child. Tags are not sent to the engine.
///
/// As an example, the [RenderSemanticsGestureHandler] uses tags to determine
/// if a child node should be excluded from the scrollable area for semantic
/// purposes.
///
/// The provided [name] is only used for debugging. Two tags created with the
/// same [name] and the `new` operator are not considered identical. However,
/// two tags created with the same [name] and the `const` operator are always
/// identical. âÅE ãã)Å/// Creates a [SemanticsTag].
///
/// The provided [name] is only used for debugging. Two tags created with the
/// same [name] and the `new` operator are not considered identical. However,
/// two tags created with the same [name] and the `const` operator are always
/// identical.ã*	ã0   ã9ÄöãœÄÇ/// A human-readable name for this tag used for debugging.
///
/// This string is not used to determine if two tags are identical.  ãÿUãÎ   ãÿãŸ å1ãˇêÉƒ/// An identifier of a custom semantics action.
///
/// Custom semantics actions can be provided to make complex user
/// interactions more accessible. For instance, if an application has a
/// drag-and-drop list that requires the user to press and hold an item
/// to move it, users interacting with the application using a hardware
/// switch may have difficulty. This can be made accessible by creating custom
/// actions and pairing them with handlers that move a list item up or down in
/// the list.
///
/// In Android, these actions are presented in the local context menu. In iOS,
/// these are presented in the radial context menu.
///
/// Localization and text direction do not automatically apply to the provided
/// label or hint.
///
/// Instances of this class should either be instantiated with const or
/// new instances cached in static fields.
///
/// See also:
///
///  * [SemanticsProperties], where the handler for a custom action is provided. ê!Å êíêßd/// Creates a new [CustomSemanticsAction].
///
/// The [label] must not be null or the empty string.ê©êø  êÃê“ê‡êŸê”ê‹êÈêÔê˚êˆêê˘ë	ëëëëë ë)Årëﬂë‡ëÄí/// Creates a new [CustomSemanticsAction] that overrides a standard semantics
/// action.
///
/// The [hint] must not be null or the empty string.ëÚí  í$í,  í:í@íMíFíAíIíVí\ígíbí]íeípívíÖí~íwíÅíîíéíñíüQíÎ;/// The user readable name of this custom semantics action. íıNì?9/// The hint description of this custom semantics action. ìHWìô7/// The standard semantics action this action replaces. ïÃï◊ ï·ïÊVñ ñ:ñ;ññ9ññ$ñ@Rñm ñêñëñtñèñuñåì§Aì∏   ì§ì•ìÈÄ˘î  îî  ìÈìÍîÊÄÄî˘   îÊîÁñóÅñ—,/// Get the identifier for a given `action`. ñﬂñˆ   ó±}ó˛,/// Get the `action` for a given identifier. òò   èˆè˜ò2äEò{7/// A string that carries a list of [StringAttribute]s. òêÇª ôsôÉÄ‘/// Creates a attributed string.
///
/// The [TextRange] in the [attributes] must be inside the length of the
/// [string].
///
/// The [attributes] must not be changed after the attributed string is
/// created.ôâôè  ôú+ô¢  ôÆô≈ô∆ô¥ôƒôµô–ô÷ô˛ôÈô◊ô›ôﬁôÏôˆô˜ööõIöõFõGõHõOKõî5/// The plain string stored in the attributed string. õüÄòú-k/// The attributes this string carries.
///
/// The list must not be modified after this string is created. °¨A°¿   °¨°≠ú<Ñ3ù9Ä⁄/// Returns a new [AttributedString] by concatenate the operands
///
/// The string attribute list of the returned [AttributedString] will contains
/// the string attributes from both operands with updated text ranges. ù;ùM   †sÅ5†ŸI/// Two [AttributedString]s are equal if their string and attributes are. †‹†‰  †ø†¿°ÒÄÑ¢   °Ò°Úòjòk¢yÜº£Äá/// A [DiagnosticsProperty] for [AttributedString]s, which shows a string
/// when there are no attributes, and more details otherwise. £RÇu £€£ÛÄÇ/// Create a diagnostics property for an [AttributedString] object.
///
/// Such properties are used with [SemanticsData] objects.£˘§  §
§  §)§/  §C§I  §c&§l  §è,§†  §¡§   #§9§X§z§ß§∂§∑§›§„§Ù§Ì§‰§§˛•••••••!•≈•,•;•S•K•U•t•h•v•í•ç•î•Ø•§•±•ÀÄÀ¶âÄ™/// Whether to show the property when the [value] is an [AttributedString]
/// whose [AttributedString.string] is the empty string.
///
/// This overrides [defaultValue]. ¶õ|¶∞   ¶õ¶úßÇß.  ß=*ßU  ßß ©7π™≈Å|/// Summary information about a [SemanticsNode] object.
///
/// A semantics node might [SemanticsNode.mergeAllDescendantsIntoThisNode],
/// which means the individual fields on the semantics node don't fully describe
/// the semantics at that node. This data structure contains the full semantics
/// for the node.
///
/// Typically obtained from [SemanticsNode.getSemanticsData]. ™ÎàJ ´∑´ƒÄ¡/// Creates a semantics data object.
///
/// The [flags], [actions], [label], and [Rect] arguments must not be null.
///
/// If [label] is not empty, then [textDirection] must also not be null.´À´⁄  ´‰´Û  ´ˇ¨  ¨"¨1  ¨E&¨T  ¨q&¨Ä  ¨ù¨¨  ¨ø¨Œ  ¨‡¨Ô  ¨¯≠  ≠≠$  ≠2≠A  ≠S≠b  ≠r≠Å  ≠ñ≠•  ≠∏≠«  ≠€≠Í  ≠˛Æ  Æ Æ/  ÆB ÆQ  Æh	Æn  ÆwÆ}  ÆãÆë  ÄîÆ±Æ∑Æ≈ÆæÆ∏Æ¡ÆœÆ’ÆÂÆﬁÆ÷Æ·ÆÔÆıØØÆˆØ	ØØØ5Ø.ØØ1Ø?ØEØfØ_ØFØbØpØvØóØêØwØìØ°ØßØæØ∑Ø®Ø∫Ø»ØŒ∞∞_ØÏØÊØœØﬁØﬂØÈØ˝ØÔ∞ ∞∞*∞B∞,∞;∞<∞C∞i∞o∞•± ∞ç∞á∞p∞∞Ä∞ä∞û∞ê∞°∞ß∞À∞„∞Õ∞‹∞›∞‰±
±±O±º±7±1±±)±*±4±H±:±K±Q±~±ü±Ä±ò±ô±†±∆±Ã≤≤x±Û±Ì±Õ±Â±Ê±≤±ˆ≤≤≤:≤[≤<≤T≤U≤\≤Ç≤à≤Ω≥≤•≤ü≤â≤ó≤ò≤¢≤∂≤®≤π≤ø≤‚≤˘≤‰≤Ú≤Û≤˙≥ ≥&≥3≥,≥'≥/≥9N≥Ç</// A bit field of [SemanticsFlag]s that apply to this node. ≥åR≥◊>/// A bit field of [SemanticsAction]s that apply to this node. ¥–Åµ«Ä”/// A textual description for the current label of the node in
/// [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [label], which exposes just the raw text. ∂»Å∑øÄ”/// A textual description for the current value of the node in
/// [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [value], which exposes just the raw text. πÅ8∫!Ä¸/// The value that [value] will become after performing a
/// [SemanticsAction.increase] action in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [increasedValue], which exposes just the raw text. ªlÅ8ºåÄ¸/// The value that [value] will become after performing a
/// [SemanticsAction.decrease] action in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [decreasedValue], which exposes just the raw text. Ω¢ÅæßÄ·/// A brief description of the result of performing an action on this node
/// in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [hint], which exposes just the raw text. æ∫ÄñøCo/// The reading direction for the text in [label], [value],
/// [increasedValue], [decreasedValue], and [hint]. øUÄüøÁx/// The currently selected text (or the position of the cursor) within [value]
/// if this node represents a text field. ø˘Ä∆¿ @ØÄ¢/// The total number of scrollable children that contribute to semantics.
///
/// If the number of children are unknown or unbounded, this value will be
/// null. ¿ @ƒ\¿ AC/// The index of the first visible semantic child of a scroll node. ¿ A%ÅÃ¿ B„Åõ/// Indicates the current scrolling position in logical pixels if the node is
/// scrollable.
///
/// The properties [scrollExtentMin] and [scrollExtentMax] indicate the valid
/// in-range values for this property. The value for [scrollPosition] may
/// (temporarily) be outside that range, e.g. during an overscroll.
///
/// See also:
///
///  * [ScrollPosition.pixels], from where this value is usually taken. ¿ BˆÅ.¿ DÅ /// Indicates the maximum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.maxScrollExtent], from where this value is usually taken. ¿ D)Å.¿ EHÅ /// Indicates the minimum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.minScrollExtent], from where this value is usually taken. ¿ E\Å…¿ GÅô/// The id of the platform view, whose semantics nodes will be added as
/// children to this node.
///
/// If this value is non-null, the SemanticsNode must not have any children
/// as those would be replaced by the semantics nodes of the referenced
/// platform view.
///
/// See also:
///
///  * [AndroidView], which is the platform view for Android.
///  * [UiKitView], which is the platform view for iOS. ¿ G*Åv¿ HíÅL/// The maximum number of characters that can be entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [SemanticsFlag.isTextField] is set. Defaults
/// to null, which means no limit is imposed on the text field. ¿ H•Åg¿ I˙Å9/// The current number of characters that have been entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [SemanticsFlag.isTextField] is set. This must
/// be set when [maxValueLength] is set. ¿ JN¿ J[</// The bounding box for this node in its coordinate system. ¿ JdY¿ Jπ9/// The set of [SemanticsTag]s associated with this node. ¿ J¬Å¿ KÿÄ¸/// The transform from this node's coordinate system to its parent's coordinate system.
///
/// By default, the transform is null, which represents the identity
/// transformation (i.e., that this node has the same coordinate system as its
/// parent). ¿ KÊÄÏ¿ L…Ä…/// The elevation of this node relative to the parent semantics node.
///
/// See also:
///
///  * [SemanticsConfiguration.elevation] for a detailed discussion regarding
///    elevation and semantics. ¿ L◊Äƒ¿ MíÄ£/// The extent of this node along the z-axis beyond its [elevation]
///
/// See also:
///
///  * [SemanticsConfiguration.thickness] for a more detailed definition. ¿ M†Å0¿ N∏Äˆ/// The identifiers for the custom semantics actions and standard action
/// overrides for this node.
///
/// The list must be sorted in increasing order.
///
/// See also:
///
///  * [CustomSemanticsAction], for an explanation of custom actions. ≥„ÄÈ¥¨Ä≥/// A textual description for the current label of the node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedLabel].   µ€ÄÈ∂§Ä≥/// A textual description for the current value of the node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedValue].   ∑”Å*∏ÀÄ‡/// The value that [value] will become after performing a
/// [SemanticsAction.increase] action.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedIncreasedValue].   ∫>Å*ª6Ä‡/// The value that [value] will become after performing a
/// [SemanticsAction.decrease] action.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedDecreasedValue].   º©ÄıΩÄÄ¡/// A brief description of the result of performing an action on this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedHint].   ¿ _cÇH¿ _w   ¿ _c¿ _d¿ N’m¿ O	,/// Whether [flags] contains the given flag. ¿ O¿ O    ¿ OF{¿ O~0/// Whether [actions] contains the given action. ¿ Oà¿ Oô   ¿ O≈O¿ Oÿ   ¿ O≈¿ O∆¿ Päx¿ P)  ¿ P=&¿ PZ  ¿ P¿ P¿ ZîÑÀ¿ ZÆ  ¿ Z±¿ Zπ  ¿ Zî¿ Zï¿ aØÅv¿ aª  ¿ aÕ¿ aŸ  ¿ aﬁ¿ aÍ   ™¥™µ¿ c)ÅÃ¿ c/  ¿ czÄ· ¿ cz¿ cñ ¿ cù¿ c¶  ¿ cØ¿ c«  ¿ c—$¿ cÒ  ¿ c˚¿ d
  ¿ d¿ d!¿ dY¿ d+¿ d'¿ d-¿ d<¿ d7¿ d>¿ dN¿ dI¿ dP¿ d_(¿ d}   ¿ dåg¿ dÆ   ¿ då¿ dç ¿ d˜á¿ eèÄÜ/// Provides hint values which override the default hints on supported
/// platforms.
///
/// On iOS, these values are always ignored. ¿ e≈Äº ¿ eı¿ f'/// Creates a semantics hint overrides.¿ f¿ f  ¿ f&¿ f,  ¿ fC¿ fI¿ fY¿ fT¿ fJ¿ fW¿ fc¿ fi¿ f¿ fz¿ fj¿ f}¿ fÖÅ8¿ g¥Å/// The hint text for a tap action.
///
/// If null, the standard hint is used instead.
///
/// The hint should describe what happens when a tap occurs, not the
/// manner in which a tap is accomplished.
///
/// Bad: 'Double tap to show movies'.
/// Good: 'show movies'. ¿ g¬Å`¿ iÅ0/// The hint text for a long press action.
///
/// If null, the standard hint is used instead.
///
/// The hint should describe what happens when a long press occurs, not
/// the manner in which the long press is accomplished.
///
/// Bad: 'Double tap and hold to show tooltip'.
/// Good: 'show tooltip'. ¿ i'v¿ ib//// Whether there are any non-null hint values.   ¿ i°H¿ iµ   ¿ i°¿ i¢¿ iÌÄˆ¿ j  ¿ j
¿ j  ¿ iÌ¿ iÓ¿ jÁÅ)¿ j¯  ¿ k&¿ k)  ¿ jÁ¿ jË¿ e~¿ e¿ l¿ vö¿ lÒÄÀ/// Contains properties used by assistive technologies to make the application
/// more accessible.
///
/// The properties of this class are used to generate a [SemanticsNode]s in the
/// semantics tree. ¿ m$à ¿ mO¿ mb"/// Creates a semantic annotation.:¿ mi¿ mo  ¿ m{¿ mÅ  ¿ mç¿ mì  ¿ m†¿ m¶  ¿ m≤¿ m∏  ¿ m√	¿ m…  ¿ m“¿ mÿ  ¿ m„¿ mÈ  ¿ m˜¿ m˝  ¿ n¿ n  ¿ n¿ n$  ¿ n1¿ n7  ¿ nE¿ nK  ¿ nW¿ n]  ¿ nz¿ nÄ  ¿ nã¿ në  ¿ nû¿ n§  ¿ n≤¿ n∏  ¿ n»¿ nŒ  ¿ n›
¿ n„  ¿ nÌ¿ nÛ  ¿ o¿ o  ¿ o¿ o!  ¿ o8
¿ o>  ¿ oH¿ oN  ¿ ob
¿ oh  ¿ or¿ ox  ¿ oå¿ oí  ¿ o•¿ o´  ¿ o»¿ oŒ  ¿ o·¿ oÁ  ¿ p	¿ p
  ¿ p¿ p  ¿ p,¿ p2  ¿ pD¿ pJ  ¿ p\¿ pb  ¿ pn¿ pt  ¿ pá
¿ pç  ¿ pó¿ pù  ¿ p≠¿ p≥  ¿ pƒ¿ p   ¿ p‹¿ p‚  ¿ pÒ¿ p˜  ¿ q¿ q  ¿ q¿ q#  ¿ q2¿ q8  ¿ qC
¿ qI  ¿ qS¿ qY  ¿ qe#¿ qk  ¿ qé$¿ qî  ¿ q∏¿ qæ  ¿ q‹¿ q‚  ¿ r¿ r  ¿ r¿ r   ¿ r. ¿ r4  ¿ rT ¿ rZ  ¿ rz¿ rÄ  ¿ ré¿ rî  <¿ r≤¿ r∏¿ r·¿ s¿ r«¿ rø¿ rπ¿ r¬¿ r⁄¿ r ¿ r›¿ r„¿ s&¿ s,¿ sU¿ sê¿ s;¿ s3¿ s-¿ s6¿ sN¿ s>¿ sQ¿ sW¿ sö¿ s†¿ s€¿ t(¿ s∏¿ s∞¿ s°¿ s≥¿ s‘¿ sª¿ s◊¿ s›¿ t2¿ t8¿ ts¿ t¿¿ tP¿ tH¿ t9¿ tK¿ tl¿ tS¿ to¿ tu¿ t ¿ t–¿ t˜¿ u0¿ tﬁ¿ t÷¿ t—¿ tŸ¿ t¿ t·¿ tÛ¿ t˘:¿ u6Å[¿ väÅ;/// If non-null, indicates that this subtree represents something that can be
/// in an enabled or disabled state.
///
/// For example, a button that a user can currently interact with would set
/// this field to true. A button that currently does not respond to user
/// interactions would set this field to false. ¿ vñÄ‰¿ wsÄ∆/// If non-null, indicates that this subtree represents a checkbox
/// or similar widget with a "checked" state, and what its current
/// state is.
///
/// This is mutually exclusive with [toggled]. ¿ wÄÂ¿ x]Ä«/// If non-null, indicates that this subtree represents a toggle switch
/// or similar widget with an "on" state, and what its current
/// state is.
///
/// This is mutually exclusive with [checked]. ¿ xiÅ&¿ yáÅ/// If non-null indicates that this subtree represents something that can be
/// in a selected or unselected state, and what its current state is.
///
/// The active tab in a tab bar for example is considered "selected", whereas
/// all other tabs are unselected. ¿ yîÄª¿ zIÄ†/// If non-null, indicates that this subtree represents a button.
///
/// TalkBack/VoiceOver provides users with the hint "button" when a button
/// is focused. ¿ zTÅ ¿ {PÄÂ/// If non-null, indicates that this subtree represents a link.
///
/// iOS's VoiceOver provides users with a unique hint when a link is focused.
/// Android's Talkback will announce a link hint the same way it does a
/// button. ¿ {YÅ¿ |qÅ/// If non-null, indicates that this subtree represents a header.
///
/// A header divides into sections. For example, an address book application
/// might define headers A, B, C, etc. to divide the list of alphabetically
/// sorted contacts into sections. ¿ ||Äø¿ }2Ä°/// If non-null, indicates that this subtree represents a text field.
///
/// TalkBack/VoiceOver provide special affordances to enter text into a
/// text field. ¿ }@Äº¿ }ˆÄ°/// If non-null, indicates that this subtree represents a slider.
///
/// Talkback/\VoiceOver provides users with the hint "slider" when a
/// slider is focused. ¿ ~a¿ ~WG/// If non-null, indicates that this subtree represents a keyboard key. ¿ ~gÄ–¿ /Ä±/// If non-null, indicates that this subtree is read only.
///
/// Only applicable when [textField] is true.
///
/// TalkBack/VoiceOver will treat it as non-editable text field. ¿ <Å’¿ ÅÅØ/// If non-null, whether the node is able to hold input focus.
///
/// If [focusable] is set to false, then [focused] must not be true.
///
/// Input focus indicates that the node will receive keyboard events. It is not
/// to be confused with accessibility focus. Accessibility focus is the
/// green/black rectangular highlight that TalkBack/VoiceOver draws around the
/// element it is reading, and is separate from input focus. ¿ ÅÇ¿ É,Å˜/// If non-null, whether the node currently holds input focus.
///
/// At most one node in the tree should hold input focus at any point in time,
/// and it should not be set to true if [focusable] is false.
///
/// Input focus indicates that the node will receive keyboard events. It is not
/// to be confused with accessibility focus. Accessibility focus is the
/// green/black rectangular highlight that TalkBack/VoiceOver draws around the
/// element it is reading, and is separate from input focus. ¿ É8Å¿ Ñ(Ä€/// If non-null, whether a semantic node is in a mutually exclusive group.
///
/// For example, a radio button is in a mutually exclusive group because only
/// one radio button in that group can be marked as [checked]. ¿ ÑEÉF¿ áÖÉ/// If non-null, whether the node is considered hidden.
///
/// Hidden elements are currently not visible on screen. They may be covered
/// by other elements or positioned outside of the visible area of a viewport.
///
/// Hidden elements cannot gain accessibility focus though regular touch. The
/// only way they can be focused is by moving the focus to them via linear
/// navigation.
///
/// Platforms are free to completely ignore hidden elements and new platforms
/// are encouraged to do so.
///
/// Instead of marking an element as hidden it should usually be excluded from
/// the semantics tree altogether. Hidden elements are only included in the
/// semantics tree to work around platform limitations and they are mainly
/// used to implement accessibility scrolling on iOS. ¿ áêÅ3¿ àªÅ/// If non-null, whether [value] should be obscured.
///
/// This option is usually set in combination with [textField] to indicate
/// that the text field contains a password (or other sensitive information).
/// Doing so instructs screen readers to not read out the [value]. ¿ à»Å7¿ âˆÅ/// Whether the [value] is coming from a field that supports multiline text
/// editing.
///
/// This option is only meaningful when [textField] is true to indicate
/// whether it's a single-line or multiline text field.
///
/// This option is null when [textField] is false. ¿ äÅ—¿ ã Å£/// If non-null, whether the node corresponds to the root of a subtree for
/// which a route name should be announced.
///
/// Generally, this is set in combination with
/// [SemanticsConfiguration.explicitChildNodes], since nodes with this flag
/// are not considered focusable by Android or iOS.
///
/// See also:
///
///  * [SemanticsFlag.scopesRoute] for a description of how the announced
///    value is selected. ¿ ã⁄ÄŒ¿ åûÄ≠/// If non-null, whether the node contains the semantic label for a route.
///
/// See also:
///
///  * [SemanticsFlag.namesRoute] for a description of how the name is used. ¿ å≠Ä¨¿ çTÄê/// If non-null, whether the node represents an image.
///
/// See also:
///
///  * [SemanticsFlag.isImage], for the flag this setting controls. ¿ ç^É¢¿ êˆÉi/// If non-null, whether the node should be considered a live region.
///
/// A live region indicates that updates to semantics node are important.
/// Platforms may use this information to make polite announcements to the
/// user to inform them of updates to this node.
///
/// An example of a live region is a [SnackBar] widget. On Android and iOS,
/// live region causes a polite announcement to be generated automatically,
/// even if the widget does not have accessibility focus. This announcement
/// may not be spoken if the OS accessibility services are already
/// announcing something else, such as reading the label of a focused widget
/// or providing a system announcement.
///
/// See also:
///
///  * [SemanticsFlag.isLiveRegion], the semantics flag this setting controls.
///  * [SemanticsConfiguration.liveRegion], for a full description of a live region. ¿ ëÅg¿ í^Å=/// The maximum number of characters that can be entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [textField] is true. Defaults to null,
/// which means no limit is imposed on the text field. ¿ íqÅS¿ ì≤Å%/// The current number of characters that have been entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [textField] is true. Must be set when
/// [maxValueLength] is set. ¿ ì…Ç¿ ï‚Å/// Provides a textual description of the widget.
///
/// If a label is provided, there must either by an ambient [Directionality]
/// or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [label] and [attributedLabel]. One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.label] for a description of how this is exposed
///    in TalkBack and VoiceOver.
///  * [attributedLabel] for an [AttributedString] version of this property. ¿ ïÏÇV¿ ò3Ç/// Provides an [AttributedString] version of textual description of the widget.
///
/// If a [attributedLabel] is provided, there must either by an ambient
/// [Directionality] or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [label] and [attributedLabel]. One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedLabel] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [label] for a plain string version of this property. ¿ òGÇ+¿ ömÅ˝/// Provides a textual description of the value of the widget.
///
/// If a value is provided, there must either by an ambient [Directionality]
/// or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [value] and [attributedValue], One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.value] for a description of how this is exposed
///    in TalkBack and VoiceOver.
///  * [attributedLabel] for an [AttributedString] version of this property. ¿ öwÇi¿ ú—Ç%/// Provides an [AttributedString] version of textual description of the value
/// of the widget.
///
/// If a [attributedValue] is provided, there must either by an ambient
/// [Directionality] or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [value] and [attributedValue], One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedValue] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [value] for a plain string version of this property. ¿ úÂÇ◊¿ üÆÇö/// The value that [value] or [attributedValue] will become after a
/// [SemanticsAction.increase] action has been performed on this widget.
///
/// If a value is provided, [onIncrease] must also be set and there must
/// either be an ambient [Directionality] or an explicit [textDirection]
/// must be provided.
///
/// Callers must not provide both [increasedValue] and
/// [attributedIncreasedValue], One or both must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.increasedValue] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [attributedIncreasedValue] for an [AttributedString] version of this
///    property. ¿ ü¡Ç˝¿ ¢¶ÇÆ/// The [AttributedString] that [value] or [attributedValue] will become after
/// a [SemanticsAction.increase] action has been performed on this widget.
///
/// If a [attributedIncreasedValue] is provided, [onIncrease] must also be set
/// and there must either be an ambient [Directionality] or an explicit
/// [textDirection] must be provided.
///
/// Callers must not provide both [increasedValue] and
/// [attributedIncreasedValue], One or both must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedIncreasedValue] for a description of
///    how this is exposed in TalkBack and VoiceOver.
///  * [increasedValue] for a plain string version of this property. ¿ ¢√Ç◊¿ •åÇö/// The value that [value] or [attributedValue] will become after a
/// [SemanticsAction.decrease] action has been performed on this widget.
///
/// If a value is provided, [onDecrease] must also be set and there must
/// either be an ambient [Directionality] or an explicit [textDirection]
/// must be provided.
///
/// Callers must not provide both [decreasedValue] and
/// [attributedDecreasedValue], One or both must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.decreasedValue] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [attributedDecreasedValue] for an [AttributedString] version of this
///    property. ¿ •üÉ	¿ ®êÇ∫/// The [AttributedString] that [value] or [attributedValue] will become after
/// a [SemanticsAction.decrease] action has been performed on this widget.
///
/// If a [attributedDecreasedValue] is provided, [onDecrease] must also be set
/// and there must either be an ambient [Directionality] or an explicit
/// [textDirection] must be provided.
///
/// Callers must not provide both [decreasedValue] and
/// [attributedDecreasedValue], One or both must be null/// provided.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedDecreasedValue] for a description of
///    how this is exposed in TalkBack and VoiceOver.
///  * [decreasedValue] for a plain string version of this property. ¿ ®≠ÇI¿ ™ÚÇ/// Provides a brief textual description of the result of an action performed
/// on the widget.
///
/// If a hint is provided, there must either be an ambient [Directionality]
/// or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [hint] and [attributedHint], One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.hint] for a description of how this is exposed
///    in TalkBack and VoiceOver.
///  * [attributedHint] for an [AttributedString] version of this property. ¿ ™˚ÇÅ¿ ≠nÇ>/// Provides an [AttributedString] version of brief textual description of the
/// result of an action performed on the widget.
///
/// If a [attributedHint] is provided, there must either by an ambient
/// [Directionality] or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [hint] and [attributedHint], One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedHint] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [hint] for a plain string version of this property. ¿ ≠ÅÅ≤¿ Ø&Åv/// Provides hint values which override the default hints on supported
/// platforms.
///
/// On Android, If no hint overrides are used then default [hint] will be
/// combined with the [label]. Otherwise, the [hint] will be ignored as long
/// as there as at least one non-null hint override.
///
/// On iOS, these are always ignored and the default [hint] is used instead. ¿ Ø8Ä√¿ ØÓÄò/// The reading direction of the [label], [value], [increasedValue],
/// [decreasedValue], and [hint].
///
/// Defaults to the ambient [Directionality]. ¿ ∞ ÅI¿ ±BÅ/// Determines the position of this node among its siblings in the traversal
/// sort order.
///
/// This is used to describe the order in which the semantic node should be
/// traversed by the accessibility services on the platform (e.g. VoiceOver
/// on iOS and TalkBack on Android). ¿ ±NÇü¿ ≥ﬂÇ`/// A tag to be applied to the child [SemanticsNode]s of this widget.
///
/// The tag is added to all child [SemanticsNode]s that pass through the
/// [RenderObject] corresponding to this widget while looking to be attached
/// to a parent SemanticsNode.
///
/// Tags are used to communicate to a parent SemanticsNode that a child
/// SemanticsNode was passed through a particular RenderObject. The parent can
/// use this information to determine the shape of the semantics tree.
///
/// See also:
///
///  * [SemanticsConfiguration.addTagForChildren], to which the tags provided
///    here will be passed. ¿ ≥ÚÅì¿ µÄÅi/// The handler for [SemanticsAction.tap].
///
/// This is the semantic equivalent of a user briefly tapping the screen with
/// the finger without moving it. For example, a button should implement this
/// action.
///
/// VoiceOver users on iOS and TalkBack users on Android can trigger this
/// action by double-tapping the screen while an element is focused. ¿ µäÅñ¿ ∑Åf/// The handler for [SemanticsAction.longPress].
///
/// This is the semantic equivalent of a user pressing and holding the screen
/// with the finger for a few seconds without moving it.
///
/// VoiceOver users on iOS and TalkBack users on Android can trigger this
/// action by double-tapping the screen without lifting the finger after the
/// second tap. ¿ ∑%Çe¿ π~Ç./// The handler for [SemanticsAction.scrollLeft].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from right to left. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping left with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided. ¿ πèÇk¿ ªÌÇ3/// The handler for [SemanticsAction.scrollRight].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from left to right. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping right with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided. ¿ ªˇÇ]¿ æRÇ(/// The handler for [SemanticsAction.scrollUp].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from bottom to top. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping up with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided. ¿ æaÇf¿ ¿ªÇ//// The handler for [SemanticsAction.scrollDown].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from top to bottom. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping down with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided. ¿ ¿ÃÇ:¿ ¬¸Ç/// The handler for [SemanticsAction.increase].
///
/// This is a request to increase the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// If a [value] is set, [increasedValue] must also be provided and
/// [onIncrease] must ensure that [value] will be set to [increasedValue].
///
/// VoiceOver users on iOS can trigger this action by swiping up with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume up button. ¿ √Ç>¿ ≈?Ç	/// The handler for [SemanticsAction.decrease].
///
/// This is a request to decrease the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// If a [value] is set, [decreasedValue] must also be provided and
/// [onDecrease] must ensure that [value] will be set to [decreasedValue].
///
/// VoiceOver users on iOS can trigger this action by swiping down with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume down button. ¿ ≈NÅ¿ ∆\ÄÌ/// The handler for [SemanticsAction.copy].
///
/// This is a request to copy the current selection to the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example. ¿ ∆gÅ$¿ «ÜÄ¸/// The handler for [SemanticsAction.cut].
///
/// This is a request to cut the current selection and place it in the
/// clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example. ¿ «êÅ¿ »ûÄÌ/// The handler for [SemanticsAction.paste].
///
/// This is a request to paste the current content of the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example. ¿ »™År¿ …˛Å,/// The handler for [SemanticsAction.moveCursorForwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field forward by one character.
///
/// TalkBack users can trigger this by pressing the volume up key while the
/// input focus is in a text field. ¿  !Åw¿ ÀyÅ0/// The handler for [SemanticsAction.moveCursorBackwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one character.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field. ¿ ÀùÅf¿ ÃÍÅ%/// The handler for [SemanticsAction.moveCursorForwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one word.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field. ¿ ÕÅh¿ ŒVÅ&/// The handler for [SemanticsAction.moveCursorBackwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one word.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field. ¿ ŒuÅì¿ œ˙Å[/// The handler for [SemanticsAction.setSelection].
///
/// This handler is invoked when the user either wants to change the currently
/// selected text in a text field or change the position of the cursor.
///
/// TalkBack users can trigger this handler by selecting "Move cursor to
/// beginning/end" or "Select all" from the local context menu. ¿ –Å?¿ —CÅ/// The handler for [SemanticsAction.setText].
///
/// This handler is invoked when the user wants to replace the current text in
/// the text field with a new text.
///
/// Voice access users can trigger this handler by speaking "type <text>" to
/// their Android devices. ¿ —QÉù¿ ‘”ÉK/// The handler for [SemanticsAction.didGainAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler gains
/// the accessibility focus. The accessibility focus is the
/// green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidLoseAccessibilityFocus], which is invoked when the accessibility
///    focus is removed from the node.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus. ¿ ‘ÛÉè¿ ÿgÉ=/// The handler for [SemanticsAction.didLoseAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler
/// loses the accessibility focus. The accessibility focus is
/// the green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidGainAccessibilityFocus], which is invoked when the node gains
///    accessibility focus.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus. ¿ ÿáÅS¿ Ÿ—Å'/// The handler for [SemanticsAction.dismiss].
///
/// This is a request to dismiss the currently focused node.
///
/// TalkBack users on Android can trigger this action in the local context
/// menu, and VoiceOver users on iOS can trigger this action with a standard
/// gesture or menu option. ¿ ŸﬂÇ7¿ ‹ Å‹/// A map from each supported [CustomSemanticsAction] to a provided handler.
///
/// The handler associated with each custom action is called whenever a
/// semantics action of type [SemanticsAction.customAction] is received. The
/// provided argument will be an identifier used to retrieve an instance of
/// a custom action which can then retrieve the correct handler from this map.
///
/// See also:
///
///  * [CustomSemanticsAction], for an explanation of custom actions.  ¿ ‹Ü¿ ‹,  ¿ ‹@&¿ ‹]  ¿ ‹¿ ‹¿ ‚!U¿ ‚4   ¿ ‚!¿ ‚"¿ l‡¿ l·¿ „[¿ æ3¿ ‰ïÅ3/// A node that represents some semantic data.
///
/// The semantics tree is maintained during the semantics phase of the pipeline
/// (i.e., during [PipelineOwner.flushSemantics]), which happens after
/// compositing. The semantics tree is then uploaded into the engine for use
/// by assistive technology. ¿ ‰ŸÅ ¿ Â`¿ Âm~/// Creates a semantic node.
///
/// Each semantic node has a unique identifier that is assigned when the node
/// is created.¿ Ât¿ Âz  ¿ ÂÇ¿ Âë  ¿ Â©¿ Â•¿ Â´¿ Âπ¿ Â∫¿ Â“¿ Âƒ¿ Â‘¿ ÂÂÅ:¿ Êz¿ Ê{¿ ÊÄÅ/// Creates a semantic node to represent the root of the semantics tree.
///
/// The root node is assigned an identifier of zero.¿ ÊÜ¿ Êå  ¿ Êî¿ Ê£  ¿ Ê¥¿ ÊÕ  ¿ Êﬁ¿ Ê⁄¿ Ê‡¿ Ê¯¿ ÊÍ¿ Ê˙.¿ ËeC¿ Ëv ¿ Ë•¿ Ëù¿ Ë£¿ Ëü¿ Ëû¿ Ë°¿ Ëß¿ Ë≠¿ Ë∏ ¿ Ë ¿ ÈdÄ«¿ Í(Ä∞/// Uniquely identifies this node in the list of sibling nodes.
///
/// Keys are used during the construction of the semantics tree. They are not
/// transferred to the engine. ¿ Ï¿ Ï  ¿ Ï!¿ Ï1  ¿ ÌÅ¿ Ìä  ¿ Óº¿ Ó¡ ¿ Ó…¿ ÓÕ¿ ÓŒ¿ Ô´Én¿ ÛÉ./// The semantic clip from an ancestor that was applied to this node.
///
/// Expressed in the coordinate system of the node. May be null if no clip has
/// been applied.
///
/// Descendant [SemanticsNode]s that are positioned outside of this rect will
/// be excluded from the semantics tree. Descendant [SemanticsNode]s that are
/// overlapping with this rect, but are outside of [parentPaintClipRect] will
/// be included in the tree, but they will be marked as hidden because they
/// are assumed to be not visible on screen.
///
/// If this rect is null, all descendant [SemanticsNode]s outside of
/// [parentPaintClipRect] will be excluded from the tree.
///
/// If this rect is non-null it has to completely enclose
/// [parentPaintClipRect]. If [parentPaintClipRect] is null this property is
/// also null. ¿ ÛÇò¿ ı£Çd/// The paint clip from an ancestor that was applied to this node.
///
/// Expressed in the coordinate system of the node. May be null if no clip has
/// been applied.
///
/// Descendant [SemanticsNode]s that are positioned outside of this rect will
/// either be excluded from the semantics tree (if they have no overlap with
/// [parentSemanticsClipRect]) or they will be included and marked as hidden
/// (if they are overlapping with [parentSemanticsClipRect]).
///
/// This rect is completely enclosed by [parentSemanticsClipRect].
///
/// If this rect is null [parentSemanticsClipRect] also has to be null. ¿ ıªÇ‰¿ ¯åÇÆ/// The elevation adjustment that the parent imposes on this node.
///
/// The [elevation] property is relative to the elevation of the parent
/// [SemanticsNode]. However, as [SemanticsConfiguration]s from various
/// ascending [RenderObject]s are merged into each other to form that
/// [SemanticsNode] the parent‚Äôs elevation may change. This requires an
/// adjustment of the child‚Äôs relative elevation which is represented by this
/// value.
///
/// The value is rarely accessed directly. Instead, for most use cases the
/// [elevation] value should be used, which includes this adjustment.
///
/// See also:
///
///  * [elevation], the actual elevation of this [SemanticsNode]. ¿ ¯§Å}¿ ˙Å^/// The index of this node within the parent's list of semantic children.
///
/// This includes all semantic nodes, not just those currently in the
/// child list. For example, if a scrollable has five children but the first
/// two are not visible (and thus not included in the list of children), then
/// the index of the last node will still be 4. ¿ ¸Ê ¿ ¸Î ¿ ˝¿ ˇıU¿ ˇ˙ ¿ ¿ *¿ +¿ _h¿ æG/// Contains the children in inverse hit test order (i.e. paint order). ¿ ÃÄ‡¿ñÄ™/// A snapshot of `newChildren` passed to [_replaceChildren] that we keep in
/// debug mode. It supports the assertion that user does not mutate the list
/// of children. ¿¿ ¿¿O¿T ¿]¿!ŒN¿!˚ ¿"¿"¿"¿" h¿"I ¿"c¿"p¿"q¿"ç1¿"ë ¿"¢¿"Ø¿"∞¿"√Ä¬¿#ÅÄ¢/// The [SemanticsTag]s this node is tagged with.
///
/// Tags are used during the construction of the semantics tree. They are not
/// transferred to the engine. ¿$!¿$ ¿$¿$¿$¿&ÉA¿&î ¿&ß¿&¥¿&µ¿(”A¿(‰ ¿(˜¿)¿)¿,§S¿,µ ¿,—¿,ﬁ¿,ﬂ¿0áS¿0ò ¿0¥¿0¡¿0¬¿3?¿3 ¿3$¿31¿32¿5ò+¿5ü ¿5¨¿5π¿5∫¿=÷+¿=› ¿=Í¿=˜¿=¯¿>ü&¿>∑  ¿?h;¿?w ¿?à¿?ï¿?ñ¿@ˇ¿A  ¿A—¿A‡  ¿Bâ¿Bè  ¿C}¿CÇ  ¿D¿D  ¿E˝¿F  ¿G]¿Ge  ¿HΩ¿H≈  ¿J∏¿JΩ  ¿L\¿La  ¿M¿Mı  ¿N`L¿NÑ ¿Nî¿N™¿N´¿q:6¿qQ ¿qd¿qm¿qo¿qn¿qtG¿qã ¿qØ¿q∏¿q∫¿qπ¿qøG¿qÿ ¿qÓ¿r¿r'¿ Í0Åﬁ¿ ÏÅπ/// The unique identifier for this node.
///
/// The root node has an id of zero. Other nodes are given a unique id
/// when they are attached to a [SemanticsOwner]. If they are detached, their
/// ids are invalid and should not be used.
///
/// In rare circumstances, id may change if this node is detached and
/// re-attached to the [SemanticsOwner]. This should only happen when the
/// application has generated too many semantics nodes.   ¿ ÏRÅ,¿ ÌfÄ¸/// The transform from this node's coordinate system to its parent's coordinate system.
///
/// By default, the transform is null, which represents the identity
/// transformation (i.e., that this node has the same coordinate system as its
/// parent).   ¿ ÌòÄ«¿ Ìú  ¿ Ì¶¿ Ì∞   ¿ ÓcV¿ Ó´</// The bounding box for this node in its coordinate system.   ¿ Ó÷Ä—¿ Ó⁄  ¿ Óﬂ
¿ ÓÂ   ¿ ˙&Ç)¿ ¸Åÿ/// Whether the node is invisible.
///
/// A node whose [rect] is outside of the bounds of the screen and hence not
/// reachable for users is considered invisible if its semantic information
/// is not merged into a (partially) visible parent as indicated by
/// [isMergedIntoParent].
///
/// An invisible node can be safely dropped from the semantic tree without
/// loosing semantic information that is relevant for describing the content
/// currently shown on screen.   ¿ ¸aÄÇ¿ ¸πL/// Whether this node merges its semantic information into an ancestor node.   ¿ ˝
Ä™¿ ˝  ¿ ˝!
¿ ˝'   ¿ ˝∏Åç¿ ˛¯Å$/// Whether this node is taking part in a merge of semantic information.
///
/// This returns true if the node is either merged into an ancestor node or if
/// decedent nodes are merged into this node.
///
/// See also:
///
///  * [isMergedIntoParent]
///  * [mergeAllDescendantsIntoThisNode]   ¿ ˇIÄ©¿ ˇÆY/// Whether this node and all of its descendants should be treated as one logical entity.   ¿år¿–8/// Whether this node has a non-zero number of children.   ¿i¿L)/// The number of children this node has.   ¿ZH¿z   ¿Z¿[¿¶H¿≈   ¿¶¿ß¿$©Ä’¿%]Äû/// A textual description of this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedLabel].   ¿%ÇÄ˛¿&\Ä∫/// A textual description of this node in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [label], which exposes just the raw text.   ¿&…ÄÍ¿'íÄ≥/// A textual description for the current value of the node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedValue].   ¿'∑Å¿(¨Ä”/// A textual description for the current value of the node in
/// [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [value], which exposes just the raw text.   ¿)Å£¿*âÅR/// The value that [value] will have after a [SemanticsAction.increase] action
/// has been performed.
///
/// This property is only valid if the [SemanticsAction.increase] action is
/// available on this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedIncreasedValue].   ¿*¿Å·¿,kÅÉ/// The value in [AttributedString] format that [value] or [attributedValue]
/// will have after a [SemanticsAction.increase] action has been performed.
///
/// This property is only valid if the [SemanticsAction.increase] action is
/// available on this node.
///
/// The reading direction is given by [textDirection].
///
/// See also [increasedValue], which exposes just the raw text.   ¿,¸Å£¿.lÅR/// The value that [value] will have after a [SemanticsAction.decrease] action
/// has been performed.
///
/// This property is only valid if the [SemanticsAction.decrease] action is
/// available on this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedDecreasedValue].   ¿.£Å·¿0NÅÉ/// The value in [AttributedString] format that [value] or [attributedValue]
/// will have after a [SemanticsAction.decrease] action has been performed.
///
/// This property is only valid if the [SemanticsAction.decrease] action is
/// available on this node.
///
/// The reading direction is given by [textDirection].
///
/// See also [decreasedValue], which exposes just the raw text.   ¿0ﬂÄˆ¿1∂Ä¡/// A brief description of the result of performing an action on this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedHint].   ¿1ŸÅ%¿2‹Ä·/// A brief description of the result of performing an action on this node
/// in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [hint], which exposes just the raw text.   ¿3EÇP¿5}Ç/// The elevation along the z-axis at which the [rect] of this [SemanticsNode]
/// is located above its parent.
///
/// The value is relative to the parent's [elevation]. The sum of the
/// [elevation]s of all ancestor node plus this value determines the absolute
/// elevation of this [SemanticsNode].
///
/// See also:
///
///  * [thickness], which describes how much space in z-direction this
///    [SemanticsNode] occupies starting at this [elevation].
///  * [elevationAdjustment], which has been used to calculate this value.   ¿5»à¿=ªáá/// Describes how much space the [SemanticsNode] takes up along the z-axis.
///
/// A [SemanticsNode] represents multiple [RenderObject]s, which can be
/// located at various elevations in 3D. The [thickness] is the difference
/// between the absolute elevations of the lowest and highest [RenderObject]
/// represented by this [SemanticsNode]. In other words, the thickness
/// describes how high the box is that this [SemanticsNode] occupies in three
/// dimensional space. The two other dimensions are defined by [rect].
///
/// {@tool snippet}
/// The following code stacks three [PhysicalModel]s on top of each other
/// separated by non-zero elevations.
///
/// [PhysicalModel] C is elevated 10.0 above [PhysicalModel] B, which in turn
/// is elevated 5.0 above [PhysicalModel] A. The side view of this
/// constellation looks as follows:
///
/// ![A diagram illustrating the elevations of three PhysicalModels and their
/// corresponding SemanticsNodes.](https://flutter.github.io/assets-for-api-docs/assets/semantics/SemanticsNode.thickness.png)
///
/// In this example the [RenderObject]s for [PhysicalModel] C and B share one
/// [SemanticsNode] Y. Given the elevations of those [RenderObject]s, this
/// [SemanticsNode] has a [thickness] of 10.0 and an elevation of 5.0 over
/// its parent [SemanticsNode] X.
/// ```dart
/// PhysicalModel( // A
///   color: Colors.amber,
///   elevation: 0.0,
///   child: Semantics(
///     explicitChildNodes: true,
///     child: const PhysicalModel( // B
///       color: Colors.brown,
///       elevation: 5.0,
///       child: PhysicalModel( // C
///         color: Colors.cyan,
///         elevation: 10.0,
///         child: Placeholder(),
///       ),
///     ),
///   ),
/// )
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [elevation], which describes the elevation of the box defined by
///    [thickness] and [rect] relative to the parent of this [SemanticsNode].   ¿>Äñ¿>|U/// Provides hint values which override the default hints on supported
/// platforms.   ¿> Äõ¿?Ec/// The reading direction for [label], [value], [hint], [increasedValue], and
/// [decreasedValue].   ¿?®ÅT¿@ËÅ/// Determines the position of this node among its siblings in the traversal
/// sort order.
///
/// This is used to describe the order in which the semantic node should be
/// traversed by the accessibility services on the platform (e.g. VoiceOver
/// on iOS and TalkBack on Android).   ¿AÄ∞¿AÆx/// The currently selected text (or the position of the cursor) within [value]
/// if this node represents a text field.   ¿AÛÄì¿Bjh/// If this node represents a text field, this indicates whether or not it's
/// a multiline text field.   ¿B†Ä⁄¿CTÄ¢/// The total number of scrollable children that contribute to semantics.
///
/// If the number of children are unknown or unbounded, this value will be
/// null.   ¿Còk¿CÁC/// The index of the first visible semantic child of a scroll node.   ¿DÅﬁ¿EÿÅõ/// Indicates the current scrolling position in logical pixels if the node is
/// scrollable.
///
/// The properties [scrollExtentMin] and [scrollExtentMax] indicate the valid
/// in-range values for this property. The value for [scrollPosition] may
/// (temporarily) be outside that range, e.g. during an overscroll.
///
/// See also:
///
///  * [ScrollPosition.pixels], from where this value is usually taken.   ¿FÅA¿G6Å /// Indicates the maximum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.maxScrollExtent], from where this value is usually taken.   ¿GzÅ@¿HñÄˇ/// Indicates the minimum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.minScrollExtent] from where this value is usually taken.   ¿H⁄Å€¿JìÅô/// The id of the platform view, whose semantics nodes will be added as
/// children to this node.
///
/// If this value is non-null, the SemanticsNode must not have any children
/// as those would be replaced by the semantics nodes of the referenced
/// platform view.
///
/// See also:
///
///  * [AndroidView], which is the platform view for Android.
///  * [UiKitView], which is the platform view for iOS.   ¿J—Åà¿L7ÅL/// The maximum number of characters that can be entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [SemanticsFlag.isTextField] is set. Defaults
/// to null, which means no limit is imposed on the text field.   ¿LuÅx¿M√Å4/// The current number of characters that have been entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [SemanticsFlag.isTextField] is set. Must be
/// set when [maxValueLength] is set.   ¿ ËœÄë¿ Ë⁄    ¿±è◊¿∂  ¿«¿‹   ¿ÖÅ∞¿tÄﬂ/// Visits the immediate children of this node.
///
/// This function calls visitor for each immediate child until visitor returns
/// false. Returns true if all the visitor calls returned true, otherwise
/// returns false. ¿Ç¿ò   ¿9Ç ¿8ÄÔ/// Visit all the descendants of this node.
///
/// This function calls visitor for each descendant in a pre-order traversal
/// until visitor returns false. Returns true if all the visitor calls
/// returned true, otherwise returns false. ¿J¿`   ¿ÚN¿   ¿Ú¿Û¿DÇ*¿U  ¿\¿l  ¿D¿E¿rÇ¬¿É   ¿r¿s¿fÄª¿k    ¿%Ñâ¿*  ¿T¿l   ¿#äu¿#Ω+/// Whether this node is tagged with `tag`. ¿#∆¿#‘   ¿$)|¿$m</// Whether this node currently has a given [SemanticsFlag]. ¿$u¿$Ñ   ¿NO¿N  ¿N$¿N5   ¿N±äË¿P†Å◊/// Reconfigures the properties of this object to describe the configuration
/// provided in the `config` argument and the children listed in the
/// `childrenInInversePaintOrder` argument.
///
/// The arguments may be null; this represents an empty configuration (all
/// values at their defaults, no children).
///
/// No reference is kept to the [SemanticsConfiguration] object, but the child
/// list is used as-is and should therefore not be changed after this call. ¿P±'¿P”  ¿Pﬁ0¿PÙ   ¿Yûó<¿Z∫Å/// Returns a summary of the semantics for this node.
///
/// If this node has [mergeAllDescendantsIntoThisNode], then the returned data
/// includes the information from this node's descendants. Otherwise, the
/// returned data matches the data on this node.   ¿pﬁX¿pÒ    ¿rå4¿r  ¿r!¿r8  ¿r@'¿rJ   ¿~Câ¿¿~ßM/// Builds a new list made of [_children] sorted in semantic traversal order.   ¿àÅp¿àÒÄ‹/// Sends a [SemanticsEvent] associated with this [SemanticsNode].
///
/// Semantics events should be sent to inform interested parties (like
/// the accessibility system of the operating system) about changes to the UI. ¿à˚¿â   ¿â{X¿âé   ¿â{¿â|¿â◊êƒ¿âË  ¿â¸&¿ä  ¿â◊¿âÿ¿öüÇw¿õÄÄ≈/// Returns a string representation of this node and its descendants.
///
/// The order in which the children of the [SemanticsNode] will be printed is
/// controlled by the [childOrder] parameter. ¿õì¿õõ  ¿õ≤¿õª  ¿õ–0¿õ·  ¿úK¿ú  	¿õm¿õn¿õ™¿õÎ¿õ˙¿õ˚¿ú+¿úB¿úC¿ùÅc¿ù6  ¿ùN¿ùW  ¿ù`9¿ùw  ¿ùüK¿ù∏  ¿ù¿ù¿ù~¿ùí¿ùì¿ùƒ¿ù€¿ù‹¿ûÅÅ3¿û£  ¿ûªK¿û‘  ¿ûÅ¿ûÇ¿û‡¿û˜¿û¯¿ü∏Å‘¿†L/// Returns the list of direct children of this node in the specified order. ¿†4"¿†M    ¿°êÜ¿£≥Ç/// An edge of a box, such as top, bottom, left or right, used to compute
/// [SemanticsNode]s that overlap vertically or horizontally.
///
/// For computing horizontal overlap in an LTR setting we create two [_BoxEdge]
/// objects for each [SemanticsNode]: one representing the left edge (marked
/// with [isLeadingEdge] equal to true) and one for the right edge (with [isLeadingEdge]
/// equal to false). Similarly, for vertical overlap we also create two objects
/// for each [SemanticsNode], one for the top and one for the bottom edge. ¿£‡Äﬂ ¿£‡¿£Ë ¿£Ô¿£˛  ¿§¿§  ¿§*¿§9  ¿§E¿§K¿§a¿§Z¿§L¿§]¿§k¿§q¿§Ä¿§y¿§r¿§|¿§ä¿§ê¿§†¿§ë¿§ó¿§ò¿§™¿§∞¿§Ω¿§∂¿§±¿§π¿§√ÅΩ¿¶sÅí/// True if the edge comes before the seconds edge along the traversal
/// direction, and false otherwise.
///
/// This field is never null.
///
/// For example, in LTR traversal the left edge's [isLeadingEdge] is set to true,
/// the right edge's [isLeadingEdge] is set to false. When considering vertical
/// ordering of boxes, the top edge is the start edge, and the bottom edge is
/// the end edge. ¿¶Ö¿¶˛g/// The offset from the start edge of the parent [SemanticsNode] in the
/// direction of the traversal. ¿ß	?¿ßD$/// The node whom this edge belongs.  ¿ßMZ¿ß]  ¿ßg¿ßq  ¿ßM¿ßN ¿ß´ñ¿®ÉÄ—/// A group of [nodes] that are disjoint vertically or horizontally from other
/// nodes that share the same [SemanticsNode] parent.
///
/// The [nodes] are sorted among each other separately from other nodes. ¿®√y ¿®√¿®÷ ¿®›¿®Ï  ¿®¸¿©  ¿© ¿©&¿©:¿©3¿©'¿©6¿©@Ä˚¿™0Äÿ/// The offset from the start edge of the parent [SemanticsNode] in the
/// direction of the traversal.
///
/// This value is equal to the [_BoxEdge.offset] of the first node in the
/// [nodes] list being considered. ¿™@!¿™T  ¿™fe¿™≤//// The nodes that are sorted among each other.¿™…¿™ ¿™∫¿™»¿™ª ¿™–o¿™‡  ¿™Í¿™ˇ  ¿™–¿™—¿´CÜR¿¨+ÄÀ/// Sorts this group assuming that [nodes] belong to the same vertical group.
///
/// This method breaks up this group into horizontal [_SemanticsSortGroup]s
/// then sorts them using [sortedWithinKnot].   ¿±ôå¿¥ÒÉ%/// Sorts [nodes] where nodes intersect both vertically and horizontally.
///
/// In the special case when [nodes] contains one or less nodes, this method
/// returns [nodes] unchanged.
///
/// This method constructs a graph, where vertices are [SemanticsNode]s and
/// edges are "traversed before" relation between pairs of nodes. The sort
/// order is the topological sorting of the graph, with the original order of
/// [nodes] used as the tie breaker.
///
/// Whether a node is traversed before another node is determined by the
/// vector that connects the two nodes' centers. If the vector "points to the
/// right or down", defined as the [Offset.direction] being between `-pi/4`
/// and `3*pi/4`), then the semantics node whose center is at the end of the
/// vector is said to be traversed after.    ¿∆Ñò¿«ÇÅd/// The implementation of [Comparable] that implements the ordering of
/// [SemanticsNode]s in the accessibility traversal.
///
/// [SemanticsNode]s are sorted prior to sending them to the engine side.
///
/// This implementation considers a [node]'s [sortKey] and its position within
/// the list of its siblings. [sortKey] takes precedence over position. ¿«√Äõ ¿«√¿«’ ¿«‹¿«Î  ¿«Ù¿«˙  ¿»¿»  ¿»)¿»/¿»<¿»5¿»0¿»8¿»E¿»K¿»\¿»U¿»L¿»X¿»bQ¿»Ø6/// The node whose position this sort node determines. ¿»∏Äµ¿…fÄç/// Determines the position of this node among its siblings.
///
/// Sort keys take precedence over other attributes, such as
/// [position]. ¿…rl¿…÷U/// Position within the list of siblings as determined by the default sort
/// order.  ¿…„Ä ¿…Û  ¿…˝¿   ¿…„¿…‰ ¿ ±ô˝¿À¬Å
/// Owns [SemanticsNode] objects and notifies listeners of changes to the
/// render tree semantics.
///
/// To listen for semantic updates, call [PipelineOwner.ensureSemantics] to
/// obtain a [SemanticsHandle]. This will create a [SemanticsOwner] if
/// necessary.  ¿ÀÏ8¿Ã ¿Ã"¿Ã#¿Ã¿Ã!¿Ã¿Ã(=¿ÃF ¿Ãc¿Ãd¿ÃO¿Ãb¿ÃP¿ÃU¿Ãi;¿ÃÇ ¿Ã¢¿Ã£¿Ãì¿Ã°¿Ãî¿Ã©Äü¿Õ)f/// The root node of the semantics tree, if any.
///
/// If the semantics tree is empty, returns null.   ¿ÕL~¿Õ]   ¿ÕL¿ÕM¿ÕŒäº¿Œ"L/// Update the semantics using [dart:ui.PlatformDispatcher.updateSemantics].   ¿ÿéÇG¿ÿ¶  ¿ÿ∆¿ÿÀ  ¿ÿŒ¿ÿﬂ   ¿⁄ŸÇÊ¿‹Å%/// Asks the [SemanticsNode] with the given id to perform the given action.
///
/// If the [SemanticsNode] has not indicated that it can perform the action,
/// this function does nothing.
///
/// If the given `action` requires arguments they need to be passed in via
/// the `args` parameter. ¿‹ ¿‹%  ¿‹(¿‹9  ¿‹B¿‹K   ¿›√Ñ¿›€  ¿ﬁ¿ﬁ  ¿ﬁ¿ﬁ  ¿ﬁ&¿ﬁ7   ¿·◊Çô¿„Å)/// Asks the [SemanticsNode] at the given position to perform the given action.
///
/// If the [SemanticsNode] has not indicated that it can perform the action,
/// this function does nothing.
///
/// If the given `action` requires arguments they need to be passed in via
/// the `args` parameter. ¿„$¿„,  ¿„5¿„F  ¿„O¿„X   ¿‰t8¿‰á   ¿‰t¿‰u ¿‰∞¿ –*¿ÂnÄ∑/// Describes the semantic information associated with the owning
/// [RenderObject].
///
/// The information provided in the configuration is used to generate the
/// semantics tree.  3¿Ëq ¿Ëv ¿Ëå¿ÈÉ6¿Ï5Ç¸/// Whether the configuration forces all children of the owning [RenderObject]
/// that want to contribute semantic information to the semantics tree to do
/// so in the form of explicit [SemanticsNode]s.
///
/// When set to false children of the owning [RenderObject] are allowed to
/// annotate [SemanticsNode]s of their parent with the semantic information
/// they want to contribute to the semantic tree.
/// When set to true the only way for children of the owning [RenderObject]
/// to contribute semantic information to the semantic tree is to introduce
/// new explicit [SemanticsNode]s to the tree.
///
/// This setting is often used in combination with [isSemanticBoundary] to
/// create semantic boundaries that are either writable or not for children.¿ÏJ¿ÏTÉ|¿ÔùÉ%/// Whether the owning [RenderObject] makes other [RenderObject]s previously
/// painted within the same semantic boundary unreachable for accessibility
/// purposes.
///
/// If set to true, the semantic information for all siblings and cousins of
/// this node, that are earlier in a depth-first pre-order traversal, are
/// dropped from the semantics tree up until a semantic boundary (as defined
/// by [isSemanticBoundary]) is reached.
///
/// If [isSemanticBoundary] and [isBlockingSemanticsOfPreviouslyPaintedNodes]
/// is set on the same node, all previously painted siblings and cousins up
/// until the next ancestor that is a semantic boundary are dropped.
///
/// Paint order as established by [RenderObject.visitChildrenForSemantics] is
/// used to determine if a node is previous to this one.¿ÔÀ¿Ò,¿Ò1 ¿ÒE¿ÒOÅ.¿ÚGÄ∏/// The actions (with associated action handlers) that this configuration
/// would like to contribute to the semantics tree.
///
/// See also:
///
///  * [addAction] to add an action.¿Ú{¿Ú|¿ÚR¿Úz¿ÚS¿Úd¿ÚÇ¿ÚÜ ¿Úó¿˙w¿˙Ö  ¿¸¨¿¸∫  ¿ˇ…¿ˇ◊  ¿’¿„  ¿Ò¿ˇ  ¿¿  ¿&¿4  ¿(¿6  ¿&¿4  ¿Ë¿ˆ  ¿©¿∑  ¿Y¿g  ¿‹¿Í  ¿$2¿7  ¿,3¿?  ¿!!-¿!4  ¿$.¿$  ¿'$¿'#  ¿*ú¿*¨  ¿/à*¿/ñ  ¿4*¿4,  ¿8 ¿82  ¿:R¿:W  ¿;ß¿;¨  ¿<‹¿<·  ¿>¿>  ¿@7¿@<  ¿BO¿BT  ¿E-¿E ¿E8¿G£j¿GÃ ¿H¿H¿GÊ¿H
¿GÁ¿G˛¿N‘8¿NÂ ¿N¯¿O¿O¿O	¿Vp8¿VÅ ¿Vî¿V§¿Vß¿V•¿\èA¿\† ¿\º¿\Ã¿\œ¿\Õ¿b≈A¿b÷ ¿bÚ¿c¿c¿c¿hV7¿hg ¿hy¿hâ¿hå¿hä¿i´&¿i√  ¿k¿k
 ¿k¿m¿m$ ¿m1¿u¨¿uª  ¿î´¿î∫  ¿ó3¿ó;  ¿ô¿ô  ¿öˆ¿ö˛  ¿úæ#¿ú—  ¿†¿† ¿†Äê¿Â´Ç√¿ËDÇu/// Whether the [RenderObject] owner of this configuration wants to own its
/// own [SemanticsNode].
///
/// When set to true semantic information associated with the [RenderObject]
/// owner of this configuration or any of its descendants will not leak into
/// parents. The [SemanticsNode] generated out of this configuration will
/// act as a boundary.
///
/// Whether descendants of the owning [RenderObject] can add their semantic
/// information to the [SemanticsNode] introduced by this configuration
/// is controlled by [explicitChildNodes].
///
/// This has to be true if [isMergingSemanticsOfDescendants] is also true.   ¿ËïÄÄ¿Ëô  ¿Ë¨
¿Ë≤   ¿JÄﬂ¿ÒÄß/// Whether this configuration is empty.
///
/// An empty configuration doesn't contain any semantic information that it
/// wants to contribute to the semantics tree.   ¿ıáÑÌ¿˙dÑ¢/// The handler for [SemanticsAction.tap].
///
/// This is the semantic equivalent of a user briefly tapping the screen with
/// the finger without moving it. For example, a button should implement this
/// action.
///
/// VoiceOver users on iOS and TalkBack users on Android can trigger this
/// action by double-tapping the screen while an element is focused.
///
/// On Android prior to Android Oreo a double-tap on the screen while an
/// element with an [onTap] handler is focused will not call the registered
/// handler. Instead, Android will simulate a pointer down and up event at the
/// center of the focused element. Those pointer events will get dispatched
/// just like a regular tap with TalkBack disabled would: The events will get
/// processed by any [GestureDetector] listening for gestures in the center of
/// the focused element. Therefore, to ensure that [onTap] handlers work
/// properly on Android versions prior to Oreo, a [GestureDetector] with an
/// onTap handler should always be wrapping an element that defines a
/// semantic [onTap] handler. By default a [GestureDetector] will register its
/// own semantic [onTap] handler that follows this principle.   ¿˙èq¿˙ì  ¿˙ô¿˙®   ¿˚Å•¿¸çÅf/// The handler for [SemanticsAction.longPress].
///
/// This is the semantic equivalent of a user pressing and holding the screen
/// with the finger for a few seconds without moving it.
///
/// VoiceOver users on iOS and TalkBack users on Android can trigger this
/// action by double-tapping the screen without lifting the finger after the
/// second tap.   ¿¸ ÄÉ¿¸Œ  ¿¸⁄¿¸È   ¿˝QÇu¿ˇ®Ç./// The handler for [SemanticsAction.scrollLeft].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from right to left. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping left with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided.   ¿ˇËÄÜ¿ˇÏ  ¿ˇ˘¿    ¿ rÅ`¿∫Å'/// The handler for [SemanticsAction.dismiss].
///
/// This is a request to dismiss the currently focused node.
///
/// TalkBack users on Android can trigger this action in the local context
/// menu, and VoiceOver users on iOS can trigger this action with a standard
/// gesture or menu option.   ¿Ò}¿ı  ¿ˇ¿   ¿rÇ|¿ŒÇ3/// The handler for [SemanticsAction.scrollRight].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from left to right. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping right with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided.   ¿Äâ¿  ¿#¿2   ¿ûÇk¿ÔÇ(/// The handler for [SemanticsAction.scrollUp].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from bottom to top. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping up with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided.   ¿)ÄÄ¿-  ¿8¿G   ¿≠Çv¿Ç//// The handler for [SemanticsAction.scrollDown].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from top to bottom. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping down with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided.   ¿EÄÜ¿I  ¿V¿e   ¿œÇV¿Ç/// The handler for [SemanticsAction.increase].
///
/// This is a request to increase the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// If [this.value] is set, [increasedValue] must also be provided and
/// [onIncrease] must ensure that [this.value] will be set to
/// [increasedValue].
///
/// VoiceOver users on iOS can trigger this action by swiping up with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume up button.   ¿EÄÄ¿I  ¿T¿c   ¿…ÇZ¿	Ç/// The handler for [SemanticsAction.decrease].
///
/// This is a request to decrease the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// If [this.value] is set, [decreasedValue] must also be provided and
/// [onDecrease] must ensure that [this.value] will be set to
/// [decreasedValue].
///
/// VoiceOver users on iOS can trigger this action by swiping down with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume down button.   ¿CÄÄ¿G  ¿R¿a   ¿«Å¿”ÄÌ/// The handler for [SemanticsAction.copy].
///
/// This is a request to copy the current selection to the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example.   ¿t¿  ¿¿   ¿yÅ-¿ñÄ¸/// The handler for [SemanticsAction.cut].
///
/// This is a request to cut the current selection and place it in the
/// clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example.   ¿¡q¿≈  ¿À¿⁄   ¿6Å ¿BÄÌ/// The handler for [SemanticsAction.paste].
///
/// This is a request to paste the current content of the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example.   ¿sw¿w  ¿¿é   ¿ÓÅÎ¿∑Å§/// The handler for [SemanticsAction.showOnScreen].
///
/// A request to fully show the semantics node on screen. For example, this
/// action might be send to a node in a scrollable list that is partially off
/// screen to bring it on screen.
///
/// For elements in a scrollable list the framework provides a default
/// implementation for this action and it is not advised to provide a
/// custom one via this setter.   ¿˝Äå¿  ¿¿   ¿çÅî¿ﬂÅ,/// The handler for [SemanticsAction.moveCursorForwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field forward by one character.
///
/// TalkBack users can trigger this by pressing the volume up key while the
/// input focus is in a text field.   ¿ZÅ1¿^  ¿}¿ë   ¿èÅö¿ÂÅ0/// The handler for [SemanticsAction.moveCursorBackwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one character.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field.   ¿cÅ4¿g  ¿á¿õ   ¿õÅÉ¿ ÊÅ%/// The handler for [SemanticsAction.moveCursorForwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one word.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field.   ¿!RÅ'¿!V  ¿!p¿!Ñ   ¿"}ÅÜ¿#…Å&/// The handler for [SemanticsAction.moveCursorBackwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one word.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field.   ¿$8Å*¿$<  ¿$W¿$k   ¿%fÅ•¿&ÈÅ[/// The handler for [SemanticsAction.setSelection].
///
/// This handler is invoked when the user either wants to change the currently
/// selected text in a text field or change the position of the cursor.
///
/// TalkBack users can trigger this handler by selecting "Move cursor to
/// beginning/end" or "Select all" from the local context menu.   ¿'6Ç¿':  ¿'I¿'_   ¿)MÅL¿*ÅÅ/// The handler for [SemanticsAction.setText].
///
/// This handler is invoked when the user wants to replace the current text in
/// the text field with a new text.
///
/// Voice access users can trigger this handler by speaking "type <text>" to
/// their Android devices.   ¿*∫Å¿*æ  ¿*»¿*Ÿ   ¿+…Éº¿/IÉK/// The handler for [SemanticsAction.didGainAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler gains
/// the accessibility focus. The accessibility focus is the
/// green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidLoseAccessibilityFocus], which is invoked when the accessibility
///    focus is removed from the node.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus.   ¿/∂Ä≥¿/∫  ¿/÷¿/Â   ¿0mÉÆ¿3ﬂÉ=/// The handler for [SemanticsAction.didLoseAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler
/// loses the accessibility focus. The accessibility focus is
/// the green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidGainAccessibilityFocus], which is invoked when the node gains
///    accessibility focus.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus.   ¿4LÄ≥¿4P  ¿4l¿4{   ¿5ªÇb¿8	Ç!/// Determines the position of this node among its siblings in the traversal
/// sort order.
///
/// This is used to describe the order in which the semantic node should be
/// traversed by the accessibility services on the platform (e.g. VoiceOver
/// on iOS and TalkBack on Android).
///
/// Whether this sort key has an effect on the [SemanticsNode] sort order is
/// subject to how this configuration is used. For example, the [absorb]
/// method may decide to not use this key when it combines multiple
/// [SemanticsConfiguration] objects.   ¿8>y¿8B  ¿8J¿8]   ¿8ªÅî¿:/Å^/// The index of this node within the parent's list of semantic children.
///
/// This includes all semantic nodes, not just those currently in the
/// child list. For example, if a scrollable has five children but the first
/// two are not visible (and thus not included in the list of children), then
/// the index of the last node will still be 4.   ¿:i]¿:m  ¿:{
¿:Å   ¿: Ä⁄¿;~Ä¢/// The total number of scrollable children that contribute to semantics.
///
/// If the number of children are unknown or unbounded, this value will be
/// null.   ¿;¡Äî¿;≈  ¿;÷
¿;‹   ¿<YÄÄ¿<ΩV/// The index of the first visible scrollable child that contributes to
/// semantics.   ¿<ÒÄÖ¿<ı  ¿=
¿=   ¿=zÄí¿=Íb/// The id of the platform view, whose semantics nodes will be added as
/// children to this node.   ¿>'Äé¿>+  ¿>:
¿>@   ¿>πÅ{¿@Å?/// The maximum number of characters that can be entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [isTextField] is true. Defaults to null,
/// which means no limit is imposed on the text field.   ¿@OÄé¿@S  ¿@b
¿@h   ¿@·Åk¿B"Å'/// The current number of characters that have been entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [isTextField] is true. Must be set when
/// [maxValueLength] is set.   ¿BkÄö¿Bo  ¿BÇ
¿Bà   ¿C	Ç¿D…Å¶/// Whether the semantic information provided by the owning [RenderObject] and
/// all of its descendants should be treated as one logical entity.
///
/// If set to true, the descendants of the owning [RenderObject]'s
/// [SemanticsNode] will merge their semantic information into the
/// [SemanticsNode] representing the owning [RenderObject].
///
/// Setting this to true requires that [isSemanticBoundary] is also true.   ¿EAÄ°¿EE  ¿Ee
¿Ek   ¿EÊÅ∫¿GnÅN/// The handlers for each supported [CustomSemanticsAction].
///
/// Whenever a custom accessibility action is added to a node, the action
/// [SemanticsAction.customAction] is automatically added. A handler is
/// created which uses the passed argument to lookup the custom action
/// handler from this map and invoke it, if present.   ¿HÅ¿H  ¿H,.¿HV   ¿JMÅW¿KÉÅ/// A textual description of the owning [RenderObject].
///
/// Setting this attribute will override the [attributedLabel].
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [attributedLabel], which is the [AttributedString] of this property.   ¿KßÄÜ¿K´  ¿K±¿Kπ   ¿L1Ç†¿N≠ÇJ/// A textual description of the owning [RenderObject] in [AttributedString]
/// format.
///
/// On iOS this is used for the `accessibilityAttributedLabel` property
/// defined in the `UIAccessibility` Protocol. On Android it is concatenated
/// together with [attributedValue] and [attributedHint] in the following
/// order: [attributedValue], [attributedLabel], [attributedHint]. The
/// concatenated value is then used as the `Text` description.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [label], which is the raw text of this property.   ¿OÄÅ¿O  ¿O$ ¿O6   ¿OïÇï¿R	ÇN/// A textual description for the current value of the owning [RenderObject].
///
/// Setting this attribute will override the [attributedValue].
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [attributedValue], which is the [AttributedString] of this property.
///  * [increasedValue] and [attributedIncreasedValue], which describe what
///    [value] will be after performing [SemanticsAction.increase].
///  * [decreasedValue] and [attributedDecreasedValue], which describe what
///    [value] will be after performing [SemanticsAction.decrease].   ¿R-ÄÜ¿R1  ¿R7¿R?   ¿R∑É∂¿VIÉX/// A textual description for the current value of the owning [RenderObject]
/// in [AttributedString] format.
///
/// On iOS this is used for the `accessibilityAttributedValue` property
/// defined in the `UIAccessibility` Protocol. On Android it is concatenated
/// together with [attributedLabel] and [attributedHint] in the following
/// order: [attributedValue], [attributedLabel], [attributedHint]. The
/// concatenated value is then used as the `Text` description.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [value], which is the raw text of this property.
///  * [attributedIncreasedValue], which describes what [value] will be after
///    performing [SemanticsAction.increase].
///  * [attributedDecreasedValue], which describes what [value] will be after
///    performing [SemanticsAction.decrease].   ¿V¨ÄÅ¿V∞  ¿V¿ ¿V“   ¿W1Çn¿YlÇ/// The value that [value] will have after performing a
/// [SemanticsAction.increase] action.
///
/// Setting this attribute will override the [attributedIncreasedValue].
///
/// One of the [attributedIncreasedValue] or [increasedValue] must be set if
/// a handler for [SemanticsAction.increase] is provided and one of the
/// [value] or [attributedValue] is set.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [attributedIncreasedValue], which is the [AttributedString] of this property.   ¿Y¢Ä≥¿Y¶  ¿Yµ¿YΩ   ¿ZYÇ3¿\VÅœ/// The value that [value] will have after performing a
/// [SemanticsAction.increase] action in [AttributedString] format.
///
/// One of the [attributedIncreasedValue] or [increasedValue] must be set if
/// a handler for [SemanticsAction.increase] is provided and one of the
/// [value] or [attributedValue] is set.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [increasedValue], which is the raw text of this property.   ¿\‘Ä•¿\ÿ  ¿\Ò)¿]   ¿]}ÇX¿_¢Ç/// The value that [value] will have after performing a
/// [SemanticsAction.decrease] action.
///
/// Setting this attribute will override the [attributedDecreasedValue].
///
/// One of the [attributedDecreasedValue] or [decreasedValue] must be set if
/// a handler for [SemanticsAction.decrease] is provided and one of the
/// [value] or [attributedValue] is set.
///
/// The reading direction is given by [textDirection].
///
///  * [attributedDecreasedValue], which is the [AttributedString] of this property.   ¿_ÿÄ≥¿_‹  ¿_Î¿_Û   ¿`èÇ3¿båÅœ/// The value that [value] will have after performing a
/// [SemanticsAction.decrease] action in [AttributedString] format.
///
/// One of the [attributedDecreasedValue] or [decreasedValue] must be set if
/// a handler for [SemanticsAction.decrease] is provided and one of the
/// [value] or [attributedValue] is set.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [decreasedValue], which is the raw text of this property.   ¿c
Ä•¿c  ¿c')¿c9   ¿c≥Åg¿d˚Å*/// A brief description of the result of performing an action on this node.
///
/// Setting this attribute will override the [attributedHint].
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [attributedHint], which is the [AttributedString] of this property.   ¿eÄÅ¿e!  ¿e&¿e.   ¿e¢Ç±¿h1Ç]/// A brief description of the result of performing an action on this node in
/// [AttributedString] format.
///
/// On iOS this is used for the `accessibilityAttributedHint` property
/// defined in the `UIAccessibility` Protocol. On Android it is concatenated
/// together with [attributedLabel] and [attributedValue] in the following
/// order: [attributedValue], [attributedLabel], [attributedHint]. The
/// concatenated value is then used as the `Text` description.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [hint], which is the raw text of this property.   ¿hë}¿hï  ¿h§¿h∂   ¿iÄñ¿iàU/// Provides hint values which override the default hints on supported
/// platforms.   ¿i’Äï¿iŸ  ¿iÁ¿j    ¿jnÄí¿jËj/// The elevation in z-direction at which the owning [RenderObject] is
/// located relative to its parent.   ¿kÄµ¿k"  ¿k,¿k4   ¿k◊ÅC¿mÅ/// The extend that the owning [RenderObject] occupies in z-direction starting
/// at [elevation].
///
/// It's extremely rare to set this value directly. Instead, it is calculated
/// implicitly when other [SemanticsConfiguration]s are merged into this one
/// via [absorb].   ¿m8Äµ¿m<  ¿mF¿mN   ¿mÒÅ¿nÀÄƒ/// Whether the semantics node is the root of a subtree for which values
/// should be announced.
///
/// See also:
///
///  * [SemanticsFlag.scopesRoute], for a full description of route scoping.   ¿oQ¿o  ¿o
¿o   ¿oVÄ„¿pÄû/// Whether the semantics node contains the label of a route.
///
/// See also:
///
///  * [SemanticsFlag.namesRoute], for a full description of route naming.   ¿p<O¿p@  ¿pK
¿pQ   ¿pèj¿pŒ3/// Whether the semantics node represents an image.   ¿p¸I¿q   ¿q
¿q   ¿qIÉa¿twÉ/// Whether the semantics node is a live region.
///
/// A live region indicates that updates to semantics node are important.
/// Platforms may use this information to make polite announcements to the
/// user to inform them of updates to this node.
///
/// An example of a live region is a [SnackBar] widget. On Android and iOS,
/// live region causes a polite announcement to be generated automatically,
/// even if the widget does not have accessibility focus. This announcement
/// may not be spoken if the OS accessibility services are already
/// announcing something else, such as reading the label of a focused widget
/// or providing a system announcement.
///
/// See also:
///
///  * [SemanticsFlag.isLiveRegion], the semantics flag that this setting controls.   ¿t≠Q¿t±  ¿tº
¿t¬   ¿uÄß¿uâo/// The reading direction for the text in [label], [value], [hint],
/// [increasedValue], and [decreasedValue].   ¿uÕw¿u—  ¿uﬂ¿uÔ   ¿vHÅµ¿wÃÅn/// Whether the owning [RenderObject] is selected (true) or not (false).
///
/// This is different from having accessibility focus. The element that is
/// accessibility focused may or may not be selected; e.g. a [ListTile] can have
/// accessibility focus but have its [ListTile.selected] property set to false,
/// in which case it will not be flagged as selected.   ¿x O¿x  ¿x
¿x   ¿xSÉ<¿{/Ç≥/// Whether the owning [RenderObject] is currently enabled.
///
/// A disabled object does not respond to user interactions. Only objects that
/// usually respond to user interactions, but which currently do not (like a
/// disabled button) should be marked as disabled.
///
/// The setter should not be called for objects (like static text) that never
/// respond to user interactions.
///
/// The getter will return null if the owning [RenderObject] doesn't support
/// the concept of being enabled/disabled.
///
/// This property does not control whether semantics are enabled. If you wish to
/// disable semantics for a particular widget, you should use an [ExcludeSemantics]
/// widget.   ¿{íÄÇ¿{ñ  ¿{†¿{ß   ¿|Ç&¿}ﬁÅ©/// If this node has Boolean state that can be controlled by the user, whether
/// that state is checked or unchecked, corresponding to true and false,
/// respectively.
///
/// Do not call the setter for this field if the owning [RenderObject] doesn't
/// have checked/unchecked state that can be controlled by the user.
///
/// The getter returns null if the owning [RenderObject] does not have
/// checked/unchecked state.   ¿~AÄÇ¿~E  ¿~O¿~V   ¿~«Åˇ¿ÄfÅÑ/// If this node has Boolean state that can be controlled by the user, whether
/// that state is on or off, corresponding to true and false, respectively.
///
/// Do not call the setter for this field if the owning [RenderObject] doesn't
/// have on/off state that can be controlled by the user.
///
/// The getter returns null if the owning [RenderObject] does not have
/// on/off state.   ¿Ä…ÄÇ¿ÄÕ  ¿Ä◊¿Äﬁ   ¿ÅOÅ{¿ÇyÅ/// Whether the owning RenderObject corresponds to UI that allows the user to
/// pick one of several mutually exclusive options.
///
/// For example, a [Radio] button is in a mutually exclusive group because
/// only one radio button in that group can be marked as [isChecked].   ¿ÇÕo¿Ç—  ¿ÇÏ
¿ÇÚ   ¿É@~¿Éã?/// Whether the owning [RenderObject] can hold the input focus.   ¿É¡Q¿É≈  ¿É—
¿É◊   ¿ÑÄÅ¿ÑhF/// Whether the owning [RenderObject] currently holds the input focus.   ¿ÑöM¿Ñû  ¿Ñ®
¿ÑÆ   ¿ÑÎÄÅ¿Ö?H/// Whether the owning [RenderObject] is a button (true) or not (false).   ¿ÖoK¿Ös  ¿Ö|
¿ÖÇ   ¿Öæ{¿ÜF/// Whether the owning [RenderObject] is a link (true) or not (false).   ¿Ü<G¿Ü@  ¿ÜG
¿ÜM   ¿ÜáÄÅ¿Ü€H/// Whether the owning [RenderObject] is a header (true) or not (false).   ¿áK¿á  ¿á
¿á   ¿áZÄÅ¿áÆH/// Whether the owning [RenderObject] is a slider (true) or not (false).   ¿áﬁK¿á‚  ¿áÎ
¿áÒ   ¿à-Äï¿àãE/// Whether the owning [RenderObject] is a keyboard key (true) or not   ¿à≈U¿à…  ¿à◊
¿à›   ¿âÉn¿å_É/// Whether the owning [RenderObject] is considered hidden.
///
/// Hidden elements are currently not visible on screen. They may be covered
/// by other elements or positioned outside of the visible area of a viewport.
///
/// Hidden elements cannot gain accessibility focus though regular touch. The
/// only way they can be focused is by moving the focus to them via linear
/// navigation.
///
/// Platforms are free to completely ignore hidden elements and new platforms
/// are encouraged to do so.
///
/// Instead of marking an element as hidden it should usually be excluded from
/// the semantics tree altogether. Hidden elements are only included in the
/// semantics tree to work around platform limitations and they are mainly
/// used to implement accessibility scrolling on iOS.   ¿åèK¿åì  ¿åú
¿å¢   ¿åﬁu¿ç 6/// Whether the owning [RenderObject] is a text field.   ¿çVQ¿çZ  ¿çf
¿çl   ¿ç´Ä®¿é"g/// Whether the owning [RenderObject] is read only.
///
/// Only applicable when [isTextField] is true.   ¿éVO¿éZ  ¿ée
¿ék   ¿é©ÅT¿èÃÅ/// Whether [this.value] should be obscured.
///
/// This option is usually set in combination with [isTextField] to indicate
/// that the text field contains a password (or other sensitive information).
/// Doing so instructs screen readers to not read out [this.value].   ¿ê O¿ê  ¿ê
¿ê   ¿êSÄı¿ëÄ∞/// Whether the text field is multiline.
///
/// This option is usually set in combination with [isTextField] to indicate
/// that the text field is configured to be multiline.   ¿ëKQ¿ëO  ¿ë[
¿ëa   ¿ë†ÅÈ¿ìDÅå/// Whether the platform can scroll the semantics node when the user attempts
/// to move focus to an offscreen child.
///
/// For example, a [ListView] widget has implicit scrolling so that users can
/// easily move to the next visible set of children. A [TabBar] widget does
/// not have implicit scrolling, so that users can navigate into the tab
/// body when reaching the end of the tab bar.   ¿ìåc¿ìê  ¿ì•
¿ì´   ¿ìÛÄµ¿îà}/// The currently selected text (or the position of the cursor) within
/// [this.value] if this node represents a text field.   ¿îÃÄÇ¿î–  ¿îﬁ¿îÓ   ¿ïRÅﬁ¿óÅõ/// Indicates the current scrolling position in logical pixels if the node is
/// scrollable.
///
/// The properties [scrollExtentMin] and [scrollExtentMax] indicate the valid
/// in-range values for this property. The value for [scrollPosition] may
/// (temporarily) be outside that range, e.g. during an overscroll.
///
/// See also:
///
///  * [ScrollPosition.pixels], from where this value is usually taken.   ¿óN}¿óR  ¿óa¿ój   ¿óœÅA¿òÏÅ /// Indicates the maximum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.maxScrollExtent], from where this value is usually taken.   ¿ô/¿ô3  ¿ôC¿ôL   ¿ô≤ÅA¿öœÅ /// Indicates the minimum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.minScrollExtent], from where this value is usually taken.   ¿õ¿õ  ¿õ&¿õ/   ¿õ†Å¿úóÄÃ/// The set of tags that this configuration wants to add to all child
/// [SemanticsNode]s.
///
/// See also:
///
///  * [addTagForChildren] to add a tag and for more information about their
///    usage.   
¿ÚùÅX¿Û.ÄÉ/// Adds an `action` to the semantics tree.
///
/// The provided `handler` is called to respond to the user triggered
/// `action`. ¿Û9¿ÛJ  ¿ÛQ¿Ûi   ¿Û˘Åä¿ÙøÄ∂/// Adds an `action` to the semantics tree, whose `handler` does not expect
/// any arguments.
///
/// The provided `handler` is called to respond to the user triggered
/// `action`. ¿Ù÷¿ÙÁ  ¿ÙÓ¿Ù¸   ¿5Ä¥¿5zZ/// Returns the action handler registered for [action] or null if none was
/// registered. ¿5ã¿5ú   ¿I)Å ¿I.  ¿IG¿IP   ¿úÊÉ¿üzÇp/// Specifies a [SemanticsTag] that this configuration wants to apply to all
/// child [SemanticsNode]s.
///
/// The tag is added to all [SemanticsNode] that pass through the
/// [RenderObject] owning this configuration while looking to be attached to a
/// parent [SemanticsNode].
///
/// Tags are used to communicate to a parent [SemanticsNode] that a child
/// [SemanticsNode] was passed through a particular [RenderObject]. The parent
/// can use this information to determine the shape of the semantics tree.
///
/// See also:
///
///  * [RenderViewport.excludeFromScrolling] for an example of
///    how tags are used. ¿üå¿üö   ¿†#ÄÆ¿†(  ¿†1¿†@  ¿†E
¿†K   ¿†’@¿†⁄  ¿†„¿†Ú   ¿°?ÉÎ¿¢<ÄÌ/// Whether this configuration is compatible with the provided `other`
/// configuration.
///
/// Two configurations are said to be compatible if they can be added to the
/// same [SemanticsNode] without losing any semantics information. ¿¢M¿¢f   ¿•.âÃ¿ßbÇ/// Absorb the semantic information from `child` into this configuration.
///
/// This adds the semantic information of both configurations and saves the
/// result in this configuration.
///
/// The [RenderObject] owning the `child` configuration must be a descendant
/// of the [RenderObject] that owns this configuration.
///
/// Only configurations that have [explicitChildNodes] set to false can
/// absorb other configurations and it is recommended to only absorb compatible
/// configurations as determined by [isCompatibleWith]. ¿ßi¿ßÅ   ¿Æ˛Ö⁄¿ØH0/// Returns an exact copy of this configuration.    ¿∫…ä^¿ΩyÇ†/// Base class for all sort keys for [SemanticsProperties.sortKey] accessibility
/// traversal order sorting.
///
/// Sort keys are sorted by [name], then by the comparison that the subclass
/// implements. If [SemanticsProperties.sortKey] is specified, sort keys within
/// the same semantic group must all be of the same type.
///
/// Keys with no [name] are compared to other keys with no [name], and will
/// be traversed before those with a [name].
///
/// If no sort key is applied to a semantics node, then it will be ordered using
/// a platform dependent default algorithm.
///
/// See also:
///
///  * [OrdinalSortKey] for a sort key that sorts using an ordinal. ¿Ω ÄΩ ¿æi¿æyÄî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.¿æ{	¿æÅ   ¿æãÅ?¿ø∆Å/// An optional name that will group this sort key with other sort keys of the
/// same [name].
///
/// Sort keys must have the same `runtimeType` when compared.
///
/// Keys with no [name] are compared to other keys with no [name], and will
/// be traversed before those with a [name].  ¿øœÇ∂¿øﬂ  ¿øÈ¿ø˚  ¿øœ¿ø–¿¬âÅ’¿ƒ2ÅÖ/// The implementation of [compareTo].
///
/// The argument is guaranteed to be of the same type as this object and have
/// the same [name].
///
/// The method should return a negative number if this object comes earlier in
/// the sort order than the argument; and a positive number if it comes later
/// in the sort order. Returning zero causes the system to use default sort
/// order. ¿ƒ< ¿ƒX  ¿ƒ!¿ƒ"¿ƒbÄ√¿ƒs  ¿ƒá&¿ƒ§  ¿ƒb¿ƒc ¿≈)áˆ¿»ÜÉV/// A [SemanticsSortKey] that sorts simply based on the `double` value it is
/// given.
///
/// The [OrdinalSortKey] compares itself with other [OrdinalSortKey]s
/// to sort based on the order it is given.
///
/// [OrdinalSortKey]s are sorted by the optional [name], then by their [order].
/// If [SemanticsProperties.sortKey] is a [OrdinalSortKey], then all the other
/// specified sort keys in the same semantics group must also be
/// [OrdinalSortKey]s.
///
/// Keys with no [name] are compared to other keys with no [name], and will
/// be traversed before those with a [name].
///
/// The ordinal value [order] is typically a whole number, though it can be
/// fractional, e.g. in order to fit between two other consecutive whole
/// numbers. The value must be finite (it cannot be [double.nan],
/// [double.infinity], or [double.negativeInfinity]). ¿»≤ÅÑ ¿…O¿…]Äê/// Creates a const semantics sort key that uses a [double] as its key value.
///
/// The [order] must be a finite number, and must not be null.¿…c
¿…i  ¿…u¿…~  $¿…ä¿…ê¿…û¿…ó¿…ë¿…ö¿…®¿…Æ¿…¬¿…µ¿…Ø¿…∏¿…æ¿…ø¿…Ã¿…“¿…Ú¿…Ÿ¿…”¿…€¿…·¿…‚¿…¸¿ ¿ ¿ 	¿ ¿ ¿ ¿ ¿ $¿ )¿ 4¿ .¿ *¿ 0¿ :Åa¿ÀñÅB/// Determines the placement of this key in a sequence of keys that defines
/// the order in which this node is traversed by the platform's accessibility
/// services.
///
/// Lower values will be traversed first. Keys with the same [name] will be
/// grouped together and sorted by name first, and then sorted by [order].  ¿À†Ä¥¿À∞  ¿À∫¿À   ¿À†¿À°¿ÃXÄ≈¿Ãi  ¿Ã}&¿Ãö  ¿ÃX¿ÃY  ¿¥‹ÇJ¿µA_/// Used by [debugDumpSemanticsTree] to specify the order in which child nodes
/// are printed.  ¿µ]Å¿∂_Ä˜/// Print nodes in inverse hit test order.
///
/// In inverse hit test order, the last child of a [SemanticsNode] will be
/// asked first if it wants to respond to a user's interaction, followed by
/// the second last, etc. until a taker is found. ¿∂rÄ±¿∑Äö/// Print nodes in semantic traversal order.
///
/// This is the order in which a user would navigate the UI using the "next"
/// and "previous" gestures.      ¿ ‚∞Ä©¿ „\/// In tests use this function to reset the counter used to generate
/// [SemanticsNode.id].   ¿Ω≤ÅC¿Ω˙@/// Converts `point` to the `node`'s parent's coordinate system. ¿æ¿æ#  ¿æ(¿æ0   ¿æ˜á¿¡Åˇ/// Sorts `children` using the default sorting algorithm, and returns them as a
/// new list.
///
/// The algorithm first breaks up children into groups such that no two nodes
/// from different groups overlap vertically. These groups are sorted vertically
/// according to their [_SemanticsSortGroup.startOffset].
///
/// Within each group, the nodes are sorted using
/// [_SemanticsSortGroup.sortedWithinVerticalGroup].
///
/// For an illustration of the algorithm see http://bit.ly/flutter-default-traversal. ¿¡#¿¡8  ¿¡A¿¡P   ¿∑(Éü¿∑9  ¿∑U.¿∑p  ¿∑á/¿∑¢  ¿∑∫)¿∑”  ¿∑Á*¿∏     ÉÄ„ÉØÄ°/// Signature for a function that is called for each [SemanticsNode].
///
/// Return false to stop visiting nodes.
///
/// Used by [SemanticsNode.visitChildren].  É‘É„   ÉÍÅÑŒÄ€/// Signature for [SemanticsAction]s that move the cursor.
///
/// If `extendSelection` is set to true the cursor movement should extend the
/// current selection or (if nothing is currently selected) start a selection.  ÑÑˆ   ÖÄ–ÖõÄä/// Signature for the [SemanticsAction.setSelection] handlers to change the
/// text selection (or re-position the cursor) to `selection`.  ÖøÖŒ   Ö⁄Ä§ÜRo/// Signature for the [SemanticsAction.setText] handlers to replace the
/// current text with the input `text`.  ÜqÜy   ÜÄÄ∞Ü˚r/// Signature for a handler of a [SemanticsAction].
///
/// Returned by [SemanticsConfiguration.getActionHandler].  á"á+     í! <ÄÜÄ§Ä•Ä¡Ä€ÄÛÅ7Å^Å_ÅâÅ’Å˝Ç/Ç0Ç]Ç|Ç}ÇÂÉÉÉKÉOÉxÉ|ÉßÉÈÉÍÑ%Ñ)ÑwÑ∆ÖÖÖTÖìÖŸÖ⁄Ü"ÜJÜÜÄÜ¥Ü∏ÜÛá1á2áSáWáñá„à/à3àÅàŒà‹à‡â.â|â âŸâÓääädä¥ããã6ã7ãtãzã¿ã’ã÷ã‚å.å0å1åaåeåßåÔç7ççŒéé+é/é~é≤é∂èèèèdèèèìè°è•èˆêêêLêRêäê∆ê„ê˛ëë&ë'ëwëÖëãë¬í4íPíjíàíúíùí€íÚíÛì/ìEìFìÄì°ì¢ìÆìÊìÁìÛîî@îTî~îûîºîﬂî„î‰îïïcïgïhï±ï ï‰ñ>ñîñïñƒñˇóó9óSópóëóóó™óÆóØóﬁòò+ò/ò1ò2òjòuòéò±ò∑ôôôôbôqôÖôòô…öööRödöööÃõõ!õ+õ@õLõMõÖõúõùõ«õÕúú9ú:ú}úÉú‘ùùUùoùÉùâù©ùºù¬ù√ùËûûrûôû¡üü1übüèüöüÌ††#†)†l†p†q†Ω†…†Ï°°=°_°•°©°™°∂°Ó°Ô°˚¢¢r¢v¢x¢y¢√££P£ñ£ú£Ÿ£ı§§%§?§_§ã§Ω§÷§˜••#•2•B•_•Ñ•õ•æ•»•…¶¶Q¶W¶|¶ò¶ô¶•ßßß%ßlßÉßòßπß‡®®O®z®Ä®•®Ω®√©0©4©6©7©o©s©ø™™`™r™v™¥™ø™È´´´d´j´µ´«´‡´˚¨¨A¨m¨ô¨ª¨‹¨Ù≠≠.≠O≠n≠í≠¥≠◊≠˙ÆÆ>ÆdÆsÆáÆ™Æ»ÆËØØ8ØiØöØ¡∞b±±ø≤{≥≥6≥7≥v≥â≥ä≥À≥‡≥·¥ ¥&¥_¥e¥ü¥Õ¥Œµµ0µ6µoµuµÆµÿµŸ∂∂∂W∂]∂ó∂≈∂∆∑∑(∑.∑g∑m∑¶∑–∑—∏∏6∏<∏u∏{∏æ∏˛∏ˇπ;πÅπáπ¿π∆∫∫;∫<∫x∫°∫ß∫‡∫Êª)ªiªjª¶ªÏªÚº+º1ºsº¶ºßºıº˚Ω4Ω:ΩsΩüΩ†ΩÌæææPæVæéæ∑æ∏æˆø,øRøSø§ø–øˆø˜¿ @C¿ @I¿ @ñ¿ @¢¿ @¡¿ @¬¿ A¿ A"¿ A#¿ As¿ AÖ¿ Aã¿ A€¿ B'¿ Bm¿ Bs¿ BÉ¿ Bâ¿ B”¿ BÛ¿ BÙ¿ CC¿ CU¿ C[¿ Cñ¿ Cú¿ C¨¿ C≤¿ D¿ D&¿ D'¿ Dv¿ Dà¿ Dé¿ D…¿ Dœ¿ Dﬂ¿ DÂ¿ E8¿ EY¿ EZ¿ E§¿ E¡¿ E«¿ F¿ F_¿ Ft¿ Fz¿ Fä¿ Fê¿ F–¿ G
¿ G'¿ G(¿ Gt¿ GÜ¿ Gå¿ GŸ¿ GÌ¿ GÛ¿ HC¿ HÖ¿ H¢¿ H£¿ HÚ¿ I¿ I
¿ IW¿ Ik¿ Iq¿ I¬¿ IÌ¿ J¿ J¿ JN¿ Ja¿ Jb¿ Jû¿ Jø¿ J¿¿ K¿ K ¿ Kg¿ K∏¿ K«¿ K„¿ K‰¿ L,¿ L2¿ LB¿ LH¿ Lò¿ L∫¿ L‘¿ L’¿ M¿ M!¿ M1¿ M7¿ MÉ¿ Mù¿ Mû¿ MÈ¿ N¿ N¿ NA¿ NG¿ NW¿ N]¿ N•¿ N“¿ N”¿ O¿ OC¿ OD¿ Ow¿ O¬¿ O√¿ Oœ¿ P¿ P¿ P"¿ Pg¿ Pí¿ P‡¿ QD¿ Qì¿ Q‚¿ R¿ R]¿ Rà¿ R®¿ RØ¿ S ¿ SX¿ Si¿ S¿¿ T-¿ T.¿ T]¿ T°¿ T»¿ TÊ¿ TÌ¿ U@¿ Uà¿ U–¿ V*¿ VÑ¿ V ¿ W/¿ WX¿ Wƒ¿ X¿ Xr¿ X—¿ Y*¿ Y{¿ Y◊¿ Z1¿ Zç¿ Zë¿ Zí¿ Zû¿ Z¡¿ Z„¿ [¿ ['¿ [[¿ [è¿ [’¿ \¿ \M¿ \}¿ \õ¿ \¬¿ \¯¿ ]$¿ ]T¿ ]Ü¿ ]∫¿ ]Ó¿ ^ ¿ ^R¿ ^å¿ ^¥¿ ^‹¿ _¿ _\¿ _`¿ _a¿ _m¿ _ê¿ _õ¿ _®¿ _Ω¿ _“¿ _¿ `¿ `"¿ `5¿ `?¿ `I¿ `\¿ `r¿ `É¿ `ó¿ `¨¿ `¡¿ `’¿ `È¿ a¿ a¿ a#¿ a4¿ aE¿ a†¿ aß¿ a¨¿ a≠¿ aÚ¿ b¿ b,¿ bU¿ b|¿ bí¿ bæ¿ bﬂ¿ b˜¿ c
¿ c¿ c"¿ c&¿ c(¿ c)¿ cx¿ cô¿ c´¿ cÕ¿ c˜¿ d¿ d#¿ d3¿ dE¿ dW¿ d\¿ d]¿ dâ¿ dä¿ dñ¿ dÙ¿ dˆ¿ d˜¿ e>¿ eM¿ eQ¿ e~¿ eâ¿ e√¿ eÌ¿ f¿ f"¿ f<¿ f\¿ fÇ¿ fÉ¿ f©¿ fØ¿ f·¿ fÁ¿ g.¿ g[¿ ga¿ gâ¿ g§¿ gø¿ g¿¿ gÌ¿ gÛ¿ h%¿ h+¿ hu¿ hØ¿ hµ¿ hÁ¿ i¿ i$¿ i%¿ iW¿ iû¿ iü¿ i´¿ iÍ¿ iÎ¿ i˜¿ j¿ jD¿ jX¿ jÉ¿ j´¿ j‡¿ j‰¿ jÂ¿ jÒ¿ k6¿ ka¿ k±¿ l¿ l¿ l¿ l¿ lc¿ lx¿ l|¿ lÃ¿ l‡¿ lÎ¿ m"¿ mG¿ me¿ mw¿ mâ¿ mú¿ mÆ¿ mø¿ mŒ¿ mﬂ¿ mÛ¿ n¿ n¿ n-¿ nA¿ nS¿ nv¿ ná¿ nö¿ nÆ¿ nƒ¿ nŸ¿ nÈ¿ n˛¿ o¿ o4¿ oD¿ o^¿ on¿ oà¿ o°¿ oƒ¿ o›¿ p ¿ p¿ p(¿ p@¿ pX¿ pj¿ pÉ¿ pì¿ p©¿ p¿¿ pÿ¿ pÌ¿ q¿ q¿ q.¿ q?¿ qO¿ qa¿ qä¿ q¥¿ qÿ¿ q˝¿ r¿ r*¿ rP¿ rv¿ rä¿ r´¿ s¿ sì¿ t+¿ t√¿ u3¿ u4¿ uÑ¿ u´¿ u±¿ uˇ¿ vJ¿ v|¿ vì¿ vî¿ vŸ¿ w¿ w.¿ w4¿ we¿ w|¿ w}¿ w«¿ x¿ x¿ x¿ xO¿ xf¿ xg¿ x∂¿ x˛¿ y¿ yT¿ yy¿ yë¿ yí¿ y÷¿ y‹¿ z)¿ z;¿ zQ¿ zR¿ zî¿ zö¿ zÍ¿ {4¿ {B¿ {V¿ {W¿ {õ¿ {°¿ {¿ |>¿ |c¿ |y¿ |z¿ |¬¿ |»¿ }¿ }$¿ }=¿ }>¿ }Ç¿ }à¿ }œ¿ }Ë¿ }˛¿ }ˇ¿ ~I¿ ~d¿ ~e¿ ~¢¿ ~®¿ ~ÿ¿ ~ﬁ¿ !¿ 9¿ :¿ {¿ Å¿ »¿ Œ¿ Ä ¿ Äj¿ Äª¿ Ä˙¿ Å¿ Å¿ ÅU¿ Å[¿ Å¨¿ ÅÏ¿ ÅÚ¿ ÇD¿ Çé¿ Çﬂ¿ É¿ É5¿ É6¿ ÉÉ¿ Éâ¿ ÉŸ¿ Ñ¿ ÑB¿ ÑC¿ Ñ}¿ ÑÉ¿ Ñ“¿ Ö#¿ Ö)¿ Öy¿ Ö∆¿ Öÿ¿ Öﬁ¿ Ü.¿ ÜM¿ ÜS¿ Ü§¿ ÜÚ¿ á?¿ áw¿ áç¿ áé¿ á≈¿ áÀ¿ à¿ àh¿ à≠¿ à≈¿ à∆¿ â¿ â#¿ â)¿ âs¿ â≠¿ â≥¿ âË¿ ä¿ ä¿ äO¿ ä}¿ äÉ¿ ä¥¿ ã¿ ã8¿ ã>¿ ãN¿ ãT¿ ã†¿ ãº¿ ã◊¿ ãÿ¿ å%¿ å+¿ å;¿ åA¿ åê¿ å™¿ å´¿ å‰¿ åÍ¿ å˙¿ ç ¿ çF¿ ç[¿ ç\¿ ç§¿ ç™¿ çˆ¿ éC¿ év¿ é|¿ é ¿ è¿ èf¿ è´¿ è˙¿ ê$¿ ê*¿ ê:¿ ê@¿ êë¿ êË¿ ë¿ ë¿ ëO¿ ëa¿ ëg¿ ë¥¿ ë»¿ ëŒ¿ í¿ íQ¿ ín¿ ío¿ íæ¿ í–¿ í÷¿ ì#¿ ì7¿ ì=¿ ìÜ¿ ì•¿ ì∆¿ ì«¿ ì˚¿ î¿ îP¿ îâ¿ îè¿ îﬁ¿ îÚ¿ î¯¿ ï¿ ï¿ ï_¿ ïÉ¿ ï“¿ ïÈ¿ ïÍ¿ ñ=¿ ñC¿ ñç¿ ñ◊¿ ñ›¿ ó,¿ ó@¿ óF¿ óV¿ ó\¿ ó¨¿ ó€¿ ò¿ òD¿ òE¿ òÜ¿ òå¿ ò€¿ ô¿ ô¿ ôi¿ ô}¿ ôÉ¿ ôì¿ ôô¿ ôÍ¿ ö¿ ö]¿ öt¿ öu¿ ö∆¿ ö€¿ ö·¿ õ+¿ õu¿ õ{¿ õ ¿ õﬁ¿ õ‰¿ õÙ¿ õ˙¿ úJ¿ úy¿ ú∑¿ ú‚¿ ú„¿ ù)¿ ùt¿ ùz¿ ù≈¿ û¿ û(¿ û.¿ ûg¿ û£¿ û©¿ ûπ¿ ûø¿ ü¿ ü=¿ üã¿ üû¿ üæ¿ üø¿ †¿ †]¿ †c¿ †¥¿ †˛¿ °&¿ °,¿ °e¿ °°¿ °ß¿ °∑¿ °Ω¿ ¢¿ ¢E¿ ¢å¿ ¢¿¿ ¢¡¿ £¿ £R¿ £X¿ ££¿ £Ó¿ §¿ §¿ §E¿ §Å¿ §á¿ §ó¿ §ù¿ §Ï¿ •¿ •i¿ •|¿ •ú¿ •ù¿ •Ó¿ ¶;¿ ¶A¿ ¶í¿ ¶‹¿ ß¿ ß
¿ ßC¿ ßã¿ ßë¿ ß°¿ ßß¿ ß˜¿ ®/¿ ®v¿ ®™¿ ®´¿ ®˚¿ ©¿ ©¿ ©d¿ ©ù¿ ©£¿ ©¿ ™¿ ™
¿ ™¿ ™ ¿ ™p¿ ™î¿ ™‚¿ ™¯¿ ™˘¿ ´J¿ ´}¿ ´É¿ ´Ã¿ ¨¿ ¨¿ ¨i¿ ¨}¿ ¨É¿ ¨ì¿ ¨ô¿ ¨Ë¿ ≠¿ ≠T¿ ≠~¿ ≠¿ ≠»¿ ≠Ÿ¿ ≠ﬂ¿ Æ+¿ Æz¿ Æ±¿ Æ∑¿ Ø¿ Ø5¿ Ø6¿ Ø}¿ Ø°¿ Øß¿ Ø◊¿ Ø˝¿ Ø˛¿ ∞M¿ ∞_¿ ∞e¿ ∞≥¿ ±¿ ±(¿ ±K¿ ±L¿ ±î¿ ±ö¿ ±Â¿ ≤4¿ ≤U¿ ≤[¿ ≤•¿ ≤ˆ¿ ≥?¿ ≥E¿ ≥U¿ ≥[¿ ≥´¿ ≥…¿ ≥Ô¿ ≥¿ ¥¿ ¥#¿ ¥s¿ ¥√¿ ¥—¿ ¥◊¿ µ#¿ µj¿ µá¿ µà¿ µª¿ µ¡¿ ∂¿ ∂L¿ ∂R¿ ∂û¿ ∂Ì¿ ∂ˇ¿ ∑"¿ ∑#¿ ∑W¿ ∑]¿ ∑¨¿ ∑˙¿ ∏¿ ∏¿ ∏o¿ ∏ª¿ π¿ πU¿ πh¿ πå¿ πç¿ π¬¿ π»¿ ∫¿ ∫e¿ ∫Ñ¿ ∫ä¿ ∫€¿ ª'¿ ªt¿ ªƒ¿ ª◊¿ ª¸¿ ª˝¿ º/¿ º5¿ ºÑ¿ º“¿ ºÔ¿ ºı¿ ΩC¿ Ωè¿ Ω⁄¿ æ)¿ æ<¿ æ^¿ æ_¿ æì¿ æô¿ æË¿ ø6¿ øS¿ øY¿ ø©¿ øı¿ ¿B¿ ¿í¿ ¿•¿ ¿…¿ ¿ ¿ ¿¸¿ ¡¿ ¡O¿ ¡ì¿ ¡ô¿ ¡ﬂ¿ ¬,¿ ¬2¿ ¬~¿ ¬Œ¿ ¬Ê¿ √¿ √	¿ √;¿ √A¿ √é¿ √“¿ √ÿ¿ ƒ¿ ƒk¿ ƒq¿ ƒø¿ ≈¿ ≈)¿ ≈K¿ ≈L¿ ≈z¿ ≈Ä¿ ≈»¿ ≈Œ¿ ∆¿ ∆F¿ ∆d¿ ∆e¿ ∆í¿ ∆ò¿ ∆·¿ ∆Ú¿ ∆¯¿ «G¿ «p¿ «ç¿ «é¿ «Ω¿ «√¿ »
¿ »¿ »_¿ »à¿ »ß¿ »®¿ »Ó¿ »Ù¿ …>¿ …i¿ …o¿ …Ω¿ …„¿  ¿  ¿  f¿  l¿  ∂¿  ‚¿  Ë¿ À8¿ À^¿ Àö¿ Àõ¿ À‹¿ À‚¿ Ã,¿ ÃS¿ ÃY¿ Ã©¿ Ãœ¿ Õ¿ Õ¿ ÕH¿ ÕN¿ Õò¿ Õø¿ Õ≈¿ Œ¿ Œ;¿ Œr¿ Œs¿ Œ©¿ ŒØ¿ œ ¿ œJ¿ œP¿ œõ¿ œ›¿ –
¿ –¿ –<¿ –B¿ –ì¿ –π¿ –ø¿ —¿ —+¿ —N¿ —O¿ —í¿ —ò¿ —Ê¿ “$¿ “l¿ “∂¿ “‡¿ “Ê¿ ”7¿ ”à¿ ”÷¿ ”‹¿ ”Ï¿ ”Ú¿ ‘B¿ ‘k¿ ‘Ω¿ ‘¿ ‘Ò¿ ’4¿ ’:¿ ’Ç¿ ’¬¿ ÷¿ ÷X¿ ÷Ç¿ ÷à¿ ÷Ÿ¿ ◊*¿ ◊x¿ ◊~¿ ◊é¿ ◊î¿ ◊·¿ ◊ˇ¿ ÿQ¿ ÿÑ¿ ÿÖ¿ ÿ∂¿ ÿº¿ ÿ˚¿ Ÿ¿ ŸN¿ Ÿù¿ Ÿª¿ Ÿ‹¿ Ÿ›¿ ⁄,¿ ⁄2¿ ⁄|¿ ⁄À¿ €¿ €j¿ €p¿ €Ä¿ €Ü¿ €Œ¿ ‹¿ ‹¿ ‹%¿ ‹j¿ ‹ï¿ ‹Ï¿ ›E¿ ›ç¿ ›Û¿ ﬁ;¿ ﬁ°¿ ﬁÚ¿ ﬂj¿ ﬂª¿ ‡3¿ ‡y¿ ‡›¿ ·B¿ ·•¿ ‚¿ ‚¿ ‚¿ ‚+¿ ‚≠¿ ‚Ø¿ ‚∞¿ ‚ı¿ „¿ „3¿ „X¿ „Z¿ „[¿ „ä¿ „é¿ „ﬁ¿ ‰%¿ ‰r¿ ‰è¿ ‰◊¿ ‰ˆ¿ ‰¸¿ ÂL¿ Â^¿ Âp¿ Â~¿ Âû¿ ÂΩ¿ Â‚¿ Â„¿ Ê.¿ Ê4¿ Êk¿ ÊÇ¿ Êê¿ Ê∞¿ Ê”¿ Ê„¿ Á	¿ Á¿ Á ¿ Á!¿ Á"¿ Áh¿ Ám¿ Á–¿ Ë2¿ Ëc¿ Ë™¿ Ë´¿ ËÕ¿ ËÌ¿ ÈA¿ È]¿ Èa¿ Èb¿ È§¿ È™¿ È˙¿ Í¿ Í-¿ Í.¿ ÍY¿ Í_¿ Í®¿ Í¯¿ Î&¿ Î,¿ Ît¿ Î¿¿ Î˙¿ Ï¿ Ï¿ Ï¿ Ï@¿ ÏA¿ ÏO¿ ÏP¿ Ï™¿ Ï∞¿ Ï˜¿ ÌH¿ ÌW¿ Ì¿ Ìñ¿ Ì∏¿ Ì¿ ÓB¿ ÓV¿ Ó\¿ Ó`¿ Óa¿ Ó†¿ Ó∫¿ Ó‘¿ ÓÌ¿ Ô¿ Ô[¿ Ôu¿ Ôä¿ Ôû¿ Ô§¿ Ô®¿ Ô©¿ ÔÒ¿ Ô˜¿ H¿ \¿ b¿ ≤¿ Ò¿ ÒR¿ Ò†¿ Òœ¿ Ò’¿ Ú¿ ÚX¿ Ú^¿ Úö¿ ÚÈ¿ Ú˙¿ Û¿ Û¿ Ûa¿ Ûg¿ Û∏¿ ÛÃ¿ Û“¿ Ù"¿ Ùq¿ Ù¿¿ ı ¿ ı¿ ıK¿ ıQ¿ ıõ¿ ı∏¿ ıπ¿ ı˛¿ ˆ¿ ˆN¿ ˆò¿ ˆ‡¿ ˜*¿ ˜z¿ ˜á¿ ˜ç¿ ˜⁄¿ ¯"¿ ¯(¿ ¯8¿ ¯>¿ ¯Ç¿ ¯°¿ ¯¢¿ ¯Ó¿ ¯Ù¿ ˘<¿ ˘ã¿ ˘€¿ ˙¿ ˙#¿ ˙$¿ ˙I¿ ˙O¿ ˙û¿ ˙Ï¿ ˚2¿ ˚N¿ ˚T¿ ˚°¿ ˚¿ ¸¿ ¸P¿ ¸Q¿ ¸^¿ ¸_¿ ¸Æ¿ ¸‰¿ ˝¿ ˝/¿ ˝J¿ ˝p¿ ˝~¿ ˝ü¿ ˝±¿ ˝µ¿ ˝∂¿ ˛¿ ˛¿ ˛X¿ ˛à¿ ˛é¿ ˛û¿ ˛§¿ ˛¬¿ ˛Ì¿ ˇF¿ ˇG¿ ˇ£¿ ˇÛ¿ L¿ M¿ N¿ \¿ ]¿ ß¿ …¿  ¿¿h¿{¿Æ¿Ø¿Í¿0¿@¿o¿π¿¸¿+¿~¿ß¿µ¿∆¿ˇ¿H¿w¿™¿∫¿¿ù¿'¿5¿A¿K¿t¿Æ¿%¿°¿—¿¿˛¿¿¿x¿y¿Ω¿æ¿„¿	¿	7¿	É¿	ñ¿	†¿	∞¿	Ò¿
&¿
k¿
~¿
à¿
â¿
¡¿
ﬁ¿¿.¿4¿i¿’¿¿ˆ¿¿/¿e¿Ä¿¶¿Î¿#¿A¿M¿i¿s¿{¿Å¿∂¿ÿ¿¸¿H¿ë¿◊¿¿W¿Å¿ã¿¨¿«¿·¿È¿Ô¿¿=¿t¿ì¿«¿¸¿¿)¿3¿;¿A¿^¿q¿Ö¿â¿ä¿≈¿ˇ¿¿¿B¿Ç¿É¿µ¿ª¿¿X¿m¿¢¿ø¿ı¿¿$¿,¿2¿6¿7¿e¿k¿∫¿¿1¿j¿á¿Ω¿ˇ¿¿¿%¿6¿:¿;¿W¿X¿d¿£¿§¿∞¿Ô¿¿¸¿¿=¿A¿B¿N¿t¿ç¿∏¿	¿M¿k¿q¿é¿µ¿«¿›¿Ò¿˜¿¿H¿e¿k¿o¿p¿|¿é¿π¿Ï¿
¿/¿C¿^¿{¿±¿˛¿.¿P¿j¿r¿x¿º¿˝¿¿1¿5¿6¿L¿M¿d¿z¿ä¿ò¿´¿ø¿Ù¿¿¿"¿#¿u¿´¿ﬂ¿	¿3¿i¿±¿˘¿¿N¿u¿®¿›¿ ¿ K¿ ~¿ Ø¿ ‚¿!¿!T¿!´¿!Ø¿!∞¿!À¿!Ã¿"¿"ä¿"ã¿"¿¿"¡¿"ı¿"˚¿#K¿#l¿#á¿#à¿#∂¿$ ¿$¿$&¿$'¿$f¿$¶¿$ß¿$—¿$◊¿%¿%¿%P¿%¿%Ä¿%«¿%Õ¿&¿&¿&E¿&Å¿&∆¿&«¿'¿'¿'E¿'K¿'Ö¿'¥¿'µ¿'ˆ¿(¿(¿(V¿(\¿(ï¿(—¿)¿)¿)h¿)Ç¿)à¿)÷¿)Ù¿)˙¿*3¿*9¿*|¿*Ω¿*æ¿+¿+[¿+a¿+Ø¿+Õ¿+”¿,¿,¿,T¿,¢¿,˘¿,˙¿-K¿-e¿-k¿-π¿-◊¿-›¿.¿.¿._¿.†¿.°¿.¿/>¿/D¿/í¿/∞¿/∂¿/Ô¿/ı¿07¿0Ö¿0‹¿0›¿1+¿11¿1j¿1p¿1©¿1÷¿1◊¿2$¿2H¿2N¿2á¿2ç¿2≈¿2ˇ¿3B¿3C¿3î¿3∑¿3Ω¿4¿4U¿4~¿4Ñ¿4î¿4ö¿4„¿5#¿5p¿5ñ¿5≈¿5∆¿6¿6¿6d¿6±¿7 ¿7I¿7ô¿7‚¿7Ë¿7˛¿8J¿8r¿8x¿8»¿9¿93¿99¿9â¿:
¿:¿:`¿:≠¿:˙¿;¿;,¿;F¿;c¿;{¿;ï¿;π¿;‰¿<¿<!¿<H¿<j¿<â¿<≠¿<º¿<…¿<‘¿<‹¿<Ê¿<¯¿<˛¿=¿=¿=^¿=Æ¿=‘¿>¿>¿>M¿>^¿>ù¿>«¿>»¿?¿?0¿?f¿?•¿?¶¿?ı¿@¿@¿@[¿@©¿@–¿@˝¿A¿A¿Am¿Aô¿Aœ¿A¿AÒ¿B@¿B^¿Bá¿Bù¿Bû¿BÍ¿B¿C=¿CI¿C{¿Cï¿Cñ¿C‹¿D¿D¿D¿Dj¿D|¿DÇ¿D“¿E¿Ed¿Ej¿Ez¿EÄ¿E ¿E˚¿F¿F¿Ff¿Fx¿F~¿Fπ¿Fø¿Fœ¿F’¿G(¿G[¿Gw¿Gx¿G«¿GŸ¿Gﬂ¿H¿H ¿H0¿H6¿Hà¿Hª¿H◊¿Hÿ¿I"¿I?¿IE¿Iì¿I›¿IÚ¿I¯¿J¿J¿JN¿Jà¿J∂¿JŒ¿Jœ¿K¿K-¿K3¿KÄ¿Kî¿Kö¿KÍ¿L,¿LZ¿Lr¿Ls¿L¬¿L‘¿L⁄¿M'¿M;¿MA¿Mê¿M∏¿MÓ¿N
¿N¿N]¿N^¿NÆ¿NØ¿N˛¿OE¿Os¿Oy¿O∆¿OÙ¿O˙¿PK¿Pô¿P≠¿P⁄¿Q¿Q¿Q5¿Qp¿QÑ¿QÖ¿Që¿R¿RM¿RT¿RU¿RÑ¿R≥¿RÙ¿S5¿Sb¿Sç¿S∞¿S”¿SÔ¿T¿T9¿Tä¿Tı¿U!¿UM¿Ut¿U¢¿U“¿V¿VQ¿VÇ¿V©¿V”¿W¿W/¿We¿W≥¿W¥¿W¿¿X¿Xû¿X•¿X±¿Y¿Yè¿Yñ¿Yö¿Yõ¿Yú¿Y‘¿Y⁄¿Z+¿Zw¿Z™¿Zœ¿ZÁ¿[	¿[B¿[{¿[∆¿\¿\H¿\{¿\“¿]¿]4¿]Y¿]á¿]∑¿]Á¿^¿^=¿^p¿^ô¿^º¿^Û¿_@¿_ë¿_≤¿_‡¿`5¿``¿`á¿`í¿`Â¿`Ì¿a!¿av¿aß¿a‘¿aﬂ¿b2¿b:¿b@¿bA¿bl¿bõ¿bƒ¿b‚¿c
¿c9¿ch¿cù¿c»¿c˘¿d,¿d_¿dê¿d¡¿d˙¿e?¿er¿e…¿f¿fe¿f™¿fÀ¿fˆ¿g ¿g*¿g{¿g–¿g˙¿h1¿hä¿hæ¿hÈ¿h¯¿iO¿i[¿iò¿iÒ¿j+¿j\¿jk¿j¬¿jŒ¿jÿ¿k¿k<¿kh¿k†¿k”¿kﬁ¿l¿l@¿ll¿l£¿l÷¿l·¿l‚¿m.¿m/¿mD¿mN¿mT¿mU¿mo¿mÉ¿mõ¿m√¿mÎ¿n%¿n_¿nÖ¿n©¿nª¿n◊¿nÛ¿o¿o'¿oK¿ou¿oï¿oª¿o„¿p¿p1¿pW¿pÖ¿p–¿p◊¿p€¿p‹¿q¿q3¿q7¿q8¿qr¿qΩ¿r¿r	¿rk¿r¿r≤¿r‡¿s¿sG¿sz¿s´¿s∏¿sË¿t6¿tn¿tû¿t⁄¿t‚¿u3¿uC¿uy¿uÆ¿uı¿u˝¿v¿v,¿vj¿vΩ¿w¿wN¿wù¿w•¿w´¿w√¿w—¿wÍ¿x¿x¿xH¿xÄ¿x™¿x‚¿y¿yh¿y§¿yÓ¿z¿zL¿zu¿z–¿{/¿{`¿{ë¿{ ¿{¸¿|'¿|`¿|õ¿|÷¿}¿}8¿}Y¿}ì¿}…¿~!¿~(¿~<¿~@¿~A¿~ë¿~≈¿ ¿&¿g¿û¿¿¿∆¿«¿¯¿Ä"¿Ä~¿Äã¿ÄÕ¿Ä˜¿Ä˝¿Ä˛¿ÅM¿Åú¿ÅÈ¿Ç0¿Ç~¿Ç≈¿ÇË¿É?¿ÉÉ¿É∫¿É€¿Ñ¿Ñ&¿Ñj¿Ñ¶¿ÑË¿Ö.¿Ö~¿Öû¿Ö¡¿Ö›¿ÖÁ¿Ü¿Ü.¿Ü6¿Ü7¿Ü_¿Üt¿Üé¿Ü™¿Ü¥¿Ü∫¿Üª¿á¿á#¿áB¿áZ¿á`¿áà¿áâ¿á•¿áÔ¿à ¿à¿à¿àJ¿àP¿àô¿àÍ¿â¿â&¿â4¿ât¿âx¿ây¿âÖ¿â‘¿â’¿â·¿ä&¿äQ¿äl¿ä~¿ä“¿ã>¿ã^¿ãd¿ãÔ¿åZ¿å‰¿çD¿ç^¿çº¿ç…¿é$¿é?¿éZ¿é†¿éÌ¿èp¿è®¿è∞¿ê¿ê ¿êï¿ë¿ëb¿ë¶¿ë∑¿í¿ío¿ì1¿ì~¿ìÿ¿î@¿îâ¿î“¿ï-¿ïà¿ïœ¿ñ5¿ñò¿ñ¬¿ó1¿óà¿óﬂ¿ò>¿òó¿òË¿ôD¿ôû¿ô˙¿öI¿öò¿öú¿öù¿öÂ¿öÎ¿õ;¿õk¿õw¿õè¿õÆ¿õÃ¿ú¿úS¿úZ¿úz¿ù¿ù¿ù¿ù$¿ùJ¿ù\¿ùõ¿ùÏ¿ùÛ¿û¿û.¿ûA¿ûU¿ûs¿ûz¿û~¿û¿ûã¿ü¿ü<¿ü†¿ü±¿üµ¿ü∂¿†¿†Z¿†z¿†ï¿†ª¿†º¿†÷¿°	¿°$¿°W¿°É¿°â¿°ç¿°è¿°ê¿°⁄¿¢¿¢¿¢l¿¢π¿£¿£b¿£≠¿£ﬁ¿£Î¿§¿§&¿§>¿§d¿§É¿§£¿§¿¿§¡¿•
¿•0¿•6¿•V¿•\¿•∞¿¶¿¶R¿¶f¿¶Ç¿¶É¿¶Õ¿¶Ô¿ß¿ß¿ß.¿ßJ¿ßK¿ßW¿ßy¿ß§¿ß®¿ß™¿ß´¿ß˙¿®0¿®4¿®}¿®¡¿®Ÿ¿®¯¿©¿©=¿©>¿©à¿©™¿©∞¿©¸¿™!¿™=¿™>¿™c¿™d¿™ñ¿™Õ¿™Œ¿™⁄¿´¿´<¿´@¿´A¿´ë¿´ó¿´Â¿¨¿¨I¿¨x¿¨ß¿¨ı¿≠+¿≠E¿≠b¿≠™¿≠ø¿≠…¿≠„¿Æ¿ÆM¿Æb¿Æl¿Ær¿ÆÑ¿ÆÖ¿Æœ¿ÆÔ¿Ø¿Ø+¿ØK¿Ø_¿ØÜ¿Ø™¿Ø“¿Ø›¿∞¿∞¿∞$¿∞,¿∞D¿∞j¿∞Ä¿∞à¿∞é¿∞´¿∞¨¿∞⁄¿±¿±¿±¿±:¿±Å¿±í¿±ñ¿±ó¿±„¿±È¿≤8¿≤Y¿≤_¿≤≠¿≤˙¿≥J¿≥q¿≥w¿≥¬¿¥¿¥`¿¥Ø¿¥€¿µ¿µ#¿µI¿µ]¿µc¿µß¿µ’¿∂¿∂"¿∂q¿∂•¿∂Ô¿∑;¿∑`¿∑t¿∑~¿∑¿∑‹¿∏¿∏H¿∏Ä¿∏À¿π¿π[¿π¶¿πÿ¿∫ ¿∫
¿∫¿∫¿∫¿∫B¿∫k¿∫–¿ª¿ªh¿ª´¿ª ¿ªË¿ª¿º"¿º*¿º+¿ºE¿ºj¿ºz¿ºÇ¿ºú¿ºø¿º€¿º„¿º¸¿Ω¿Ω¿ΩM¿Ω´¿ΩØ¿Ω±¿Ω≤¿ΩÛ¿æ8¿æX¿æj¿æn¿æ©¿æœ¿æÙ¿æˆ¿æ˜¿øG¿øU¿øY¿øß¿ø¯¿¿2¿¿6¿¿h¿¿ù¿¿°¿¿˜¿¡`¿¡ç¿¡Ω¿¡ﬁ¿¬*¿¬^¿¬v¿¬ë¿¬◊¿¬Í¿¬Ú¿√
¿√&¿√p¿√É¿√ã¿√è¿√ü¿√†¿√Ï¿ƒ
¿ƒ¿ƒB¿ƒ`¿ƒr¿ƒó¿ƒπ¿ƒﬂ¿ƒË¿≈
¿≈¿≈)¿≈/¿≈E¿≈g¿≈{¿≈Å¿≈Ö¿≈û¿≈ü¿≈∑¿∆¿∆¿∆¿∆¿∆^¿∆ì¿∆ó¿∆·¿∆Â¿«4¿«|¿«¡¿«ÿ¿«¿»¿»¿»#¿»?¿»_¿»`¿»ô¿»µ¿»∂¿»ı¿»˚¿…:¿…L¿…o¿…p¿…Ω¿… ¿…‡¿…·¿…Ì¿ ¿ M¿ u¿ {¿ ™¿ Æ¿ ∞¿ ±¿ ˚¿À¿À¿Àf¿À≠¿Àº¿ÀÍ¿Ã&¿Ãg¿Ã¶¿Ãß¿Ã⁄¿Ã‡¿Õ¿ÕI¿ÕJ¿ÕV¿Õi¿ÕÇ¿Õñ¿Õ≤¿Õ«¿ÕÀ¿ÕÃ¿Œ¿Œ:¿ŒW¿Œe¿Œú¿Œ‹¿œ¿œá¿œ¢¿œ¿¿–¿–A¿–{¿–ò¿–˝¿—%¿—t¿—“¿“¿“m¿“Ω¿“…¿“”¿“€¿“·¿”1¿”ô¿”Œ¿‘+¿‘m¿‘≤¿‘¯¿’9¿’]¿’û¿’·¿÷'¿÷k¿÷Ä¿÷®¿÷Ê¿÷Ï¿◊¿◊@¿◊ó¿ÿ¿ÿ¿ÿp¿ÿá¿ÿã¿ÿå¿ÿË¿Ÿ¿Ÿm¿Ÿ£¿Ÿ—¿ŸÍ¿⁄¿⁄&¿⁄L¿⁄V¿⁄\¿⁄ö¿⁄≠¿⁄“¿⁄÷¿⁄◊¿€%¿€+¿€z¿€ú¿€¢¿€Ô¿‹¿‹T¿‹p¿‹…¿‹‰¿‹˘¿›¿›¿›¿›C¿›ò¿›º¿›¿¿›¡¿ﬁ@¿ﬁb¿ﬁî¿ﬁÀ¿ﬁ‡¿ﬂ ¿ﬂ&¿ﬂM¿ﬂ`¿ﬂê¿ﬂ≠¿ﬂ‚¿‡¿‡+¿‡C¿‡M¿‡b¿‡l¿‡ì¿‡ô¿‡µ¿‡˘¿·i¿·Ü¿·†¿·®¿·Æ¿·–¿·‘¿·’¿‚'¿‚-¿‚|¿‚û¿‚§¿‚Ò¿„¿„a¿„}¿„∞¿„∆¿„‘¿‰?¿‰X¿‰m¿‰q¿‰r¿‰~¿‰≠¿‰Ø¿‰∞¿‰Ú¿Â¿Â
¿ÂT¿Âh¿Âá¿Âà¿Â®¿Â©¿Â˜¿Ê¿Ê¿Êg¿Ê∂¿Á¿Á¿Á!¿Áo¿Áπ¿ÁÊ¿ÁÏ¿Ë9¿Ëo¿Ëì¿Ë∫¿ËÒ¿È¿È¿È¿Èh¿È∑¿ÈÍ¿È¿Í=¿Íã¿Íø¿Î¿Î[¿Îå¿Îí¿Îﬂ¿Ï.¿ÏQ¿ÏR¿Ï°¿ÏÔ¿Ïˇ¿Ì¿ÌT¿Ì†¿ÌÔ¿Ó¿Ó ¿Óp¿Óæ¿Ô¿Ô¿Ô[¿Ôñ¿Ô“¿Ô”¿ÔÌ¿'¿G¿H¿s¿y¿«¿¯¿Ò*¿ÒL¿ÒM¿Òô¿Òœ¿Ò’¿ÒÂ¿ÒÎ¿Ú¿Ú¿ÚÄ¿Úö¿Úõ¿Ú…¿Úœ¿Û¿Û'¿Ûs¿Ûê¿Û∞¿Û‘¿ÛÚ¿Ûˆ¿Û˜¿ÙE¿ÙZ¿Ù`¿Ù®¿Ù∏¿ı¿ı#¿ıK¿ıg¿ıx¿ıÄ¿ıÑ¿ıÖ¿ı≤¿ı∏¿ˆ¿ˆX¿ˆf¿ˆl¿ˆ∏¿ˆˇ¿˜¿˜P¿˜û¿˜Ô¿¯=¿¯ç¿¯ﬁ¿˘)¿˘w¿˘ø¿˙¿˙P¿˙u¿˙ç¿˙∞¿˙È¿˙˝¿˚¿˚¿˚5¿˚;¿˚ã¿˚∆¿˚Ã¿¸¿¸g¿¸y¿¸™¿¸»¿¸Ò¿˝0¿˝J¿˝N¿˝O¿˝É¿˝â¿˝ÿ¿˛&¿˛E¿˛K¿˛õ¿˛Á¿ˇ2¿ˇÅ¿ˇî¿ˇ«¿ˇÊ¿ ¿ P¿ k¿ o¿ p¿ °¿ ß¿ Ê¿ Ï¿9¿à¿¶¿”¿Ô¿¿S¿k¿o¿p¿•¿´¿˙¿H¿g¿m¿æ¿
¿W¿ß¿∫¿Ô¿¿:¿{¿ó¿õ¿ú¿Œ¿‘¿#¿q¿é¿î¿‚¿.¿y¿»¿€¿
¿'¿O¿ç¿¶¿™¿´¿ﬂ¿Â¿	4¿	Ç¿	ü¿	•¿	ı¿
A¿
é¿
ﬁ¿
Ò¿$¿C¿m¿≠¿»¿Ã¿Õ¿ˇ¿¿R¿ñ¿ú¿Â¿%¿=¿C¿è¿ﬂ¿˜¿&¿C¿k¿©¿¬¿∆¿«¿˘¿ˇ¿L¿ê¿ñ¿ﬂ¿¿7¿=¿ã¿€¿ı¿$¿A¿i¿ß¿¿¿ƒ¿≈¿Û¿˘¿A¿G¿ñ¿ø¿Ê¿ˇ¿#¿]¿r¿v¿w¿§¿™¿Û¿¿
¿Y¿Ç¿ß¿ø¿‚¿¿/¿3¿4¿c¿i¿∞¿∂¿¿.¿W¿q¿ñ¿—¿Á¿Î¿Ï¿"¿(¿v¿∆¿Í¿¿9¿Å¿£¿⁄¿˚¿'¿i¿Ü¿ä¿ã¿—¿◊¿!¿L¿R¿†¿∆¿"¿X¿ô¿¥¿¿4¿S¿[¿à¿å¿ç¿‘¿⁄¿$¿P¿V¿¶¿Ã¿*¿a¿£¿æ¿¿?¿^¿f¿î¿ò¿ô¿⁄¿‡¿ *¿ Q¿ W¿ ß¿ Õ¿!¿!P¿!å¿!ß¿!¿""¿"A¿"I¿"v¿"z¿"{¿"Ω¿"√¿#¿#4¿#:¿#ä¿#∞¿$¿$6¿$s¿$é¿$ÿ¿%
¿%)¿%1¿%_¿%c¿%d¿%ö¿%†¿%Ò¿&;¿&A¿&å¿&Œ¿'¿'4¿'g¿'Ç¿'¿¿'Î¿(J¿(ß¿(√¿(Î¿)¿)!¿))¿)F¿)J¿)K¿)|¿)Ç¿)”¿)˘¿)ˇ¿*N¿*k¿*ö¿*∏¿*·¿*¸¿+5¿+c¿+é¿+¢¿+™¿+¬¿+∆¿+«¿,
¿,¿,^¿,ú¿,‰¿-.¿-X¿-^¿-Ø¿. ¿.N¿.T¿.d¿.j¿.∫¿.„¿/5¿/Ü¿/¥¿/Ì¿0<¿0f¿0j¿0k¿0Æ¿0¥¿0¸¿1<¿1à¿1“¿1¸¿2¿2S¿2§¿2Ú¿2¯¿3¿3¿3[¿3y¿3À¿4¿4J¿4É¿4“¿4¸¿5 ¿5¿5N¿5`¿5∏¿5π¿6¿6¿6 ¿6n¿6º¿6„¿6È¿78¿7É¿7…¿7Ò¿8¿8<¿8e¿8Ä¿8ñ¿8¥¿8∏¿8π¿9¿9¿9S¿9¢¿9Ú¿:$¿:P¿:g¿:â¿:•¿:√¿:«¿:»¿;¿;¿;g¿;s¿;•¿;ø¿;‰¿<¿<¿<4¿<R¿<V¿<W¿<°¿<≤¿<⁄¿<Ô¿=¿=-¿=;¿=U¿=s¿=w¿=x¿=¬¿=ﬂ¿>¿>%¿>H¿>i¿>w¿>î¿>≤¿>∂¿>∑¿?¿?¿?¿?h¿?|¿?Ç¿?Œ¿@¿@5¿@M¿@p¿@ë¿@ü¿@º¿@⁄¿@ﬁ¿@ﬂ¿A.¿A@¿AF¿Aì¿Aß¿A≠¿A¯¿B¿BM¿Bi¿Bê¿Bµ¿B√¿B‰¿C¿C¿C¿CX¿Cû¿C§¿CÈ¿D.¿Dl¿Dr¿Dæ¿E¿E?¿Es¿Eì¿E¡¿Eﬂ¿E„¿E‰¿F#¿F)¿Fu¿Fø¿G¿G?¿G°¿H¿H^¿H|¿H∂¿H€¿I"¿I&¿I'¿IW¿I∞¿I»¿I÷¿J¿J4¿JF¿JJ¿JK¿JÖ¿Jã¿JÕ¿J”¿K¿K¿K"¿K(¿Kv¿K•¿K¡¿K‹¿L¿L*¿L.¿L/¿L~¿Lå¿Lí¿L‹¿M+¿Mw¿M¿¿N¿N¿N@¿NF¿NV¿N\¿Nñ¿N“¿O¿OH¿Op¿Oé¿Oí¿Oì¿O„¿OÈ¿P+¿P1¿Pj¿Pp¿PÄ¿PÜ¿P‘¿Q"¿Qh¿Q∂¿Q¸¿R+¿RG¿Rb¿Rí¿R∞¿R¥¿Rµ¿S¿S(¿S.¿Sx¿S«¿T¿T\¿Tù¿T£¿T‹¿T‚¿TÚ¿T¯¿U2¿UÇ¿U≤¿V¿V2¿Vn¿V™¿V‰¿W¿W*¿W.¿W/¿Wi¿Wí¿Wò¿W„¿WÈ¿X8¿XÇ¿X≠¿X≥¿XÏ¿XÚ¿Y¿Y¿Y_¿Y†¿YŒ¿YÚ¿Z4¿ZR¿ZV¿ZW¿Zë¿Z◊¿Z›¿[,¿[v¿[°¿[ß¿[‡¿[Ê¿[ˆ¿[¸¿\?¿\ç¿\“¿]¿]X¿]v¿]z¿]{¿]µ¿]ﬁ¿]‰¿^/¿^5¿^Ñ¿^Œ¿^˘¿^ˇ¿_8¿_>¿_ï¿_÷¿`¿`(¿`j¿`à¿`å¿`ç¿`«¿a¿a¿ab¿a¨¿a◊¿a›¿b¿b¿b,¿b2¿bu¿b√¿c¿cT¿cé¿c¨¿c∞¿c±¿cˇ¿d¿dF¿dL¿dÖ¿dã¿dõ¿d°¿dÓ¿e¿e5¿eO¿e}¿eõ¿eü¿e†¿e¿f¿f¿f`¿fØ¿f¸¿gE¿gÜ¿gå¿g≈¿gÀ¿g€¿g·¿h¿hT¿hè¿h«¿hÌ¿i¿i¿i¿iY¿ij¿i©¿i”¿j¿j¿j-¿jI¿jg¿jk¿jl¿jµ¿j€¿k¿k¿k<¿kg¿kÜ¿kî¿kö¿k≤¿k–¿k‘¿k’¿l&¿l<¿lB¿lí¿l·¿lı¿m¿m6¿mV¿mÅ¿m†¿mÆ¿m¥¿mÃ¿mÍ¿mÓ¿mÔ¿n:¿nU¿n[¿nk¿nq¿n¿¿nˇ¿o¿oO¿oS¿oT¿oî¿oö¿o™¿o∞¿o˝¿p:¿pY¿pà¿på¿pç¿p√¿p˙¿q¿qB¿qF¿qG¿qz¿qÄ¿qÃ¿r¿rL¿rR¿r†¿rÓ¿s<¿sÅ¿s–¿s˙¿t ¿t¿t¿tl¿t´¿t ¿t˚¿tˇ¿u ¿uF¿ut¿u™¿uÀ¿uˇ¿v#¿vA¿vE¿vF¿vë¿vó¿v‰¿w7¿wâ¿w¡¿w˛¿x¿xL¿xP¿xQ¿xè¿xï¿xÊ¿y5¿yj¿yp¿y¿¿y‰¿yÍ¿z9¿zf¿zl¿zø¿{¿{#¿{ê¿{Ø¿{‚¿|¿|¿|¿|g¿|≤¿|∆¿|Ã¿}¿}d¿}j¿}≥¿}“¿~?¿~^¿~ë¿~¿¿~ƒ¿~≈¿¿d¿j¿ª¿˜¿˝¿ÄF¿ÄZ¿Ä«¿ÄÊ¿Å¿ÅH¿ÅL¿ÅM¿Åù¿Å”¿ÅŸ¿Ç&¿Çn¿ÇÀ¿Ç˙¿É9¿É=¿É>¿ÉÄ¿Éø¿Éﬂ¿Ñ¿Ñ¿Ñ¿Ñ]¿Ñò¿Ñ∂¿Ñ‰¿ÑË¿ÑÈ¿Ö4¿Öm¿Öä¿Ö∑¿Öª¿Öº¿Ü¿Ü:¿ÜU¿ÜÄ¿ÜÑ¿ÜÖ¿Ü–¿á	¿á&¿áS¿áW¿áX¿á£¿á‹¿á˘¿à&¿à*¿à+¿às¿àÄ¿à√¿àÂ¿â¿â¿â¿âZ¿â`¿âØ¿ä ¿ä¿äV¿ä£¿äµ¿äª¿ã¿ã*¿ã0¿ãÅ¿ãœ¿å¿åT¿åç¿å™¿å◊¿å€¿å‹¿ç¿çT¿çt¿ç§¿ç®¿ç©¿çﬂ¿çÂ¿é¿éT¿és¿é¢¿é¶¿éß¿é÷¿é‹¿è+¿è{¿è¡¿è˛¿ê¿êL¿êP¿êQ¿ê|¿êÇ¿ê—¿ë
¿ëI¿ëi¿ëô¿ëù¿ëû¿ëÓ¿í¿í¿ío¿íΩ¿ì¿ì9¿ìä¿ì≥¿ìÏ¿ì¿ìÒ¿î:¿îs¿î©¿î ¿îˆ¿ï¿ï-¿ïK¿ïO¿ïP¿ï†¿ï≤¿ï∏¿ñ¿ñT¿ñö¿ñ†¿ñ∞¿ñ∂¿ó ¿ó1¿óL¿ór¿óç¿ó™¿ó»¿óÃ¿óÕ¿ò¿ò.¿ò4¿òo¿òu¿òÖ¿òã¿òﬁ¿ô¿ô-¿ôT¿ôo¿ôç¿ô´¿ôØ¿ô∞¿ôˇ¿ö¿ö¿öR¿öX¿öh¿ön¿ö¡¿öÙ¿õ¿õ7¿õR¿õp¿õé¿õí¿õì¿õù¿õû¿õÊ¿õ˛¿ú¿ú¿ú¿úi¿úy¿úº¿ú„¿ú‰¿ù3¿ùQ¿ùW¿ùõ¿ùÏ¿û
¿û¿û\¿û≠¿û˙¿ü ¿ü¿ü¿üW¿üs¿ü†¿üÀ¿üÎ¿üÔ¿ü¿†¿†¿†!¿†S¿†d¿†Ä¿†ç¿†™¿†∞¿†Œ¿†“¿†”¿°¿°¿°<¿°=¿°Ü¿°õ¿°°¿°¿¢5¿¢n¿¢µ¿¢»¿¢¸¿£¿£6¿£J¿£é¿£¢¿£®¿£Ï¿§ ¿§¿§R¿§f¿§l¿•¿•¿•'¿•+¿•,¿•x¿•~¿•Ã¿•¿•ˆ¿¶E¿¶¿¶Ö¿¶œ¿ß!¿ß[¿ßâ¿ß™¿ß´¿ßÃ¿ß⁄¿ß€¿® ¿®C¿®o¿®ã¿®∏¿®Á¿©¿©I¿©v¿©¢¿©À¿©˛¿™-¿™\¿™ì¿™î¿™ø¿™‡¿´¿´>¿´f¿´õ¿´ ¿´—¿¨¿¨E¿¨ö¿¨›¿≠2¿≠u¿≠§¿≠—¿≠˘¿Æ-¿Æ\¿Æc¿Æd¿Æ∞¿Æ±¿Æ˜¿Æ˚¿Æ¸¿Ø/¿ØQ¿Øu¿Øß¿Ø◊¿∞9¿∞g¿∞≥¿∞€¿∞˜¿±#¿±a¿±ç¿±À¿±ı¿≤¿≤=¿≤]¿≤u¿≤°¿≤…¿≤Û¿≥¿≥K¿≥s¿≥ö¿≥æ¿≥Ï¿¥¿¥@¿¥r¿¥î¿¥’¿¥Ÿ¿¥€¿¥‹¿µ+¿µ<¿µ[¿µà¿µé¿µ€¿∂)¿∂]¿∂o¿∂p¿∂ü¿∂•¿∂Ù¿∑¿∑%¿∑'¿∑(¿∑S¿∑Ö¿∑∏¿∑Â¿∏¿∏¿∏D¿∏e¿∏¥¿∏÷¿∏Ù¿πk¿πz¿πò¿∫¿∫¿∫$¿∫(¿∫S¿∫u¿∫v¿∫∆¿∫»¿∫…¿ª¿ª7¿ª;¿ªà¿ªÿ¿º¿º¿ºb¿ºè¿ºì¿º‰¿Ω¿Ω¿Ω"¿Ω&¿Ωj¿Ω»¿æ¿æa¿æà¿æâ¿æ⁄¿æÌ¿æÛ¿ø3¿ø9¿øá¿ø∂¿øÃ¿øÕ¿øŸ¿¿¿¿9¿¿∏¿¿π¿¡¿¡)¿¡G¿¡f¿¡l¿¡m¿¡ø¿¡Œ¿¡¸¿¬¿¬B¿¬R¿¬X¿¬Y¿¬Ç¿¬Ü¿¬á¿¬∞¿¬∂¿√¿√¿√#¿√t¿√ƒ¿ƒ¿ƒ¿ƒ,¿ƒ_¿ƒ`¿ƒl¿ƒ±¿ƒ‹¿≈"¿≈&¿≈(¿≈)¿≈v¿≈Å¿≈Ö¿≈À¿≈˜¿≈˚¿∆K¿∆ö¿∆€¿∆Ú¿∆ˆ¿«B¿«o¿«s¿«ø¿»¿»J¿»Ä¿»∞¿… ¿…¿…G¿…_¿…q¿…É¿…°¿…≈¿…ı¿ ¿ 7¿ 8¿ Ü¿ ÷¿ Ê¿ Ï¿À:¿Àá¿Àù¿Àû¿À™¿À“¿Ã¿Ã(¿ÃQ¿ÃU¿ÃV¿Ãb¿Ãß¿Ã“¿Õ¿Õ¿Õ      ··