Äßleftright	collapsedshouldPainttoStringbuildHandlegetHandleAnchorbuildToolbargetHandleSizecanCutcanCopycanPastecanSelectAll	handleCut
handleCopyhandlePastehandleSelectAllfadeDurationrenderObjectselectionControlsselectionDelegate_selectionOverlayvalue_value
_selection_effectiveStartHandleVisibility_effectiveEndHandleVisibility_effectiveToolbarVisibility'_updateTextSelectionOverlayVisibilitieshandlesVisible_handlesVisibleshowHandleshideHandlesshowToolbarupdate_updateSelectionOverlayupdateForScrollhandlesAreVisibletoolbarIsVisiblehidehideToolbardispose_getStartGlyphHeight_getEndGlyphHeight_dragEndPosition"_handleSelectionEndHandleDragStart#_handleSelectionEndHandleDragUpdate_dragStartPosition$_handleSelectionStartHandleDragStart%_handleSelectionStartHandleDragUpdate_handleSelectionHandleChanged_chooseTypecontextstartHandleType_startHandleTypelineHeightAtStart_lineHeightAtStartstartHandlesVisibleonStartHandleDragStartonStartHandleDragUpdateonStartHandleDragEndendHandleType_endHandleTypelineHeightAtEnd_lineHeightAtEndendHandlesVisibleonEndHandleDragStartonEndHandleDragUpdateonEndHandleDragEndtoolbarVisibleselectionEndPoints_selectionEndPointsdebugRequiredFortoolbarLayerLinkstartHandleLayerLinkendHandleLayerLinkdragStartBehavioronSelectionHandleTappedclipboardStatustoolbarLocation_toolbarLocation_handles_toolbar_buildScheduled_markNeedsBuild_buildStartHandle_buildEndHandle_buildToolbarpreferredLineHeight	layerLinkeditingRegion
visibilitymidpointselectionEndpointscreateState_controller_opacity	initStatedidUpdateWidget_toolbarVisibilityChangedbuildhandleLayerLinkonSelectionHandleDragStartonSelectionHandleDragUpdateonSelectionHandleDragEndtype_handleVisibilityChangededitableTextKeyforcePressEnabledselectionEnableddelegate_lastSecondaryTapWasOnSelection_expandSelection_extendSelectionshouldShowSelectionToolbar_shouldShowSelectionToolbareditableTextrenderEditable_dragStartViewportOffset_isShiftPressed_isShiftTapping_shiftTapDragSelection	onTapDownonForcePressStartonForcePressEndonSingleTapUponSingleTapCancelonSingleLongTapStartonSingleLongTapMoveUpdateonSingleLongTapEndonSecondaryTaponSecondaryTapDownonDoubleTapDownonDragSelectionStartonDragSelectionUpdateonDragSelectionEndbuildGestureDetectorbehaviorchild_doubleTapTimer_lastTapOffset_isDoubleTap_handleTapDown_handleTapUp_handleTapCancel_lastDragStartDetails_lastDragUpdateDetails_dragUpdateThrottleTimer_handleDragStart_handleDragUpdate_handleDragUpdateThrottled_handleDragEnd_forcePressStarted_forcePressEnded_handleLongPressStart_handleLongPressMoveUpdate_handleLongPressEnd_doubleTapTimeout_isWithinDoubleTapTolerance	_disposeddisposedaddListenerremoveListenerdidChangeAppLifecycleState	pasteableunknownnotPasteable_kDragSelectionUpdateThrottleTextSelectionHandleTypeDragSelectionUpdateCallbackToolbarBuilderToolbarItemsParentDataTextSelectionControlsTextSelectionOverlaySelectionOverlay_SelectionToolbarOverlay_SelectionToolbarOverlayState_SelectionHandleOverlay_SelectionHandleOverlayState+TextSelectionGestureDetectorBuilderDelegate#TextSelectionGestureDetectorBuilderTextSelectionGestureDetector"_TextSelectionGestureDetectorStateClipboardStatusNotifierClipboardStatusÅlTextSelectionDelegateDurationmillisecondsleftrightTextDirectionstartDetailsupdateDetailsDragGestureRecognizeronUpdateGestureDragUpdateCallbackvoidDragStartDetailsDragUpdateDetailsTextSelectionToolbartoolbarBuilderCupertinoTextSelectionToolbarWidgetBuildContextContainerBoxParentData	RenderBoxbooloverrideStringtoStringonTapcupertinoTextSelectionControlsdoubleVoidCallbackOffsetRenderEditableRectListTextSelectionPointSize	Clipboard
cutEnabledtextEditingValue	selectionisCollapsedcopyEnabledpasteEnabledselectAllEnabledtext
isNotEmptycutSelectionSelectionChangedCausetoolbarcopySelection	pasteTextFuture	selectAllbringIntoViewextentcontextOverlayTextEditingValue	LayerLinkDragStartBehaviorstartselectionStartInViewportaddListenerselectionEndInViewportdebugRequiredForstartHandleType	collapsedstartHandlesVisiblelineHeightAtStartonStartHandleDragStartonStartHandleDragUpdateendHandleTypeendHandlesVisiblelineHeightAtEndonEndHandleDragStartonEndHandleDragUpdatetoolbarVisibleselectionEndPointsselectionControlsselectionDelegateclipboardStatusstartHandleLayerLinkendHandleLayerLinktoolbarLayerLinkonSelectionHandleTappeddragStartBehaviortoolbarLocationlastSecondaryTapDownPosition
DeprecatedfadeDurationvisibleForTestingTextSelectionValueNotifiervalueshowHandleshideHandlesshowToolbarSchedulerBindingschedulerPhaseSchedulerPhasepersistentCallbacksWidgetsBinding	drawFrametextDirectiongetEndpointsForSelection_handles_toolbarhidehideToolbardisposeremoveListener
InlineSpantoPlainTextintisValid
textInside
charactersfirstlengthgetRectForComposingRange	TextRangeendheightpreferredLineHeightlastgetHandleSizeglobalPositiondeltaTextPositiongetPositionForPointfromPositionisEnd
baseOffsetextentOffsetoffsetbaseuserUpdateTextEditingValuecopyWithdragltrrtlOverlayStateofrootOverlayFadeTransitionValueListenableValueChangedDragEndDetails
listEqualsCompositedTransformTargetdownbuildHandleMaterialTextSelectionControlsCupertinoTextSelectionControlsgetDataOverlayEntrybuilder	insertAllremoveinsertinstanceaddPostFrameCallbackmarkNeedsBuild	ContainertypehandleLayerLinkonSelectionHandleDragStartonSelectionHandleDragUpdateonSelectionHandleDragEnd
visibilityExcludeSemanticschildfindRenderObject
fromPointslocalToGlobalzerosizebottomRightpointdywidthdxDirectionality	layerLinkeditingRegionmidpointselectionEndpointsStatefulWidgetKeykeyStateSingleTickerProviderStateMixinAnimationController	Animationview	initStatedurationvsyncwidgetdidUpdateWidgetforwardreverseopacityCompositedTransformFollowerlinkshowWhenUnlinkedtopLeftBuilderbuildToolbargetHandleAnchorfromLTWHexpandToInclude
fromCirclecenterradiuskMinInteractiveDimensionRelativeRectfromLTRBmax	alignment	AlignmentGestureDetectorbehaviorHitTestBehaviortranslucent
onPanStartonPanUpdateonPanEndPaddingpadding
EdgeInsetsonlytopbottomEditableText	TextFieldCupertinoTextField	GlobalKeyEditableTextState	protectedfromSelectionabseditableTextKeycurrentStateRenderObjectrenderEditableHardwareKeyboardlogicalKeysPressedanyLogicalKeyboardKey	shiftLeft
shiftRightcontains	onTapDownhandleTapDownTapDownDetailsPointerDeviceKindkindtouchstylusdefaultTargetPlatformTargetPlatformiOSmacOShasFocustapandroidfuchsialinuxwindowsonForcePressStartForcePressDetailsforcePressEnabledselectionEnabledselectWordsInRangefromcause
forcePressonForcePressEndonSingleTapUpTapUpDetailsmouseinvertedStylusselectPositionunknownselectWordEdgeonSingleTapCancelonSingleLongTapStartLongPressStartDetailsselectPositionAt	longPressonSingleLongTapMoveUpdateLongPressMoveUpdateDetailsonSingleLongTapEndLongPressEndDetailsonSecondaryTap
selectWordonSecondaryTapDownhandleSecondaryTapDownonDoubleTapDownonDragSelectionStartpixelsonDragSelectionUpdatemaxLinestoonDragSelectionEndGestureTapDownCallbackForcePressGestureRecognizerstartPressureGestureForcePressStartCallbackGestureForcePressEndCallbackGestureTapCallbackGestureTapUpCallbackGestureTapCancelCallbackkLongPressTimeoutGestureLongPressStartCallback"GestureLongPressMoveUpdateCallbackGestureLongPressEndCallbackkDoubleTapTimeoutGestureDragStartCallbackGestureDragEndCallbackdeferToChildTimercancelcalldistancekDoubleTapSlopMapTypeGestureRecognizerFactoryTapGestureRecognizer$GestureRecognizerFactoryWithHandlers
debugOwneronTapUponTapCancelLongPressGestureRecognizeronLongPressStartonLongPressMoveUpdateonLongPressEndPanGestureRecognizersupportedDevicesonStartonEndRawGestureDetectorgesturesexcludeFromSemanticsWidgetsBindingObserver
hasStringsFlutterErrorreportErrorFlutterErrorDetails	exceptionstacklibraryErrorDescription	pasteablenotPasteablehasListenersaddObserverremoveObserverAppLifecycleStateresumeddetachedinactivepausedContainerBoxParentDataStatefulWidgetStateSingleTickerProviderStateMixinValueNotifierWidgetsBindingObserverUˆ\éıEƒvO,z package:flutter/services.dart   
dart:async 	dart:math "package:characters/characters.dart package:flutter/foundation.dart package:flutter/gestures.dart package:flutter/rendering.dart package:flutter/scheduler.dart package:flutter/services.dart 
basic.dart binding.dart constants.dart container.dart editable_text.dart framework.dart gesture_detector.dart overlay.dart ticker_provider.dart transitions.dart 	dart:core¿ ñÊ ¿<Øàæ <ÄÜÄ§Ä•Ä∫Ä÷Ä◊ÅÅ.ÅVÅÅ®Å–Å—ÅÊÅ˝ÇÇ/ÇLÇeÇÖÇúÇªÇ÷Ç◊ÉÉÉhÉtÉøÉ¿ÉÙÉ¯ÑDÑHÑwÑ{Ñ«ÑÀÑ˙Ñ˛ÖÖÖGÖKÖöÖ∂Ö∫Ö»ÖÃÜÜ0ÜOÜïÜùÜûÜÂÜÓÜÔá7áDáFáGáòáúáÈàà	àUà∞à¥â âQâyâÓâÔä<äGäKäYä]ä£ä±äˇã&ãtãuã≈ã…ååeåäå”åˇççVçöç∂ç∑ç√ééééTé{ééªé‚èèèièÉèâèŸê)êuê©ë!ë"ësëøëÔí>í?ímísí≤í∏ìì$ì*ìyìõì°ìÚî<îSîjîÑî£îæî”î˚ïïgï≤ï‡ñ
ñññ@ñmñnñπóóóójópó∂ó◊òò[ò_ò`ò´òﬁò‰ô4ô:ôÅô¢ô”ö(ö,ö-ö{öïöõö„õõ
õZõßõµõÁú	úúúYú§ú±ú∑ùù%ù[ù·ùÂùÊû0û6ûÉûìû⁄üünü®ü¨ü≠ü˘üˇ†M†]†§†Ÿ°9°t°x°y°µ°ª¢
¢¢ ¢l¢µ¢»£	£L£É£á£à£’£˙§ §!§'§x§ã§ƒ§˚•C•G•I•J•å•¢•¶•ı¶@¶`¶}¶…¶œßß8ß]ßÄßûß«ßÙ®®?®[®|®°®‰©©=©[©{©¢©À©„™C™°™–™˙´´<´p´™´Ê¨¨H¨é¨∆¨˛≠≠Z≠ú≠œÆÆ3Æ_ÆáÆπÆÁØØIØuØ∑ØæØ¬Ø√∞∞"∞V∞è∞ì∞Ÿ∞⁄±%±n±µ±⁄±€≤≤O≤P≤í≤√≤ƒ≤ı≤ˆ≥≥)≥Q≥R≥m≥n≥¢≥£≥˝¥U¥´¥ﬁµJµ≤∂4∂8∂9∂f∂l∂Ω∂Ï∂Ú∑∑9∑Y∑~∑õ∑ø∑Õ∑Ï∏∏∏ ∏\∏s∏í∏∑∏ª∏º∏¯π1π2πnπÖπ§π…πÕπŒ∫	∫∫]∫´∫˚ªDªîª‰ºº@º\ºjºÅº†º§º•º»ºﬁΩΩ/ΩSΩyΩ†Ω®Ω€æ æ$æKæqæyæ®æ”ø"øgøkøløûø§øı¿ @.¿ @e¿ @f¿ @ó¿ @Ì¿ @Ó¿ A¿ Aa¿ Ab¿ Aó¿ A¬¿ A√¿ Aˇ¿ B8¿ B9¿ Bq¿ BÑ¿ B•¿ C¿ Ci¿ Cî¿ C√¿ C¿ CÙ¿ Cı¿ D¿ DG¿ Dw¿ Dº¿ DÁ¿ E¿ EG¿ Eë¿ E·¿ F)¿ Fx¿ F¿¿ FÈ¿ GP¿ Gò¿ GÁ¿ H¿ HÖ¿ HÕ¿ H—¿ H“¿ HÚ¿ I"¿ IR¿ Ió¿ I¡¿ I⁄¿ J¿ Ju¿ JΩ¿ K
¿ Kõ¿ K°¿ KÁ¿ KÎ¿ KÏ¿ L¿ L¿ LS¿ Lë¿ Lπ¿ L¿¿ M¿ M¿ M¿ M^¿ MÖ¿ M€¿ M‹¿ M˛¿ NV¿ Nd¿ Nj¿ Nk¿ N°¿ N ¿ NÔ¿ Nˆ¿ N˜¿ O5¿ Ob¿ Oc¿ O°¿ O•¿ O¶¿ O»¿ O…¿ P¿ PO¿ Pw¿ P~¿ P—¿ P’¿ P÷¿ Q ¿ QI¿ Q°¿ Q¢¿ Qƒ¿ R¿ R+¿ R1¿ R2¿ Rh¿ Rã¿ R∏¿ Rø¿ R¿¿ R˛¿ S+¿ S,¿ Sk¿ So¿ Sp¿ S ¿ T!¿ TS¿ TÉ¿ T•¿ T¨¿ Tﬂ¿ T„¿ T‰¿ U¿ U.¿ UU¿ U|¿ UÜ¿ U¶¿ U÷¿ U◊¿ U˙¿ V¿ V5¿ VM¿ Vk¿ VÉ¿ Vâ¿ Vç¿ Vè¿ Vê¿ V»¿ VÃ¿ W¿ W>¿ WW¿ W£¿ W©¿ W˘¿ X¿ X)¿ XD¿ Xz¿ X°¿ Xø¿ X‡¿ Y¿ Y!¿ YU¿ Yz¿ Yñ¿ Yµ¿ Y’¿ YÚ¿ Z¿ ZE¿ Zj¿ Zè¿ Z≤¿ Z⁄¿ [ ¿ [$¿ [Z¿ [|¿ [ô¿ [ƒ¿ [Û¿ \¿ \E¿ \v¿ \¢¿ \Ï¿ \¯¿ ]¿ ]B¿ ]ö¿ ]ˆ¿ ]˝¿ ^¿ ^¿ ^B¿ ^H¿ ^ï¿ ^÷¿ ^Ù¿ ^ı¿ _¿ _%¿ _t¿ _∑¿ _„¿ `¿ `=¿ `K¿ `i¿ `Ä¿ `Ñ¿ `Ö¿ `≥¿ `π¿ a
¿ a¿ a_¿ aï¿ a≤¿ a⁄¿ aˇ¿ b¿ b-¿ bD¿ bH¿ bI¿ bt¿ bz¿ bÀ¿ bÔ¿ bı¿ c?¿ cs¿ ct¿ cº¿ c¸¿ c˝¿ dL¿ dé¿ dè¿ d·¿ d¿ e,¿ e-¿ eU¿ e[¿ e™¿ eÈ¿ f¿ fH¿ fi¿ fw¿ fì¿ f™¿ fÆ¿ fØ¿ f€¿ f·¿ g0¿ g6¿ gÖ¿ g∑¿ g“¿ g¯¿ h¿ h)¿ hG¿ h^¿ hb¿ hc¿ hå¿ hí¿ h·¿ i¿ i¿ iS¿ iÖ¿ iÜ¿ iÃ¿ j
¿ j¿ jX¿ jò¿ jô¿ jÈ¿ j¯¿ k2¿ k3¿ kY¿ k_¿ k´¿ kœ¿ k’¿ l¿ l>¿ l?¿ l~¿ l»¿ l¯¿ m3¿ mf¿ m¿ mÖ¿ m¶¿ m™¿ m´¿ mı¿ n¿ n¿ ni¿ nv¿ nö¿ nõ¿ nË¿ o¿ o:¿ o;¿ oà¿ o∞¿ o÷¿ o◊¿ p¿ pM¿ pb¿ pî¿ pï¿ p⁄¿ q"¿ q4¿ qI¿ qz¿ q{¿ qπ¿ qø¿ r¿ rP¿ rö¿ rπ¿ rø¿ s
¿ sX¿ sâ¿ sè¿ s◊¿ s›¿ sÌ¿ sÛ¿ t[¿ tà¿ tâ¿ t‘¿ u"¿ u(¿ ut¿ uª¿ u˛¿ vM¿ v~¿ vÕ¿ w¿ wL¿ wa¿ w±¿ w∆¿ wı¿ wˆ¿ xF¿ x^¿ xd¿ xØ¿ xﬂ¿ y¿ y¿ y]¿ yÉ¿ yâ¿ y◊¿ z¿ z¿ z[¿ zu¿ z®¿ zƒ¿ zÎ¿ {¿ {¿ {$¿ {B¿ {Y¿ {]¿ {^¿ {Æ¿ {Ú¿ {Û¿ |@¿ |x¿ |ò¿ |ô¿ |µ¿ |œ¿ |–¿ }¿ }X¿ }m¿ }Ñ¿ }û¿ }¨¿ }≠¿ }Ã¿ }¸¿ ~*¿ ~1¿ ~2¿ ~Ç¿ ~ü¿ ~£¿ ~§¿ ~„¿ ¿ 2¿ I¿ e¿ Ç¿ ü¿ ∂¿ º¿ ¿¿ ¡¿ Ä ¿ ÄF¿ Ä[¿ Är¿ Äé¿ Äú¿ Ä¢¿ Ä◊¿ Å:¿ Å>¿ Å?¿ Å_¿ Åz¿ Å®¿ Å∂¿ Ç¿ Ç:¿ Çî¿ ÇØ¿ Çø¿ Ç›¿ É(¿ ÉI¿ Éi¿ Éí¿ Éª¿ É≈¿ ÉÈ¿ ÉÛ¿ Ñ ¿ Ñ¿ ÑE¿ Ñl¿ Ñt¿ Ññ¿ Ñú¿ Ñ†¿ Ñ°¿ ÑŸ¿ Ö¿ Ö4¿ ÖD¿ Ö`¿ Ö}¿ Öö¿ Ö±¿ Ö∑¿ Ö”¿ ÖË¿ ÖÓ¿ ÖÚ¿ ÖÛ¿ Ü2¿ Ü_¿ Üe¿ Üí¿ Üß¿ Üæ¿ Üÿ¿ ÜÊ¿ Ü˛¿ á¿ á¿ á¿ áS¿ áÖ¿ áö¿ á≠¿ áπ¿ áΩ¿ áæ¿ áÒ¿ à
¿ àW¿ àz¿ àñ¿ à°¿ à…¿ àÈ¿ â¿ âR¿ âé¿ âÃ¿ ä¿ ä2¿ ä[¿ äå¿ ä∫¿ ä√¿ ä…¿ äÊ¿ ä˚¿ ã¿ ã¿ ã¿ ã8¿ ãQ¿ ãû¿ ã˙¿ å@¿ åK¿ ås¿ åë¿ åæ¿ å¯¿ ç2¿ çn¿ ç§¿ ç“¿ ç˘¿ é(¿ éV¿ é_¿ ée¿ éÇ¿ éó¿ éû¿ é¢¿ é£¿ é“¿ éı¿ è¿ è¿ è_¿ è`¿ èê¿ èº¿ ê¿ ê¿ ê¿ êp¿ êç¿ êé¿ ê„¿ ë¿ ë1¿ ëQ¿ ë•¿ ë¶¿ ë ¿ ë÷¿ í¿ íO¿ íV¿ íW¿ ír¿ í®¿ íœ¿ íˇ¿ ì)¿ ìN¿ ìt¿ ì¢¿ ìæ¿ ìÓ¿ î¿ î@¿ îj¿ îs¿ îz¿ î~¿ îÄ¿ îÅ¿ î±¿ îÈ¿ ï
¿ ï-¿ ï;¿ ïb¿ ïÖ¿ ï¢¿ ï√¿ ïË¿ ï˝¿ ñ¿ ñ?¿ ñd¿ ñá¿ ñü¿ ñ†¿ ñƒ¿ ñÂ¿ ó¿ ó¿ óP¿ ó{¿ óî¿ ó…¿ ó˚¿ ò-¿ ò.¿ ò:¿ òå¿ òé¿ òè¿ ô¿ ô)¿ ô_¿ ô`¿ ôl¿ ôÅ¿ ôò¿ ôô¿ ôˆ¿ ô˜¿ ö¿ öW¿ ö[¿ ö\¿ öh¿ ö•¿ öÀ¿ õ ¿ õ¿ õ¿ õY¿ õz¿ õπ¿ õΩ¿ õæ¿ õ ¿ õ›¿ ú¿ ú:¿ úO¿ úS¿ úT¿ úy¿ ú•¿ ú¬¿ úœ¿ úÏ¿ úÚ¿ úˆ¿ ú˜¿ ù¿ ù*¿ ùE¿ ù^¿ ùà¿ ù®¿ ù…¿ ù¯¿ û¿ û<¿ ûw¿ ûé¿ û≤¿ û‹¿ û˚¿ ü$¿ üM¿ üs¿ üô¿ ü®¿ üµ¿ ü¿¿ ü…¿ ü–¿ ü‘¿ ü÷¿ ü◊¿ †¿ †N¿ †n¿ †ê¿ †û¿ †∂¿ †Ÿ¿ †˚¿ ° ¿ °F¿ °i¿ °é¿ °£¿ ° ¿ ¢ ¿ ¢¿ ¢¿ ¢<¿ ¢k¿ ¢Ø¿ ¢ı¿ £5¿ £f¿ £ë¿ £µ¿ £€¿ §¿ §	¿ §¿ §g¿ §h¿ §j¿ §k¿ §€¿ §‹¿ •¿ •:¿ •;¿ •G¿ •\¿ •s¿ •t¿ •—¿ •“¿ •Ú¿ ¶0¿ ¶4¿ ¶5¿ ¶Y¿ ¶Ö¿ ¶¢¿ ¶Ø¿ ¶Ã¿ ¶“¿ ¶÷¿ ¶◊¿ ¶„¿ ß¿ ßE¿ ßâ¿ ß©¿ ßÁ¿ ßÎ¿ ßÏ¿ ß¯¿ ®¿ ®L¿ ®g¿ ®|¿ ®Ä¿ ®Å¿ ®ç¿ ®¥¿ ®˛¿ ©¿ ©3¿ ©:¿ ©~¿ ©†¿ ©ß¿ ©®¿ ©”¿ ©Î¿ ™¿ ™¿ ™4¿ ™;¿ ™<¿ ™â¿ ™∆¿ ´¿ ´$¿ ´\¿ ´ü¿ ´‰¿ ¨'¿ ¨l¿ ¨s¿ ¨t¿ ¨ú¿ ¨¿¿ ¨Á¿ ≠¿ ≠#¿ ≠>¿ ≠X¿ ≠Ä¿ ≠®¿ ≠“¿ ≠Ù¿ Æ'¿ Æ`¿ Æõ¿ Æÿ¿ Ø¿ Ø+¿ ØS¿ Øw¿ Øô¿ Øø¿ ØÁ¿ Ø¯¿ ∞3¿ ∞L¿ ∞i¿ ∞ï¿ ∞≈¿ ∞÷¿ ∞Â¿ ∞Ú¿ ∞˝¿ ±¿ ±¿ ±¿ ±¿ ±¿ ±Z¿ ±^¿ ±Æ¿ ±˛¿ ≤Q¿ ≤ù¿ ≤Î¿ ≥¿ ≥¿ ≥¿ ≥¿ ≥n¿ ≥º¿ ≥œ¿ ¥¿ ¥B¿ ¥õ¿ ¥œ¿ ¥–¿ µ¿ µ,¿ µ-¿ µg¿ µÑ¿ µÜ¿ µá¿ µŒ¿ µ“¿ ∂¿ ∂i¿ ∂≤¿ ∑¿ ∑N¿ ∑i¿ ∑m¿ ∑ª¿ ∑Î¿ ∑Ô¿ ∑˝¿ ∏¿ ∏N¿ ∏y¿ ∏Ω¿ ∏˚¿ π'¿ π^¿ πd¿ πã¿ π≥¿ πœ¿ π¿ πÒ¿ ∫4¿ ∫:¿ ∫ä¿ ∫⁄¿ ª¿ ª#¿ ªa¿ ªb¿ ªß¿ ª‘¿ º¿ ºA¿ ºU¿ º[¿ º\¿ º¶¿ º⁄¿ º·¿ º‚¿ Ω$¿ Ωe¿ Ωi¿ Ωj¿ Ω¢¿ Ωß¿ Ω˜¿ æ=¿ æB¿ æë¿ æª¿ æ¿¿ æœ¿ æ‘¿ ø"¿ ø5¿ øõ¿ ø∂¿ ø“¿ ¿¿ ¿¿ ¿a¿ ¿±¿ ¿œ¿ ¡¿ ¡N¿ ¡ä¿ ¡⁄¿ ¬¿ ¬¿ ¬¿ ¬:¿ ¬h¿ ¬ä¿ ¬ì¿ ¬†¿ ¬ß¿ ¬´¿ ¬¨¿ ¬‰¿ ¬È¿ √¿ √!¿ √0¿ √5¿ √Ñ¿ √ú¿ √‚¿ √˝¿ ƒ¿ ƒS¿ ƒT¿ ƒ®¿ ƒÁ¿ ≈#¿ ≈N¿ ≈U¿ ≈V¿ ≈É¿ ≈±¿ ≈”¿ ≈‹¿ ≈È¿ ≈¿ ≈Ù¿ ≈ı¿ ∆"¿ ∆(¿ ∆y¿ ∆»¿ ∆ÿ¿ «¿ «I¿ «J¿ «ó¿ «Ω¿ « ¿ »¿ »¿ »e¿ »ï¿ »¢¿ »Ê¿ »Á¿ …7¿ …`¿ …a¿ …õ¿ …∏¿ …¿  ¿  7¿  ^¿  q¿  u¿  v¿  ≈¿  Â¿  Ê¿ À3¿ À|¿ À´¿ À‘¿ À’¿ Ã¿ Ã¿ Ãh¿ Ã√¿ Ã…¿ ÃŸ¿ Ãﬂ¿ Õ0¿ Õ=¿ Õh¿ Õì¿ Õ‚¿ Œ5¿ Œ[¿ Œß¿ ŒŸ¿ œ¿ œ1¿ œ\¿ œ]¿ œé¿ œŸ¿ œ˜¿ –¿ –?¿ –b¿ –≤¿ –‡¿ —'¿ —<¿ —v¿ —í¿ —∂¿ —›¿ —¯¿ “¿ “¿ “;¿ “`¿ “É¿ “®¿ “˜¿ ”¿ ”¿ ”¿ ”¿ ”¿ ”_¿ ”e¿ ”Ø¿ ”Œ¿ ”‘¿ ‘¿ ‘¿ ‘.¿ ‘4¿ ‘É¿ ‘ñ¿ ‘£¿ ‘Ÿ¿ ’¿ ’)¿ ’N¿ ’w¿ ’ù¿ ’Œ¿ ’◊¿ ’›¿ ’·¿ ’‚¿ ÷$¿ ÷*¿ ÷{¿ ÷ù¿ ÷£¿ ÷Á¿ ÷Ì¿ ÷˝¿ ◊¿ ◊P¿ ◊c¿ ◊p¿ ◊§¿ ◊Ã¿ ◊Û¿ ÿ¿ ÿF¿ ÿM¿ ÿq¿ ÿì¿ ÿó¿ ÿò¿ ÿÿ¿ ÿﬁ¿ Ÿ¿ Ÿ$¿ Ÿ4¿ Ÿ:¿ ŸÄ¿ Ÿò¿ Ÿ•¿ Ÿ“¿ ŸÌ¿ ⁄¿ ⁄¿ ⁄ ¿ ⁄!¿ ⁄F¿ ⁄m¿ ⁄é¿ ⁄±¿ ⁄”¿ ⁄˝¿ €(¿ €[¿ €´¿ €˙¿ ‹¿ ‹9¿ ‹e¿ ‹œ¿ ›=¿ ›å¿ ›™¿ ›˘¿ ﬁ¿ ﬁ¿ ﬁ+¿ ﬁP¿ ﬁu¿ ﬁò¿ ﬁΩ¿ ﬂ¿ ﬂ¿ ﬂ!¿ ﬂ'¿ ﬂ+¿ ﬂ,¿ ﬂp¿ ﬂv¿ ﬂ¡¿ ﬂ«¿ ﬂ◊¿ ﬂ›¿ ‡'¿ ‡?¿ ‡L¿ ‡ü¿ ‡†¿ ‡Á¿ ‡Ì¿ ·<¿ ·N¿ ·T¿ ·d¿ ·j¿ ·∑¿ ·œ¿ ·‹¿ ‚¿ ‚>¿ ‚e¿ ‚ã¿ ‚ª¿ ‚ƒ¿ ‚ ¿ ‚Œ¿ ‚œ¿ „¿ „!¿ „o¿ „ã¿ „ë¿ „°¿ „ß¿ „¿ ‰¿ ‰¿ ‰e¿ ‰ä¿ ‰±¿ ‰◊¿ Â¿ Â¿ Â¿ Â¿ Â¿ Â`¿ Âf¿ Âó¿ Âù¿ Â≠¿ Â≥¿ Ê¿ Ê¿ Ê#¿ Ê\¿ ÊÄ¿ Ê¢¿ Ê¶¿ Êß¿ ÊË¿ ÊÓ¿ Á4¿ ÁA¿ Á[¿ ÁÄ¿ ÁÆ¿ ÁÛ¿ Á˚¿ Ë#¿ ËG¿ Ëk¿ Ës¿ Ëy¿ Ë}¿ Ë~¿ Ë√¿ Ë…¿ ËŸ¿ Ëﬂ¿ È/¿ ÈB¿ ÈÉ¿ Èê¿ Èƒ¿ È¯¿ Í ¿ Í$¿ Í%¿ Íg¿ Ím¿ Í∏¿ ÍÔ¿ Íı¿ Î¿ Î¿ ÎX¿ Îk¿ Îx¿ Î©¿ ÎŒ¿ Ï¿ Ï7¿ Ï[¿ Ïa¿ Ïe¿ Ïf¿ Ï≠¿ Ï≥¿ Ï¯¿ Ï˛¿ Ì¿ Ì¿ Ìa¿ Ìy¿ ÌÜ¿ Ìæ¿ Ì‚¿ Ì¿ Ó"¿ ÓQ¿ Óz¿ Ó•¿ Ó¶¿ Ô
¿ Ô(¿ ÔO¿ Ôp¿ Ôì¿ Ô„¿ ÔÙ¿ ¿ >¿ a¿ Ü¿ ÷¿ Á¿ Ô¿ Ò(¿ Ò5¿ Ò\¿ ÒÇ¿ Ò≠¿ Ò∂¿ Òº¿ ÒΩ¿ Ò˙¿ Ò˛¿ Òˇ¿ ÚG¿ ÚM¿ Úõ¿ Ú≤¿ Ú∏¿ Ú»¿ ÚŒ¿ Û¿ ÛU¿ Ûb¿ Û¡¿ ÛÂ¿ ÛÛ¿ ÛÙ¿ Ù¿ Ù\¿ Ùö¿ ÙÎ¿ ı=¿ ı>¿ ıl¿ ı•¿ ıœ¿ ı˙¿ ˆ¿ ˆ	¿ ˆ
¿ ˆ6¿ ˆn¿ ˆØ¿ ˜¿ ˜¿ ˜¿ ˜[¿ ˜m¿ ˜∫¿ ¯ ¿ ¯P¿ ¯£¿ ¯ﬁ¿ ˘¿ ˘a¿ ˘µ¿ ˘‰¿ ˙¿ ˙8¿ ˙v¿ ˙£¿ ˙∞¿ ˙ª¿ ˙ﬂ¿ ˙Ë¿ ˚¿ ˚F¿ ˚è¿ ˚æ¿ ˚Ó¿ ¸¿ ¸N¿ ¸{¿ ¸à¿ ¸ì¿ ¸∑¿ ¸¿¿ ¸Õ¿ ˝¿ ˝%¿ ˝)¿ ˝*¿ ˝o¿ ˝u¿ ˝ø¿ ˝Ÿ¿ ˝ﬂ¿ ˝Ô¿ ˝ı¿ ˛E¿ ˛X¿ ˛e¿ ˛ô¿ ˛¥¿ ˛”¿ ˛¯¿ ˛˛¿ ˇ¿ ˇ¿ ˇO¿ ˇo¿ ˇu¿ ˇµ¿ ˇ’¿ ˇ„¿ ¿ ¿ $¿ M¿ ]¿ y¿ …¿¿;¿i¿ç¿π¿Î¿'¿U¿}¿Ø¿„¿¿+¿?¿F¿J¿L¿M¿ü¿£¿Ó¿=¿ç¿ù¿°¿Ø¿≥¿ˇ¿K¿\¿ò¿«¿Õ¿¿E¿l¿z¿é¿™¿ƒ¿›¿˙¿¿.¿M¿q¿é¿®¿«¿Á¿¿¿0¿N¿f¿g¿±¿	¿	6¿	a¿	b¿	Ø¿	˚¿
6¿
7¿
à¿
•¿
‹¿
›¿¿G¿H¿ã¿ø¿¿¿¿W¿•¿Ô¿¿¿l¿π¿Ì¿"¿#¿g¿Æ¿Ï¿)¿*¿q¿∏¿π¿ˇ¿8¿9¿á¿»¿˘¿˙¿4¿l¿m¿¶¿¨¿ı¿C¿j¿¶¿ß¿Î¿¿ ¿b¿h¿ü¿¬¿√¿‚¿¯¿˘¿¿T¿V¿W¿Æ¿˙¿¿.¿z¿≠¿ ¿À¿◊¿Í¿	¿1¿F¿J¿K¿ú¿¬¿Ú¿¿d¿∑¿¿4¿é¿⁄¿Ù¿!¿"¿C¿^¿y¿¿É¿Ñ¿∞¿…¿Ù¿#¿h¿n¿à¿å¿ç¿©¿œ¿”¿‘¿ˇ¿,¿O¿P¿Ñ¿Ø¿‘¿¿¿	¿?¿e¿°¿¿¿	¿X¿°¿»¿Œ¿¿?¿e¿ê¿º¿¿:¿]¿a¿b¿í¿Ω¿È¿ 5¿ P¿ z¿ û¿ §¿ “¿ ˜¿!¿!<¿!@¿!A¿!x¿!ó¿!≥¿!‡¿!‰¿!Â¿"¿"E¿"I¿"J¿"à¿"»¿"ı¿"˚¿"ˇ¿# ¿#H¿#ç¿#ø¿#≈¿#…¿# ¿$¿$B¿$m¿$s¿$ç¿$ë¿$í¿$Ø¿$À¿$Ê¿$Í¿$Î¿%(¿%M¿%o¿%É¿%â¿%ä¿%À¿%˝¿&¿&¿&¿&5¿&í¿&ì¿&Ù¿'(¿'P¿'a¿'î¿'œ¿'ˆ¿(¿(E¿(N¿(U¿(V¿(Ö¿(π¿(Ê¿)U¿)∞¿)‡¿)Û¿**¿*k¿*ü¿*™¿*≥¿*π¿*∫¿*È¿+¿+F¿+©¿,!¿,K¿,^¿,∞¿,À¿-¿--¿-X¿-~¿-â¿-í¿-ò¿-ô¿-Á¿.X¿.ï¿.∆¿.Ÿ¿/.¿/~¿/â¿/í¿/ò¿/ô¿/∏¿/“¿/Ù¿0¿00¿07¿0;¿0=¿0>¿0å¿0≠¿0±¿0¯¿1<¿1á¿1Í¿2¿22¿2g¿2|¿2}¿2ó¿2◊¿3¿3;¿3]¿3^¿3ò¿3∏¿3Õ¿3€¿3·¿3‚¿3˝¿4¿48¿4Y¿4ç¿4´¿4¡¿4‰¿56¿5@¿5ä¿5∆¿6¿6¿6¿6@¿6N¿6T¿6U¿6á¿6´¿6”¿6‘¿7 ¿7¿7¿7,¿70¿71¿7=¿7i¿7Ç¿7≥¿7π¿7Â¿7ı¿7˚¿8¿8 ¿8!¿8-¿8\¿8Ä¿8ß¿8€¿8·¿8Â¿8Ê¿8Ú¿9/¿9D¿9j¿9|¿9ã¿9≤¿9Ÿ¿9˛¿:¿:¿:"¿:#¿:/¿:B¿:t¿:ä¿:ü¿:£¿:•¿:¶¿:Ô¿;¿;U¿;b¿;c¿;±¿;˛¿<B¿<M¿<N¿<ù¿<≠¿<Ø    Ä•  Ä∫Ä— Ä◊  Å  Å.  ÅV  Å  Å®  Å—  ÅÊ  Å˝  Ç  Ç/  ÇL  Çe  ÇÖ  Çú  Çª  Ç◊Ç˛É ãuÇóåêÅ/// ParentData that determines whether or not to paint the corresponding child.
///
/// Used in the layout of the Cupertino and Material text selection menus, which
/// decide whether or not to paint their buttons after laying them out and
/// determining where they overflow.  å’Äﬂç°Äæ/// Whether or not this child is painted.
///
/// Children in the selection toolbar may be laid out for measurement purposes
/// but not painted. This allows these children to be identified.çØ çπQçÃ   çπç∫ éó:é Ä¨/// An interface for building the selection UI, to be provided by the
/// implementer of the toolbar widget.
///
/// Override text operations such as [handleCut] if needed.    é‰Ç<ê≤Å¥/// Builds a selection handle of the given `type`.
///
/// The top left corner of this widget is positioned at the bottom of the
/// selection position.
///
/// The supplied [onTap] should be invoked when the handle is tapped, if such
/// interaction is allowed. As a counterexample, the default selection handle
/// on iOS [cupertinoTextSelectionControls] does not call [onTap] at all,
/// since its handles are not meant to be tapped. êæêÃ  ê‘êÌ  êÚê˙  ë
ë   ë$Åë¯Ä∆/// Get the anchor point of the handle relative to itself. The anchor point is
/// the point that is aligned with a specific point in the text. A handle
/// often visually "points to" that location. íí!  í&í.   íAÉÕî\Å˘/// Builds a toolbar near a text selection.
///
/// Typically displays buttons for copying and pasting text.
///
/// [globalEditableRegion] is the TextField size of the global coordinate system
/// in logical pixels.
///
/// [textLineHeight] is the `preferredLineHeight` of the [RenderEditable] we
/// are building a toolbar for.
///
/// The [position] is a general calculation midpoint parameter of the toolbar.
/// If you want more detailed position information, can use [endpoints]
/// to calculate it. înî|  îàîé  îßîØ  î¬î   î◊"îÒ  îˇï  ï∂(ï–  ï‰$ïÌ   ñZñG-/// Returns the size of the selection handle. ñUñ]   ñpÅÓóﬁÅX/// Whether the current selection of the text field managed by the given
/// `delegate` can be removed from the text field and placed into the
/// [Clipboard].
///
/// By default, false is returned when nothing is selected in the text field.
///
/// Subclasses can use this to decide if they should expose the cut
/// functionality to the user. óÂó¸   òbÅ…ô©Å3/// Whether the current selection of the text field managed by the given
/// `delegate` can be copied to the [Clipboard].
///
/// By default, false is returned when nothing is selected in the text field.
///
/// Subclasses can use this to decide if they should expose the copy
/// functionality to the user. ô±ô»   ö/Å›õºÅu/// Whether the text field managed by the given `delegate` supports pasting
/// from the clipboard.
///
/// Subclasses can use this to decide if they should expose the paste
/// functionality to the user.
///
/// This does not consider the contents of the clipboard. Subclasses may want
/// to, for example, disallow pasting when the clipboard contains an empty
/// string. õ≈õ‹   úÅ‘ù,Å
/// Whether the current selection of the text field managed by the given
/// `delegate` can be extended to include the entire content of the text
/// field.
///
/// Subclasses can use this to decide if they should expose the select all
/// functionality to the user. ù9ùP   ùËÅ√üÄ§/// Call [TextSelectionDelegate.cutSelection] to cut current selection.
///
/// This is called by subclasses when their cut affordance is activated by
/// the user. ü ü7  üA(ü[   üØÅ»†‡Äß/// Call [TextSelectionDelegate.copySelection] to copy current selection.
///
/// This is called by subclasses when their copy affordance is activated by
/// the user. †Î°  °(°&   °{Ç£Å>/// Call [TextSelectionDelegate.pasteText] to paste text.
///
/// This is called by subclasses when their paste affordance is activated by
/// the user.
///
/// This function is asynchronous since interacting with the clipboard is
/// asynchronous. Race conditions may exist with this API as currently
/// implemented. £$£;   £äÅº§íÄÙ/// Call [TextSelectionDelegate.selectAll] to set the current selection to
/// contain the entire text value.
///
/// Does not hide the toolbar.
///
/// This is called by subclasses when their select-all affordance is activated
/// by the user. §¢§π    •J±D¶fÅ/// An object that manages a pair of text selection handles for a
/// [RenderEditable].
///
/// This class is a wrapper of [SelectionOverlay] to provide APIs specific for
/// [RenderEditable]s. To manage selection handles for custom widgets, use
/// [SelectionOverlay] instead. ¶âB ß!ß5Äõ/// Creates an object that manages overlay entries for selection handles.
///
/// The [context] must not be null and must have an [Overlay] as an ancestor.ß<ßW  ßaßx  ßÑßç  ß¢#ß∂  ßÀ'ßﬂ  ß¯%®  ®#®2  ®C®I  ®_®e  ®Ä®è  ®•=®∏  ®Ë%®˜  ©(©-  ®u®À®‹®›©D©J©X©Q©K©T©b©h©x©q©i©t©Ç©à©ü©ò©â©õ©π©©©ª©Ÿ©“©€Ø≈Å∞´M/// Controls the fade-in and fade-out animations for the toolbar and handles.	∞∞∞ ∞ë∞&∞Z∞∫∞ ∞À±ph±ÃD/// The editable line in which the selected text is being displayed. ±›p≤<?/// {@macro flutter.widgets.SelectionOverlay.selectionControls} ≤Ro≤∞?/// {@macro flutter.widgets.SelectionOverlay.selectionDelegate} ≤∆-≤‚  ≥T≥e  ≥•V≥ø ≥·≥Ó≥Û≥Ô≥Ù≥˙≥ı≥ˇT¥ ¥9¥F¥K¥G¥L¥R¥M¥WR¥q ¥è¥ú¥°¥ù¥¢¥®¥£∑;∑@ ∑R¿ KÓ¿ K˙  ¿ O®¿ O¥  ≤¯X≥@/// Retrieve current value.  ≥≥≥p1≥Ç    ∂;Ä˝∑Ä≈/// Whether selection handles are visible.
///
/// Set to false if you want to hide the handles. Use this property to show or
/// hide the handle without rebuilding them.
///
/// Defaults to false.   ∑[Ä√∑_  ∑n∑t   ¿ @hÄÑ¿ @¢./// Whether the handles are currently visible.   ¿ @p¿ A)-/// Whether the toolbar is currently visible.   ¥≠Åä¥≤    ∏"Äò∏c9/// {@macro flutter.widgets.SelectionOverlay.showHandles}   ∏ær∏ˇ9/// {@macro flutter.widgets.SelectionOverlay.hideHandles}   π4Äòπu9/// {@macro flutter.widgets.SelectionOverlay.showToolbar}   π–Ç”ºÇ4/// Updates the overlay after the selection has changed.
///
/// If this method is called while the [SchedulerBinding.schedulerPhase] is
/// [SchedulerPhase.persistentCallbacks], i.e. during the build, layout, or
/// paint phases (see [WidgetsBinding.drawFrame]), then the update is delayed
/// until the post-frame callbacks phase. Otherwise the update is done
/// synchronously. This means that it is safe to call during builds, but also
/// that if you do call this during a build, the UI will not update until the
/// next frame (i.e. many milliseconds later). º#º5   ºßÇ√º¨    ønÄˆ¿ @5Äπ/// Causes the overlay to update its rendering.
///
/// This is intended to be called when the [renderObject] may have changed its
/// text metrics (e.g. because the text was scrolled).   ¿ Ad]¿ Aû2/// {@macro flutter.widgets.SelectionOverlay.hide}   ¿ A≈r¿ B9/// {@macro flutter.widgets.SelectionOverlay.hideToolbar}   ¿ B;Å∏¿ Bx5/// {@macro flutter.widgets.SelectionOverlay.dispose}   ¿ C˜ÑŸ¿ C˛    ¿ H‘É¿ H€    ¿ LÅ¿ L  ¿ L7¿ LI   ¿ MÇå¿ M  ¿ MA¿ MT   ¿ OÀÅ	¿ O–  ¿ Oı¿ P   ¿ PÿÇñ¿ P›  ¿ Q¿ Q   ¿ SrÅp¿ Sw  ¿ Sï¿ S§  ¿ S≤¿ S¡   ¿ TÊÅ¶¿ T˛  ¿ U¿ U   ¿ U4¿ UM  ¿ U[¿ Ut    ¿ VêΩÔ¿ WDÄ≠/// An object that manages a pair of selection handles.
///
/// The selection handles are displayed in the [Overlay] that most closely
/// encloses the given [BuildContext]. ¿ WYÜß ¿ W˚¿ XÄõ/// Creates an object that manages overlay entries for selection handles.
///
/// The [context] must not be null and must have an [Overlay] as an ancestor.¿ X¿ X!  ¿ X-¿ X3  ¿ XH0¿ Xj  ¿ X~!¿ Xè  ¿ X•¿ X´  ¿ X√¿ X…  ¿ X‰¿ XÍ  ¿ Y¿ Y  ¿ Y%.¿ YG  ¿ YY¿ Yj  ¿ Y~¿ YÑ  ¿ Yö¿ Y†  ¿ Yπ¿ Yø  ¿ YŸ¿ Yﬂ  ¿ Yˆ¿ Y¸  ¿ Z4¿ Z2  ¿ ZI¿ ZX  ¿ Zn¿ Z}  ¿ Zì¿ Z¢  ¿ Z∂"¿ Z≈  ¿ Zﬁ ¿ ZÌ  ¿ [¿ [  ¿ [(0¿ [.  ¿ [^¿ [d  ¿ [Ä¿ [â  ¿ [A¿ [R¿ [S¿ [±¿ [†¿ [≥¿ [ﬁ¿ [À¿ [‡¿ \	¿ [˙¿ \¿ \2¿ \!¿ \4¿ \`¿ \L¿ \b¿ \é¿ \}¿ \ê¿ ^ÄÓ¿ ^ÎÄÀ/// The context in which the selection handles should appear.
///
/// This context must have an [Overlay] as an ancestor because this object
/// will display the text selection handles in that [Overlay]. ¿ _π(¿ _—  ¿ aó¿ aû  ¿ bKÅ&¿ c^ÄÈ/// Whether the start handle is visible.
///
/// If the value changes, the start handle uses [FadeTransition] to transition
/// itself on and off the screen.
///
/// If this is null, the start selection handle will always be visible. ¿ cvÄÑ¿ c‰E/// Called when the users start dragging the start selection handles. ¿ cˇÄç¿ duL/// Called when the users drag the start selection handles to new locations. ¿ dëÄô¿ e\/// Called when the users lift their fingers after dragging the start selection
/// handles. ¿ eÎ&¿ f  ¿ gπ¿ g¿  ¿ heÅ¿ irÄ„/// Whether the end handle is visible.
///
/// If the value changes, the end handle uses [FadeTransition] to transition
/// itself on and off the screen.
///
/// If this is null, the end selection handle will always be visible. ¿ iàÄÄ¿ iÙC/// Called when the users start dragging the end selection handles. ¿ jÄâ¿ jÅJ/// Called when the users drag the end selection handles to new locations. ¿ jõÄï¿ kZ/// Called when the users lift their fingers after dragging the end selection
/// handles. ¿ k5Å¿ l.Äœ/// Whether the toolbar is visible.
///
/// If the value changes, the toolbar uses [FadeTransition] to transition
/// itself on and off the screen.
///
/// If this is null the toolbar will always be visible. ¿ l ,¿ l„  ¿ m≠h¿ nG/// Debugging information for explaining why the [Overlay] is required. ¿ n~¿ nàY/// The object supplied to the [CompositedTransformTarget] that wraps the text
/// field. ¿ nùÄõ¿ o$r/// The objects supplied to the [CompositedTransformTarget] that wraps the
/// location of start selection handle. ¿ o=Äó¿ o¬p/// The objects supplied to the [CompositedTransformTarget] that wraps the
/// location of end selection handle. ¿ oŸÄπ¿ pÅÄÑ/// {@template flutter.widgets.SelectionOverlay.selectionControls}
/// Builds text selection handles and toolbar.
/// {@endtemplate} ¿ póÄ·¿ qgÄ´/// {@template flutter.widgets.SelectionOverlay.selectionDelegate}
/// The delegate for manipulating the current selection in the owning
/// text field.
/// {@endtemplate} ¿ q}É	¿ tuÇø/// Determines the way that drag start behavior is handled.
///
/// If set to [DragStartBehavior.start], handle drag behavior will
/// begin at the position where the drag gesture won the arena. If set to
/// [DragStartBehavior.down] it will begin at the position where a down
/// event is first detected.
///
/// In general, setting this to [DragStartBehavior.start] will make drag
/// animation smoother and setting it to [DragStartBehavior.down] will make
/// drag behavior feel slightly more reactive.
///
/// By default, the drag start behavior is [DragStartBehavior.start].
///
/// See also:
///
///  * [DragGestureRecognizer.dragStartBehavior], which gives an example for the different behaviors. ¿ tãÉh¿ w‹Çø/// {@template flutter.widgets.SelectionOverlay.onSelectionHandleTapped}
/// A callback that's optionally invoked when a selection handle is tapped.
///
/// The [TextSelectionControls.buildHandle] implementation the text field
/// uses decides where the handle's tap "hotspot" is, or whether the
/// selection handle supports tap gestures at all. For instance,
/// [MaterialTextSelectionControls] calls [onSelectionHandleTapped] when the
/// selection handle's "knob" is tapped, while
/// [CupertinoTextSelectionControls] builds a handle that's not sufficiently
/// large for tapping (as it's not meant to be tapped) so it does not call
/// [onSelectionHandleTapped] even when tapped.
/// {@endtemplate} ¿ w¯Å¿ y Äﬁ/// Maintains the status of the clipboard for determining if its contents can
/// be pasted or not.
///
/// Useful because the actual value of the clipboard can only be checked
/// asynchronously (see [Clipboard.getData]). ¿ z™¿ z≤  ¿ {`Äê¿ {∆M/// Controls the fade-in and fade-out animations for the toolbar and handles.¿ {’¿ {›¿ {Ô¿ {Í¿ {ﬁ¿ {Ï¿ {ıÄ°¿ |éÄÄ/// A pair of handles. If this is non-null, there are always 2, though the
/// second is hidden when the selection is collapsed. ¿ |õ2¿ |≈/// A copy/paste toolbar. ¿ ÅA¿ ÅF ¿ ÅX¿ ^˜Äø¿ _íx/// The type of start selection handle.
///
/// Changing the value while the handles are visible causes them to rebuild.   ¿ _ÂÄû¿ _È  ¿ _˘¿ `   ¿ `áÅ¿ alÄœ/// The line height at the selection start.
///
/// This value is used for calculating the size of the start selection handle.
///
/// Changing the value while the handles are visible causes them to rebuild.   ¿ a¥Äì¿ a∏  ¿ a ¿ a“   ¿ e/Äπ¿ e»v/// The type of end selection handle.
///
/// Changing the value while the handles are visible causes them to rebuild.   ¿ fÄò¿ f  ¿ f'¿ f@   ¿ f±Å¿ gíÄÀ/// The line height at the selection end.
///
/// This value is used for calculating the size of the end selection handle.
///
/// Changing the value while the handles are visible causes them to rebuild.   ¿ g‘Äç¿ gÿ  ¿ gË¿ g   ¿ lAÄÜ¿ lù</// The text selection positions of selection start and end.   ¿ l˙ÄØ¿ l˛  ¿ m¿ m+   ¿ yÅì¿ zÉÅR/// The location of where the toolbar should be drawn in relative to the
/// location of [toolbarLayerLink].
///
/// If this is null, the toolbar is drawn based on [selectionEndPoints] and
/// the rect of render object of [context].
///
/// This is useful for displaying toolbars at the mouse right-click locations
/// in desktop devices.   ¿ z∆Äñ¿ z   ¿ z⁄¿ z„   
¿ |“Å–¿ }tÄñ/// {@template flutter.widgets.SelectionOverlay.showHandles}
/// Builds the handles by inserting them into the [context]'s overlay.
/// {@endtemplate}   ¿ ~¶Å¿ 9Äá/// {@template flutter.widgets.SelectionOverlay.hideHandles}
/// Destroys the handles by removing them from overlay.
/// {@endtemplate}   ¿ √Åz¿ ÄbÄì/// {@template flutter.widgets.SelectionOverlay.showToolbar}
/// Shows the toolbar by inserting it into the [context]'s overlay.
/// {@endtemplate}   ¿ ÅaÉ>¿ Åf    ¿ Ñ£ÅN¿ Ö;Äå/// {@template flutter.widgets.SelectionOverlay.hide}
/// Hides the entire overlay including the toolbar and the handles.
/// {@endtemplate}   ¿ ÖıÅ!¿ ÜÆÄ©/// {@template flutter.widgets.SelectionOverlay.hideToolbar}
/// Hides the toolbar part of the overlay.
///
/// To hide the whole overlay, see [hide].
/// {@endtemplate}   ¿ áÄ¢¿ á°{/// {@template flutter.widgets.SelectionOverlay.dispose}
/// Disposes this object and release resources.
/// {@endtemplate}   ¿ á¿ÉE¿ á«  ¿ áŸ¿ áÁ   ¿ ã	Éò¿ ã  ¿ ã ¿ ã.   ¿ é•Öÿ¿ é¨  ¿ é∫¿ é»    ¿ îÅÑ¿ î∑//// This widget represents a selection toolbar. ¿ îÎÅ≥ ¿ ï¿ ï*/// Creates a toolbar overlay.¿ ï1¿ ï7  ¿ ï?!¿ ïN  ¿ ïf¿ ïu  ¿ ïâ¿ ïò  ¿ ï¶¿ ïµ  ¿ ï«¿ ï÷  ¿ ïÏ¿ ïÚ  ¿ ñ¿ ñ  ¿ ñ ¿ ñ,  ¿ ñC¿ ñR  ¿ ñh¿ ñw  ¿ ñé¿ ñì¿ ñú¿ ñó¿ ñî¿ ñô
¿ ñ¢ ¿ ñØ  ¿ ñ∆¿ ñ‘  ¿ ñÁ¿ ñ˜  ¿ ó¿ ó  ¿ ó .¿ ó=  ¿ óR'¿ óo  ¿ ó}¿ óä  ¿ óñ1¿ óµ  ¿ óÀ.¿ óË  ¿ ó˝.¿ ò   ¿ ò0[¿ òZ   ¿ ò0¿ ò1 ¿ òèáF¿ òï   ¿ ô$¿ ô  ¿ ô+3¿ ôA    ¿ ôbÄ¯¿ ôs   ¿ ôb¿ ôc¿ ö^Å^¿ öo  ¿ ö"¿ öô  ¿ ö^¿ ö_¿ õ¿Äí¿ õ—   ¿ õ¿¿ õ¡¿ úVÄü¿ ú[    ¿ ú˘Ç⁄¿ ù  ¿ ù¿ ù   ¿ ú˘¿ ú˙ ¿ ü◊Ñí¿ †?/// This widget represents a single draggable selection handle. ¿ †PÅ« ¿ †v¿ †ç/// Create selection overlay.¿ †î¿ †ö  ¿ †¢¿ †±  ¿ †∫¿ †…  ¿ †›¿ †„  ¿ †ˇ¿ °  ¿ °$ ¿ °*  ¿ °J¿ °P  ¿ °m¿ °|  ¿ °í¿ °ò  ¿ °ß!¿ °∂  ¿ °Œ0¿ °‘  	¿ °Á¿ °¯¿ °˘¿ ¢¿ ¢¿ ¢¿ ¢¿ ¢¿ ¢
¿ ¢¿ ¢+  ¿ ¢>+¿ ¢R  ¿ ¢m@¿ ¢ì  ¿ ¢±B¿ ¢ÿ  ¿ ¢˜<¿ £  ¿ £7-¿ £S  ¿ £h'¿ £Ö  ¿ £ì ¿ £†  ¿ £∑"¿ £’  ¿ £›)¿ £ı   ¿ §[¿ §6   ¿ §¿ § ¿ §kåß¿ §q   ¿ §ﬁ$¿ §˜  ¿ •3¿ •    ¿ •=Äˆ¿ •N   ¿ •=¿ •>¿ ¶7Äû¿ ¶<    ¿ ¶ŸÅ¿ ¶Í  ¿ ¶˙!¿ ß  ¿ ¶Ÿ¿ ¶⁄¿ ßÓÄë¿ ßˇ   ¿ ßÓ¿ ßÔ¿ ®Éàç¿ ®ñ  ¿ ®ú¿ ®™  ¿ ®É¿ ®Ñ ¿ ±Ñq¿ ≥ﬁÇ∫/// Delegate interface for the [TextSelectionGestureDetectorBuilder].
///
/// The interface is usually implemented by text field implementations wrapping
/// [EditableText], that use a [TextSelectionGestureDetectorBuilder] to build a
/// [TextSelectionGestureDetector] for their [EditableText]. The delegate provides
/// the builder with information about the current state of the text field.
/// Based on these information, the builder adds the correct gesture handlers
/// to the gesture detector.
///
/// See also:
///
///  * [TextField], which implements this delegate for the Material text field.
///  * [CupertinoTextField], which implements this delegate for the Cupertino
///    text field.   ¿ ¥Ä¿¿ ¥æÄä/// [GlobalKey] to the [EditableText] for which the
/// [TextSelectionGestureDetectorBuilder] will build a [TextSelectionGestureDetector].   ¿ ¥“Y¿ µ;/// Whether the text field should respond to force presses.   ¿ µ/T¿ µr7/// Whether the user may select text in the text field.     ¿ µá¿ Mƒ¿ πÉs/// Builds a [TextSelectionGestureDetector] to wrap an [EditableText].
///
/// The class implements sensible defaults for many user interactions
/// with an [EditableText] (see the documentation of the various gesture handler
/// methods, e.g. [onTapDown], [onForcePressStart], etc.). Subclasses of
/// [TextSelectionGestureDetectorBuilder] can change the behavior performed in
/// responds to these gesture events by overriding the corresponding handler
/// methods of this class.
///
/// The resulting [TextSelectionGestureDetector] to wrap an [EditableText] is
/// obtained by calling [buildGestureDetector].
///
/// See also:
///
///  * [TextField], which uses a subclass to implement the Material-specific
///    gesture logic of an [EditableText].
///  * [CupertinoTextField], which uses a subclass to implement the
///    Cupertino-specific gesture logic of an [EditableText]. ¿ π)Ä∆ ¿ πç¿ π∞]/// Creates a [TextSelectionGestureDetectorBuilder].
///
/// The [delegate] must not be null.¿ π∑¿ π∆  ¿ π÷¿ π‹¿ πÌ¿ πÊ¿ π›¿ πÈ¿ πÛÅl¿ ªWÅ/// The delegate for this [TextSelectionGestureDetectorBuilder].
///
/// The delegate provides the builder with information about what actions can
/// currently be performed on the text field. Based on this, the builder adds
/// the correct gesture handlers to the gesture detector.¿ ª¿ ª¿ « '¿ «% ¿ «C¿ …9%¿ …@ ¿ …[¿  «¿  Ã ¿  ﬁ¿ À≠%¿ Àº  ¿ ªdÇ¿ ª≤B/// Returns true if lastSecondaryTapDownPosition was on selection.   ¿ ≈˜Å&¿ ∆„Äÿ/// Whether to show the selection toolbar.
///
/// It is based on the signal source when a [onTapDown] is called. This getter
/// will return true if current [onTapDown] event is triggered by a touch or
/// a stylus.   ¿ «LÄÕ¿ «‚n/// The [State] of the [EditableText] for which the builder will provide a
/// [TextSelectionGestureDetector].  ¿ «ø¿ «¿¿ »Ä»¿ »∑u/// The [RenderObject] of the [EditableText] for which the builder will
/// provide a [TextSelectionGestureDetector].  ¿ »ó¿ »ò¿ …ùÄ◊¿ …¶    ¿ ø7És¿ ø<  ¿ øM¿ øU  ¿ ø\¿ øs  ¿ øz¿ øä   ¿ √ûÇU¿ √£  ¿ √¥¿ √º  ¿ √√¿ √⁄   ¿ À◊áB¿ ÕDÅJ/// Handler for [TextSelectionGestureDetector.onTapDown].
///
/// By default, it forwards the tap to [RenderEditable.handleTapDown] and sets
/// [shouldShowSelectionToolbar] to true if the tap was initiated by a finger or stylus.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onTapDown], which triggers this callback. ¿ ÕN¿ Õ^  ¿ Õ2¿ Õ3¿ ”Ç√¿ ‘™Åd/// Handler for [TextSelectionGestureDetector.onForcePressStart].
///
/// By default, it selects the word at the position of the force press,
/// if selection is enabled.
///
/// This callback is only applicable when force press is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onForcePressStart], which triggers this
///    callback. ¿ ‘º¿ ‘œ  ¿ ‘ò¿ ‘ô¿ ’‰Ç≤¿ ◊wÅj/// Handler for [TextSelectionGestureDetector.onForcePressEnd].
///
/// By default, it selects words in the range specified in [details] and shows
/// toolbar if it is necessary.
///
/// This callback is only applicable when force press is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onForcePressEnd], which triggers this
///    callback. ¿ ◊á¿ ◊ö  ¿ ◊e¿ ◊f¿ ÿöÜê¿ Ÿ¨ÄÔ/// Handler for [TextSelectionGestureDetector.onSingleTapUp].
///
/// By default, it selects word edge if selection is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleTapUp], which triggers
///    this callback. ¿ Ÿ∫¿ Ÿ»  ¿ Ÿö¿ Ÿõ¿ ﬂ.Åp¿ ‡SÅ/// Handler for [TextSelectionGestureDetector.onSingleTapCancel].
///
/// By default, it services as place holder to enable subclass override.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleTapCancel], which triggers
///    this callback.  ¿ ‡A¿ ‡B¿ ‡¢Ç+¿ ·„Å/// Handler for [TextSelectionGestureDetector.onSingleLongTapStart].
///
/// By default, it selects text position specified in [details] if selection
/// is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleLongTapStart], which triggers
///    this callback. ¿ ·¯¿ ‚  ¿ ·—¿ ·“¿ ‚—ÇH¿ ‰%Å//// Handler for [TextSelectionGestureDetector.onSingleLongTapMoveUpdate].
///
/// By default, it updates the selection location specified in [details] if
/// selection is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleLongTapMoveUpdate], which
///    triggers this callback. ¿ ‰?"¿ ‰[  ¿ ‰¿ ‰¿ ÂÅà¿ Ê*ÄÍ/// Handler for [TextSelectionGestureDetector.onSingleLongTapEnd].
///
/// By default, it shows toolbar if necessary.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleLongTapEnd], which triggers this
///    callback. ¿ Ê=¿ ÊR  ¿ Ê¿ Ê¿ Ê©Å”¿ ÁHÄÜ/// Handler for [TextSelectionGestureDetector.onSecondaryTap].
///
/// By default, selects the word if possible and shows the toolbar.  ¿ Á6¿ Á7¿ ËÄÅ£¿ ÈóÄˆ/// Handler for [TextSelectionGestureDetector.onSecondaryTapDown].
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSecondaryTapDown], which triggers this
///    callback.
///  * [onSecondaryTap], which is typically called after this. ¿ È™¿ È∫  ¿ ÈÖ¿ ÈÜ¿ Í'Ç=¿ ÎÅ3/// Handler for [TextSelectionGestureDetector.onDoubleTapDown].
///
/// By default, it selects a word through [RenderEditable.selectWord] if
/// selectionEnabled and shows toolbar if necessary.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onDoubleTapDown], which triggers this
///    callback. ¿ Îè¿ Îü  ¿ Îm¿ În¿ ÏhÖï¿ ÌçÅ/// Handler for [TextSelectionGestureDetector.onDragSelectionStart].
///
/// By default, it selects a text position specified in [details].
///
/// See also:
///
///  * [TextSelectionGestureDetector.onDragSelectionStart], which triggers
///    this callback. ¿ Ì¢¿ Ì¥  ¿ Ì{¿ Ì|¿ Úã'¿ ÛiÅC/// Handler for [TextSelectionGestureDetector.onDragSelectionUpdate].
///
/// By default, it updates the selection location specified in the provided
/// details objects.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onDragSelectionUpdate], which triggers
///    this callback./lib/src/material/text_field.dart ¿ Û¿ Ûë  ¿ Ûû¿ Û±  ¿ ÛW¿ ÛX¿ ˝,Å’¿ ˛lÅ/// Handler for [TextSelectionGestureDetector.onDragSelectionEnd].
///
/// By default, it simply cleans up the state used for handling certain
/// built-in behaviors.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onDragSelectionEnd], which triggers this
///    callback. ¿ ˛¿ ˛è  ¿ ˛Z¿ ˛[¿ ˇÑD¿ ˇæÄ©/// Returns a [TextSelectionGestureDetector] configured with the handlers
/// provided by this builder.
///
/// The [child] or its subtree should contain [EditableText]. ¿ ˇŸ¿ ˇﬂ  ¿ ˇÁ¿ ˇ˘  ¿ ¿     ¿Më¿bÇ/// A gesture detector to respond to non-exclusive event chains for a text field.
///
/// An ordinary [GestureDetector] configured to handle events like tap and
/// double tap will only recognize one or the other. This widget detects both:
/// first the tap and then, if another tap down occurs within a time limit, the
/// double tap.
///
/// See also:
///
///  * [TextField], a Material text field which uses this gesture detector.
///  * [CupertinoTextField], a Cupertino text field which uses this gesture
///    detector. ¿öÇÀ ¿M¿iÄ§/// Create a [TextSelectionGestureDetector].
///
/// Multiple callbacks can be called for one sequence of input gesture.
/// The [child] parameter must not be null.¿p¿v  ¿~¿Ñ  ¿í¿ò  ¿Æ¿¥  ¿»¿Œ  ¿·¿Á  ¿˛¿  ¿¿  ¿2¿8  ¿Q¿W  ¿u¿{  ¿í¿ò  ¿¨¿≤  ¿À¿—  ¿Î¿Ò  ¿¿  ¿¿*  ¿7¿=¿K¿D¿>¿G¿U¿Z¿c¿^¿[¿`¿iÄˆ¿	VÄ»/// Called for every tap down including every tap down that's part of a
/// double click or a long press, except touches that include enough movement
/// to not qualify as taps (e.g. pans and flings). ¿	dÄ–¿
#Äî/// Called when a pointer has tapped down and the force of the pointer has
/// just become greater than [ForcePressGestureRecognizer.startPressure]. ¿
9Ä°¿
Ài/// Called when a pointer that had previously triggered [onForcePressStart] is
/// lifted off the screen. ¿
ﬂf¿7;/// Called for a tap event with the secondary mouse button. ¿Js¿´@/// Called for a tap down event with the secondary mouse button. ¿¬ÅX¿Å&/// Called for each distinct tap except for every second tap of a double tap.
/// For example, if the detector was configured with [onTapDown] and
/// [onDoubleTapDown], three quick taps would be recognized as a single tap
/// down, followed by a double tap down, followed by a single tap down. ¿Å¿Ä…/// Called for each touch that becomes recognized as a gesture that is not a
/// short tap, such as a long tap or drag. It is called at the moment when
/// another gesture from the touch is recognized. ¿%Å¿Ä¬/// Called for a single long tap that's sustained for longer than
/// [kLongPressTimeout] but not necessarily lifted. Not called for a
/// double-tap-hold, which calls [onDoubleTapDown] instead. ¿,Ää¿ùD/// Called after [onSingleLongTapStart] when the pointer is dragged. ¿ª{¿$C/// Called after [onSingleLongTapStart] when the pointer is lifted. ¿;Äº¿ËÄä/// Called after a momentary hold or a short tap that is close in space and
/// time (within [kDoubleTapTimeout]) to a previous short tap. ¿¸n¿V7/// Called when a mouse starts dragging to select text. ¿oÅ5¿èÄÚ/// Called repeatedly as a mouse moves while dragging.
///
/// The frequency of calls is throttled to avoid excessive text layout
/// operations in text fields. The throttling is controlled by the constant
/// [_kDragSelectionUpdateThrottle]. ¿©t¿A/// Called when a mouse that was previously dragging is released. ¿"Äû¿∏x/// How this gesture detector should behave during hit testing.
///
/// This defaults to [HitTestBehavior.deferToChild]. ¿≈1¿Ò/// Child below this widget.  ¿˚X¿   ¿˚¿¸ ¿WõÂ¿]   ¿¸¿  ¿¿  ¿Ø¿¥ ¿√¿÷'¿Ë  ¿)¿  ¿.¿5   ¿Õ|¿ﬁ   ¿Õ¿Œ¿ƒÇæ¿…  ¿ÿ¿Ë   ¿ÜÅ¿ã  ¿ò¿¶   ¿èC¿î    ¿RÄµ¿W  ¿h¿z   ¿Ä¸¿  ¿"¿5   ¿ÇU¿FÅ)/// Drag updates are being throttled to avoid excessive text layouts in text
/// fields. The frequency of invocations is controlled by the constant
/// [_kDragSelectionUpdateThrottle].
///
/// Once the drag gesture ends, any pending drag update will be fired
/// immediately. See [_handleDragEnd].   ¿dÅ€¿i  ¿x¿à   ¿!CÄ†¿!H  ¿![¿!n   ¿!Áa¿!Ï  ¿!˝¿"   ¿"LÄ≤¿"Q  ¿"g¿"~   ¿#Ä∆¿#  ¿#""¿#>   ¿#ÃÄƒ¿#—  ¿#Â¿#˙   ¿$îU¿$ô    ¿$ÌÅ¿$Ú  ¿%¿%   ¿&ä6¿&  ¿&¿&+  ¿&¿& ¿0>äf¿1çÅH/// A [ValueNotifier] whose [value] indicates whether the current contents of
/// the clipboard can be pasted.
///
/// The contents of the clipboard can only be read asynchronously, via
/// [Clipboard.getData], so this maintains a value that can be used
/// synchronously. Call [update] to asynchronously update value if needed. ¿1ÏÄè ¿2¿2/)/// Create a new ClipboardStatusNotifier.¿26/¿2G  ¿2N¿2]¿2^¿2n¿2s¿2y¿2t¿2¿2Ñ ¿2ê¿3N¿3F,/// True if this instance has been disposed.   ¿3`Éœ¿3ß7/// Check the [Clipboard] and update [value] if needed.   ¿73ÄÏ¿7D  ¿7P¿7^  ¿73¿74¿8#Ä¡¿84  ¿8C¿8Q  ¿8#¿8$¿8ËÅ9¿8˘  ¿9¿9'  ¿8Ë¿8È¿:%}¿:6   ¿:%¿:&  É¿ÉÖÜ5Ço/// Which type of selection handle to be displayed.
///
/// With mixed-direction text, both handles may be the same type. Examples:
///
/// * LTR text: 'the &lt;quick brown&gt; fox':
///
///   The '&lt;' is drawn with the [left] type, the '&gt;' with the [right]
///
/// * RTL text: 'XOF &lt;NWORB KCIUQ&gt; EHT':
///
///   Same as above.
///
/// * mixed text: '&lt;the NWOR&lt;B KCIUQ fox'
///
///   Here 'the QUICK B' is selected, but 'QUICK BROWN' is RTL. Both are drawn
///   with the [left] type.
///
/// See also:
///
///  * [TextDirection], which discusses left-to-right and right-to-left text in
///    more detail.  ÜQJÜóC/// The selection handle is to the left of the selection end point. Ü†LÜÁD/// The selection handle is to the right of the selection end point. ÜÒQá9E/// The start and end of the selection are co-incident at this point.    ¿:¶Ç¿:ÙH/// An enumeration of the status of the content on the user's clipboard.  ¿;X¿;WL/// The clipboard content can be pasted, such as a String of nonzero length. ¿;eÄÊ¿<DÄÿ/// The status of the clipboard is unknown. Since getting clipboard data is
/// asynchronous (see [Clipboard.getData]), this status often exists while
/// waiting to receive the clipboard contents for the first time. ¿<P[¿<üL/// The content on the clipboard is not pasteable, such as when it is empty.        áGÇ¶âÅÇ1/// Signature for when a pointer that's dragging to select text has moved again.
///
/// The first argument [startDetails] contains the details of the event that
/// initiated the dragging.
///
/// The second argument [updateDetails] contains the details of the current
/// pointer movement. It's the same as the one passed to [DragGestureRecognizer.onUpdate].
///
/// This signature is different from [GestureDragUpdateCallback] to make it
/// easier for various text fields to use [TextSelectionGestureDetector] without
/// having to store the start position.  â≠âø  âÃâﬂ   âÔÅÑã.Å6/// The type for a Function that builds a toolbar's container with the given
/// child.
///
/// See also:
///
///   * [TextSelectionToolbar.toolbarBuilder], which is of this type.
///     type.
///   * [CupertinoTextSelectionToolbar.toolbarBuilder], which is similar, but
///     for a Cupertino-style toolbar.  ãOã]  ãeãm    ÉÄ¢ÉÉX/// A duration that controls how often the drag selection update callback is
/// called.É£É´ÉºÉ∏É¨É∫àæ <ÄÜÄ§Ä•Ä∫Ä÷Ä◊ÅÅ.ÅVÅÅ®Å–Å—ÅÊÅ˝ÇÇ/ÇLÇeÇÖÇúÇªÇ÷Ç◊ÉÉÉhÉtÉøÉ¿ÉÙÉ¯ÑDÑHÑwÑ{Ñ«ÑÀÑ˙Ñ˛ÖÖÖGÖKÖöÖ∂Ö∫Ö»ÖÃÜÜ0ÜOÜïÜùÜûÜÂÜÓÜÔá7áDáFáGáòáúáÈàà	àUà∞à¥â âQâyâÓâÔä<äGäKäYä]ä£ä±äˇã&ãtãuã≈ã…ååeåäå”åˇççVçöç∂ç∑ç√ééééTé{ééªé‚èèèièÉèâèŸê)êuê©ë!ë"ësëøëÔí>í?ímísí≤í∏ìì$ì*ìyìõì°ìÚî<îSîjîÑî£îæî”î˚ïïgï≤ï‡ñ
ñññ@ñmñnñπóóóójópó∂ó◊òò[ò_ò`ò´òﬁò‰ô4ô:ôÅô¢ô”ö(ö,ö-ö{öïöõö„õõ
õZõßõµõÁú	úúúYú§ú±ú∑ùù%ù[ù·ùÂùÊû0û6ûÉûìû⁄üünü®ü¨ü≠ü˘üˇ†M†]†§†Ÿ°9°t°x°y°µ°ª¢
¢¢ ¢l¢µ¢»£	£L£É£á£à£’£˙§ §!§'§x§ã§ƒ§˚•C•G•I•J•å•¢•¶•ı¶@¶`¶}¶…¶œßß8ß]ßÄßûß«ßÙ®®?®[®|®°®‰©©=©[©{©¢©À©„™C™°™–™˙´´<´p´™´Ê¨¨H¨é¨∆¨˛≠≠Z≠ú≠œÆÆ3Æ_ÆáÆπÆÁØØIØuØ∑ØæØ¬Ø√∞∞"∞V∞è∞ì∞Ÿ∞⁄±%±n±µ±⁄±€≤≤O≤P≤í≤√≤ƒ≤ı≤ˆ≥≥)≥Q≥R≥m≥n≥¢≥£≥˝¥U¥´¥ﬁµJµ≤∂4∂8∂9∂f∂l∂Ω∂Ï∂Ú∑∑9∑Y∑~∑õ∑ø∑Õ∑Ï∏∏∏ ∏\∏s∏í∏∑∏ª∏º∏¯π1π2πnπÖπ§π…πÕπŒ∫	∫∫]∫´∫˚ªDªîª‰ºº@º\ºjºÅº†º§º•º»ºﬁΩΩ/ΩSΩyΩ†Ω®Ω€æ æ$æKæqæyæ®æ”ø"øgøkøløûø§øı¿ @.¿ @e¿ @f¿ @ó¿ @Ì¿ @Ó¿ A¿ Aa¿ Ab¿ Aó¿ A¬¿ A√¿ Aˇ¿ B8¿ B9¿ Bq¿ BÑ¿ B•¿ C¿ Ci¿ Cî¿ C√¿ C¿ CÙ¿ Cı¿ D¿ DG¿ Dw¿ Dº¿ DÁ¿ E¿ EG¿ Eë¿ E·¿ F)¿ Fx¿ F¿¿ FÈ¿ GP¿ Gò¿ GÁ¿ H¿ HÖ¿ HÕ¿ H—¿ H“¿ HÚ¿ I"¿ IR¿ Ió¿ I¡¿ I⁄¿ J¿ Ju¿ JΩ¿ K
¿ Kõ¿ K°¿ KÁ¿ KÎ¿ KÏ¿ L¿ L¿ LS¿ Lë¿ Lπ¿ L¿¿ M¿ M¿ M¿ M^¿ MÖ¿ M€¿ M‹¿ M˛¿ NV¿ Nd¿ Nj¿ Nk¿ N°¿ N ¿ NÔ¿ Nˆ¿ N˜¿ O5¿ Ob¿ Oc¿ O°¿ O•¿ O¶¿ O»¿ O…¿ P¿ PO¿ Pw¿ P~¿ P—¿ P’¿ P÷¿ Q ¿ QI¿ Q°¿ Q¢¿ Qƒ¿ R¿ R+¿ R1¿ R2¿ Rh¿ Rã¿ R∏¿ Rø¿ R¿¿ R˛¿ S+¿ S,¿ Sk¿ So¿ Sp¿ S ¿ T!¿ TS¿ TÉ¿ T•¿ T¨¿ Tﬂ¿ T„¿ T‰¿ U¿ U.¿ UU¿ U|¿ UÜ¿ U¶¿ U÷¿ U◊¿ U˙¿ V¿ V5¿ VM¿ Vk¿ VÉ¿ Vâ¿ Vç¿ Vè¿ Vê¿ V»¿ VÃ¿ W¿ W>¿ WW¿ W£¿ W©¿ W˘¿ X¿ X)¿ XD¿ Xz¿ X°¿ Xø¿ X‡¿ Y¿ Y!¿ YU¿ Yz¿ Yñ¿ Yµ¿ Y’¿ YÚ¿ Z¿ ZE¿ Zj¿ Zè¿ Z≤¿ Z⁄¿ [ ¿ [$¿ [Z¿ [|¿ [ô¿ [ƒ¿ [Û¿ \¿ \E¿ \v¿ \¢¿ \Ï¿ \¯¿ ]¿ ]B¿ ]ö¿ ]ˆ¿ ]˝¿ ^¿ ^¿ ^B¿ ^H¿ ^ï¿ ^÷¿ ^Ù¿ ^ı¿ _¿ _%¿ _t¿ _∑¿ _„¿ `¿ `=¿ `K¿ `i¿ `Ä¿ `Ñ¿ `Ö¿ `≥¿ `π¿ a
¿ a¿ a_¿ aï¿ a≤¿ a⁄¿ aˇ¿ b¿ b-¿ bD¿ bH¿ bI¿ bt¿ bz¿ bÀ¿ bÔ¿ bı¿ c?¿ cs¿ ct¿ cº¿ c¸¿ c˝¿ dL¿ dé¿ dè¿ d·¿ d¿ e,¿ e-¿ eU¿ e[¿ e™¿ eÈ¿ f¿ fH¿ fi¿ fw¿ fì¿ f™¿ fÆ¿ fØ¿ f€¿ f·¿ g0¿ g6¿ gÖ¿ g∑¿ g“¿ g¯¿ h¿ h)¿ hG¿ h^¿ hb¿ hc¿ hå¿ hí¿ h·¿ i¿ i¿ iS¿ iÖ¿ iÜ¿ iÃ¿ j
¿ j¿ jX¿ jò¿ jô¿ jÈ¿ j¯¿ k2¿ k3¿ kY¿ k_¿ k´¿ kœ¿ k’¿ l¿ l>¿ l?¿ l~¿ l»¿ l¯¿ m3¿ mf¿ m¿ mÖ¿ m¶¿ m™¿ m´¿ mı¿ n¿ n¿ ni¿ nv¿ nö¿ nõ¿ nË¿ o¿ o:¿ o;¿ oà¿ o∞¿ o÷¿ o◊¿ p¿ pM¿ pb¿ pî¿ pï¿ p⁄¿ q"¿ q4¿ qI¿ qz¿ q{¿ qπ¿ qø¿ r¿ rP¿ rö¿ rπ¿ rø¿ s
¿ sX¿ sâ¿ sè¿ s◊¿ s›¿ sÌ¿ sÛ¿ t[¿ tà¿ tâ¿ t‘¿ u"¿ u(¿ ut¿ uª¿ u˛¿ vM¿ v~¿ vÕ¿ w¿ wL¿ wa¿ w±¿ w∆¿ wı¿ wˆ¿ xF¿ x^¿ xd¿ xØ¿ xﬂ¿ y¿ y¿ y]¿ yÉ¿ yâ¿ y◊¿ z¿ z¿ z[¿ zu¿ z®¿ zƒ¿ zÎ¿ {¿ {¿ {$¿ {B¿ {Y¿ {]¿ {^¿ {Æ¿ {Ú¿ {Û¿ |@¿ |x¿ |ò¿ |ô¿ |µ¿ |œ¿ |–¿ }¿ }X¿ }m¿ }Ñ¿ }û¿ }¨¿ }≠¿ }Ã¿ }¸¿ ~*¿ ~1¿ ~2¿ ~Ç¿ ~ü¿ ~£¿ ~§¿ ~„¿ ¿ 2¿ I¿ e¿ Ç¿ ü¿ ∂¿ º¿ ¿¿ ¡¿ Ä ¿ ÄF¿ Ä[¿ Är¿ Äé¿ Äú¿ Ä¢¿ Ä◊¿ Å:¿ Å>¿ Å?¿ Å_¿ Åz¿ Å®¿ Å∂¿ Ç¿ Ç:¿ Çî¿ ÇØ¿ Çø¿ Ç›¿ É(¿ ÉI¿ Éi¿ Éí¿ Éª¿ É≈¿ ÉÈ¿ ÉÛ¿ Ñ ¿ Ñ¿ ÑE¿ Ñl¿ Ñt¿ Ññ¿ Ñú¿ Ñ†¿ Ñ°¿ ÑŸ¿ Ö¿ Ö4¿ ÖD¿ Ö`¿ Ö}¿ Öö¿ Ö±¿ Ö∑¿ Ö”¿ ÖË¿ ÖÓ¿ ÖÚ¿ ÖÛ¿ Ü2¿ Ü_¿ Üe¿ Üí¿ Üß¿ Üæ¿ Üÿ¿ ÜÊ¿ Ü˛¿ á¿ á¿ á¿ áS¿ áÖ¿ áö¿ á≠¿ áπ¿ áΩ¿ áæ¿ áÒ¿ à
¿ àW¿ àz¿ àñ¿ à°¿ à…¿ àÈ¿ â¿ âR¿ âé¿ âÃ¿ ä¿ ä2¿ ä[¿ äå¿ ä∫¿ ä√¿ ä…¿ äÊ¿ ä˚¿ ã¿ ã¿ ã¿ ã8¿ ãQ¿ ãû¿ ã˙¿ å@¿ åK¿ ås¿ åë¿ åæ¿ å¯¿ ç2¿ çn¿ ç§¿ ç“¿ ç˘¿ é(¿ éV¿ é_¿ ée¿ éÇ¿ éó¿ éû¿ é¢¿ é£¿ é“¿ éı¿ è¿ è¿ è_¿ è`¿ èê¿ èº¿ ê¿ ê¿ ê¿ êp¿ êç¿ êé¿ ê„¿ ë¿ ë1¿ ëQ¿ ë•¿ ë¶¿ ë ¿ ë÷¿ í¿ íO¿ íV¿ íW¿ ír¿ í®¿ íœ¿ íˇ¿ ì)¿ ìN¿ ìt¿ ì¢¿ ìæ¿ ìÓ¿ î¿ î@¿ îj¿ îs¿ îz¿ î~¿ îÄ¿ îÅ¿ î±¿ îÈ¿ ï
¿ ï-¿ ï;¿ ïb¿ ïÖ¿ ï¢¿ ï√¿ ïË¿ ï˝¿ ñ¿ ñ?¿ ñd¿ ñá¿ ñü¿ ñ†¿ ñƒ¿ ñÂ¿ ó¿ ó¿ óP¿ ó{¿ óî¿ ó…¿ ó˚¿ ò-¿ ò.¿ ò:¿ òå¿ òé¿ òè¿ ô¿ ô)¿ ô_¿ ô`¿ ôl¿ ôÅ¿ ôò¿ ôô¿ ôˆ¿ ô˜¿ ö¿ öW¿ ö[¿ ö\¿ öh¿ ö•¿ öÀ¿ õ ¿ õ¿ õ¿ õY¿ õz¿ õπ¿ õΩ¿ õæ¿ õ ¿ õ›¿ ú¿ ú:¿ úO¿ úS¿ úT¿ úy¿ ú•¿ ú¬¿ úœ¿ úÏ¿ úÚ¿ úˆ¿ ú˜¿ ù¿ ù*¿ ùE¿ ù^¿ ùà¿ ù®¿ ù…¿ ù¯¿ û¿ û<¿ ûw¿ ûé¿ û≤¿ û‹¿ û˚¿ ü$¿ üM¿ üs¿ üô¿ ü®¿ üµ¿ ü¿¿ ü…¿ ü–¿ ü‘¿ ü÷¿ ü◊¿ †¿ †N¿ †n¿ †ê¿ †û¿ †∂¿ †Ÿ¿ †˚¿ ° ¿ °F¿ °i¿ °é¿ °£¿ ° ¿ ¢ ¿ ¢¿ ¢¿ ¢<¿ ¢k¿ ¢Ø¿ ¢ı¿ £5¿ £f¿ £ë¿ £µ¿ £€¿ §¿ §	¿ §¿ §g¿ §h¿ §j¿ §k¿ §€¿ §‹¿ •¿ •:¿ •;¿ •G¿ •\¿ •s¿ •t¿ •—¿ •“¿ •Ú¿ ¶0¿ ¶4¿ ¶5¿ ¶Y¿ ¶Ö¿ ¶¢¿ ¶Ø¿ ¶Ã¿ ¶“¿ ¶÷¿ ¶◊¿ ¶„¿ ß¿ ßE¿ ßâ¿ ß©¿ ßÁ¿ ßÎ¿ ßÏ¿ ß¯¿ ®¿ ®L¿ ®g¿ ®|¿ ®Ä¿ ®Å¿ ®ç¿ ®¥¿ ®˛¿ ©¿ ©3¿ ©:¿ ©~¿ ©†¿ ©ß¿ ©®¿ ©”¿ ©Î¿ ™¿ ™¿ ™4¿ ™;¿ ™<¿ ™â¿ ™∆¿ ´¿ ´$¿ ´\¿ ´ü¿ ´‰¿ ¨'¿ ¨l¿ ¨s¿ ¨t¿ ¨ú¿ ¨¿¿ ¨Á¿ ≠¿ ≠#¿ ≠>¿ ≠X¿ ≠Ä¿ ≠®¿ ≠“¿ ≠Ù¿ Æ'¿ Æ`¿ Æõ¿ Æÿ¿ Ø¿ Ø+¿ ØS¿ Øw¿ Øô¿ Øø¿ ØÁ¿ Ø¯¿ ∞3¿ ∞L¿ ∞i¿ ∞ï¿ ∞≈¿ ∞÷¿ ∞Â¿ ∞Ú¿ ∞˝¿ ±¿ ±¿ ±¿ ±¿ ±¿ ±Z¿ ±^¿ ±Æ¿ ±˛¿ ≤Q¿ ≤ù¿ ≤Î¿ ≥¿ ≥¿ ≥¿ ≥¿ ≥n¿ ≥º¿ ≥œ¿ ¥¿ ¥B¿ ¥õ¿ ¥œ¿ ¥–¿ µ¿ µ,¿ µ-¿ µg¿ µÑ¿ µÜ¿ µá¿ µŒ¿ µ“¿ ∂¿ ∂i¿ ∂≤¿ ∑¿ ∑N¿ ∑i¿ ∑m¿ ∑ª¿ ∑Î¿ ∑Ô¿ ∑˝¿ ∏¿ ∏N¿ ∏y¿ ∏Ω¿ ∏˚¿ π'¿ π^¿ πd¿ πã¿ π≥¿ πœ¿ π¿ πÒ¿ ∫4¿ ∫:¿ ∫ä¿ ∫⁄¿ ª¿ ª#¿ ªa¿ ªb¿ ªß¿ ª‘¿ º¿ ºA¿ ºU¿ º[¿ º\¿ º¶¿ º⁄¿ º·¿ º‚¿ Ω$¿ Ωe¿ Ωi¿ Ωj¿ Ω¢¿ Ωß¿ Ω˜¿ æ=¿ æB¿ æë¿ æª¿ æ¿¿ æœ¿ æ‘¿ ø"¿ ø5¿ øõ¿ ø∂¿ ø“¿ ¿¿ ¿¿ ¿a¿ ¿±¿ ¿œ¿ ¡¿ ¡N¿ ¡ä¿ ¡⁄¿ ¬¿ ¬¿ ¬¿ ¬:¿ ¬h¿ ¬ä¿ ¬ì¿ ¬†¿ ¬ß¿ ¬´¿ ¬¨¿ ¬‰¿ ¬È¿ √¿ √!¿ √0¿ √5¿ √Ñ¿ √ú¿ √‚¿ √˝¿ ƒ¿ ƒS¿ ƒT¿ ƒ®¿ ƒÁ¿ ≈#¿ ≈N¿ ≈U¿ ≈V¿ ≈É¿ ≈±¿ ≈”¿ ≈‹¿ ≈È¿ ≈¿ ≈Ù¿ ≈ı¿ ∆"¿ ∆(¿ ∆y¿ ∆»¿ ∆ÿ¿ «¿ «I¿ «J¿ «ó¿ «Ω¿ « ¿ »¿ »¿ »e¿ »ï¿ »¢¿ »Ê¿ »Á¿ …7¿ …`¿ …a¿ …õ¿ …∏¿ …¿  ¿  7¿  ^¿  q¿  u¿  v¿  ≈¿  Â¿  Ê¿ À3¿ À|¿ À´¿ À‘¿ À’¿ Ã¿ Ã¿ Ãh¿ Ã√¿ Ã…¿ ÃŸ¿ Ãﬂ¿ Õ0¿ Õ=¿ Õh¿ Õì¿ Õ‚¿ Œ5¿ Œ[¿ Œß¿ ŒŸ¿ œ¿ œ1¿ œ\¿ œ]¿ œé¿ œŸ¿ œ˜¿ –¿ –?¿ –b¿ –≤¿ –‡¿ —'¿ —<¿ —v¿ —í¿ —∂¿ —›¿ —¯¿ “¿ “¿ “;¿ “`¿ “É¿ “®¿ “˜¿ ”¿ ”¿ ”¿ ”¿ ”¿ ”_¿ ”e¿ ”Ø¿ ”Œ¿ ”‘¿ ‘¿ ‘¿ ‘.¿ ‘4¿ ‘É¿ ‘ñ¿ ‘£¿ ‘Ÿ¿ ’¿ ’)¿ ’N¿ ’w¿ ’ù¿ ’Œ¿ ’◊¿ ’›¿ ’·¿ ’‚¿ ÷$¿ ÷*¿ ÷{¿ ÷ù¿ ÷£¿ ÷Á¿ ÷Ì¿ ÷˝¿ ◊¿ ◊P¿ ◊c¿ ◊p¿ ◊§¿ ◊Ã¿ ◊Û¿ ÿ¿ ÿF¿ ÿM¿ ÿq¿ ÿì¿ ÿó¿ ÿò¿ ÿÿ¿ ÿﬁ¿ Ÿ¿ Ÿ$¿ Ÿ4¿ Ÿ:¿ ŸÄ¿ Ÿò¿ Ÿ•¿ Ÿ“¿ ŸÌ¿ ⁄¿ ⁄¿ ⁄ ¿ ⁄!¿ ⁄F¿ ⁄m¿ ⁄é¿ ⁄±¿ ⁄”¿ ⁄˝¿ €(¿ €[¿ €´¿ €˙¿ ‹¿ ‹9¿ ‹e¿ ‹œ¿ ›=¿ ›å¿ ›™¿ ›˘¿ ﬁ¿ ﬁ¿ ﬁ+¿ ﬁP¿ ﬁu¿ ﬁò¿ ﬁΩ¿ ﬂ¿ ﬂ¿ ﬂ!¿ ﬂ'¿ ﬂ+¿ ﬂ,¿ ﬂp¿ ﬂv¿ ﬂ¡¿ ﬂ«¿ ﬂ◊¿ ﬂ›¿ ‡'¿ ‡?¿ ‡L¿ ‡ü¿ ‡†¿ ‡Á¿ ‡Ì¿ ·<¿ ·N¿ ·T¿ ·d¿ ·j¿ ·∑¿ ·œ¿ ·‹¿ ‚¿ ‚>¿ ‚e¿ ‚ã¿ ‚ª¿ ‚ƒ¿ ‚ ¿ ‚Œ¿ ‚œ¿ „¿ „!¿ „o¿ „ã¿ „ë¿ „°¿ „ß¿ „¿ ‰¿ ‰¿ ‰e¿ ‰ä¿ ‰±¿ ‰◊¿ Â¿ Â¿ Â¿ Â¿ Â¿ Â`¿ Âf¿ Âó¿ Âù¿ Â≠¿ Â≥¿ Ê¿ Ê¿ Ê#¿ Ê\¿ ÊÄ¿ Ê¢¿ Ê¶¿ Êß¿ ÊË¿ ÊÓ¿ Á4¿ ÁA¿ Á[¿ ÁÄ¿ ÁÆ¿ ÁÛ¿ Á˚¿ Ë#¿ ËG¿ Ëk¿ Ës¿ Ëy¿ Ë}¿ Ë~¿ Ë√¿ Ë…¿ ËŸ¿ Ëﬂ¿ È/¿ ÈB¿ ÈÉ¿ Èê¿ Èƒ¿ È¯¿ Í ¿ Í$¿ Í%¿ Íg¿ Ím¿ Í∏¿ ÍÔ¿ Íı¿ Î¿ Î¿ ÎX¿ Îk¿ Îx¿ Î©¿ ÎŒ¿ Ï¿ Ï7¿ Ï[¿ Ïa¿ Ïe¿ Ïf¿ Ï≠¿ Ï≥¿ Ï¯¿ Ï˛¿ Ì¿ Ì¿ Ìa¿ Ìy¿ ÌÜ¿ Ìæ¿ Ì‚¿ Ì¿ Ó"¿ ÓQ¿ Óz¿ Ó•¿ Ó¶¿ Ô
¿ Ô(¿ ÔO¿ Ôp¿ Ôì¿ Ô„¿ ÔÙ¿ ¿ >¿ a¿ Ü¿ ÷¿ Á¿ Ô¿ Ò(¿ Ò5¿ Ò\¿ ÒÇ¿ Ò≠¿ Ò∂¿ Òº¿ ÒΩ¿ Ò˙¿ Ò˛¿ Òˇ¿ ÚG¿ ÚM¿ Úõ¿ Ú≤¿ Ú∏¿ Ú»¿ ÚŒ¿ Û¿ ÛU¿ Ûb¿ Û¡¿ ÛÂ¿ ÛÛ¿ ÛÙ¿ Ù¿ Ù\¿ Ùö¿ ÙÎ¿ ı=¿ ı>¿ ıl¿ ı•¿ ıœ¿ ı˙¿ ˆ¿ ˆ	¿ ˆ
¿ ˆ6¿ ˆn¿ ˆØ¿ ˜¿ ˜¿ ˜¿ ˜[¿ ˜m¿ ˜∫¿ ¯ ¿ ¯P¿ ¯£¿ ¯ﬁ¿ ˘¿ ˘a¿ ˘µ¿ ˘‰¿ ˙¿ ˙8¿ ˙v¿ ˙£¿ ˙∞¿ ˙ª¿ ˙ﬂ¿ ˙Ë¿ ˚¿ ˚F¿ ˚è¿ ˚æ¿ ˚Ó¿ ¸¿ ¸N¿ ¸{¿ ¸à¿ ¸ì¿ ¸∑¿ ¸¿¿ ¸Õ¿ ˝¿ ˝%¿ ˝)¿ ˝*¿ ˝o¿ ˝u¿ ˝ø¿ ˝Ÿ¿ ˝ﬂ¿ ˝Ô¿ ˝ı¿ ˛E¿ ˛X¿ ˛e¿ ˛ô¿ ˛¥¿ ˛”¿ ˛¯¿ ˛˛¿ ˇ¿ ˇ¿ ˇO¿ ˇo¿ ˇu¿ ˇµ¿ ˇ’¿ ˇ„¿ ¿ ¿ $¿ M¿ ]¿ y¿ …¿¿;¿i¿ç¿π¿Î¿'¿U¿}¿Ø¿„¿¿+¿?¿F¿J¿L¿M¿ü¿£¿Ó¿=¿ç¿ù¿°¿Ø¿≥¿ˇ¿K¿\¿ò¿«¿Õ¿¿E¿l¿z¿é¿™¿ƒ¿›¿˙¿¿.¿M¿q¿é¿®¿«¿Á¿¿¿0¿N¿f¿g¿±¿	¿	6¿	a¿	b¿	Ø¿	˚¿
6¿
7¿
à¿
•¿
‹¿
›¿¿G¿H¿ã¿ø¿¿¿¿W¿•¿Ô¿¿¿l¿π¿Ì¿"¿#¿g¿Æ¿Ï¿)¿*¿q¿∏¿π¿ˇ¿8¿9¿á¿»¿˘¿˙¿4¿l¿m¿¶¿¨¿ı¿C¿j¿¶¿ß¿Î¿¿ ¿b¿h¿ü¿¬¿√¿‚¿¯¿˘¿¿T¿V¿W¿Æ¿˙¿¿.¿z¿≠¿ ¿À¿◊¿Í¿	¿1¿F¿J¿K¿ú¿¬¿Ú¿¿d¿∑¿¿4¿é¿⁄¿Ù¿!¿"¿C¿^¿y¿¿É¿Ñ¿∞¿…¿Ù¿#¿h¿n¿à¿å¿ç¿©¿œ¿”¿‘¿ˇ¿,¿O¿P¿Ñ¿Ø¿‘¿¿¿	¿?¿e¿°¿¿¿	¿X¿°¿»¿Œ¿¿?¿e¿ê¿º¿¿:¿]¿a¿b¿í¿Ω¿È¿ 5¿ P¿ z¿ û¿ §¿ “¿ ˜¿!¿!<¿!@¿!A¿!x¿!ó¿!≥¿!‡¿!‰¿!Â¿"¿"E¿"I¿"J¿"à¿"»¿"ı¿"˚¿"ˇ¿# ¿#H¿#ç¿#ø¿#≈¿#…¿# ¿$¿$B¿$m¿$s¿$ç¿$ë¿$í¿$Ø¿$À¿$Ê¿$Í¿$Î¿%(¿%M¿%o¿%É¿%â¿%ä¿%À¿%˝¿&¿&¿&¿&5¿&í¿&ì¿&Ù¿'(¿'P¿'a¿'î¿'œ¿'ˆ¿(¿(E¿(N¿(U¿(V¿(Ö¿(π¿(Ê¿)U¿)∞¿)‡¿)Û¿**¿*k¿*ü¿*™¿*≥¿*π¿*∫¿*È¿+¿+F¿+©¿,!¿,K¿,^¿,∞¿,À¿-¿--¿-X¿-~¿-â¿-í¿-ò¿-ô¿-Á¿.X¿.ï¿.∆¿.Ÿ¿/.¿/~¿/â¿/í¿/ò¿/ô¿/∏¿/“¿/Ù¿0¿00¿07¿0;¿0=¿0>¿0å¿0≠¿0±¿0¯¿1<¿1á¿1Í¿2¿22¿2g¿2|¿2}¿2ó¿2◊¿3¿3;¿3]¿3^¿3ò¿3∏¿3Õ¿3€¿3·¿3‚¿3˝¿4¿48¿4Y¿4ç¿4´¿4¡¿4‰¿56¿5@¿5ä¿5∆¿6¿6¿6¿6@¿6N¿6T¿6U¿6á¿6´¿6”¿6‘¿7 ¿7¿7¿7,¿70¿71¿7=¿7i¿7Ç¿7≥¿7π¿7Â¿7ı¿7˚¿8¿8 ¿8!¿8-¿8\¿8Ä¿8ß¿8€¿8·¿8Â¿8Ê¿8Ú¿9/¿9D¿9j¿9|¿9ã¿9≤¿9Ÿ¿9˛¿:¿:¿:"¿:#¿:/¿:B¿:t¿:ä¿:ü¿:£¿:•¿:¶¿:Ô¿;¿;U¿;b¿;c¿;±¿;˛¿<B¿<M¿<N¿<ù¿<≠¿<Ø     -