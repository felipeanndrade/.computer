Åsvaluealphaopacityredgreenblue	withAlphawithOpacitywithRed	withGreenwithBlue_linearizeColorComponentcomputeLuminancelerp
alphaBlendgetAlphaFromOpacity==hashCodetoStringclearsrcdstsrcOverdstOversrcIndstInsrcOutdstOutsrcATopdstATopxorplusmodulatescreenoverlaydarkenlighten
colorDodge	colorBurn	hardLight	softLight
difference	exclusionmultiplyhue
saturationcolor
luminositynonelowmediumhighbuttroundsquaremiterbevelfillstrokehardEdge	antiAliasantiAliasWithSaveLayer_data_kIsAntiAliasIndex_kColorIndex_kBlendModeIndex_kStyleIndex_kStrokeWidthIndex_kStrokeCapIndex_kStrokeJoinIndex_kStrokeMiterLimitIndex_kFilterQualityIndex_kMaskFilterIndex_kMaskFilterBlurStyleIndex_kMaskFilterSigmaIndex_kInvertColorIndex_kDitherIndex_kIsAntiAliasOffset_kColorOffset_kBlendModeOffset_kStyleOffset_kStrokeWidthOffset_kStrokeCapOffset_kStrokeJoinOffset_kStrokeMiterLimitOffset_kFilterQualityOffset_kMaskFilterOffset_kMaskFilterBlurStyleOffset_kMaskFilterSigmaOffset_kInvertColorOffset_kDitherOffset_kDataByteCount_objects_ensureObjectsInitialized_kShaderIndex_kColorFilterIndex_kImageFilterIndex_kObjectCountisAntiAlias_kColorDefault_kBlendModeDefault	blendModestylestrokeWidth	strokeCap
strokeJoin_kStrokeMiterLimitDefaultstrokeMiterLimit
maskFilterfilterQualityshadercolorFilterimageFilterinvertColors_ditherenableDitheringrawRgbarawStraightRgbarawUnmodifiedpngrgba8888bgra8888_image_debugStackwidthheight	_disposeddisposedebugDisposed
toByteDatadebugGetOpenHandleStackTracesclone	isCloneOf_toByteData_dispose_handlesdurationimage_cachedFrameCount
frameCount_frameCount_cachedRepetitionCountrepetitionCount_repetitionCountgetNextFrame_getNextFramenonZeroevenOdd	intersectunionreverseDifference_constructor_clonefillType_getFillType_setFillTypemoveTorelativeMoveTolineTorelativeLineToquadraticBezierTorelativeQuadraticBezierTocubicTorelativeCubicToconicTorelativeConicToarcTo_arcTo
arcToPoint_arcToPointrelativeArcToPoint_relativeArcToPointaddRect_addRectaddOval_addOvaladdArc_addArc
addPolygon_addPolygonaddRRect	_addRRectaddPath_addPath_addPathWithMatrixextendWithPath_extendWithPath_extendWithPathAndMatrixcloseresetcontains	_containsshift_shift	transform
_transform	getBounds
_getBoundscombine_opcomputeMetricspositionvectorangle	_iteratoriterator_pathMetric_pathMeasurecurrentmoveNextlengthisClosedcontourIndex_measuregetTangentForOffsetextractPath_length
_getPosTan_extractPath	_isClosed_nextContour_nativeNextContourcurrentContourIndexnormalsolidouterinner_style_sigma	_TypeNone	_TypeBlur_color
_blendMode_matrix_type
_kTypeMode_kTypeMatrix_kTypeLinearToSrgbGamma_kTypeSrgbToLinearGamma_toNativeImageFilter_toNativeColorFilter_shortDescriptioncreator	_initMode_initMatrix_initLinearToSrgbGamma_initSrgbToLinearGammadatanativeFiltersigmaXsigmaYtileMode_modeStringinnerFilterouterFilter	_initBlur_initColorFilter_initComposedclamprepeatedmirrordecal_initLinear_initRadial_initConical
_initSweep_validateColorStops_initWithImagecompile_uniformFloatCount_samplerCount_init_shader_builder_floatUniforms_samplerUniforms	trianglestriangleStriptriangleFanpointslinespolygon	_recordersave	saveLayer_saveLayerWithoutBounds
_saveLayerrestoregetSaveCount	translatescale_scalerotateskewclipRect	_clipRect	clipRRect
_clipRRectclipPath	_clipPath	drawColor
_drawColordrawLine	_drawLine	drawPaint
_drawPaintdrawRect	_drawRect	drawRRect
_drawRRect
drawDRRect_drawDRRectdrawOval	_drawOval
drawCircle_drawCircledrawArc_drawArcdrawPath	_drawPath	drawImage
_drawImagedrawImageRect_drawImageRectdrawImageNine_drawImageNinedrawPicture_drawPicturedrawParagraph
drawPointsdrawRawPoints_drawPointsdrawVertices_drawVertices	drawAtlasdrawRawAtlas
_drawAtlas
drawShadow_drawShadowtoImage_toImageapproximateBytesUsedisRecordingendRecording_endRecording_canvas_kBytesPerShadow	_kXOffset	_kYOffset_kBlurOffsetoffset
blurRadiusconvertRadiusToSigma	blurSigmatoPaintlerpList_encodeShadowsfromUint8List_debugDisposedencoded_initEncoded_initRaw_width	_getWidth_height
_getHeight_bytesPerPixel_getBytesPerPixelbytesPerPixelinstantiateCodec_instantiateCodecA_rectIsValid_rrectIsValid_offsetIsValid_matrix4IsValid_radiusIsValid_scaleAlphaColor	BlendModeFilterQuality	StrokeCap
StrokeJoinPaintingStyleClipPaintImageByteFormatPixelFormatImage_ImageImageDecoderCallback	FrameInfoCodecinstantiateImageCodecdecodeImageFromList_decodeImageFromListAsyncdecodeImageFromPixelsPathFillTypePathOperationEngineLayerPathTangentPathMetricsPathMetricIterator
PathMetric_PathMeasure	BlurStyle
MaskFilterColorFilter_ColorFilterImageFilter_MatrixImageFilter_GaussianBlurImageFilter_ComposeImageFilter_ImageFilterShaderTileMode_encodeColorList_encodePointList_encodeTwoPointsGradientImageShaderFragmentProgram_FragmentShader
VertexModeVertices	PointModeClipOpCanvasPicturePictureRecorderShadowImmutableBufferImageDescriptor	_Callback_Callbacker	_futurizeÅ`dartuiboolRecthasNaNRRectOffsetdxisNaNdyFloat64ListlengtheverydoublevalueisFiniteRadiusxy	withAlphaalpharoundclampintpragmafromRGBOfromARGBmathpowHSVColormaterialColorstransparentCurveselasticInOutAnimationController	_clampInt_lerpInttoIntredgreenblueoverrideObject	identicalruntimeTypehashCodeStringtoRadixStringpadLeftsrcdstclear	saveLayerrestore	blendModesrcOverdstInsrcOutsrcIndstOutdstATopdstOversrcATopmultiplyscreenoverlaymodulate	hardLight
colorDodge	colorBurncolor	exclusion
difference
luminosityhue	softLight
saturationblurBackdropFilternonelowmediumhighfilterQualitymatrix	drawImagedrawImageRectdrawImageNine	drawAtlas	strokeCapAsquarestrokeWidthbuttdrawPath
drawPoints
strokeJoinstrokeMiterLimitstyle
drawCirclehardEdge	antiAliasantiAliasWithSaveLayerisAntiAliasByteDataListfilledgrowablegetInt32_kFakeHostEndiansetInt32indexvaluesfillstroke
getFloat32
setFloat32miterbevel	_TypeNone	_TypeBlur_style_sigmacreator_toNativeColorFilter_toNativeImageFilterfromEnvironmentdefaultValuetoStringStringBufferwritetoStringAsFixed
toByteDatawidgets
StackTracecurrent_handlesadd	_disposedwidthheightvoidcontainsremoveisEmptydispose
StateErrorformatFuturerawRgbamaphandle_debugStacktoList__imageNativeFieldWrapperClass1	Uint8Listcallbackencodedbuffer
asByteDataSetgetNextFramecloneDurationimage	CompletersynccompleteError	ExceptioncompletedurationmillisecondsdurationMillisecondsfuturefromUint8ListallowUpscalingtargetWidthtargetHeightinstantiateCodecthenrawrowBytespixelFormatcodec	frameInfofillTypecombinereverseDifferencexor	intersectSceneBuilderclipPathfrom_clonenonZerolefttoprightbottomzeroradiusrotationlargeArc	clockwise
fromCircleFloat32List_getValue32matrix4fromLTRB_opextractPathIterableforceClosedgetTangentForOffsetcossinatan2computeMetricslineTomoveTo
collectionIterableBaseIterator
RangeError_nextContourcurrentContourIndexisClosedcloseaddRectstartWithMoveTonextContour
maskFilter
drawShadow
hashValuescolorFilterfromColorFiltermodelinearToSrgbGammasrgbToLinearGamma_type_listEquals_matrix_color
_blendModehashList
_kTypeMode_kTypeMatrixfromList_kTypeLinearToSrgbGamma_kTypeSrgbToLinearGammaImageFilteredpushBackdropFilterpushImageFiltersigmaXsigmaYtileModeMatrix4	diagonal3ArgumentErrordatainnerouterinnerFilterouterFiltermirrorrepeateddecalcomposed_shortDescriptionshaderpaintingGradientLinearGradient	Int32ListiNoSuchMethodError
colorStopsfocalfocalRadiuspi
startAngleendAnglepaint
ByteBufferspirv
debugPrintspvTranspileResult	transpileTargetLanguagesksluniformFloatCountsamplerCountCustomPainterfloatUniformssamplerUniforms_builder_floatUniforms_samplerUniformsdrawVerticestextureCoordinatescolorsindicesany
Uint16ListclipRectSceneendRecordingisRecording_canvascullRectlargest_objects_datasydoAntiAliasclipOparcTo	ParagraphlayoutParagraphStyleParagraphBuilder	TextAlignParagraphConstraints_paintRSTransform
isNotEmptyscosssintxty
addPicturedrawPicture	_recorder	TextStylenormaloffset
blurRadiusscalelerp_lerpDoubleminshadowIndex_kColorDefaultconvertRadiusToSigma_init_initEncodedTtNativeFieldWrapperClass1IterableBaseIteratorImageFilterShader-S‡ ˙}®IT∏≥™:Crj   	dart:core¿®‚ ¿u ï˚ <ÄÜÄ§Ä•Ä¶Ä∂Ä«Ä»ÅÅ_ÅØÇ ÇPÇûÇÔÉ-É0É~É§É•ÉÂÑ
Ñ[Ñ°ÑÌÖ=ÖPÖQÖpÖ£Ö„ÖÚÖÙÖıÜÜLÜéÜùÜüÜ†Ü≈Ü¸áVáeágáháîáÕààlà{à}à~à£à⁄â2âAâCâDâpâ∞â≤â≥âÁâÎä;äãä⁄ããã6ã:ãFãmã©ã‡ååå#åtå√çç?çCçOçúç‰çÏçç˛ééUéõé©éÂéÎèèèDèjèëè∂èºêêZêàêéê‘ë!ëFëbëôëöë⁄ë‡í-í=íbíâíØíµí¯í˛ìIìVìãì≠ìœìÒîî îuî{î†î«îÌï:ïjïpï≥ïπññ?ñuñ´ñ·ó#ó$óRóXóÄóÜóÆó‘ó˚ò ò3ò4òmòsò¬ò‰ôôôGôMôûô¿ôÊôÁööKöLöÖö≥ö¥öÏõõõcõôõüõ◊õÚú"ú&ú'úpú∏úæúˆùùJù{ùùÄù–ù˝ûû;ûTûÜûäûãû‘ü
üüHücüìüóüòüÈ†††T†n†ü†£†§†‚°°=°]°û°¢°£°Ó°Ù¢H¢f¢l¢™¢»££C£Ä£º£Ì£Ò£Ú§!§'§o§≤§∏••O•é•‘•⁄¶'¶q¶ºßßVß¶ßÛ®D®q®w®∆®Ê©©2©G©^©s©Ç©™©≤©ø©÷©¯™™&™j™™™Ó´0´;´C´I´M´N´ë´◊´›¨)¨p¨ª≠
≠U≠ï≠Ω≠¸ÆÆÆBÆhÆüÆºÆ ØØZØ¢Ø´Ø»Ø˙∞(∞H∞e∞w∞¬±±^±g±m±q±r±ø±≈±≤#≤@≤t≤x≤y≤Ö≤®≤»≤€≥≥≥3≥T≥X≥Y≥e≥ã≥å≥ò≥Ê≥Ë≥È¥¥ ¥m¥∑¥÷¥⁄µ+µxµ«∂∂e∂∞∂Ù∂¯∑H∑ì∑‰∏0∏~∏Àππ]π¨πÚ∫∫∫_∫¨∫ˆªHªïªÊº'º+ºRºVº§ºÂΩ6ΩÉΩ‘æ#æræçæëæüæ£æÓæˇøø_ørø∏øπø˝¿ @¿ @?¿ @E¿ @¢¿ @´¿ @¨¿ @Î¿ @Ò¿ A@¿ AO¿ AU¿ Aê¿ Añ¿ AÒ¿ A¯¿ A˘¿ B8¿ B>¿ Bâ¿ Bö¿ B†¿ B‚¿ BË¿ CC¿ CJ¿ CK¿ Cà¿ Cé¿ C‹¿ D-¿ DJ¿ DP¿ Dû¿ DÀ¿ D—¿ E0¿ E;¿ E<¿ Ez¿ EÄ¿ E©¿ EØ¿ E˝¿ F¿ Fb¿ Fh¿ F∑¿ F‚¿ FÌ¿ FÓ¿ G6¿ GÉ¿ G–¿ Gﬁ¿ G‰¿ H#¿ H)¿ Hv¿ Hæ¿ HŒ¿ H‘¿ I ¿ I&¿ IÉ¿ Iå¿ Iç¿ I⁄¿ J(¿ Jr¿ Jx¿ J≤¿ J∏¿ K¿ KW¿ K]¿ K©¿ KØ¿ L¿ L¿ L¿ Le¿ L∏¿ M¿ M¿ MM¿ MS¿ M†¿ MÒ¿ M˜¿ ND¿ NJ¿ N®¿ N≤¿ N≥¿ O¿ OU¿ Oü¿ O•¿ O‡¿ OÊ¿ P8¿ PÑ¿ Pä¿ P◊¿ P›¿ Q;¿ QE¿ QF¿ Qï¿ Qµ¿ Qª¿ R	¿ R¿ R_¿ R´¿ Rﬂ¿ RÂ¿ S0¿ SA¿ SG¿ S¶¿ S±¿ S≤¿ T¿ T¿ T"¿ Tp¿ Tv¿ T∆¿ U¿ UA¿ UG¿ Uí¿ U£¿ U©¿ V¿ V¿ V¿ Vd¿ Vò¿ Vû¿ VÎ¿ VÒ¿ WL¿ WS¿ WT¿ Wì¿ Wô¿ WË¿ X4¿ XZ¿ X`¿ XÆ¿ X¥¿ Y¿ Y¿ Y¿ Yc¿ Yi¿ Y∏¿ Z¿ Z¿ Z^¿ Zá¿ Zç¿ Zﬁ¿ Z‰¿ [D¿ [J¿ [Z¿ [`¿ [¢¿ [Í¿ \¿ \P¿ \g¿ \s¿ \t¿ \º¿ \Ω¿ ]¿ ].¿ ]4¿ ]Ä¿ ]Õ¿ ]¸¿ ^¿ ^S¿ ^ü¿ ^≈¿ ^À¿ _¿ _j¿ _ª¿ _¡¿ `¿ `2¿ `8¿ `ñ¿ `ú¿ `¨¿ `≤¿ a¿ a¿ a[¿ aw¿ a¡¿ aÿ¿ a˚¿ a¸¿ bE¿ bt¿ bz¿ bÀ¿ c¿ cj¿ câ¿ cè¿ c€¿ d(¿ dW¿ d]¿ dº¿ d¬¿ d“¿ dÿ¿ e¿ eX¿ e®¿ e”¿ eﬁ¿ eﬂ¿ f-¿ fL¿ fR¿ fõ¿ f¨¿ f≤¿ g¿ g¿ g¿ gj¿ gâ¿ gè¿ gÿ¿ gÈ¿ gÔ¿ hN¿ hY¿ hZ¿ hï¿ hõ¿ hÁ¿ i4¿ ic¿ ii¿ iÀ¿ iŸ¿ i⁄¿ j-¿ j3¿ j¿ jÃ¿ j˚¿ k¿ kb¿ ko¿ kp¿ kπ¿ k„¿ kÈ¿ l9¿ lÇ¿ l–¿ l˝¿ m¿ mO¿ mú¿ mÀ¿ m—¿ n2¿ n8¿ nH¿ nN¿ ná¿ nŒ¿ o¿ oI¿ oV¿ oW¿ o•¿ oΩ¿ o√¿ p¿ p¿ pl¿ pr¿ pÇ¿ pà¿ p¡¿ pŒ¿ pœ¿ q¿ q¿ qm¿ qÑ¿ qä¿ q”¿ q‰¿ qÍ¿ r"¿ r(¿ rä¿ rò¿ rô¿ rÂ¿ rÛ¿ r˘¿ sH¿ s_¿ se¿ sÆ¿ sø¿ s≈¿ s˝¿ t¿ td¿ tq¿ tr¿ t¿¿ tŸ¿ tﬂ¿ u.¿ u}¿ uÉ¿ uœ¿ v¿ vd¿ vj¿ vπ¿ v›¿ v„¿ wC¿ wl¿ wm¿ wæ¿ w◊¿ w›¿ x&¿ x,¿ xu¿ x≈¿ xÎ¿ xÒ¿ yL¿ yR¿ yb¿ yh¿ y∏¿ y·¿ z0¿ za¿ zh¿ zi¿ z∫¿ z”¿ zŸ¿ {"¿ {r¿ {ü¿ {•¿ | ¿ |¿ |¿ |¿ |^¿ |≠¿ |√¿ |—¿ |“¿ }#¿ }<¿ }B¿ }ã¿ }ë¿ }⁄¿ ~*¿ ~_¿ ~e¿ ~¬¿ ~»¿ ~ÿ¿ ~ﬁ¿ ¿ b¿ ∞¿ π¿ ∫¿ Ä¿ Ä$¿ Ä*¿ Äs¿ Ä√¿ Ä¿ Äˆ¿ ÅX¿ Å^¿ Ån¿ Åt¿ Å√¿ ÅŸ¿ Ç$¿ Ç=¿ ÇK¿ ÇM¿ ÇN¿ Ç¶¿ Ç·¿ ÇÂ¿ ÉB¿ Éâ¿ Éç¿ É‚¿ Ñ6¿ Ñå¿ Ñ‡¿ Ñ‰¿ Ö2¿ Öm¿ Öq¿ Ö ¿ ÖŒ¿ Ü¿ Üc¿ ÜÇ¿ ÜÜ¿ Üî¿ Üò¿ Ü„¿ á¿ á2¿ áO¿ áj¿ áâ¿ á®¿ á√¿ áÿ¿ à.¿ àV¿ àW¿ àõ¿ à°¿ àÁ¿ â,¿ â4¿ â5¿ âm¿ âs¿ âµ¿ â‰¿ âÎ¿ âÏ¿ ä6¿ ä^¿ äd¿ äØ¿ ä¸¿ ãE¿ ãê¿ ãñ¿ ã∆¿ ã÷¿ ã‹¿ å+¿ å_¿ åt¿ å~¿ å¿ åœ¿ å‹¿ å‚¿ ç0¿ çm¿ çs¿ çö¿ ç†¿ çÚ¿ éB¿ éç¿ éì¿ é¿¿ é»¿ é ¿ éÀ¿ éÔ¿ éÛ¿ è¿ è¿ è:¿ è}¿ è∫¿ èÀ¿ ê¿ ê¿ êb¿ ê∆¿ êÃ¿ ë¿ ëL¿ ëT¿ ëU¿ ëê¿ ëñ¿ ë‡¿ í0¿ í†¿ í¶¿ íˆ¿ ì¿ ì$¿ ì%¿ ìh¿ ì≠¿ ì“¿ ìÿ¿ î'¿ îò¿ îû¿ îÓ¿ ï¿ ï¿ ïg¿ ïá¿ ïë¿ ïì¿ ïî¿ ïæ¿ ï¬¿ ñ¿ ñS¿ ñW¿ ñe¿ ñi¿ ñµ¿ ñ¡¿ ñ¸¿ ó:¿ óL¿ óÇ¿ óà¿ óÒ¿ ó˜¿ ò?¿ òè¿ òõ¿ ò°¿ ò±¿ ò∑¿ ô¿ ô¿ ôg¿ ô†¿ ô©¿ ô™¿ ôﬂ¿ ôÂ¿ öL¿ öR¿ öö¿ öÍ¿ öˆ¿ ö¸¿ õ¿ õ¿ õ`¿ õq¿ õz¿ õ{¿ õ…¿ õ˚¿ ú¿ úh¿ ún¿ ú∂¿ ù¿ ù¿ ù¿ ù(¿ ù.¿ ù|¿ ùç¿ ùñ¿ ùò¿ ùô¿ ù”¿ ù◊¿ ùÓ¿ û-¿ ûB¿ ûì¿ û°¿ û¢¿ ûË¿ ü.¿ üU¿ ü]¿ ü^¿ ü¢¿ üË¿ †/¿ †m¿ †w¿ †y¿ †z¿ †{¿ †™¿ †∂¿ †Ã¿ †“¿ °¿ °n¿ °t¿ °¿¿ °÷¿ ¢#¿ ¢|¿ ¢—¿ ¢Í¿ ¢Ú¿ ¢Û¿ £¿ £%¿ £~¿ £Ø¿ £µ¿ £ı¿ £˚¿ §S¿ §Æ¿ §¥¿ §ƒ¿ § ¿ •&¿ •J¿ •V¿ •W¿ •v¿ •|¿ •»¿ •Œ¿ ¶!¿ ¶'¿ ¶n¿ ¶t¿ ¶…¿ ¶Ë¿ ß?¿ ßE¿ ßU¿ ß[¿ ß£¿ ßÓ¿ ®¿ ®|¿ ®â¿ ®ä¿ ®÷¿ ®‹¿ ©/¿ ©Å¿ ©™¿ ©∞¿ ™¿ ™O¿ ™°¿ ™Û¿ ™˘¿ ´I¿ ´ô¿ ´Á¿ ¨7¿ ¨}¿ ¨É¿ ¨ì¿ ¨ô¿ ¨Á¿ ≠¿ ≠¿ ≠¿ ≠F¿ ≠J¿ ≠ê¿ ≠Ø¿ ≠Ω¿ ≠Ï¿ ≠Ò¿ Æ<¿ Æá¿ Æ÷¿ Ø$¿ Øs¿ Øx¿ Ø»¿ ∞¿ ∞*¿ ∞/¿ ∞w¿ ∞x¿ ∞¨¿ ∞≠¿ ∞ÿ¿ ∞˝¿ ±&¿ ±K¿ ±v¿ ±ü¿ ±…¿ ±˘¿ ≤&¿ ≤P¿ ≤Ñ¿ ≤¥¿ ≤‡¿ ≥¿ ≥¿ ≥J¿ ≥Ä¿ ≥æ¿ ≥Ù¿ ¥6¿ ¥t¿ ¥¥¿ µ ¿ µF¿ µÜ¿ µÿ¿ ∂"¿ ∂d¿ ∂ú¿ ∂›¿ ∑¿ ∑¿ ∑K¿ ∑f¿ ∑g¿ ∑ï¿ ∑È¿ ∑Ì¿ ∑Ó¿ ∏¿ ∏?¿ ∏j¿ ∏æ¿ ∏ø¿ π¿ π¿ π)¿ πD¿ πZ¿ π`¿ πd¿ πe¿ π´¿ ππ¿ πø¿ π◊¿ π¿ ∫7¿ ∫;¿ ∫[¿ ∫´¿ ∫’¿ ∫¸¿ ª@¿ ªD¿ ªE¿ ª}¿ ª≠¿ ªÆ¿ ªÁ¿ ªÌ¿ º¿ º¿ º#¿ º)¿ ºo¿ º†¿ ºË¿ ºÓ¿ Ω6¿ ΩK¿ Ω_¿ Ω®¿ Ω‘¿ Ωÿ¿ ΩÛ¿ æ¿ æD¿ æÇ¿ æÜ¿ æá¿ æø¿ ø ¿ ø¿ øM¿ øS¿ øï¿ øÊ¿ ¿7¿ ¿X¿ ¿^¿ ¿´¿ ¿Ã¿ ¿“¿ ¿˘¿ ¿ˇ¿ ¡¿ ¡¿ ¡d¿ ¡ò¿ ¡‚¿ ¡¯¿ ¬¿ ¬a¿ ¬ú¿ ¬†¿ ¬√¿ ¬ﬁ¿ √¿ √Z¿ √^¿ √_¿ √£¿ √©¿ √—¿ √Ì¿ ƒ?¿ ƒC¿ ƒf¿ ƒÅ¿ ƒ¶¿ ƒ‰¿ ƒË¿ ƒÈ¿ ≈#¿ ≈r¿ ≈Ø¿ ≈µ¿ ≈Ú¿ ∆¿ ∆Q¿ ∆U¿ ∆w¿ ∆í¿ ∆¥¿ ∆˙¿ ∆˛¿ ∆ˇ¿ «@¿ «p¿ «v¿ «®¿ «ƒ¿ »¿ »¿ »=¿ »X¿ »}¿ »ø¿ »√¿ »ƒ¿ …¿ …¿ …\¿ …ß¿ …≠¿ …Á¿ …Ì¿  ¿  ¿  z¿  Ä¿  Á¿  Ì¿ ÀT¿ ÀZ¿ À¶¿ À˜¿ Ã¿ Ã	¿ Ã¿ Ã¿ Ãn¿ Ãö¿ Ã„¿ Õ"¿ Õ@¿ Õî¿ Õò¿ ÕΩ¿ Õÿ¿ Õ˝¿ Œ@¿ ŒD¿ ŒE¿ Œ}¿ Œ¥¿ Œµ¿ œ ¿ œN¿ œô¿ œÊ¿ –4¿ –:¿ –¿ –Ö¿ –”¿ –˜¿ –˝¿ —f¿ —l¿ —’¿ —€¿ “D¿ “J¿ “ñ¿ “Á¿ “Û¿ “˘¿ ”	¿ ”¿ ”Y¿ ”t¿ ”Ω¿ ”›¿ ‘&¿ ‘*¿ ‘Q¿ ‘l¿ ‘™¿ ‘ı¿ ‘˘¿ ‘˙¿ ’J¿ ’à¿ ’é¿ ’≤¿ ’—¿ ÷¿ ÷6¿ ÷K¿ ÷l¿ ÷å¿ ÷Á¿ ◊.¿ ◊9¿ ◊?¿ ◊P¿ ◊T¿ ◊z¿ ◊ì¿ ◊Â¿ ÿ-¿ ÿu¿ ÿÇ¿ ÿœ¿ Ÿ¿ ŸS¿ Ÿ¨¿ Ÿ˝¿ ⁄¿ ⁄¿ ⁄¿ ⁄Z¿ ⁄Æ¿ ⁄˙¿ € ¿ €(¿ €u¿ €ô¿ €Û¿ €˜¿ ‹"¿ ‹=¿ ‹b¿ ‹®¿ ‹¨¿ ‹≠¿ ‹Á¿ ‹Ì¿ ›#¿ ›)¿ ›9¿ ›?¿ ›{¿ ›≥¿ ›Â¿ ﬁ-¿ ﬁD¿ ﬁt¿ ﬁx¿ ﬁñ¿ ﬁŒ¿ ﬁ“¿ ﬁ”¿ ﬂ¿ ﬂ,¿ ﬂ2¿ ﬂW¿ ﬂ]¿ ﬂÆ¿ ﬂœ¿ ‡&¿ ‡H¿ ‡L¿ ‡M¿ ‡u¿ ‡ª¿ ‡€¿ ‡˘¿ ·'¿ ·/¿ ·<¿ ·Ç¿ ·à¿ ·å¿ ·ç¿ ·»¿ ·Œ¿ ‚¿ ‚/¿ ‚5¿ ‚C¿ ‚a¿ ‚g¿ ‚}¿ ‚É¿ ‚∞¿ ‚ ¿ ‚€¿ ‚Ú¿ „@¿ „K¿ „S¿ „]¿ „c¿ „s¿ „y¿ „¥¿ „’¿ ‰,¿ ‰N¿ ‰R¿ ‰S¿ ‰{¿ ‰î¿ ‰≤¿ ‰‡¿ ‰Ë¿ ‰ı¿ Â6¿ Âå¿ Â∑¿ Â˚¿ Ê¿ Ê	¿ Ê¿ Ê¿ ÊM¿ ÊS¿ Êü¿ ÊÈ¿ Á¿ Á4¿ Á{¿ Á¿ Á†¿ ÁÍ¿ ÁÓ¿ ÁÔ¿ Ë¿ ËF¿ ËJ¿ Ëf¿ Ë´¿ ËØ¿ Ë∞¿ ËË¿ ËÓ¿ È:¿ ÈÄ¿ È≥¿ Èπ¿ Èˇ¿ Í ¿ Í&¿ Ís¿ Íø¿ Í‚¿ ÍË¿ Î/¿ Î}¿ Î§¿ Î•¿ Î±¿ Î«¿ Ï¿ Ï4¿ Ï:¿ Ïj¿ ÏÖ¿ Ï°¿ Ï ¿ ÏË¿ Ì¿ ÌB¿ ÌM¿ Ìp¿ Ìó¿ Ìº¿ ÌË¿ Ó#¿ Óx¿ Óá¿ Ó≠¿ Óµ¿ ÓÕ¿ Ó”¿ ÓÚ¿ Ô#¿ Ô;¿ ÔA¿ Ôq¿ Ôô¿ Ô±¿ Ô∑¿ ÔË¿ ¿ ,¿ 2¿ Q¿ é¿ ¶¿ ¨¿  ¿ Ò¿ Ò¿ Ò#¿ ÒR¿ Òì¿ Ò´¿ Ò±¿ ÒÀ¿ Ò˛¿ Ú¿ Ú¿ Ú;¿ Úx¿ Úê¿ Úñ¿ Ú¨¿ ÚÂ¿ Úˆ¿ Û*¿ ÛA¿ Û_¿ Ûc¿ Ûe¿ Ûf¿ Û®¿ Û¿¿ Ù¿ Ù[¿ Ù£¿ ÙÌ¿ ı¿ ı¿ ı!¿ ı¿ ıä¿ ıã¿ ı´¿ ı±¿ ˆ
¿ ˆ¿ ˆ¿ ˆ;¿ ˆA¿ ˆë¿ ˆÃ¿ ˆ›¿ ˆﬁ¿ ˆ¿ ˆˆ¿ ˜F¿ ˜î¿ ˜‡¿ ¯-¿ ¯v¿ ¯|¿ ¯Õ¿ ¯Ÿ¿ ¯ﬂ¿ ¯Ô¿ ¯ı¿ ˘T¿ ˘ô¿ ˘†¿ ˘¢¿ ˘£¿ ˘‚¿ ˘ı¿ ˙C¿ ˙ì¿ ˙©¿ ˙µ¿ ˙∂¿ ˚¿ ˚T¿ ˚j¿ ˚v¿ ˚x¿ ˚y¿ ˚Ø¿ ˚≥¿ ˚Û¿ ˚˜¿ ¸E¿ ¸]¿ ¸a¿ ¸∞¿ ¸ˇ¿ ˝F¿ ˝é¿ ˝‹¿ ˝Í¿ ˝Ó¿ ˛:¿ ˛â¿ ˛–¿ ˛‘¿ ˛‚¿ ˛Ê¿ ˇT¿ ˇ£¿ ˇ…¿ ¿ &¿ ?¿ O¿ w¿ ä¿ î¿ ≥¿ ∑¿ ∏¿ Ÿ¿ ı¿¿¿(¿)¿m¿¿¨¿≈¿…¿ ¿¿¿L¿f¿j¿k¿Ö¿“¿¿	¿Z¿u¿{¿∆¿¿`¿Ä¿ì¿¿¿Ï¿¿9¿N¿q¿â¿è¿ì¿î¿ÿ¿ﬁ¿,¿B¿]¿q¿Å¿ù¿∞¿∫¿(¿,¿-¿b¿h¿¥¿ƒ¿ ¿¿0¿Ä¿œ¿	¿	e¿	∫¿	Á¿
¿
¿
¿
k¿
ç¿
ì¿
”¿	¿'¿7¿ã¿û¿®¿ª¿ø¿¿¿Ò¿˜¿F¿ï¿Ê¿2¿~¿Ã¿¿6¿<¿ä¿≥¿π¿¿R¿h¿n¿§¿™¿∏¿”¿Ÿ¿¿P¿o¿π¿ ¿‹¿¸¿L¿ö¿¿¿ˆ¿¿"¿*¿0¿R¿Ü¿—¿¸¿?¿É¿¿¿Ÿ¿ﬂ¿¿K¿Q¿n¿à¿é¿∞¿Œ¿È¿Ò¿˜¿¿6¿<¿W¿]¿Ä¿π¿√¿…¿Ù¿¸¿¿¿Q¿ü¿√¿’¿Í¿¿-¿~¿Ã¿¿¿¿<¿X¿\¿]¿©¿Ô¿ı¿B¿å¿‹¿+¿u¿¬¿˚¿¸¿¿2¿4¿5¿O¿¿»¿„¿Ë¿6¿X¿t¿Ç¿É¿©¿™¿“¿”¿(¿^¿ú¿Ã¿÷¿ﬁ¿‚¿„¿¿|¿}¿ó¿™¿¬¿Œ¿Ê¿3¿K¿ï¿Õ¿‘¿Í¿˙¿˛¿ˇ¿ )¿ *¿ M¿ N¿ Z¿ ä¿ å¿ ç¿ ø¿ ˚¿ ¸¿!0¿!4¿!p¿!ä¿!é¿!ÿ¿"!¿"o¿"µ¿# ¿#)¿#-¿#f¿#j¿#v¿#Ç¿#π¿#˜¿$¿$b¿$≠¿$ ¿%¿%5¿%V¿%\¿%d¿%h¿%~¿%Ç¿%é¿%õ¿%“¿&¿&P¿&è¿&€¿&ı¿'D¿'å¿'≠¿'≥¿'ª¿'Õ¿(¿(3¿(9¿(w¿(ì¿(—¿(“¿)¿)¿)T¿)o¿)p¿)q¿)ö¿)†¿)Ë¿)Ó¿*:¿*O¿*Q¿*R¿*r¿*v¿*æ¿*ÿ¿*‹¿+¿+1¿+K¿+z¿+¿+»¿+„¿+Ë¿,!¿,?¿,[¿,h¿,i¿,É¿,©¿,‰¿-¿-¿-5¿-d¿-j¿-û¿-√¿.¿.H¿.I¿.q¿.w¿.ª¿.¡¿/¿/¿/Y¿/â¿/¥¿/¸¿0P¿0k¿0‡¿0Ô¿1¿18¿1z¿1Ü¿1é¿1ñ¿1Ø¿1Õ¿1”¿1¿1Ù¿1ı¿21¿2å¿2ç¿2›¿3 ¿3)¿3+¿3,¿3O¿3S¿3¢¿3Ú¿4@¿4c¿4g¿4π¿5¿5@¿5D¿5è¿5Ÿ¿6)¿6x¿6ƒ¿7¿7d¿7¨¿7Ë¿7Ï¿86¿8Ä¿8–¿9¿9¿9]¿9i¿9é¿9¢¿9∂¿9À¿9È¿9Ù¿:@¿:å¿:•¿:Ê¿;¿;¿;V¿;~¿;Ñ¿;à¿;ú¿;¬¿;‡¿< ¿<¿<¿<¿<Q¿<U¿<§¿<Ú¿=9¿=É¿=∞¿=≤¿=≥¿=Í¿>8¿>q¿>´¿>»¿> ¿>À¿?¿?¿?V¿?d¿?h¿?¥¿@¿@D¿@H¿@ì¿@›¿A-¿A|¿A»¿B¿Bh¿B∞¿BÏ¿B¿C:¿CÑ¿C‘¿D¿D,¿D@¿DM¿D[¿Dq¿Dî¿D•¿Dπ¿DŒ¿DÏ¿DÒ¿E¿EB¿EF¿Ed¿Eö¿Eû¿Eü¿E«¿EÏ¿F*¿F:¿FP¿Fh¿FÑ¿F°¿F™¿F´¿F»¿G¿G8¿GB¿Gã¿G∑¿G¡¿G…¿G ¿G€¿Gˆ¿H¿H@¿HJ¿Hh¿H¨¿H«¿H„¿HÓ¿I¿I0¿IP¿IQ¿I}¿Iâ¿Iè¿Ië¿Ií¿Iﬂ¿IÔ¿IÛ¿J*¿J>¿Jà¿Jé¿Jﬂ¿K.¿K}¿K®¿KÆ¿KÊ¿KÒ¿KÚ¿L4¿L:¿Lã¿L‹¿L‚¿M¿M&¿M(¿M)¿MM¿MQ¿M_¿Mc¿M≤¿Mÿ¿MÌ¿N!¿N'¿Nu¿N¿¿O¿O¿O¿O¿Ol¿OÜ¿Oî¿O„¿P	¿P¿P]¿P´¿P≈¿PÀ¿P€¿Q¿Q¿Qj¿Qp¿Qæ¿R	¿R>¿RG¿Rí¿RÀ¿R—¿S¿Ss¿Sy¿Sâ¿S∆¿SÕ¿T¿T¿TU¿T†¿T·¿TÁ¿T˜¿T˝¿UF¿U_¿Ut¿Uv¿Uw¿U»¿U‚¿V¿Va¿V}¿Vô¿V¨¿V≠¿V˝¿W ¿W&¿Wv¿Wø¿X¿XY¿Xs¿Xy¿X»¿Y¿YN¿Y}¿Y¿YÄ¿Y≤¿Y∂¿Y˚¿Yˇ¿ZB¿ZÅ¿Zï¿Zô¿Zﬂ¿[
¿[¿[M¿[ê¿[∏¿[º¿\ ¿\9¿\S¿\Å¿\©¿\≈¿\‚¿]¿]¿]b¿]ß¿]≥¿]¥¿]‹¿]‚¿^/¿^~¿^°¿^«¿^Ê¿^˝¿_¿_2¿_3¿_q¿_w¿_º¿` ¿`A¿`B¿`r¿`Ø¿`∞¿`Â¿a¿a¿af¿a∞¿a±¿a¯¿b¿b=¿b>¿bÖ¿b∑¿c¿c¿cE¿cÖ¿cî¿c˙¿c˚¿d>¿dÖ¿d ¿d◊¿eM¿eN¿eì¿e⁄¿eÈ¿fQ¿fR¿fó¿fﬁ¿g#¿g8¿g∞¿g±¿g˜¿h;¿hÄ¿h«¿hÏ¿iH¿iI¿iè¿i”¿j¿j_¿j•¿jÕ¿k9¿k:¿k}¿kü¿k•¿kË¿l¿l¿lY¿lô¿l‡¿m$¿mk¿mØ¿m›¿m„¿n(¿n^¿n∞¿n–¿o/¿o3¿ow¿o“¿o”¿p"¿pg¿pm¿pº¿q¿qI¿qp¿qv¿q¬¿r¿r]¿rc¿rÜ¿rß¿r¬¿r›¿r¯¿rˇ¿s#¿sG¿sã¿s±¿sµ¿s¯¿t;¿tx¿ty¿tz¿t…¿u¿u¿uH¿uN¿uù¿uÎ¿v.¿vx¿v~¿v»¿w¿wc¿wz¿w™¿wÀ¿wÊ¿x¿x¿x#¿xL¿xp¿xº¿xÙ¿x¯¿yC¿y¿yπ¿yˆ¿y˜¿z>¿zU¿zq¿zë¿zÕ¿z—¿{.¿{/¿{q¿{ü¿{•¿{˜¿|E¿|a¿|Å¿|Ω¿|¡¿}¿}¿}g¿}§¿}„¿~$¿~j¿~Æ¿~Ú¿~˛¿?¿_¿≤¿∂¿˚¿ÄF¿ÄG¿Äô¿Äß¿Ä≠¿Ä¸¿Å!¿Å'¿Ån¿Å£¿Åø¿ÅÒ¿Åı¿ÇB¿ÇC¿ÇÖ¿Ç»¿Çÿ¿Ç˜¿É¿É=¿ÉA¿É}¿É~¿Éƒ¿É ¿Ñ¿Ñe¿Ñê¿Ñ”¿Ö¿Ö7¿ÖR¿Öz¿Öπ¿Ö∆¿ÖÚ¿Ö¯¿Ö¸¿ÜD¿Ü¥¿Üµ¿Ü˚¿á:¿áw¿á}¿á ¿à¿àF¿àê¿à–¿àÙ¿â¿â7¿â|¿ââ¿âº¿â¬¿â∆¿ä¿äò¿äô¿äﬁ¿ã¿ãC¿ãD¿ãâ¿ãÕ¿ãË¿å¿å¿å]¿å™¿å…¿åœ¿ç¿ç¿çb¿çÇ¿ç•¿çœ¿ç”¿é¿é¿éQ¿éÄ¿éû¿é¬¿é‚¿è
¿è¿è¿èf¿èg¿èß¿è◊¿èˇ¿ê%¿êE¿êd¿êu¿êy¿ê«¿ê»¿ê˝¿ë¿ëS¿ë†¿ëÎ¿í*¿í0¿íÅ¿í–¿ì"¿ìo¿ìπ¿î¿î¿îZ¿îo¿îö¿îÿ¿î‹¿ï¿ï¿ï]¿ïp¿ïv¿ï∆¿ñ¿ñN¿ñó¿ñ≤¿ñÕ¿ñÎ¿ó¿ó1¿ó7¿óÆ¿ó≤¿óˆ¿ó˜¿òF¿òw¿ò}¿ò…¿ô¿ô`¿ôØ¿ô˘¿ö1¿ö7¿öÇ¿öœ¿õ¿õL¿õR¿õ¢¿õÔ¿ú?¿úÇ¿úœ¿ù¿ùk¿ùª¿û
¿û¿û^¿û≠¿û·¿ûÁ¿ü8¿üÉ¿üæ¿üÎ¿üÔ¿üÒ¿üÚ¿†4¿†8¿†F¿†§¿†¥¿†Â¿†Î¿°¿°=¿°]¿°{¿°|¿°¡¿°«¿¢¿¢H¿¢Ö¿¢Õ¿¢—¿¢“¿¢Ò¿¢˜¿£J¿£é¿£ß¿£®¿£’¿£€¿§,¿§~¿§ö¿§±¿§≤¿§‚¿§Ë¿•8¿•á¿•£¿•©¿•˜¿¶F¿¶ï¿¶„¿¶Ù¿ß9¿ßr¿ßt¿ßu¿ßΩ¿ß¡¿®¿®^¿®§¿®®¿®Ó¿®Ú¿©>¿©ç¿©´¿©Ø¿©˘¿™I¿™j¿™™¿™Ÿ¿´ ¿´!¿´I¿´J¿´V¿´à¿´ä¿´ã¿´⁄¿´Ù¿¨/¿¨y¿¨z¿¨ï¿¨≤¿¨≥¿¨ø¿¨⁄¿≠¿≠.¿≠F¿≠©¿Æ¿Æy¿ÆÇ¿Æà¿Æ¢¿Æ¶¿Æß¿Æ≥¿Æ«¿ÆÓ¿Ø¿Ø1¿Ø7¿ØO¿Øa¿Øe¿Øg¿Øh¿Øß¿Ø´¿ØÛ¿∞>¿∞å¿∞∞¿∞¥¿±¿±Q¿±ù¿±Ì¿≤;¿≤I¿≤\¿≤z¿≤ö¿≤ÿ¿≥¿≥M¿≥N¿≥Ñ¿≥õ¿≥ú¿≥¡¿≥«¿¥¿¥[¿¥´¿¥ ¿¥·¿¥‚¿µ¿µ¿µc¿µ™¿µ¯¿∂G¿∂Ä¿∂Ü¿∂‘¿∑$¿∑s¿∑¨¿∑∆¿∑«¿∑Ê¿∑Á¿∑Ë¿∏8¿∏_¿∏e¿∏¥¿π¿π¿π¿πT¿πZ¿π†¿π“¿∫¿∫¿∫¿∫a¿∫g¿∫©¿∫Ì¿ª;¿ªò¿ªú¿ªù¿ª©¿º¿º¿º¿ºK¿ºy¿ºû¿º¢¿ºı¿ºˆ¿Ω¿Ωê¿Ω≤¿Ω∂¿Ω˘¿Ω˙¿æ>¿æ¥¿æ˜¿ø2¿øN¿øa¿øn¿øÑ¿ø™¿øœ¿øÿ¿øﬁ¿ø‚¿¿>¿¿?¿¿ü¿¡¿¡5¿¡â¿¡ö¿¡û¿¬,¿¬-¿¬Q¿¬«¿¬Î¿¬Ô¿√1¿√2¿√]¿√b¿√∑¿√·¿√˘¿ƒ%¿ƒ5¿ƒR¿ƒX¿ƒi¿ƒm¿ƒ´¿ƒ¨¿ƒ¯¿ƒ˛¿≈?¿≈_¿≈a¿≈b¿≈ó¿≈”¿≈‰¿∆¿∆¿∆j¿∆≠¿∆∑¿∆∏¿«¿«R¿«Ä¿«â¿«ä¿«◊¿»(¿»k¿»t¿»u¿»≈¿»”¿»‹¿»ﬁ¿»ﬂ¿…,¿…|¿…é¿…í¿…„¿…ˆ¿ A¿ G¿ {¿ Å¿ “¿ ÿ¿À'¿Àu¿À≈¿À÷¿À‹¿Ã+¿Ã1¿ÃW¿Ã]¿Ãm¿Ãs¿Ã¿¿ÃŸ¿ÃÍ¿Ã˚¿Õ¿Õ7¿Õ8¿ÕR¿Õi¿Õj¿Õ†¿ÕÎ¿Œ¿ŒK¿ŒL¿ŒX¿Œ{¿Œö¿Œº¿Œﬂ¿Œ„¿Œ‰¿Œ¿œ"¿œ#¿œ/¿œÄ¿œÇ¿œÉ¿œ‘¿–#¿–q¿–Ω¿–Ó¿–Ú¿—;¿—H¿—s¿—¿¿“¿“U¿“[¿“¨¿“˙¿”'¿”b¿”z¿”ö¿”≤¿”Œ¿”œ¿‘¿‘c¿‘i¿‘¥¿‘‹¿‘‚¿‘¿’¿’N¿’}¿’¨¿’€¿’Â¿’Î¿÷:¿÷Ü¿÷å¿÷ñ¿÷÷¿÷Ì¿◊¿◊¿◊2¿◊<¿◊F¿◊L¿◊^¿◊d¿◊Ö¿◊ã¿◊ï¿◊”¿◊Ô¿ÿ¿ÿ'¿ÿC¿ÿM¿ÿW¿ÿ]¿ÿ‰¿ÿÍ¿ÿÙ¿Ÿ1¿ŸT¿Ÿw¿Ÿö¿ŸΩ¿Ÿ«¿Ÿ—¿Ÿ◊¿⁄`¿⁄f¿⁄p¿⁄±¿⁄◊¿⁄˝¿€#¿€I¿€S¿€]¿€ç¿€§¿€ø¿€Ÿ¿€˜¿€¯¿‹D¿‹T¿‹|¿‹ì¿‹Æ¿‹∆¿‹Ô¿‹¿›>¿›Y¿›Å¿›ò¿›≥¿›À¿›Ù¿›ı¿ﬁ¿ﬁ+¿ﬁJ¿ﬁ]¿ﬁ^¿ﬁó¿ﬁÃ¿ﬂ¿ﬂY¿ﬂ¢¿ﬂ£¿ﬂƒ¿ﬂ–¿‡¿‡¿‡G¿‡\¿‡s¿‡ß¿‡æ¿‡»¿‡¿·	¿·(¿·?¿·I¿·ñ¿·¿¿·‰¿‚¿‚=¿‚r¿‚Å¿‚√¿‚…¿‚Õ¿‚Œ¿‚⁄¿‚˝¿„'¿„;¿„[¿„{¿„≤¿„‘¿„ˇ¿‰¿‰¿‰¿‰`¿‰a¿‰m¿‰é¿‰£¿‰∫¿‰Û¿Â¿Â;¿Â_¿Âë¿Âµ¿ÂÁ¿Âˆ¿Ê¿Ê!¿Ê%¿Ê&¿Ê2¿ÊH¿Ê]¿Êt¿Ê≠¿Ê∆¿Êı¿Á¿ÁK¿Áo¿Á°¿Á∞¿ËM¿ËS¿ËW¿ËY¿ËZ¿Ëò¿Ëú¿ËÏ¿È7¿Èâ¿Èü¿È’¿È˜¿Í¿ÍN¿Íb¿Í£¿Íß¿Í®¿ÍÃ¿ÍÎ¿Î%¿Î9¿Îr¿Îv¿Î•¿Îƒ¿Ï	¿Ï¿Ï;¿Ï?¿Ï@¿Ïo¿Ïé¿Ï”¿ÏÁ¿Ì¿Ì	¿Ì
¿ÌX¿Ì~¿Ìõ¿Ìú¿Ì‘¿Ó¿Óf¿Ó≤¿Ó˛¿Ô ¿Ô¿Ô4¿Ô8¿ÔF¿ÔJ¿Ôô¿ÔÊ¿5¿]¿©¿‘¿Ò¿Ò-¿Òú¿Ò∏¿Ò‘¿ÒÚ¿ÚK¿ÚO¿ÚP¿Úî¿Úö¿ÚË¿Û2¿Ûd¿Û∞¿ÛÕ¿Û¿Ù¿ÙL¿ÙÆ¿Ù≤¿Ù≥¿Ù˝¿ı¿ıR¿ıâ¿ıÆ¿ˆ
¿ˆ7¿ˆ¿ˆÉ¿ˆÑ¿ˆ’¿˜"¿˜I¿˜J¿˜ì¿˜À¿˜Î¿˜Ì¿˜Ó¿¯ ¿¯k¿¯l¿¯Ü¿¯´¿¯¨¿¯Õ¿˘¿˘¿˘T¿˘U¿˘a¿˘§¿˘•¿˘±¿˘ı¿˘ˆ¿˙¿˙%¿˙O¿˙c¿˙ä¿˙∫¿˙Ï¿˙¿˙Ò¿˙˝¿˚>¿˚@¿˚A¿˚y¿˚›¿˚ﬁ¿˚ı¿¸¿¸'¿¸(¿¸<¿¸~¿¸ä¿¸¡¿¸¬¿¸›¿¸Ù¿˝¿˝L¿˝}¿˝®¿˝Æ¿˝≤¿˝≥¿˝ø¿˛	¿˛
¿˛¿˛a¿˛b¿˛n¿˛ë¿˛ª¿˛œ¿˛¸¿ˇ¿ˇ@¿ˇg¿ˇk¿ˇl¿ˇx¿ˇ™¿ˇ¨¿ˇ≠¿ˇ‡¿ 1¿ 2¿ S¿ t¿ u¿ í¿ ÿ¿ ‰¿¿¿(¿í¿ì¿ü¿ı¿ˆ¿¿%¿O¿c¿ã¿∑¿‰¿Ë¿È¿ı¿1¿3¿4¿s¿w¿«¿¿^¿î¿Ã¿Õ¿	¿>¿\¿ü¿≥¿˜¿˚¿W¿X¿ú¿¢¿¿:¿k¿â¿Ã¿Ó¿,¿@¿z¿~¿⁄¿€¿	¿	@¿	^¿	°¿	µ¿	˚¿
¿
#¿
|¿
}¿
∞¿
‰¿¿E¿Y¿Ø¿¿?¿C¿¥¿¿(¿E¿G¿H¿é¿√¿Û¿=¿Y¿u¿É¿Ö¿Ü¿€¿Ù¿¯¿E¿ì¿‡¿0¿4¿â¿›¿6¿é¿·¿
¿¿h¿ç¿ë¿ü¿£¿Á¿1¿Å¿´¿ı¿=¿d¿±¿ˇ¿¿T¿d¿æ¿ƒ¿¿V¿\¿¥¿‘¿⁄¿=¿†¿¿¿¿]¿c¿ª¿¿E¿K¿•¿¿¿n¿‘¿9¿E¿F¿ô¿ü¿˜¿O¿•¿¿¿∆¿ ¿v¿ã¿ë¿ı¿Y¿º¿∆¿«¿¿¿g¿¬¿“¿ÿ¿ 1¿ Q¿ W¿ ∫¿!¿!¿!à¿!ä¿!ã¿!º¿!‰¿"¿"=¿"^¿"o¿"q¿"r¿"¶¿"¿¿"Ë¿#"¿#K¿#i¿#å¿#∞¿#”¿#Ú¿$¿$¿$&¿$(¿$)¿$f¿$à¿$™¿$◊¿$¿%	¿%"¿%;¿%L¿%N¿%O¿%ó¿%õ¿%Ì¿& ¿&¿&¿&¿&å¿&ê¿&∞¿&±¿&Ê¿&Á¿'¿'"¿'q¿'¬¿(¿(A¿(G¿(ñ¿(Ã¿(“¿)5¿)ò¿)¸¿*b¿*h¿*≥¿*˘¿+¿+¿+g¿+∫¿+˙¿,¿,¿,-¿,G¿,e¿,ç¿,ß¿,Ã¿,Ô¿-¿-/¿-k¿-~¿-´¿-Ô¿.,¿.î¿.®¿/¿/¿/û¿/ü¿/Í¿0
¿0¿0_¿0∞¿0˙¿1/¿15¿1É¿1π¿1ø¿2"¿2Ö¿2È¿3O¿3U¿3¶¿3Ï¿4¿4¿4Z¿4≠¿4Ì¿4Û¿5?¿5ç¿5◊¿6%¿6t¿6ô¿6¨¿6ø¿6“¿6Ï¿7
¿72¿7L¿7_¿7|¿7£¿7¬¿7„¿8¿82¿8_¿8ú¿9¿9¿9j¿9∆¿:
¿: ¿:ä¿:ó¿; ¿;¿;¢¿;®¿;¨¿<[¿=C¿=D¿=î¿=≤¿=∏¿>¿>Q¿>å¿>í¿>·¿?2¿?|¿?±¿?∑¿@¿@H¿@N¿@∞¿A¿Au¿A⁄¿A‡¿B/¿B¿B¢¿B®¿Bı¿CH¿Cà¿Cö¿C≠¿C«¿CÂ¿D¿D*¿DM¿Dg¿Dé¿D≠¿DŒ¿DÒ¿E¿E8¿Et¿Eá¿E¥¿EÒ¿FY¿Fm¿F‚¿FÊ¿Gß¿G®¿G˙¿H¿H6¿Hé¿Hõ¿H…¿I%¿I+¿I/¿I1¿I2¿Ip¿Iì¿I„¿J/¿J{¿JÃ¿K¿Kp¿Kö¿K∂¿L¿L&¿L-¿Lo¿Là¿L°¿Læ¿LŒ¿LÏ¿M*¿M>¿Mõ¿Mü¿M◊¿N^¿N`¿Na¿N—¿N’¿O¿OP¿OT¿OÃ¿O–¿P	¿P
¿PN¿PT¿P¢¿PÒ¿Q¿Q!¿Qù¿Q‚¿R¿R,¿RI¿RP¿R≥¿R∑¿R∏¿R‘¿RÍ¿S	¿S&¿S-¿SA¿Sw¿SÑ¿S£¿S™¿SÕ¿T ¿T)¿T-¿T.¿TS¿Ts¿Tt¿T∞¿T˙¿T˚¿UF¿U`¿Uf¿U±¿UÂ¿UÎ¿V5¿Vv¿V|¿VÕ¿W¿WP¿WV¿Wâ¿Wè¿Wô¿W∆¿WÚ¿X¿XL¿XV¿X\¿X´¿XÙ¿X˙¿YX¿Y^¿Yâ¿Yè¿Yö¿Y™¿YΩ¿Y¯¿Y˛¿ZY¿Zú¿Z¢¿Z’¿Z€¿ZÂ¿[¿[G¿[Q¿[W¿[†¿[¨¿[≤¿[˝¿\:¿\L¿\l¿\î¿\õ¿\º¿\Û¿\˘¿]/¿]J¿]æ¿]ƒ¿^)¿^w¿^}¿^†¿^…¿^÷¿_¿_¿_K¿_ê¿_≈¿_ÿ¿_‹¿_›¿_Ì¿`	¿`(¿`O¿`t¿`v¿`w¿`ë¿`∏¿a¿a¿a#¿aa¿at¿aá¿a†¿aª¿aÃ¿aÕ¿aÔ¿b¿b?¿b@¿bL¿bo¿bè¿b¢¿bÃ¿b‡¿c¿c*¿co¿cæ¿c¬¿c√¿cœ¿d1¿d3¿d4¿dÖ¿dâ¿d¨¿dÛ¿e¿eM¿eZ¿e[¿e©¿e∫¿eª¿f¿f*¿f,¿f-¿fe¿fó¿fﬁ¿f‰¿g"¿gm¿gs¿gƒ¿gÌ¿gÛ¿h.¿hW¿hç¿hÿ¿hﬁ¿i+¿iU¿iö¿i¶¿iª¿iŸ¿iˇ¿j¿j0¿jM¿jp¿j≈¿k¿kY¿k§¿k˜¿lS¿lT¿lö¿lÍ¿m¿m%¿mY¿mz¿mà¿mø¿m‰¿mÚ¿mÛ¿na¿n£¿nß¿n®¿n¯¿o,¿oh¿o¢¿o„¿oÈ¿p¿p¿pf¿p´¿p∆¿pÃ¿q¿qf¿qy¿q¥¿q›¿r¿r^¿rd¿rµ¿s ¿s¿s¿sZ¿sÑ¿s…¿sŸ¿sÓ¿t¿t0¿tG¿t`¿t}¿t†¿tı¿uL¿uç¿uÿ¿v+¿vá¿và¿v⁄¿w¿w ¿w!¿wD¿w[¿w¿w≠¿wÕ¿x¿x	¿x
¿xX¿x\¿x}¿x¡¿x“¿xÙ¿x˙¿yH¿yí¿yÀ¿y—¿z¿zm¿zÉ¿zç¿zé¿z»¿zŒ¿{¿{¿{\¿{r¿{{¿{|¿{±¿{∑¿{˘¿|¿|¿|¿|¿|g¿|s¿|w¿|ñ¿|§¿|‹¿|Í¿|Î¿}$¿}1¿}3¿}4¿}i¿}m¿}¥¿}¯¿~9¿~=¿~Ü¿~÷¿¿<¿@¿ê¿Ÿ¿Ä¿Ä¿Ä_¿Äû¿ÄŒ¿Å¿Å/¿Å5¿Å~¿Å∆¿Ç¿Çe¿Ç≤¿Çı¿Ç˚¿ÉB¿ÉX¿Ét¿É»¿ÉÊ¿ÑC¿Ñ]¿Ñ|¿Ñõ¿Ñı¿Ñ˘¿Ö'¿ÖH¿Öh¿Öä¿Ö ¿ÖÀ¿Ü)¿ÜÖ¿Ü ¿ÜË¿ÜÈ¿á1¿á7¿ác¿ái¿áy¿á¿á–¿à¿à)¿à*¿à{¿àÃ¿â¿âd¿âs¿ây¿â≈¿ä¿äd¿ä¨¿ä˙¿ãD¿ãJ¿ãó¿ãù¿ã¡¿ã«¿å¿åa¿å±¿ç¿ç&¿ç,¿çz¿ç√¿é¿éb¿é∞¿è ¿èH¿èu¿è{¿è≈¿èﬁ¿è‰¿èÚ¿ê¿êG¿ê^¿ê¢¿êÀ¿ë¿ëC¿ë]¿ëw¿ë¿ëâ¿ëè¿ëﬁ¿í,¿íz¿íò¿íû¿í¨¿íŸ¿ì¿ìD¿ì[¿ìü¿ì⁄¿î¿î1¿î9¿îC¿îI¿îö¿î‡¿ï*¿ï0¿ï>¿ïk¿ïÇ¿ï⁄¿ñ¿ñ1¿ñH¿ñ≠¿ñÍ¿ó¿ó¿ó¿ó¿óg¿ó∞¿ò¿ò9¿ò?¿òc¿òi¿ò®¿òÆ¿ò¸¿ôJ¿ôõ¿ôÊ¿ö5¿öÉ¿öŒ¿õ¿õj¿õª¿õ÷¿õ‹¿õÏ¿õÚ¿úB¿úd¿ú¨¿ú¬¿ú¿ù¿ù%¿ùa¿ùn¿ùí¿ùŸ¿û¿û¿û¿ûb¿ûê¿ûØ¿ûÕ¿ûÌ¿ü¿ü=¿ü~¿ü¿üø¿üﬁ¿ü‰¿†#¿†)¿†w¿†ª¿†Â¿†Ê¿°)¿°n¿°µ¿°Í¿°¿¢¿¢H¿¢I¿¢ô¿¢È¿£+¿£,¿£{¿£≈¿£÷¿£‹¿§"¿§4¿§s¿§t¿§Ø¿§∞¿•¿•;¿•<¿•ç¿•Ÿ¿¶(¿¶Q¿¶â¿¶ä¿¶⁄¿ß¿ß=¿ßZ¿ßx¿ß∂¿ßœ¿ß”¿®¿®¿®d¿®{¿®Å¿®≈¿®À¿©¿©e¿©é¿©î¿©ﬁ¿©Ú¿™N¿™n¿™ä¿™´¿´¿´¿´%¿´B¿´a¿´Å¿´û¿´€¿´‹¿¨*¿¨I¿¨O¿¨ì¿¨ô¿¨Î¿≠3¿≠É¿≠æ¿≠‡¿Æ¿Æ3¿Æ7¿Æâ¿Æä¿Æÿ¿ÆÏ¿ÆÚ¿Ø6¿Ø<¿Øé¿Ø÷¿Øˇ¿∞7¿∞w¿∞ò¿∞∫¿∞æ¿±¿±¿±J¿±ñ¿±≥¿±Ë¿≤¿≤"¿≤P¿≤T¿≤õ¿≤ú¿≤Î¿≥3¿≥9¿≥á¿≥º¿≥‹¿≥¸¿¥¿¥_¿¥c¿¥¿¥õ¿¥∑¿¥”¿µ¿µ@¿µA¿µp¿µv¿µª¿µ÷¿µˆ¿∂¿∂>¿∂B¿∂†¿∂°¿∂Ò¿∑,¿∑V¿∑v¿∑ë¿∑Õ¿∑˘¿∑˝¿∏¿∏8¿∏W¿∏w¿∏•¿∏‰¿∏Â¿π6¿πx¿π•¿π«¿π‚¿∫$¿∫(¿∫M¿∫|¿∫Ω¿∫æ¿ª¿ª^¿ªÑ¿ªä¿ªœ¿º
¿º,¿ºN¿ºi¿º¡¿º≈¿ºÎ¿Ω¿ΩA¿ΩÑ¿ΩÖ¿Ω“¿æ#¿æF¿æp¿æê¿æ´¿æÁ¿ø¿ø¿ø5¿øR¿øq¿øë¿øø¿ø˛¿øˇ¿¿J¿¿ú¿¿Î¿¡¿¡H¿¡g¿¡Ç¿¡ƒ¿¡»¿¡Â¿¬¿¬$¿¬T¿¬ó¿¬ò¿¬‘¿¬⁄¿√¿√g¿√±¿ƒ¿ƒV¿ƒ¶¿ƒ“¿ƒÿ¿≈0¿≈è¿≈Ø¿≈ ¿∆¿∆S¿∆W¿∆t¿∆ê¿∆Æ¿∆Õ¿∆¿«¿«3¿«`¿«ù¿«û¿«”¿«Ÿ¿»"¿»k¿»ó¿»¡¿…¿…¿…N¿…R¿…n¿…ú¿…€¿…‹¿ *¿ Å¿ Ω¿ ˇ¿À#¿À>¿À™¿ÀÆ¿ÀŒ¿ÀÍ¿Ã¿Ã5¿Ã[¿Ã†¿Ã°¿Ã¿Õ<¿ÕB¿Õë¿Õ™¿Õ∞¿Õ¸¿ŒE¿ŒX¿Œù¿Œﬂ¿Œ˛¿œ¿œ8¿œY¿œv¿œí¿œ∞¿œœ¿œÏ¿–¿–&¿–E¿–h¿–à¿–∑¿–ª¿–ﬂ¿—¿—*¿—Q¿—y¿—ü¿—ƒ¿—Î¿“¿“F¿“p¿“Ω¿“æ¿”¿”¿”Y¿”ß¿”Ù¿‘A¿‘Ñ¿‘ä¿‘ÿ¿’%¿’s¿’∫¿’À¿÷¿÷U¿÷w¿÷ñ¿÷±¿÷“¿÷Ú¿◊¿◊2¿◊T¿◊q¿◊ç¿◊´¿◊ ¿◊Ì¿ÿ¿ÿ<¿ÿ@¿ÿd¿ÿç¿ÿµ¿ÿﬂ¿Ÿ
¿Ÿ0¿ŸU¿Ÿ|¿Ÿ§¿Ÿ◊¿⁄¿⁄N¿⁄O¿⁄ñ¿⁄Ø¿⁄’¿€¿€6¿€:¿€|¿€}¿€…¿€Ÿ¿€ﬂ¿‹*¿‹7¿‹=¿‹â¿‹÷¿›¿›¿›i¿›µ¿›ª¿ﬁ¿ﬁY¿ﬁ¶¿ﬁ¨¿ﬁˆ¿ﬂB¿ﬂè¿ﬂ ¿ﬂÈ¿‡¿‡?¿‡C¿‡D¿‡â¿‡è¿‡÷¿‡‹¿‡Ï¿‡Ú¿·B¿·[¿·¶¿·≈¿··¿·¸¿‚U¿‚Y¿‚Z¿‚ü¿‚•¿‚ı¿„B¿„H¿„X¿„^¿„¨¿„ ¿‰¿‰6¿‰R¿‰m¿‰ç¿‰ÿ¿Â¿Â#¿Â$¿ÂT¿Â{¿Âù¿Â‡¿Â·¿Ê¿Ê¿Ê_¿Ê°¿ÊÔ¿Á'¿Áq¿Á±¿Á“¿Á˜¿ËG¿Ë|¿ËÇ¿Ë©¿ËØ¿Ëø¿È¿È\¿ÈÉ¿È’¿Í ¿Í!¿Íi¿ÍÑ¿Í£¿ÍÓ¿ÍÚ¿Î¿Î>¿Îp¿Î∑¿Î∏¿Î¸¿Ï¿ÏS¿Ï¨¿Ïˇ¿ÌS¿Ìã¿Ìë¿Ì·¿Ó2¿ÓÅ¿Ó”¿Ô#¿Ôw¿Ô√¿Ô…¿¿j¿ø¿Ò¿ÒF¿Òö¿ÒË¿Ú,¿Ú2¿ÚÖ¿Ú‘¿Û¿Ûm¿Û¬¿Û»¿Ù¿Ùm¿Ù∂¿Ùº¿ı¿ı(¿ı.¿ı<¿ıQ¿ıd¿ı|¿ıî¿ıú¿ı¢¿ı–¿ˆ)¿ˆG¿ˆh¿ˆn¿ˆÄ¿ˆØ¿ˆ–¿˜¿˜5¿˜_¿˜~¿˜ö¿˜◊¿˜ı¿¯¿¯Y¿¯Ö¿¯±¿¯¬¿¯◊¿˘¿˘H¿˘o¿˘y¿˘¿˘ã¿˘ì¿˘ù¿˘£¿˘¸¿˙¿˙¿˙%¿˙8¿˙P¿˙h¿˙{¿˙î¿˙ú¿˙¢¿˙–¿˚)¿˚G¿˚h¿˚n¿˚Ä¿˚Ø¿˚–¿¸¿¸5¿¸_¿¸ä¿¸¶¿¸„¿˝¿˝¿˝e¿˝ë¿˝Ω¿˝Œ¿˝„¿˛¿˛T¿˛j¿˛ò¿˛Ã¿˛¯¿ˇ¿ˇ¿ˇ¿ˇ¿ˇ&¿ˇ,¿ˇu¿ˇ¿¿ˇÛ¿ˇ˘¿ 	¿ ¿ ]¿ t¿ í¿ ¡¿ ‰¿
¿1¿R¿r¿¥¿‘¿Ô¿2¿M¿N¿v¿û¿È¿4¿ú¿ù¿‰¿#¿$¿N¿n¿ì¿∏¿›¿¿5¿W¿ç¿√¿˜¿+¿Q¿v¿ù¿≈¿À¿Ã¿5¿v¿Æ¿Ø¿ø¿¿d¿k¿o¿p¿¥¿∫¿	¿	d¿	∑¿
¿
]¿
Ø¿
Ê¿
Ï¿<¿Ñ¿ä¿€¿¿F¿L¿ö¿‰¿Í¿6¿É¿”¿Ÿ¿4¿E¿K¿Y¿n¿Å¿ô¿±¿π¿ø¿Ì¿F¿d¿Ö¿ã¿ù¿Ã¿¿k¿º¿ÿ¿¿g¿ü¿€¿¿+¿[¿É¿â¿‚¿=¿ó¿Ÿ¿¿1¿n¿´¿∑¿ÿ¿3¿=¿C¿O¿W¿a¿g¿¿¿∆¿‘¿È¿¸¿¿,¿?¿X¿`¿f¿î¿Ì¿¿,¿2¿D¿s¿√¿¿c¿¿ƒ¿¿L¿Ñ¿¿¿È¿¿@¿h¿n¿…¿ ¿{¿ÿ¿#¿i¿í¿¨¿Á¿¿¿c¿ç¿∑¿∆¿˝¿4¿i¿û¿§¿˛¿X¿∞¿˜¿ &¿ 2¿ S¿ æ¿ »¿ Œ¿ ⁄¿ ‚¿ Ï¿ Ú¿!¿!¿!U¿!j¿!ã¿!∫¿!·¿"¿"2¿"V¿"y¿"ª¿"ﬁ¿"˘¿#*¿#E¿#F¿#n¿#ô¿#Á¿$¿$a¿$õ¿%¿%L¿%M¿%]¿%≤¿%¸¿&¿&¿&¿&7¿&]¿&á¿&ß¿&‘¿&˘¿'¿'?¿'É¿'Ñ¿'—¿'◊¿('¿(<¿(B¿(h¿(¿¿) ¿)¿)D¿)à¿)å¿)™¿)»¿)Ì¿*6¿*8¿*9¿*Å¿*Ö¿*π¿*Ω¿+¿+F¿+à¿+¢¿+”¿,¿,9¿,?¿,u¿,ë¿,†¿,°¿,À¿,—¿- ¿-o¿-∏¿-æ¿.
¿.N¿.¿.ó¿.∫¿.Ó¿/¿/T¿/q¿/ã¿/ú¿/¿¿/ ¿/‘¿/€¿/ﬂ¿/‡¿0A¿0B¿0í¿0µ¿0»¿0‡¿0¿1¿1¿1%¿15¿19¿1:¿1f¿1g¿1h¿1Ç¿1»¿1Œ¿2¿22¿2M¿2a¿2q¿2ç¿2†¿2™¿3¿3¿3¿3h¿3n¿3ø¿3Ò¿44¿46¿47¿4~¿4Ç¿4«¿5¿5E¿5Ü¿5Õ¿5È¿6¿6-¿6i¿6j¿6•¿6´¿6Ô¿76¿7m¿7≤¿7Ó¿8¿8¿8I¿8O¿8ö¿8Í¿9/¿9J¿9c¿9ß¿9–¿9Ï¿:¿:¿:3¿:7¿:8¿:à¿:â¿:ú¿:û¿:ü¿:¥¿:∏¿:Ù¿;¿;¿;#¿;n¿;π¿;”¿;Ÿ¿<¿< ¿<o¿<à¿<ô¿<«¿<Ê¿=¿=>¿=}¿=“¿=”¿>¿>'¿>Q¿>|¿>£¿> ¿>Ù¿>ı¿?%¿?+¿?}¿?†¿?µ¿?∂¿?ı¿?˚¿@I¿@ï¿@◊¿@Ó¿@Ô¿AA¿A\¿A]¿Aè¿Aï¿A»¿AŒ¿A˚¿Bn¿B§¿Bÿ¿B‹¿B›¿C¿C¿CR¿Cé¿Cè¿C‹¿C‚¿D¿Dn¿Dï¿Dõ¿Dﬂ¿E(¿Ew¿Eô¿E≠¿E¿¿E÷¿F¿F¿F¿Fp¿F~¿Fû¿F±¿F≈¿F‰¿G¿G¿G¿G¿GG¿GM¿Gò¿G›¿H¿H¿H-¿Hz¿Hƒ¿I¿I[¿I©¿I˘¿JF¿Jä¿Jê¿Jﬂ¿Jˇ¿K¿KL¿Kc¿Kx¿Kè¿K§¿K≥¿K‘¿K‹¿KÈ¿L ¿L¿L*¿LA¿Lt¿L´¿LÌ¿L¯¿M ¿M¿M
¿M¿MD¿MJ¿Mí¿Mò¿Mª¿N	¿N ¿N@¿NS¿Ni¿N¿N´¿NÊ¿O¿OC¿Ox¿Oü¿O‘¿Oı¿P¿P¿P¿P¿P<¿P\¿Po¿Pä¿P™¿PÃ¿P˜¿P˚¿P¸¿Q¿QE¿QF¿Qí¿Q‰¿R ¿R:¿RS¿Rm¿Rn¿R´¿R·¿R‚¿R¸¿SI¿S{¿Sÿ¿T5¿TY¿Tu¿T¨¿T≠¿TË¿U1¿U2¿Uk¿Uö¿Uõ¿U‘¿V¿V¿VU¿Vë¿Vπ¿V¡¿V«¿V»¿V‡¿V‰¿VÂ¿VÒ¿W4¿W6¿W7¿W~¿WÇ¿W—¿WÁ¿X ¿XB¿XC¿Xë¿X¶¿XÁ¿Y,¿Y^¿YÑ¿Y¢¿Y¶¿Y¸¿Y˝¿Z1¿ZE¿ZF¿Ze¿Zf¿Zè¿Zï¿ZÊ¿[¿[¿[)¿[J¿[]¿[g¿[|¿[Ä¿[Å¿[—¿[Ù¿[˙¿\G¿\ë¿\ﬁ¿]+¿]y¿]ó¿]™¿]∫¿]Ÿ¿]ˆ¿^	¿^¿^#¿^'¿^(¿^\¿^^¿^_¿^™¿^Æ¿^˝¿_¿_N¿_e¿_f¿_±¿_Ù¿`0¿`b¿`ö¿`∫¿`æ¿a-¿a.¿ag¿am¿aπ¿a…¿aœ¿b¿bp¿b±¿bÓ¿c¿c#¿c;¿cT¿cg¿cç¿cî¿c®¿cæ¿d¿d¿di¿dm¿e¿e¿e¿eN¿ex¿e~¿eπ¿e‰¿eÂ¿eı¿f)¿fT¿fZ¿fï¿f√¿fƒ¿f€¿g¿gO¿gU¿gå¿gœ¿g–¿h ¿hC¿hv¿hw¿h≈¿h·¿hÁ¿i2¿i¿iê¿iñ¿i‰¿j¿j\¿jè¿j©¿jØ¿j‰¿jˇ¿k¿k¿k=¿kX¿ku¿k≥¿kÚ¿l¿lS¿lt¿l™¿l∞¿l—¿lÛ¿lÙ¿m¿mR¿md¿mh¿mﬂ¿m·¿m‚¿n¿nG¿nH¿nÄ¿nÑ¿nŒ¿n€¿o¿o¿oo¿oÖ¿oâ¿o◊¿oı¿o˘¿pF¿pJ¿p]¿pa¿pm¿p¢¿p¶¿p·¿q¿q#¿q'¿qG¿qx¿q~¿qÜ¿q·¿r=¿ro¿r£¿rŸ¿s ¿sd¿s°¿sµ¿s·¿sˆ¿t¿t5¿tD¿tÑ¿tå¿tô¿t∂¿tº¿t¬¿t“¿tÁ¿u¿u¿u        !â≥™4é°ÑÁ/// An immutable 32 bit color value in ARGB format.
///
/// Consider the light teal of the Flutter logo. It is fully opaque, with a red
/// channel value of 0x42 (66), a green channel value of 0xA5 (165), and a blue
/// channel value of 0xF5 (245). In the common "hash syntax" for color values,
/// it would be described as `#42A5F5`.
///
/// Here are some ways it could be constructed:
///
/// ```dart
/// Color c = const Color(0xFF42A5F5);
/// Color c = const Color.fromARGB(0xFF, 0x42, 0xA5, 0xF5);
/// Color c = const Color.fromARGB(255, 66, 165, 245);
/// Color c = const Color.fromRGBO(66, 165, 245, 1.0);
/// ```
///
/// If you are having a problem with `Color` wherein it seems your color is just
/// not painting, check to make sure you are specifying the full 8 hexadecimal
/// digits. If you only specify six, then the leading two digits are assumed to
/// be zero, which means fully-transparent:
///
/// ```dart
/// Color c1 = const Color(0xFFFFFF); // fully transparent white (invisible)
/// Color c2 = const Color(0xFFFFFFFF); // fully opaque white (visible)
/// ```
///
/// See also:
///
///  * [Colors](https://api.flutter.dev/flutter/material/Colors-class.html), which
///    defines the colors found in the Material Design specification. é´ÇÌ ëjëoÇ|/// Construct a color from the lower 32 bits of an [int].
///
/// The bits are interpreted as follows:
///
/// * Bits 24-31 are the alpha value.
/// * Bits 16-23 are the red value.
/// * Bits 8-15 are the green value.
/// * Bits 0-7 are the blue value.
///
/// In other words, if AA is the alpha value in hex, RR the red value in hex,
/// GG the green value in hex, and BB the blue value in hex, a color can be
/// expressed as `const Color(0xAARRGGBB)`.
///
/// For example, to get a fully opaque orange, you would use `const
/// Color(0xFFFF9000)` (`FF` for the alpha, `FF` for the red, `90` for the
/// green, and `00` for the blue).ëp	ëu  
ëHëIëOë`ëPëÉë}ëãëÖëçëúÇÇìcìdìlÅ£/// Construct a color from the lower 8 bits of four integers.
///
/// * `a` is the alpha value, with 0 being transparent and 255 being fully
///   opaque.
/// * `r` is [red], from 0 to 255.
/// * `g` is [green], from 0 to 255.
/// * `b` is [blue], from 0 to 255.
///
/// Out of range values are brought into range using modulo 255.
///
/// See also [fromRGBO], which takes the alpha value as a floating point
/// value.ìmìr  ìtìy  ì{ìÄ  ìÇìá  -ìïìèîìóîìÔìÕì´ìòì©ì§ìôì¢ìúìöìûìßì∫ìÀì∆ìªìƒìæìºì¿ì…ì‹ìÏìËì›ìÊì‡ìﬁì‚ìÎì˛îî
ìˇîîî îîîî"É ñññÅ /// Create a color from red, green, blue, and opacity, similar to `rgba()` in CSS.
///
/// * `r` is [red], from 0 to 255.
/// * `g` is [green], from 0 to 255.
/// * `b` is [blue], from 0 to 255.
/// * `opacity` is alpha channel of this color as a double, with 0.0 being
///   transparent and 1.0 being fully opaque.
///
/// Out of range values are brought into range using modulo 255.
///
/// See also [fromARGB], which takes the opacity as an integer value.ññ  ññ$  ñ&ñ+  ñ-ñ5  3ñIñCóñKóñﬂñ©ñsñLñqñlñMñjñdñNñbñ^ñWñOñYñañfñoñÉñßñ¢ñÑñ†ñöñÖñúñ•ñπñ‹ñÿñ∫ñ÷ñ–ñªñ“ñ€ñÔóóñóóñÒóóóó&Åò,ÄÎ/// A 32 bit value representing this color.
///
/// The bits are assigned as follows:
///
/// * Bits 24-31 are the alpha value.
/// * Bits 16-23 are the red value.
/// * Bits 8-15 are the green value.
/// * Bits 0-7 are the blue value. ò6Ä‹òÓÄß/// The alpha channel of this color in an 8 bit value.
///
/// A value of 0 means this color is fully transparent. A value of 255 means
/// this color is fully opaque.   ôÄœôÕÄ£/// The alpha channel of this color as a double.
///
/// A value of 0.0 means this color is fully transparent. A value of 1.0 means
/// this color is fully opaque.   ôÈaö(4/// The red channel of this color in an 8 bit value.   öNdöè6/// The green channel of this color in an 8 bit value.   ö∂böˆ5/// The blue channel of this color in an 8 bit value.   ≥[/≥o   ≥[≥\õÅ	õﬂÄ¥/// Returns a new color that matches this color with the alpha channel
/// replaced with `a` (which ranges from 0 to 255).
///
/// Out of range values will have unexpected effects. õÈõÓ   ú)ÅUú˛Ä∆/// Returns a new color that matches this color with the alpha channel
/// replaced with the given `opacity` (which ranges from 0.0 to 1.0).
///
/// Out of range values will have unexpected effects. ù
ù   ùÇÅûCÄ≤/// Returns a new color that matches this color with the red channel replaced
/// with `r` (which ranges from 0 to 255).
///
/// Out of range values will have unexpected effects. ûKûP   ûçÅ	üPÄ¥/// Returns a new color that matches this color with the green channel
/// replaced with `g` (which ranges from 0 to 255).
///
/// Out of range values will have unexpected effects. üZü_   üöÅ†\Ä≥/// Returns a new color that matches this color with the blue channel replaced
/// with `b` (which ranges from 0 to 255).
///
/// Out of range values will have unexpected effects. †e†j   †‰ÄΩ†Ú  °°   °•ÇK¢≥Ä˙/// Returns a brightness value between 0 for darkest and 1 for lightest.
///
/// Represents the relative luminance of the color. This value is computationally
/// expensive to calculate.
///
/// See <https://en.wikipedia.org/wiki/Relative_luminance>.   £ÙáX®ˆÑ«/// Linearly interpolate between two colors.
///
/// This is intended to be fast but as a result may be ugly. Consider
/// [HSVColor] or writing custom logic for interpolating colors.
///
/// If either color is null, this function linearly interpolates from a
/// transparent instance of the other color. This is usually preferable to
/// interpolating from [material.Colors.transparent] (`const
/// Color(0x00000000)`), which is specifically transparent _black_.
///
/// The `t` argument represents position on the timeline, with 0.0 meaning
/// that the interpolation has not started, returning `a` (or something
/// equivalent to `a`), 1.0 meaning that the interpolation has finished,
/// returning `b` (or something equivalent to `b`), and values in between
/// meaning that the interpolation is at the relevant point on the timeline
/// between `a` and `b`. The interpolation can be extrapolated beyond 0.0 and
/// 1.0, so negative values and values greater than 1.0 are valid (and can
/// easily be generated by curves such as [Curves.elasticInOut]). Each channel
/// will be clamped to the range 0 to 255.
///
/// Values for `t` are usually obtained from an [Animation<double>], such as
/// an [AnimationController]. ®˚©  ©©  ©©   ´PÜ ≠dÅˆ/// Combine the foreground color as a transparent color over top
/// of a background color, and return the resulting combined color.
///
/// This uses standard alpha blending ("SRC over DST") rules to produce a
/// blended color from two colors. This can be used as a performance
/// enhancement when trying to avoid needless alpha blending compositing
/// operations for two things that are solid colors with the same shape, but
/// overlay each other: instead, just paint one with the combined color. ≠o≠v  ≠Å≠à   ±tÅ±˝w/// Returns an alpha value representative of the provided [opacity] value.
///
/// The [opacity] value may not be null. ≤≤   ≤{Ä‹≤ï  ≤ò≤†  ≤{≤|≥éW≥°   ≥é≥è ¿ ≠¿ F`¿ ≠µÄ™/// A description of the style to use when drawing on a [Canvas].
///
/// Most APIs on [Canvas] take a [Paint] object to describe the style
/// to use for that operation. ¿ ∏¡Ä¢ ¿ π¿ π$Y/// Constructs an empty [Paint] object with all fields initialized to
/// their defaults.  '¿ ∞z0¿ ∞â ¿ ∞ë¿ ∞ô¿ ∞©¿ ∞ö¿ ∞Ø'¿ ∞¿ ¿ ∞’¿ ∞⁄!¿ ∞Î ¿ ∞˙¿ ∞ˇ%¿ ± ¿ ±#¿ ±(!¿ ±9 ¿ ±H¿ ±M'¿ ±^ ¿ ±s¿ ±x%¿ ±â ¿ ±ú¿ ±°&¿ ±≤ ¿ ±∆¿ ±À,¿ ±‹ ¿ ±ˆ¿ ±˚)¿ ≤ ¿ ≤#¿ ≤(&¿ ≤9 ¿ ≤M¿ ≤R0¿ ≤c ¿ ≤Ä¿ ≤Ü,¿ ≤ó ¿ ≤∞¿ ≤∂(¿ ≤« ¿ ≤‹¿ ≤‚#¿ ≤Û ¿ ≥¿ ≥
>¿ ≥ ¿ ≥D¿ ≥1¿ ≥G¿ ≥L2¿ ≥] ¿ ≥z¿ ≥m¿ ≥}¿ ≥Ç:¿ ≥ì ¿ ≥∏¿ ≥ß¿ ≥ª¿ ≥¿2¿ ≥— ¿ ≥Ó¿ ≥·¿ ≥Ò¿ ≥ˆ>¿ ¥ ¿ ¥0¿ ¥¿ ¥3¿ ¥8:¿ ¥I ¿ ¥n¿ ¥]¿ ¥q¿ ¥v<¿ ¥á ¿ ¥Æ¿ ¥ú¿ ¥±¿ ¥∂H¿ ¥« ¿ ¥˙¿ ¥‚¿ ¥˝¿ µB¿ µ ¿ µ@¿ µ+¿ µC¿ µH<¿ µY ¿ µÄ¿ µn¿ µÉ¿ µàN¿ µô ¿ µ“¿ µ∑¿ µ’¿ µ⁄F¿ µÎ ¿ ∂¿ ∂¿ ∂¿ ∂$>¿ ∂5 ¿ ∂^¿ ∂K¿ ∂a¿ ∂f4¿ ∂w ¿ ∂ñ¿ ∂à¿ ∂ô¿ ∂ﬂ%¿ ∂ ¿ ∑¿ ∑M¿ ∑\  ¿ ∑"¿ ∏ ¿ ∏¿ ∏'¿ ∏' ¿ ∏<¿ ∏A'¿ ∏R ¿ ∏g¿ ∏l"¿ ∏} ¿ ∏ç¿ ª,¿ ªê ¿ ª°¿ æ¡=¿ æ“ ¿ æÁ¿ æ¿ æÒ¿ æ¯¿ æ˘¿ Œ3¿ Œì ¿ ŒØ¿ Ë≤Ç¿ ÎãÇÆ/// Whether to dither the output when drawing images.
///
/// If false, the default value, dithering will be enabled when the input
/// color depth is higher than the output color depth. For example,
/// drawing an RGB8 image onto an RGB565 canvas.
///
/// This value also controls dithering of [shader]s, which can make
/// gradients appear smoother.
///
/// Whether or not dithering affects the output is implementation defined.
/// Some implementations may choose to ignore this completely, if they're
/// unable to control dithering.
///
/// To ensure that dithering is consistently enabled for your entire
/// application, set this to true before invoking any drawing related code.¿ Îù¿ πgÄ”¿ π‚i/// Whether to apply anti-aliasing to lines and images drawn on the
/// canvas.
///
/// Defaults to true.   ¿ ∫=Å¿ ∫A  ¿ ∫M
¿ ∫S   ¿ ª∞Ç'¿ ΩWÅÑ/// The color to use when stroking or filling a shape.
///
/// Defaults to opaque black.
///
/// See also:
///
///  * [style], which controls whether to stroke or fill (or both).
///  * [colorFilter], which overrides [color].
///  * [shader], which overrides [color] with more elaborate effects.
///
/// This color is not used when compositing. To colorize a layer, use
/// [colorFilter].   ¿ Ω⁄Ä´¿ Ωﬁ  ¿ Ω‰¿ ΩÎ   ¿ øÉú¿ ¬Ç“/// A blend mode to apply when a shape is drawn or a layer is composited.
///
/// The source colors are from the shape being drawn (e.g. from
/// [Canvas.drawPath]) or layer being composited (the graphics that were drawn
/// between the [Canvas.saveLayer] and [Canvas.restore] calls), after applying
/// the [colorFilter], if any.
///
/// The destination colors are from the background onto which the shape or
/// layer is being composited.
///
/// Defaults to [BlendMode.srcOver].
///
/// See also:
///
///  * [Canvas.saveLayer], which uses its [Paint]'s [blendMode] to composite
///    the layer when [Canvas.restore] is called.
///  * [BlendMode], which discusses the user of [Canvas.saveLayer] with
///    [blendMode].   ¿ ¬¢Äª¿ ¬¶  ¿ ¬∞¿ ¬ª   ¿ √aÄ·¿ √Âk/// Whether to paint inside shapes, the edges of shapes, or both.
///
/// Defaults to [PaintingStyle.fill].   ¿ ƒEÄ¢¿ ƒI  ¿ ƒO¿ ƒ^   ¿ ƒÎÅi¿ ≈ˇÄ˛/// How wide to make edges drawn when [style] is set to
/// [PaintingStyle.stroke]. The width is given in logical pixels measured in
/// the direction orthogonal to the direction of the path.
///
/// Defaults to 0.0, which correspond to a hairline width.   ¿ ∆WÄ¶¿ ∆[  ¿ ∆g¿ ∆o   ¿ «Å¿ «∏Ä†/// The kind of finish to place on the end of lines drawn when
/// [style] is set to [PaintingStyle.stroke].
///
/// Defaults to [StrokeCap.butt], i.e. no caps.   ¿ »Ä¶¿ »   ¿ »*¿ »5   ¿ »∆Ñ—¿ Õ3Ñ+/// The kind of finish to place on the joins between segments.
///
/// This applies to paths drawn when [style] is set to [PaintingStyle.stroke],
/// It does not apply to points drawn as lines with [Canvas.drawPoints].
///
/// Defaults to [StrokeJoin.miter], i.e. sharp corners.
///
/// Some examples of joins:
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/miter_4_join.mp4}
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/round_join.mp4}
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/bevel_join.mp4}
///
/// The centers of the line segments are colored in the diagrams above to
/// highlight the joins, but in normal usage the join is the same color as the
/// line.
///
/// See also:
///
///  * [strokeMiterLimit] to control when miters are replaced by bevels when
///    this is set to [StrokeJoin.miter].
///  * [strokeCap] to control what is drawn at the ends of the stroke.
///  * [StrokeJoin] for the definitive list of stroke joins.   ¿ ÕöÄ©¿ Õû  ¿ Õ©¿ Õµ   ¿ Œ∑Ör¿ ” Ñ”/// The limit for miters to be drawn on segments when the join is set to
/// [StrokeJoin.miter] and the [style] is set to [PaintingStyle.stroke]. If
/// this limit is exceeded, then a [StrokeJoin.bevel] join will be drawn
/// instead. This may cause some 'popping' of the corners of a path if the
/// angle between line segments is animated, as seen in the diagrams below.
///
/// This limit is expressed as a limit on the length of the miter.
///
/// Defaults to 4.0.  Using zero as a limit will cause a [StrokeJoin.bevel]
/// join to be used all the time.
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/miter_0_join.mp4}
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/miter_4_join.mp4}
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/miter_6_join.mp4}
///
/// The centers of the line segments are colored in the diagrams above to
/// highlight the joins, but in normal usage the join is the same color as the
/// line.
///
/// See also:
///
///  * [strokeJoin] to control the kind of finish to place on the joins
///    between segments.
///  * [strokeCap] to control what is drawn at the ends of the stroke.   ¿ ‘,ÄÃ¿ ‘0  ¿ ‘A¿ ‘I   ¿ ‘¸ÇW¿ ’ƒÄØ/// A mask filter (for example, a blur) to apply to a shape after it has been
/// drawn but before it has been composited into the image.
///
/// See [MaskFilter] for details.   ¿ ◊VÇ∞¿ ◊Z  ¿ ◊e¿ ◊r   ¿ ⁄
ÅÏ¿ €âÅ/// Controls the performance vs quality trade-off to use when sampling bitmaps,
/// as with an [ImageShader], or when drawing images, as with [Canvas.drawImage],
/// [Canvas.drawImageRect], [Canvas.drawImageNine] or [Canvas.drawAtlas].
///
/// Defaults to [FilterQuality.none].   ¿ €˘Ä≤¿ €˝  ¿ ‹¿ ‹   ¿ ‹ØÅ»¿ ﬁ;Åk/// The shader to use when stroking or filling a shape.
///
/// When this is null, the [color] is used instead.
///
/// See also:
///
///  * [Gradient], a shader that paints a color gradient.
///  * [ImageShader], a shader that tiles an [Image].
///  * [colorFilter], which overrides [shader].
///  * [color], which is used if [shader] and [colorFilter] are null.   ¿ ﬁzW¿ ﬁ~  ¿ ﬁÖ¿ ﬁé   ¿ ﬁ’Åv¿ ﬂ¡ÄŒ/// A color filter to apply when a shape is drawn or when a layer is
/// composited.
///
/// See [ColorFilter] for details.
///
/// When a shape is being drawn, [colorFilter] overrides [color] and [shader].   ¿ ‡OÅ<¿ ‡S  ¿ ‡_¿ ‡m   ¿ ·èÇ¬¿ „«Å˙/// The [ImageFilter] to use when drawing raster images.
///
/// For example, to blur an image using [Canvas.drawImage], apply an
/// [ImageFilter.blur]:
///
/// ```dart
/// import 'dart:ui' as ui;
///
/// ui.Image image;
///
/// void paint(Canvas canvas, Size size) {
///   canvas.drawImage(
///     image,
///     Offset.zero,
///     Paint()..imageFilter = ui.ImageFilter.blur(sigmaX: .5, sigmaY: .5),
///   );
/// }
/// ```
///
/// See also:
///
///  * [MaskFilter], which is used for drawing geometry.   ¿ ‰UÅ∑¿ ‰Y  ¿ ‰e¿ ‰s   ¿ ÊÅn¿ Á%Å/// Whether the colors of the image are inverted when drawn.
///
/// Inverting the colors of an image applies a new color filter that will
/// be composed with any user provided color filters. This is primarily
/// used for implementing smart invert on iOS.   ¿ ÁÅl¿ ÁÖ  ¿ Áí
¿ Áò   ¿ ÁÒX¿ Á˙    ¿ ËLb¿ ËP  ¿ ËX
¿ Ë^   ¿ ∑iÄÉ¿ ∑w    ¿ Îßáª¿ Î∫   ¿ Îß¿ Î® ¿ ˚yü∫¿ Ñû/// Opaque handle to raw decoded image data (pixels).
///
/// To obtain an [Image] object, use the [ImageDescriptor] API.
///
/// To draw an [Image], use one of the methods on the [Canvas] class, such as
/// [Canvas.drawImage].
///
/// A class or method that receives an image object must call [dispose] on the
/// handle when it is no longer needed. To create a shareable reference to the
/// underlying image, call [clone]. The method or object that receives
/// the new instance will then be responsible for disposing it, and the
/// underlying image itself will be disposed when all outstanding handles are
/// disposed.
///
/// If `dart:ui` passes an `Image` object and the recipient wishes to share
/// that handle with other callers, [clone] must be called _before_ [dispose].
/// A handle that has been disposed cannot create new handles anymore.
///
/// See also:
///
///  * [Image](https://api.flutter.dev/flutter/widgets/Image-class.html), the class in the [widgets] library.
///  * [ImageDescriptor], which allows reading information about the image and
///    creating a codec to decode it.
///  * [instantiateImageCodec], a utility method that wraps [ImageDescriptor]. ¿ (Äé¿ -¿ .¿ / ¿ 0¿ 6   ¿ €/¿ ¿ €¿ ‹¿ ‚¿ Û¿ „¿¿  ¿m¿r ¿~¿+Äù¿wA/// The number of image pixels along the image's horizontal axis.   ¿ÃÄù¿?/// The number of image pixels along the image's vertical axis.   ¿ñÅï¿MÄ•/// Whether this reference to the underlying image is [dispose]d.
///
/// This only returns a valid value if asserts are enabled, and must not be
/// used otherwise.   ¿áÉ¿áÅÊ/// Release this handle's claim on the underlying Image. This handle is no
/// longer usable after this method is called.
///
/// Once all outstanding handles have been disposed, the underlying image will
/// be disposed as well.
///
/// In debug mode, [debugGetOpenHandleStackTraces] will return a list of
/// [StackTrace] objects from all open handles' creation points. This is
/// useful when trying to determine what parts of the program are keeping an
/// image resident in memory.   ¿/ÇÈ¿	yÄÙ/// Converts the [Image] object into a byte array.
///
/// The [format] argument specifies the format in which the bytes will be
/// returned.
///
/// Returns a future that completes with the binary image data or an error
/// if encoding fails. ¿	Ö0¿	ñ  ¿	û¿	≠¿	Æ¿
Å¢¿
ÁÄ∞/// If asserts are enabled, returns the [StackTrace]s of each open handle from
/// [clone], in creation order.
///
/// If asserts are disabled, this method always returns null.   ¿¬åô¿Àän/// Creates a disposable handle to this image.
///
/// Holders of an [Image] must dispose of the image when they no longer need
/// to access it or draw it. However, once the underlying image is disposed,
/// it is no longer possible to use it. If a holder of an image needs to share
/// access to that image with another object or method, [clone] creates a
/// duplicate handle. The underlying image will only be disposed once all
/// outstanding handles are disposed. This allows for safe sharing of image
/// references while still disposing of the underlying resources when all
/// consumers are finished.
///
/// It is safe to pass an [Image] handle to another object or method if the
/// current holder no longer needs it.
///
/// To check whether two [Image] references are referring to the same
/// underlying image memory, use [isCloneOf] rather than the equality operator
/// or [identical].
///
/// The following example demonstrates valid usage.
///
/// ```dart
/// import 'dart:async';
///
/// Future<Image> _loadImage(int width, int height) {
///   final Completer<Image> completer = Completer<Image>();
///   decodeImageFromPixels(
///     Uint8List.fromList(List<int>.filled(width * height * 4, 0xFF)),
///     width,
///     height,
///     PixelFormat.rgba8888,
///     // Don't worry about disposing or cloning this image - responsibility
///     // is transferred to the caller, and that is safe since this method
///     // will not touch it again.
///     (Image image) => completer.complete(image),
///   );
///   return completer.future;
/// }
///
/// Future<void> main() async {
///   final Image image = await _loadImage(5, 5);
///   // Make sure to clone the image, because MyHolder might dispose it
///   // and we need to access it again.
///   final MyImageHolder holder = MyImageHolder(image.clone());
///   final MyImageHolder holder2 = MyImageHolder(image.clone());
///   // Now we dispose it because we won't need it again.
///   image.dispose();
///
///   final PictureRecorder recorder = PictureRecorder();
///   final Canvas canvas = Canvas(recorder);
///
///   holder.draw(canvas);
///   holder.dispose();
///
///   canvas.translate(50, 50);
///   holder2.draw(canvas);
///   holder2.dispose();
/// }
///
/// class MyImageHolder {
///   MyImageLoader(this.image);
///
///   final Image image;
///
///   void draw(Canvas canvas) {
///     canvas.drawImage(image, Offset.zero, Paint());
///   }
///
///   void dispose() => image.dispose();
/// }
/// ```
///
/// The returned object behaves identically to this image. Calling
/// [dispose] on it will only dispose the underlying native resources if it
/// is the last remaining handle.   ¿_Çõ¿…ÇR/// Returns true if `other` is a [clone] of this and thus shares the same
/// underlying image memory, even if this or `other` is [dispose]d.
///
/// This method may return false for two images that were decoded from the
/// same underlying asset, if they are not sharing the same memory. For
/// example, if the same file is decoded using [instantiateImageCodec] twice,
/// or the same bytes are decoded using [decodeImageFromPixels] twice, there
/// will be two distinct [Image]s that render the same but do not share
/// underlying memory, and so will not be treated as clones of each other. ¿”¿⁄   ¿˛3¿   ¿˛¿ˇ ¿5ÖV¿U  ¿Z'¿|¿}¿~  ¿Z¿[¿a¿r¿b¿¿Ñ ¿ê¿ ,¿ 7 ¿ I¿ J¿ B¿ H¿ C¿Ö#¿ç    ¿¨%¿¥    ¿’Å¿Á  ¿Û0¿  ¿¿¿¿ÂÄñ¿)9/// Returns an error message on failure, null on success. ¿5
¿:  ¿A¿X   ¿ôÅd¿û    ¿ '¿     ¿ P9¿ c   ¿ P¿ Q¿5¿6¿<¿M¿=¿ ¸âT¿'¡Üæ/// Information for a single frame of an animation.
///
/// To obtain an instance of the [FrameInfo] interface, see
/// [Codec.getNextFrame].
///
/// The recipient of an instance of this class is responsible for calling
/// [Image.dispose] on [image]. To share the image with other interested
/// parties, use [Image.clone]. If the [FrameInfo] object itself is passed to
/// another method or object, that method or object must assume it is
/// responsible for disposing the image when done, and the passer must not
/// access the [image] after that point.
///
/// For example, the following code sample is incorrect:
///
/// ```dart
/// /// BAD
/// Future<void> nextFrameRoutine(Codec codec) async {
///   final FrameInfo frameInfo = await codec.getNextFrame();
///   _cacheImage(frameInfo);
///   // ERROR - _cacheImage is now responsible for disposing the image, and
///   // the image may not be available any more for this drawing routine.
///   _drawImage(frameInfo);
///   // ERROR again - the previous methods might or might not have created
///   // handles to the image.
///   frameInfo.image.dispose();
/// }
/// ```
///
/// Correct usage is:
///
/// ```dart
/// /// GOOD
/// Future<void> nextFrameRoutine(Codec codec) async {
///   final FrameInfo frameInfo = await codec.getNextFrame();
///   _cacheImage(frameInfo.image.clone(), frameInfo.duration);
///   _drawImage(frameInfo.image.clone(), frameInfo.duration);
///   // This method is done with its handle, and has passed handles to its
///   // clients already.
///   // The image will live until those clients dispose of their handles, and
///   // this one must not be disposed since it will not be used again.
///   frameInfo.image.dispose();
/// }
/// ``` ¿'œÅ¿(û¿(ü¿(†Äª/// This class is created by the engine, and should not be instantiated
/// or extended directly.
///
/// To obtain an instance of the [FrameInfo] interface, see
/// [Codec.getNextFrame].¿(¢¿(±  ¿(∫¿(…   ¿(‘Äô¿)e{/// The duration this frame should be shown.
///
/// A zero duration indicates that the frame should be shown indefinitely. ¿)sÄ⁄¿*HÄæ/// The [Image] object for this frame.
///
/// This object must be disposed by the recipient of this frame info.
///
/// To share this image with other interested parties, use [Image.clone].    ¿*Ràÿ¿+QÄﬁ/// A handle to an image codec.
///
/// This class is created by the engine, and should not be instantiated
/// or extended directly.
///
/// To obtain an instance of the [Codec] interface, see
/// [instantiateImageCodec]. ¿,A&¿,b¿,c¿,d  ¿,A¿,B¿,H¿,Y¿,I¿,k¿,p  ¿-¿-  ¿,Ö^¿,≥#/// Number of frames in this image.   ¿,Ê.¿,Ó    ¿-7Ä’¿-ÕÄÖ/// Number of times to repeat the animation.
///
/// * 0 when the animation should be played once.
/// * -1 for infinity repetitions.   ¿.8¿.    ¿.KÉ®¿/ùÅ//// Fetches the next animation frame.
///
/// Wraps back to the first frame after returning the last frame.
///
/// The returned future can complete with an error if the decoding has failed.
///
/// The caller of this method is responsible for disposing the
/// [FrameInfo.image] on the returned object.   ¿1˜Äî¿2;9/// Returns an error message on failure, null on success. ¿2I$¿2f   ¿2èÄô¿3n/// Release the resources used by this object. The object is no longer usable
/// after this method is called.   ¿+1¿+2¿+8¿+I¿+9¿UwÑ¿UËP/// A handle for the framework to hold and retain an engine layer across frames. ¿VÄí¿V¶¿Vß¿V®a/// This class is created by the engine, and should not be instantiated
/// or extended directly. ¿V¿VÄ¿VÜ¿Vó¿Vá  ¿VØÇÕ¿YUÇà/// Release the resources used by this object. The object is no longer usable
/// after this method is called.
///
/// EngineLayers indirectly retain platform specific graphics resources. Some
/// of these resources, such as images, may be memory intensive. It is
/// important to dispose of EngineLayer objects that will no longer be used as
/// soon as possible to avoid retaining these resources until the next
/// garbage collection.
///
/// Once this EngineLayer is disposed, it is no longer eligible for use as a
/// retained layer, and must not be passed as an `oldLayer` to any of the
/// [SceneBuilder] methods which accept that parameter.   ¿U»¿U…¿Uœ¿U‡¿U–¿YÄ¿ Fp¿\YÇ∏/// A complex, one-dimensional subset of a plane.
///
/// A path consists of a number of sub-paths, and a _current point_.
///
/// Sub-paths consist of segments of various types, such as lines,
/// arcs, or beziers. Sub-paths can be open or closed, and can
/// self-intersect.
///
/// Closed sub-paths enclose a (possibly discontiguous) region of the
/// plane based on the current [fillType].
///
/// The _current point_ is initially at the origin. After each
/// operation adding a segment to a sub-path, the current point is
/// updated to the end of that segment.
///
/// Paths can be drawn on canvases using [Canvas.drawPath], and can
/// used to create clip regions using [Canvas.clipPath]. ¿\É^ ¿\«¿\À%/// Create a new empty [Path] object. ¿\´¿\¨¿\≤¿\√¿\≥¿]Äú¿]≠¿]Æ¿]ØÄé/// Avoids creating a new native backing for the path for methods that will
/// create it later, such as [Path.from], [shift] and [transform].  ¿]∂ÅJ¿^å¿^ç¿^ëÄ¡/// Creates a copy of another [Path].
///
/// This copy is fast and does not require additional memory unless either
/// the `source` path or the path returned by this constructor are modified.¿^í¿^ò    ¿_5Ä ¿_œÄÇ/// Determines how the interior of this path is calculated.
///
/// Defaults to the non-zero winding rule, [PathFillType.nonZero].   ¿`>¿`  ¿`¿`   1¿\‰.¿\È    ¿_.¿_  ¿_¿_   ¿`D-¿`H    ¿`t:¿`y  ¿`Ü¿`ã   ¿`≤j¿`Ï2/// Starts a new sub-path at the given coordinate. ¿`Û¿`˚  ¿`˝¿a   ¿a Äè¿amE/// Starts a new sub-path at the given offset from the current point. ¿a|	¿aÑ  ¿aá	¿aè   ¿a≥Äâ¿bO/// Adds a straight line segment from the current point to the given
/// point. ¿b¿b  ¿b¿b%   ¿b@Ä¿¿bæt/// Adds a straight line segment from the current point to the point
/// at the given offset from the current point. ¿bÕ	¿b’  ¿bÿ	¿b‡   ¿cÄı¿cõÄã/// Adds a quadratic bezier segment that curves from the current
/// point to the given point (x2,y2), using the control point
/// (x1,y1). ¿c≠	¿cµ  ¿c∏	¿c¿  ¿c√	¿cÀ  ¿cŒ	¿c÷   ¿c˝ÅO¿dﬁÄ”/// Adds a quadratic bezier segment that curves from the current
/// point to the point at the offset (x2,y2) from the current point,
/// using the control point at the offset (x1,y1) from the current
/// point. ¿d¯	¿e   ¿e	¿e  ¿e	¿e  ¿e	¿e!   ¿ePÅ ¿eÄî/// Adds a cubic bezier segment that curves from the current point
/// to the given point (x3,y3), using the control points (x1,y1) and
/// (x2,y2). ¿e¯	¿f   ¿f	¿f  ¿f	¿f  ¿f	¿f!  ¿f$	¿f,  ¿f/	¿f7   ¿fTÅ[¿g?Ä›/// Adds a cubic bezier segment that curves from the current point
/// to the point at the offset (x3,y3) from the current point, using
/// the control points at the offsets (x1,y1) and (x2,y2) from the
/// current point. ¿gO	¿gW  ¿gZ	¿gb  ¿ge	¿gm  ¿gp	¿gx  ¿g{	¿gÉ  ¿gÜ	¿gé   ¿g≥Åî¿hÛÅ0/// Adds a bezier segment that curves from the current point to the
/// given point (x2,y2), using the control points (x1,y1) and the
/// weight w. If the weight is greater than 1, then the curve is a
/// hyperbola; if the weight equals 1, it's a parabola; and if it is
/// less than 1, it is an ellipse. ¿h˚	¿i  ¿i	¿i  ¿i	¿i  ¿i	¿i$  ¿i'¿i/   ¿iKÅÌ¿j‘Åw/// Adds a bezier segment that curves from the current point to the
/// point at the offset (x2,y2) from the current point, using the
/// control point at the offset (x1,y1) from the current point and
/// the weight w. If the weight is greater than 1, then the curve is
/// a hyperbola; if the weight equals 1, it's a parabola; and if it
/// is less than 1, it is an ellipse. ¿j‰	¿jÏ  ¿jÔ	¿j˜  ¿j˙	¿k  ¿k	¿k  ¿k¿k   ¿k<Éˆ¿neÉ/// If the `forceMoveTo` argument is false, adds a straight line
/// segment and an arc segment.
///
/// If the `forceMoveTo` argument is true, starts a new sub-path
/// consisting of an arc segment.
///
/// In either case, the arc segment consists of the arc that follows
/// the edge of the oval bounded by the given rectangle, from
/// startAngle radians around the oval up to startAngle + sweepAngle
/// radians around the oval, with zero radians being the point on
/// the right hand side of the oval that crosses the horizontal line
/// that intersects the center of the rectangle and with positive
/// angles going clockwise around the oval.
///
/// The line segment added if `forceMoveTo` is false starts at the
/// current point and ends at the start of the arc. ¿nk	¿nq  ¿nv¿n~  ¿nâ¿në  ¿nú¿n¢   ¿o5Äú¿o:  ¿oA¿oI  ¿oN
¿oV  ¿oZ¿ob  ¿oh¿op  ¿oÖ¿oç  ¿oò¿o†  ¿o´¿o±   ¿o’Éﬂ¿rjÇw/// Appends up to four conic curves weighted to describe an oval of `radius`
/// and rotated by `rotation` (measured in degrees and clockwise).
///
/// The first curve begins from the last point in the path and the last ends
/// at `arcEnd`. The curves follow a path in a direction determined by
/// `clockwise` and `largeArc` in such a way that the sweep angle
/// is always less than 360 degrees.
///
/// A simple line is appended if either either radii are zero or the last
/// point in the path is `arcEnd`. The radii are scaled to fit the last path
/// point if both are greater than zero but too small to describe an arc.
/// ¿ru¿r}  ¿rä¿rí  ¿r´¿r≥  ¿r∆¿rÃ  ¿r·¿rÁ  ¿rö¿r†¿r°¿rΩ¿r÷¿rÚ¿s∑Ä¿¿sº  ¿s»¿s–  ¿sÿ¿s‡  ¿sË¿s  ¿t¿t  ¿t¿t#  ¿t,¿t2  ¿tN¿tT   ¿t|Ñ{¿wÅÇ„/// Appends up to four conic curves weighted to describe an oval of `radius`
/// and rotated by `rotation` (measured in degrees and clockwise).
///
/// The last path point is described by (px, py).
///
/// The first curve begins from the last point in the path and the last ends
/// at `arcEndDelta.dx + px` and `arcEndDelta.dy + py`. The curves follow a
/// path in a direction determined by `clockwise` and `largeArc`
/// in such a way that the sweep angle is always less than 360 degrees.
///
/// A simple line is appended if either either radii are zero, or, both
/// `arcEndDelta.dx` and `arcEndDelta.dy` are zero. The radii are scaled to
/// fit the last path point if both are greater than zero but too small to
/// describe an arc. ¿wî¿wú  ¿wÆ¿w∂  ¿wœ¿w◊  ¿wÍ¿w  ¿x¿x  ¿wæ¿wƒ¿w≈¿w·¿w˙¿x¿x˙Ä˚¿xˇ  ¿y¿y  ¿y#¿y+  ¿y3¿y;  ¿y^¿yf  ¿yn¿yv  ¿yö¿y†  ¿y©¿yØ   ¿y˘Ä◊¿z\Y/// Adds a new sub-path that consists of four lines that outline the
/// given rectangle. ¿zd	¿zj   ¿z”Z¿zÿ  ¿z·¿zÈ  ¿zÓ
¿zˆ  ¿z˙¿{  ¿{¿{   ¿{1Åè¿|LÅ/// Adds a new sub-path that consists of a curve that forms the
/// ellipse that fills the given rectangle.
///
/// To add a circle, pass an appropriate rectangle as `oval`. [Rect.fromCircle]
/// can be used to easily describe the circle's center [Offset] and radius. ¿|T	¿|Z   ¿|√Z¿|»  ¿|—¿|Ÿ  ¿|ﬁ
¿|Ê  ¿|Í¿|Ú  ¿|¯¿}    ¿}!Çî¿ÅŒ/// Adds a new sub-path with one arc segment that consists of the arc
/// that follows the edge of the oval bounded by the given
/// rectangle, from startAngle radians around the oval up to
/// startAngle + sweepAngle radians around the oval, with zero
/// radians being the point on the right hand side of the oval that
/// crosses the horizontal line that intersects the center of the
/// rectangle and with positive angles going clockwise around the
/// oval. ¿	¿  ¿¿  ¿*¿2   ¿∏Äç¿Ω  ¿≈¿Õ  ¿“
¿⁄  ¿ﬁ¿Ê  ¿Ï¿Ù  ¿Ä
¿Ä  ¿Ä¿Ä%   ¿ÄIÅ´¿ÅuÅ/// Adds a new sub-path with a sequence of line segments that connect the given
/// points.
///
/// If `close` is true, a final line segment will be added that connects the
/// last point to the first point.
///
/// The `points` argument is interpreted as offsets from the origin. ¿ÅÄ¿Åé  ¿Åï
¿Åõ   ¿Å˜J¿Å¸  ¿Ç¿Ç  ¿Ç
¿Ç"   ¿ÇEÄ˚¿ÇﬂÄé/// Adds a new sub-path that consists of the straight lines and
/// curves needed to form the rounded rectangle described by the
/// argument. ¿ÇË¿ÇÔ   ¿ÉC9¿ÉH  ¿ÉR¿É_   ¿ÉÄÇ{¿ÑóÅ/// Adds the sub-paths of `path`, offset by `offset`, to this path.
///
/// If `matrix4` is specified, the path will be transformed by this matrix
/// after the matrix is translated by the given offset. The matrix is a 4x4
/// matrix stored in column major order. ¿Ñü	¿Ñ•  ¿Ñ™¿Ñ≤  ¿Ñ∫¿Ñ»   ¿Ö˛E¿Ü  ¿Ü	¿Ü  ¿Ü	¿Ü  ¿Ü"	¿Ü*   ¿ÜFm¿ÜK  ¿Ü^	¿Üd  ¿Üi	¿Üq  ¿Üt	¿Ü|  ¿Ü¿Üå   ¿Ü∑É¿àMÅÇ/// Adds the sub-paths of `path`, offset by `offset`, to this path.
/// The current sub-path is extended with the first sub-path
/// of `path`, connecting them with a lineTo if necessary.
///
/// If `matrix4` is specified, the path will be transformed by this matrix
/// after the matrix is translated by the given `offset`.  The matrix is a 4x4
/// matrix stored in column major order. ¿à\	¿àb  ¿àg¿ào  ¿àw¿àÖ   ¿â»S¿âÕ  ¿â›	¿â„  ¿âË	¿â  ¿âÛ	¿â˚   ¿äy¿ä#  ¿ä<	¿äB  ¿äG	¿äO  ¿äR	¿äZ  ¿ä]¿äj   ¿äõÄß¿ã&ÄÅ/// Closes the last sub-path, as if a straight line had been drawn
/// from the current point to the first point of the sub-path.   ¿ãFÄ≈¿ãÔÄù/// Clears the [Path] object of all sub-paths, returning it to the
/// same state it had when it was created. The _current point_ is
/// reset to the origin.   ¿åÅ√¿çiÅF/// Tests to see if the given point is within the path. (That is, whether the
/// point would be in the visible portion of the path if the path was used
/// with [Canvas.clipPath].)
///
/// The `point` argument is interpreted as an offset from the origin.
///
/// Returns true if the point is in the path, and false otherwise. ¿çr¿çz   ¿ç’:¿ç⁄  ¿ç‰¿çÏ  ¿çÓ¿çˆ   ¿éÅ¿éáj/// Returns a copy of the path with all the segments of every
/// sub-path translated by the given offset. ¿éç¿éï   ¿è!D¿è&  ¿è-¿è3  ¿è;	¿èC  ¿èF	¿èN   ¿èiÅ¿èﬁk/// Returns a copy of the path with all the segments of every
/// sub-path transformed by the given matrix. ¿èË¿èı   ¿ê{K¿êÄ  ¿êã¿êë  ¿êô¿ê¶   ¿ê Ñ¿îaÉ0/// Computes the bounding rectangle for this path.
///
/// A path containing only axis-aligned points on the same straight line will
/// have no area, and therefore `Rect.isEmpty` will return true for such a
/// path. Consider checking `rect.width + rect.height > 0.0` instead, or
/// using the [computeMetrics] API to check the path length.
///
/// For many more elaborate paths, the bounds may be inaccurate.  For example,
/// when a path contains a circle, the points used to compute the bounds are
/// the circle's implied control points, which form a square around the circle;
/// if the circle has a transformation applied using [transform] then that
/// square is rotated, and the (axis-aligned, non-rotated) bounding box
/// therefore ends up grossly overestimating the actual area covered by the
/// circle.   ¿îﬁ1¿îÍ    ¿ïÇû¿ñ\Å0/// Combines the two paths according to the manner specified by the given
/// `operation`.
///
/// The resulting path will be constructed from non-overlapping contours. The
/// curve order is reduced where possible so that cubics may be turned into
/// quadratics, and quadratics maybe turned into lines. ¿ñd¿ñs  ¿ñ}
¿ñÉ  ¿ñâ
¿ñè   ¿ó¥A¿óπ  ¿óΩ
¿ó√  ¿ó…
¿óœ  ¿ó’¿ó⁄   ¿ó˘áı¿üëáM/// Creates a [PathMetrics] object for this path, which can describe various
/// properties about the contours of the path.
///
/// A [Path] is made up of zero or more contours. A contour is made up of
/// connected curves and segments, created via methods like [lineTo],
/// [cubicTo], [arcTo], [quadraticBezierTo], their relative counterparts, as
/// well as the add* methods such as [addRect]. Creating a new [Path] starts
/// a new contour once it has any drawing instructions, and another new
/// contour is started for each [moveTo] instruction.
///
/// A [PathMetric] object describes properties of an individual contour,
/// such as its length, whether it is closed, what the tangent vector of a
/// particular offset along the path is. It also provides a method for
/// creating sub-paths: [PathMetric.extractPath].
///
/// Calculating [PathMetric] objects is not trivial. The [PathMetrics] object
/// returned by this method is a lazy [Iterable], meaning it only performs
/// calculations when the iterator is moved to the next [PathMetric]. Callers
/// that wish to memoize this iterable can easily do so by using
/// [Iterable.toList] on the result of this method. In particular, callers
/// looking for information about how many contours are in the path should
/// either store the result of `path.computeMetrics().length`, or should use
/// `path.computeMetrics().toList()` so they can repeatedly check the length,
/// since calling `Iterable.length` causes traversal of the entire iterable.
///
/// In particular, callers should be aware that [PathMetrics.length] is the
/// number of contours, **not the length of the path**. To get the length of
/// a contour in a path, use [PathMetric.length].
///
/// If `forceClosed` is set to true, the contours of the path will be measured
/// as if they had been closed, even if they were not explicitly closed. ¿ü°¿üß  ¿ü¥¿\9¿\:¿\@¿\Q¿\A¿üÚáÅ¿†™Ä±/// The geometric description of a tangent: the angle at a point.
///
/// See also:
///  * [PathMetric.getTangentForOffset], which returns the tangent of an offset along a path. ¿†∂Äƒ ¿°¿° V/// Creates a [Tangent] with the given values.
///
/// The arguments must not be null.¿°!¿°'  ¿°0¿°6  ¿°C¿°I¿°Z¿°S¿°J¿°V¿°c¿°i¿°x¿°q¿°j¿°t¿°~ÅR¿¢Y¿¢Z¿¢cÄ√/// Creates a [Tangent] based on the angle rather than the vector.
///
/// The [vector] is computed to be the unit vector at the given angle, interpreted
/// as clockwise radians from the x axis.¿¢d¿¢l  ¿¢u¿¢}   ¿¢‘Ä—¿£ùÄ≥/// Position of the tangent.
///
/// When used with [PathMetric.getTangentForOffset], this represents the precise
/// position that the given offset along the path corresponds to. ¿£™Å¿§©ÄÁ/// The vector of the curve at [position].
///
/// When used with [PathMetric.getTangentForOffset], this is the vector of the
/// curve that is at the given offset along the path (i.e. the direction of the
/// curve at [position]). ¿§¥ÇΩ¿ßFÇ+/// The direction of the curve at [position].
///
/// When used with [PathMetric.getTangentForOffset], this is the angle of the
/// curve that is the given offset along the path (i.e. the direction of the
/// curve at [position]).
///
/// This value is in radians, with 0.0 meaning pointing along the x axis in
/// the positive x-axis direction, positive numbers pointing downward toward
/// the negative y-axis, i.e. in a clockwise direction, and negative numbers
/// pointing upward toward the positive y-axis, i.e. in a counter-clockwise
/// direction.     ¿ßuÑ¿™pÇÙ/// An iterable collection of [PathMetric] objects describing a [Path].
///
/// A [PathMetrics] object is created by using the [Path.computeMetrics] method,
/// and represents the path as it stood at the time of the call. Subsequent
/// modifications of the path do not affect the [PathMetrics] object.
///
/// Each path metric corresponds to a segment, or contour, of a path.
///
/// For example, a path consisting of a [Path.lineTo], a [Path.moveTo], and
/// another [Path.lineTo] will contain two contours and thus be represented by
/// two [PathMetric] objects.
///
/// This iterable does not memoize. Callers who need to traverse the list
/// multiple times, or who need to randomly access elements of the list, should
/// use [toList] on this object. ¿™¨s¿™∑¿™∏¿™π ¿™∫	¿™¿  ¿™≈¿™À  ¿™Á¿™›¿™È¿™˚¿™¸¿™˝¿´¿™˛¿´
¿´¿´¿´¿´#$¿´>  ¿´L;¿´q   ¿´L¿´M  ¿´ãÉ€¿´˙h/// Used by [PathMetrics] to track iteration from one segment of a path to the
/// next for measurement. ¿¨1G¿¨C¿¨D¿¨E ¿¨F¿¨L  ¿¨[¿¨a¿¨v¿¨o¿¨b¿¨r¿¨|¿¨à  ¿¨ó¿¨§  ¿¨µÅ¿¨–   ¿¨µ¿¨∂¿Æ©Äª¿Æ∫   ¿Æ©¿Æ™ ¿Øhå´¿≤OÇ‡/// Utilities for measuring a [Path] and extracting sub-paths.
///
/// Iterate over the object returned by [Path.computeMetrics] to obtain
/// [PathMetric] objects. Callers that want to randomly access elements or
/// iterate multiple times should use `path.computeMetrics().toList()`, since
/// [PathMetrics] does not memoize.
///
/// Once created, the metrics are only valid for the path as it was specified
/// when [Path.computeMetrics] was called. If additional contours are added or
/// any contours are updated, the metrics need to be recomputed. Previously
/// created metrics will still refer to a snapshot of the path at the time they
/// were computed, rather than to the actual metrics for the new mutations to
/// the path. ¿≤^ÄÓ¿≤h¿≤i¿≤j ¿≤k¿≤q  ¿≤Ä¿≤Ü¿≤ó¿≤ê¿≤á¿≤ì¿≤ß¿≤†¿≤©¿≤±¿≤≤¿≤∏¿≤’¿≤π¿≤¡¿≤¬¿≤Á¿≤ﬁ¿≤È¿≤Ò¿≤Ú¿≤˙¿≥¿≤˚¿≥¿≥¿≥-¿≥ ¿≥/¿≥7¿≥8¿≥PI¿≥ì3/// Return the total length of the current contour. ¿≥ûÅA¿¥◊Å!/// Whether the contour is closed.
///
/// Returns true if the contour ends with a call to [Path.close] (which may
/// have been implied when using methods like [Path.addRect]) or if
/// `forceClosed` was specified as true in the call to [Path.computeMetrics].
/// Returns false otherwise. ¿¥‰Ç‡¿∑∏Ç±/// The zero-based index of the contour.
///
/// [Path] objects are made up of zero or more contours. The first contour is
/// created once a drawing command (e.g. [Path.lineTo]) is issued. A
/// [Path.moveTo] command after a drawing command may create a new contour,
/// although it may not if optimizations are applied that determine the move
/// command did not actually result in moving the pen.
///
/// This property is only valid with reference to its original iterator and
/// the contours of the path at the time the path's metrics were computed. If
/// additional contours were added or existing contours updated, this metric
/// will be invalid for the current state of the path. ¿∑…¿∑‹   ¿∑ÍÇ,¿π´Å£/// Computes the position of the current contour at the given offset, and the
/// angle of the path at that point.
///
/// For example, calling this method with a distance of 1.41 for a line from
/// 0.0,0.0 to 2.0,2.0 would give a point 1.0,1.0 and the angle 45 degrees
/// (but in radians).
///
/// Returns null if the contour has zero [length].
///
/// The distance is clamped to the [length] of the current contour. ¿πø¿π«   ¿∫ÅÅ¿∫ÙÄÃ/// Given a start and end distance, return the intervening segment(s).
///
/// `start` and `end` are clamped to legal values (0..[length])
/// Begin the segment with a moveTo if `startWithMoveTo` is true. ¿ª ¿ª  ¿ª
¿ª  ¿ª¿ª!  ¿ª2¿ªür¿ª≤   ¿ªü¿ª† ¿ºâK¿º  ¿ºMT ¿ºM¿ºY ¿ºZ	¿º`  ¿ºe¿ºk   ¿ƒÆÄØ¿≈EÄå/// The index of the current contour in the list of contours in the path.
///
/// [nextContour] will increment this to the zero based index.¿≈[¿≈\ ¿º§P¿º©  ¿º∂	¿ºº  ¿º¡¿º«   ¿º¯ÄΩ¿ºˇ  ¿Ω¿Ω   ¿Ω∏@¿Ωø  ¿Ω«¿ΩÃ   ¿Ω¸ÅÂ¿æ  ¿æ¿æ  ¿æ+¿æ3   ¿ø‰Y¿ø  ¿ø˚¿¿   ¿¿¿¿   ¿¿AÅ\¿¿F  ¿¿R¿¿W  ¿¿d¿¿l  ¿¿r
¿¿z  ¿¿¿¿Ö  ¿¿ñ¿¡†Äã¿¡•  ¿¡≤¿¡∏  ¿¡¿¿¡≈  ¿¡“¿¡⁄  ¿¡‡
¿¡Ë  ¿¡Ì¿¡Û  ¿¬¿¬/Äø¿¬4  ¿¬=¿¬B   ¿¬Ò?¿¬ˆ  ¿√ ¿√   ¿√„Äâ¿√Ë    ¿ƒo;¿ƒt     ¿»ﬂÜ¢¿…ÈÅ/// A mask filter to apply to shapes as they are painted. A mask filter is a
/// function that takes a bitmap of color pixels, and returns another bitmap of
/// color pixels.
///
/// Instances of this class are used with [Paint.maskFilter] on [Paint] objects. ¿…¯É>¿Ã“¿Ã”¿Ã◊Ç•/// Creates a mask filter that takes the shape being drawn and blurs it.
///
/// This is commonly used to approximate shadows.
///
/// The `style` argument controls the kind of effect to draw; see [BlurStyle].
///
/// The `sigma` argument controls the size of the effect. It is the standard
/// deviation of the Gaussian blur to apply. The value must be greater than
/// zero. The sigma corresponds to very roughly half the radius of the effect
/// in pixels.
///
/// A blur is an expensive operation and should therefore be used sparingly.
///
/// The arguments must not be null.
///
/// See also:
///
///  * [Canvas.drawShadow], which is a more efficient way to draw shadows.¿Ã›¿Ã„  ¿ÃÓ¿ÃÙ  ¿Õ¿Õ¿Õ¿Õ¿Õ¿Õ¿Õ¿Õ%¿Õ4¿Õ-¿Õ&¿Õ0¿Õ:¿ÕJ  ¿ÕT¿Õa  ¿ÕÌ¿Õ˛ ¿Œ
¿Œ¿Œ( ¿Œ4¿ŒÊ;¿Œ˙   ¿ŒÊ¿ŒÁ¿ŒNÄî¿Œh  ¿Œk¿Œs  ¿ŒN¿ŒO¿œ%Z¿œ8   ¿œ%¿œ& ¿œÉò’¿—NÅƒ/// A description of a color filter to apply when drawing a shape or compositing
/// a layer with a particular [Paint]. A color filter is a function that takes
/// two colors, and outputs one color. When applied during compositing, it is
/// independently applied to each pixel of the layer being drawn before the
/// entire layer is merged with the destination.
///
/// Instances of this class are used with [Paint.colorFilter] on [Paint]
/// objects. ¿—uÇX¿”:¿”;¿”?Å•/// Creates a color filter that applies the blend mode given as the second
/// argument. The source color is the one given as the first argument, and the
/// destination color is the one from the layer being composited.
///
/// The output of this filter is then composited into the background according
/// to the [Paint.blendMode], using the output of this filter as the source
/// and the background as the destination.¿”@¿”G  ¿”M¿”X  ¿”q¿”j¿”s¿”ç¿”Ç¿”è¿”™¿”¢¿”¨¿”¿¿”∫¿”¬¿”—à%¿€p¿€q¿€wá/// Construct a color filter that transforms a color by a 5x5 matrix, where
/// the fifth row is implicitly added in an identity configuration.
///
/// Every pixel's color value, repsented as an `[R, G, B, A]`, is matrix
/// multiplied to create a new color:
///
/// ```text
/// | R' |   | a00 a01 a02 a03 a04 |   | R |
/// | G' |   | a10 a11 a22 a33 a44 |   | G |
/// | B' | = | a20 a21 a22 a33 a44 | * | B |
/// | A' |   | a30 a31 a22 a33 a44 |   | A |
/// | 1  |   |  0   0   0   0   1  |   | 1 |
/// ```
///
/// The matrix is in row-major order and the translation column is specified
/// in unnormalized, 0...255, space. For example, the identity matrix is:
///
/// ```
/// const ColorFilter identity = ColorFilter.matrix(<double>[
///   1, 0, 0, 0, 0,
///   0, 1, 0, 0, 0,
///   0, 0, 1, 0, 0,
///   0, 0, 0, 1, 0,
/// ]);
/// ```
///
/// ## Examples
///
/// An inversion color matrix:
///
/// ```
/// const ColorFilter invert = ColorFilter.matrix(<double>[
///   -1,  0,  0, 0, 255,
///    0, -1,  0, 0, 255,
///    0,  0, -1, 0, 255,
///    0,  0,  0, 1,   0,
/// ]);
/// ```
///
/// A sepia-toned color matrix (values based on the [Filter Effects Spec](https://www.w3.org/TR/filter-effects-1/#sepiaEquivalent)):
///
/// ```
/// const ColorFilter sepia = ColorFilter.matrix(<double>[
///   0.393, 0.769, 0.189, 0, 0,
///   0.349, 0.686, 0.168, 0, 0,
///   0.272, 0.534, 0.131, 0, 0,
///   0,     0,     0,     1, 0,
/// ]);
/// ```
///
/// A greyscale color filter (values based on the [Filter Effects Spec](https://www.w3.org/TR/filter-effects-1/#grayscaleEquivalent)):
///
/// ```
/// const ColorFilter greyscale = ColorFilter.matrix(<double>[
///   0.2126, 0.7152, 0.0722, 0, 0,
///   0.2126, 0.7152, 0.0722, 0, 0,
///   0.2126, 0.7152, 0.0722, 0, 0,
///   0,      0,      0,      1, 0,
/// ]);
/// ```¿€x¿€Ü  ¿€ú¿€ï¿€û¿€∑¿€¨¿€π¿€œ¿€«¿€—¿€Á¿€·¿€È¿€˙ÄÙ¿‹g¿‹h¿‹yW/// Construct a color filter that applies the sRGB gamma curve to the RGB
/// channels. ¿‹ã¿‹Ñ¿‹ç¿‹¶¿‹õ¿‹®¿‹æ¿‹∂¿‹¿¿‹‘¿‹Œ¿‹÷¿‹ÚÅ¿›l¿›m¿›~d/// Creates a color filter that applies the inverse of the sRGB gamma curve
/// to the RGB channels. ¿›ê¿›â¿›í¿›´¿›†¿›≠¿›√¿›ª¿›≈¿›Ÿ¿›”¿›€¿›˜¿ﬁ  ¿ﬁ¿ﬁ  ¿ﬁ-¿ﬁA  ¿ﬁL¿ﬁV  ¿ﬁô¿ﬁ™ ¿ﬁ∑¿ﬁŒ!¿ﬁﬂ ¿ﬁÓ¿ﬂ,¿ﬂ# ¿ﬂ=¿ﬂ[,¿ﬂl ¿ﬂÜ¿‰Y¿‰   ¿‰¿‰¿‰cÅ¡¿‰z   ¿‰c¿‰d¿ﬂ∆V¿ﬂﬂ   ¿ﬂ∆¿ﬂ«¿‡ Ç¨¿‡.    ¿‚–Å2¿‚Í  ¿‚Ì¿‚ı  ¿‚–¿‚—¿Ê(Ç.¿Ê;   ¿Ê(¿Ê) ¿ËZÜ•¿È•ÅD/// A [ColorFilter] that is backed by a native SkColorFilter.
///
/// This is a private class, rather than being the implementation of the public
/// ColorFilter, because we want ColorFilter to be const constructible and
/// efficiently comparable, so that widgets can check for ColorFilter equality to
/// avoid repainting. ¿È◊Äœ¿È„¿È‰¿ÈË ¿ÈÈ¿ÈÔ  ¿È˝¿Í¿Í¿Í¿Í¿Í¿Í¿Í"¿ÍJ¿Í1¿Í#¿Í*¿Í+¿Í4¿Í?¿Í@¿Í™ÄÀ¿Í∂¿Í∑¿ÍΩ ¿Íæ¿Íƒ  ¿Í“¿Íÿ¿ÍË¿Í·¿ÍŸ¿Í‰¿ÍÒ¿Í˜¿Î!¿Î¿Í¯¿Íˇ¿Î ¿Î	¿Î¿Î¿ÎxÄ∆¿ÎÑ¿ÎÖ¿Îñ ¿Îó¿Îù  ¿Î´¿Î±¿Î¡¿Î∫¿Î≤¿ÎΩ¿Î ¿Î–¿Ï¿Îﬂ¿Î—¿Îÿ¿ÎŸ¿Î‚¿ÎÌ¿ÎÓ¿ÏBÄ∆¿ÏN¿ÏO¿Ï` ¿Ïa¿Ïg  ¿Ïu¿Ï{¿Ïã¿ÏÑ¿Ï|¿Ïá¿Ïî¿Ïö¿Ïœ¿Ï©¿Ïõ¿Ï¢¿Ï£¿Ï¨¿Ï∑¿Ï∏¿ÌÄç¿Ìío/// The original Dart object that created the native wrapper, which retains
/// the values used for the filter.  ¿Ìû5¿Ì£    ¿Ì÷G¿Ì€  ¿ÌÂ	¿ÌÍ  ¿Ì¿Ìı   ¿Ó E¿Ó%  ¿Ó1¿Ó>   ¿ÓhI¿Óm    ¿Ó¥I¿Óπ     ¿ÔàÎ¿„Å“/// A filter operation to apply to a raster image.
///
/// See also:
///
///  * [BackdropFilter], a widget that applies [ImageFilter] to its rendering.
///  * [ImageFiltered], a widget that applies [ImageFilter] to its children.
///  * [SceneBuilder.pushBackdropFilter], which is the low-level API for using
///    this class as a backdrop filter.
///  * [SceneBuilder.pushImageFilter], which is the low-level API for using
///    this class as a child layer filter. ¿ÛÅ[¿ÒB¿ÒC¿ÒG9/// Creates an image filter that applies a Gaussian blur.¿ÒJ¿ÒR  ¿Ò_¿Òg  ¿Òt"¿Ò~  ¿ÒZ¿Òo¿Òà¿Òê¿Òë¿ÚRÇ_¿ÛG¿ÛH¿ÛNÄŸ/// Creates an image filter that applies a matrix transformation.
///
/// For example, applying a positive scale matrix (see [Matrix4.diagonal3])
/// when used with [BackdropFilter] would magnify the background image.¿ÛO¿Û\  ¿Û{/¿Ûä  ¿Ûô¿Û¶¿Ûß¿ÙµÅÕ¿ı√¿ıƒ¿ıÀÄ/// Composes the `inner` filter with `outer`, to combine their effects.
///
/// Creates a single [ImageFilter] that when applied, has the same effect as
/// subsequently applying `inner` and `outer`, i.e.,
/// result = outer(inner(source)).¿ıŒ¿ı‰  ¿ıÍ¿ˆ     ¿˜Õ¿˜ÿ    ¿˜$$¿˜1     ¿˜ÓÉQ¿˜Ù  ¿¯"H ¿¯"¿¯4 ¿¯7¿¯F  ¿¯K¿¯Z   ¿¯n¿¯Ä  ¿¯à!¿¯ú  ¿¯œ@¿¯Á ¿¯ˆ¿˘¿˘¿˘	¿˘¿˘
¿˘WL¿˘n   ¿˘W¿˘X¿˙ÛJ¿˚   ¿˙Û¿˙Ù¿˘@¿˘,   ¿˘¿˘¿˘ßM¿˘∫   ¿˘ß¿˘®¿˘¯Ä˜¿˙  ¿˙¿˙  ¿˘¯¿˘˘ ¿˚AÑj¿˚G  ¿˚{a ¿˚{¿˚ì ¿˚ñ¿˚•  ¿˚¨¿˚ª  ¿˚¬¿˚—   ¿˚‡¿˚Ì  ¿˚˜¿¸  ¿¸¿¸  ¿¸>>¿¸V ¿¸e¿¸q¿¸r¿¸v¿¸{¿¸w¿¸ƒÄÌ¿¸œ    ¿˝µS¿˝Ã   ¿˝µ¿˝∂¿ˇn;¿ˇÇ   ¿ˇn¿ˇo¿¸Ä@¿¸ô   ¿¸Ä¿¸Å¿˛T¿˛   ¿˛¿˛¿˛dÅ¿˛~  ¿˛Å¿˛â  ¿˛d¿˛e ¿ˇ≠ÉÖ¿ˇ≥  ¿ˇ‚N ¿ˇ‚¿ˇı ¿ˇ¯¿   ¿ ¿ "   ¿ 4¿ F  ¿ U¿ g  ¿ îB¿ ¨ ¿ ª¿ «¿ »¿ –¿ ’¿ —¿s¿5   ¿¿¿ÎE¿ˇ   ¿Î¿Ï¿ ⁄@¿ Û   ¿ ⁄¿ €¿ï_¿®   ¿ï¿ñ¿¯ÄÔ¿  ¿¿  ¿¯¿˘ ¿4ä¿dÅ)/// An [ImageFilter] that is backed by a native SkImageFilter.
///
/// This is a private class, rather than being the implementation of the public
/// ImageFilter, because we want ImageFilter to be efficiently comparable, so that
/// widgets can check for ImageFilter equality to avoid repainting. ¿œÅ+¿¿¿9/// Creates an image filter that applies a Gaussian blur.¿¿7  	¿D¿J¿Y¿R¿K¿U¿j¿b¿l¿ZÇ#¿H¿I¿OÄŸ/// Creates an image filter that applies a matrix transformation.
///
/// For example, applying a positive scale matrix (see [Matrix4.diagonal3])
/// when used with [BackdropFilter] would magnify the background image.¿P¿d  	¿q¿w¿Ü¿¿x¿Ç¿ó¿è¿ô¿›ÅE¿	¿	¿	+//// Converts a color filter to an image filter.¿	,¿	9  	¿	F¿	L¿	[¿	T¿	M¿	W¿	l¿	d¿	n¿
Å√¿
æ¿
ø¿
«0/// Composes `_innerFilter` with `_outerFilter`.¿
»¿
›  	¿
Í¿
¿
ˇ¿
¯¿
Ò¿
˚¿¿¿¿∂Äç¿<o/// The original Dart object that created the native wrapper, which retains
/// the values used for the filter.  ¿ñ5¿õ    ¿˝Y¿  ¿¿  ¿¿#  ¿*¿/   ¿ÄY¿Ö  ¿ë¿û  ¿¶¿´   ¿
%V¿
*  ¿
;¿
J   ¿En¿J  ¿X¿f  ¿r¿Ä    ¿HÅ<¿…z/// Base class for objects such as [Gradient] and [ImageShader] which
/// correspond to shaders as used by [Paint.shader]. ¿ıÄç¿}¿~¿a/// This class is created by the engine, and should not be instantiated
/// or extended directly. ¿[¿\¿b¿s¿c    ¿%O£·¿&ñÅ@/// A shader (as used by [Paint.shader]) that renders a color gradient.
///
/// There are several types of gradients, represented by the various constructors
/// on this class.
///
/// See also:
///
///  * [Gradient](https://api.flutter.dev/flutter/painting/Gradient-class.html), the class in the [painting] library.
/// ¿&Èà¿,¿,¿,ÑÊ/// Creates a linear gradient from `from` to `to`.
///
/// If `colorStops` is provided, `colorStops[i]` is a number from 0.0 to 1.0
/// that specifies where `color[i]` begins in the gradient. If `colorStops` is
/// not provided, then only two stops, at 0.0 and 1.0, are implied (and
/// `color` must therefore only have two entries).
///
/// The behavior before `from` and after `to` is described by the `tileMode`
/// argument. For details, see the [TileMode] enum.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_linear.png)
///
/// If `from`, `to`, `colors`, or `tileMode` are null, or if `colors` or
/// `colorStops` contain null values, this constructor will throw a
/// [NoSuchMethodError].
///
/// If `matrix4` is provided, the gradient fill will be transformed by the
/// specified 4x4 matrix relative to the local coordinate system. `matrix4` must
/// be a column-major matrix packed into a list of 16 values.¿,¿,  ¿,"	¿,*  ¿,1¿,>  ¿,K¿,Z  ¿,i"¿,s  ¿,ë¿,ü  -¿,}¿,Ö¿,Ü¿,Æ¿,¥¿,…¿,µ¿,√¿,»¿,ƒ¿,”¿,Ÿ¿,Ï¿,⁄¿,Ë¿,Î¿,È¿,ˆ¿,¸¿-¿-¿,˝¿-¿-¿-¿-,¿-%¿-¿-(¿-6¿-<¿-h¿-M¿-E¿-=¿-H¿-P¿-_¿-g¿-`¿-r¿-w¿-x¿-y¿-z¿/°å
¿6£¿6§¿6™ÜΩ/// Creates a radial gradient centered at `center` that ends at `radius`
/// distance from the center.
///
/// If `colorStops` is provided, `colorStops[i]` is a number from 0.0 to 1.0
/// that specifies where `color[i]` begins in the gradient. If `colorStops` is
/// not provided, then only two stops, at 0.0 and 1.0, are implied (and
/// `color` must therefore only have two entries).
///
/// The behavior before and after the radius is described by the `tileMode`
/// argument. For details, see the [TileMode] enum.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_radial.png)
///
/// If `center`, `radius`, `colors`, or `tileMode` are null, or if `colors` or
/// `colorStops` contain null values, this constructor will throw a
/// [NoSuchMethodError].
///
/// If `matrix4` is provided, the gradient fill will be transformed by the
/// specified 4x4 matrix relative to the local coordinate system. `matrix4` must
/// be a column-major matrix packed into a list of 16 values.
///
/// If `focal` is provided and not equal to `center` and `focalRadius` is
/// provided and not equal to 0.0, the generated shader will be a two point
/// conical radial gradient, with `focal` being the center of the focal
/// circle and `focalRadius` being the radius of that circle. If `focal` is
/// provided and not equal to `center`, at least one of the two offsets must
/// not be equal to [Offset.zero].¿6∞¿6∏  ¿6√¿6À  ¿6÷¿6„  ¿6¿6ˇ  ¿7"¿7  ¿76¿7D  ¿7P¿7Y  ¿7c¿7k  '¿7"¿7*¿7+¿7x¿7É¿7â¿7†¿7ä¿7ò¿7ü¿7ô¿7™¿7∞¿7ø¿7∏¿7±¿7ª¿7…¿7œ¿7‡¿7Ÿ¿7–¿7‹¿7Í¿7¿8¿8¿7˘¿7Ò¿7¸¿8¿8¿8¿8¿8&¿8+¿8,¿8-¿8.¿=Fâü¿Cí¿Cì¿CòÜ/// Creates a sweep gradient centered at `center` that starts at `startAngle`
/// and ends at `endAngle`.
///
/// `startAngle` and `endAngle` should be provided in radians, with zero
/// radians being the horizontal line to the right of the `center` and with
/// positive angles going clockwise around the `center`.
///
/// If `colorStops` is provided, `colorStops[i]` is a number from 0.0 to 1.0
/// that specifies where `color[i]` begins in the gradient. If `colorStops` is
/// not provided, then only two stops, at 0.0 and 1.0, are implied (and
/// `color` must therefore only have two entries).
///
/// The behavior before `startAngle` and after `endAngle` is described by the
/// `tileMode` argument. For details, see the [TileMode] enum.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_sweep.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_sweep.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_sweep.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_sweep.png)
///
/// If `center`, `colors`, `tileMode`, `startAngle`, or `endAngle` are null,
/// or if `colors` or `colorStops` contain null values, this constructor will
/// throw a [NoSuchMethodError].
///
/// If `matrix4` is provided, the gradient fill will be transformed by the
/// specified 4x4 matrix relative to the local coordinate system. `matrix4` must
/// be a column-major matrix packed into a list of 16 values.¿Cû¿C¶  ¿C±¿Cæ  ¿CÀ¿C⁄  ¿CÈ"¿CÛ  ¿D¿D  ¿D.¿D6  ¿DQ¿D_  >¿C˝¿D¿D¿D%¿DH¿D@¿DD¿DE¿DJ¿Dn¿Dt¿Dã¿Du¿DÉ¿Dä¿DÑ¿Dï¿Dõ¿D™¿D£¿Dú¿D¶¿D¥¿D∫¿DÀ¿Dƒ¿Dª¿D«¿D’¿D€¿DÓ¿DÁ¿D‹¿DÍ¿D¯¿D˛¿E¿E¿Dˇ¿E¿E¿E¿E5¿E+¿E ¿E-¿E?¿EE¿Eq¿EV¿EN¿EF¿EQ¿EY¿Eh¿Ep¿Ei¿E{¿EÄ¿EÅ¿EÇ¿EÉ  ¿&≥2¿&∏    ¿/	Äî¿/  ¿/¿/'  ¿/1¿/<  ¿/C¿/Q  ¿/\¿/a  ¿/j¿/x   ¿;ÆÄ¨¿;≥  ¿;ø¿;«  ¿;œ¿;◊  ¿;ﬂ¿;Á  ¿;Ó¿;˘  ¿< ¿<  ¿<¿<  ¿<'¿<5   ¿<]ÄÂ¿<b  
¿<o¿<w  ¿<~¿<Ü  ¿<ç¿<ï  ¿<°¿<©  ¿<Æ¿<∂  ¿<ª¿<√  ¿<Õ¿<ÿ  ¿<ﬂ¿<Ì  ¿<¯¿<˝  ¿=¿=   ¿FËÄæ¿FÌ  ¿F¯¿G   ¿G¿G  ¿G¿G#  ¿G*¿G8  ¿GC¿GH  ¿GQ¿GY  ¿Gd¿Gl  ¿Gu¿GÉ   ¿G™ÅÑ¿G∂  ¿G ¿G◊  ¿Gﬁ¿GÌ    ¿I2Ö-¿Iv=/// A shader (as used by [Paint.shader]) that tiles an image. ¿IïÑ	 ¿K∏¿K√Å¯/// Creates an image-tiling shader. The first argument specifies the image to
/// tile. The second and third arguments specify the [TileMode] for the x
/// direction and y direction respectively. The fourth argument gives the
/// matrix to apply to the effect. All the arguments are required and must not
/// be null, except for [filterQuality]. If [filterQuality] is not specified
/// at construction time it will be deduced from the environment where it is used,
/// such as from [Paint.filterQuality].¿Kƒ¿KÀ  ¿K—¿K€  ¿Kﬂ¿KÈ  ¿KÌ¿K˙  ¿L¿L  "¿Kú¿Kù¿K£¿K¥¿K§¿L1¿L7¿LE¿L>¿L8¿LA¿Ls¿Ly¿LÖ¿L~¿Lz¿LÅ¿Lå¿Lí¿Lû¿Ló¿Lì¿Lö¿L•¿L´¿Lª¿L¥¿L¨¿L∑¿L¬¿L«¿L»¿L…¿L   ¿M°5¿M¶    ¿MŸÄÑ¿Mﬁ  ¿MÌ¿Mı  ¿M˚¿N   ¿N¿N	  ¿N¿N  ¿N%¿N2    ¿Naí¿O÷Ån/// An instance of [FragmentProgram] creates [Shader] objects (as used by [Paint.shader]) that run SPIR-V code.
///
/// This API is in beta and does not yet work on web.
/// See https://github.com/flutter/flutter/projects/207 for roadmap.
///
/// [A current specification of valid SPIR-V is here.](https://github.com/flutter/engine/blob/main/lib/spirv/README.md)
/// ¿R∫År¿RÂ¿RÊ¿RÁ ¿RÓ¿S  ¿S¿S  ¿R∫¿Rª¿R¡¿R“¿R¬¿S¿T0!¿T?  ¿TU¿Td   ¿PÇ™¿RÅ«/// Creates a fragment program from SPIR-V byte data as an input.
///
/// One instance should be created per SPIR-V input. The constructed object
/// should then be reused via the [shader] method to create [Shader] objects
/// that can be used by [Shader.paint].
///
/// [A current specification of valid SPIR-V is here.](https://github.com/flutter/engine/blob/master/lib/spirv/README.md)
/// SPIR-V not meeting this specification will throw an exception. ¿R¿R&  ¿R0¿R6  ¿RB¿Tv9¿T{    ¿T≤G¿T∑  ¿TΩ¿T≈  ¿T ¿T–   ¿T˝äﬁ¿\CÜ‹/// Constructs a [Shader] object suitable for use by [Paint.shader] with
/// the given uniforms.
///
/// This method is suitable to be called synchronously within a widget's
/// `build` method or from [CustomPainter.paint].
///
/// `floatUniforms` can be passed optionally to initialize the shader's
/// uniforms. If they are not set they will each default to 0.
///
/// When initializing `floatUniforms`, the length of float uniforms must match
/// the total number of floats defined as uniforms in the shader, or an
/// [ArgumentError] will be thrown. Details are below.
///
/// Consider the following snippit of GLSL code.
///
/// ```
/// layout (location = 0) uniform float a;
/// layout (location = 1) uniform vec2 b;
/// layout (location = 2) uniform vec3 c;
/// layout (location = 3) uniform mat2x2 d;
/// ```
///
/// When compiled to SPIR-V and provided to the constructor, `floatUniforms`
/// must have a length of 10. One per float-component of each uniform.
///
/// `program.shader(floatUniforms: Float32List.fromList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));`
///
/// The uniforms will be set as follows:
///
/// a: 1
/// b: [2, 3]
/// c: [4, 5, 6]
/// d: [7, 8, 9, 10] // 2x2 matrix in column-major order
///
/// `imageSamplers` must also be sized correctly, matching the number of UniformConstant
/// variables of type SampledImage specified in the SPIR-V code.
///
/// Consider the following snippit of GLSL code.
///
/// ```
/// layout (location = 0) uniform sampler2D a;
/// layout (location = 1) uniform sampler2D b;
/// ```
///
/// After being compiled to SPIR-V  `imageSamplers` must have a length
/// of 2.
///
/// Once a [Shader] is built, uniform values cannot be changed. Instead,
/// [shader] must be called again with new uniform values. ¿\P¿\^  ¿\p"¿\Ñ   ¿_ﬂÄî¿_‰  ¿_Ò¿`  ¿`¿`  ¿`,!¿`?    ¿`wÉª¿`ó  ¿`∫Å ¿ac¿arÄ†/// This class is created by the engine and should not be instantiated
/// or extended directly.
///
/// To create a [_FragmentShader], use a [FragmentProgram].¿ax¿a~  ¿aã¿aë  ¿a§¿a™  ¿a¡¿a∆¿a«¿a»¿a…¿aœ¿aÂ  ¿aÒ ¿b  ¿b(¿b-  ¿c≈k¿cŸ   ¿c≈¿c∆¿bBÅ¿b\  ¿b_¿bg  ¿bB¿bC¿`w¿`x¿`~¿`è¿`¿f-ë€¿fk7/// A set of vertex data used by [Canvas.drawVertices]. ¿fôà ¿iú¿i§Ç‚/// Creates a set of vertex data for use with [Canvas.drawVertices].
///
/// The [mode] and [positions] parameters must not be null.
/// The [positions] parameter is a list of triangular mesh vertices(xy).
///
/// If the [textureCoordinates] or [colors] parameters are provided, they must
/// be the same length as [positions].
///
/// The [textureCoordinates] parameter is used to cutout
/// the image set in the image shader.
/// The cut part is applied to the triangular mesh.
/// Note that the [textureCoordinates] are the coordinates on the image.
///
/// If the [indices] parameter is provided, all values in the list must be
/// valid index values for [positions].
/// e.g. The [indices] parameter for a simple triangle is [0,1,2].¿i™¿i∂  ¿iø¿iÕ  ¿i› ¿iÏ  ¿j¿j  ¿j¿j(  ¿j7¿j=¿jJ¿jC¿j>¿jF¿jT¿jZ¿jl¿je¿j[¿jh¿n™àu¿s”¿s‘¿s◊ÑÍ/// Creates a set of vertex data for use with [Canvas.drawVertices], directly
/// using the encoding methods of [new Vertices].
/// Note that this constructor uses raw typed data lists,
/// so it runs faster than the [Vertices()] constructor
/// because it doesn't require any conversion from Dart lists.
///
/// The [mode] parameter must not be null.
///
/// The [positions] parameter is a list of triangular mesh vertices and
/// is interpreted as a list of repeated pairs of x,y coordinates.
/// It must not be null.
///
/// The [textureCoordinates] list is interpreted as a list of repeated pairs
/// of x,y coordinates, and must be the same length of [positions] if it
/// is not null.
/// The [textureCoordinates] parameter is used to cutout
/// the image set in the image shader.
/// The cut part is applied to the triangular mesh.
/// Note that the [textureCoordinates] are the coordinates on the image.
///
/// The [colors] list is interpreted as a list of ARGB encoded colors, similar
/// to [Color.value]. It must be half length of [positions] if it is not
/// null.
///
/// If the [indices] list is provided, all values in the list must be
/// valid index values for [positions].
/// e.g. The [indices] parameter for a simple triangle is [0,1,2].¿s›¿sÈ  ¿sÚ¿sˇ  ¿t¿t  ¿t4¿t@  ¿tK¿tX  ¿tg¿tm¿tz¿ts¿tn¿tv¿tÑ¿tä¿tú¿tï¿tã¿tò  ¿w#Ä„¿w(  ¿w.¿w8  ¿wQ¿wV  ¿wh¿wu  ¿wå¿wö  ¿w∫¿w∆  ¿w⁄¿wÁ    ¿}4¿ ≠¿Ä§Éi/// An interface for recording graphical operations.
///
/// [Canvas] objects are used in creating [Picture] objects, which can
/// themselves be used with a [SceneBuilder] to build a [Scene]. In
/// normal usage, however, this is all handled by the framework.
///
/// A canvas has a current transformation matrix which is applied to all
/// operations. Initially, the transformation matrix is the identity transform.
/// It can be modified using the [translate], [scale], [rotate], [skew],
/// and [transform] methods.
///
/// A canvas also has a current clip region which is applied to all operations.
/// Initially, the clip region is infinite. It can be modified using the
/// [clipRect], [clipRRect], and [clipPath] methods.
///
/// The current transform and clip can be saved and restored using the stack
/// managed by the [save], [saveLayer], and [restore] methods. ¿Ä–Ñ( ¿Év¿É|Çq/// Creates a canvas for recording graphical operations into the
/// given picture recorder.
///
/// Graphical operations that affect pixels entirely outside the given
/// `cullRect` might be discarded by the implementation. However, the
/// implementation might draw outside these bounds if, for example, a command
/// draws partially inside and outside the `cullRect`. To ensure that pixels
/// outside a given region are discarded, consider using a [clipRect]. The
/// `cullRect` is optional; by default, all operations are kept.
///
/// To end the recording, call [PictureRecorder.endRecording] on the
/// given recorder.¿É}¿Éé  ¿Éô¿É†  ¿ÉZ¿É[¿Éa¿Ér¿Éb¿É≠¿É≥¿Éƒ¿ÉΩ¿É¥¿É¿¿ÜÃ¿Ü›   ;¿Ñ˚ÄŒ¿Ö   ¿Ö¿Ö  ¿Ö;¿ÖC  ¿Ö\
¿Öd  ¿Ö|¿ÖÑ  ¿Öû¿Ö¶   ¿ÜÎÅ=¿àÅ/// Saves a copy of the current transform and clip on the save stack.
///
/// Call [restore] to pop the save stack.
///
/// See also:
///
///  * [saveLayer], which does the same thing but additionally also groups the
///    commands done until the matching [restore].   ¿à,ïÂ¿ú…ìΩ/// Saves a copy of the current transform and clip on the save stack, and then
/// creates a new group which subsequent calls will become a part of. When the
/// save stack is later popped, the group will be flattened into a layer and
/// have the given `paint`'s [Paint.colorFilter] and [Paint.blendMode]
/// applied.
///
/// This lets you create composite effects, for example making a group of
/// drawing commands semi-transparent. Without using [saveLayer], each part of
/// the group would be painted individually, so where they overlap would be
/// darker than where they do not. By using [saveLayer] to group them
/// together, they can be drawn with an opaque color at first, and then the
/// entire group can be made transparent using the [saveLayer]'s paint.
///
/// Call [restore] to pop the save stack and apply the paint to the group.
///
/// ## Using saveLayer with clips
///
/// When a rectangular clip operation (from [clipRect]) is not axis-aligned
/// with the raster buffer, or when the clip operation is not rectilinear
/// (e.g. because it is a rounded rectangle clip created by [clipRRect] or an
/// arbitrarily complicated path clip created by [clipPath]), the edge of the
/// clip needs to be anti-aliased.
///
/// If two draw calls overlap at the edge of such a clipped region, without
/// using [saveLayer], the first drawing will be anti-aliased with the
/// background first, and then the second will be anti-aliased with the result
/// of blending the first drawing and the background. On the other hand, if
/// [saveLayer] is used immediately after establishing the clip, the second
/// drawing will cover the first in the layer, and thus the second alone will
/// be anti-aliased with the background when the layer is clipped and
/// composited (when [restore] is called).
///
/// For example, this [CustomPainter.paint] method paints a clean white
/// rounded rectangle:
///
/// ```dart
/// void paint(Canvas canvas, Size size) {
///   Rect rect = Offset.zero & size;
///   canvas.save();
///   canvas.clipRRect(new RRect.fromRectXY(rect, 100.0, 100.0));
///   canvas.saveLayer(rect, Paint());
///   canvas.drawPaint(new Paint()..color = Colors.red);
///   canvas.drawPaint(new Paint()..color = Colors.white);
///   canvas.restore();
///   canvas.restore();
/// }
/// ```
///
/// On the other hand, this one renders a red outline, the result of the red
/// paint being anti-aliased with the background at the clip edge, then the
/// white paint being similarly anti-aliased with the background _including
/// the clipped red paint_:
///
/// ```dart
/// void paint(Canvas canvas, Size size) {
///   // (this example renders poorly, prefer the example above)
///   Rect rect = Offset.zero & size;
///   canvas.save();
///   canvas.clipRRect(new RRect.fromRectXY(rect, 100.0, 100.0));
///   canvas.drawPaint(new Paint()..color = Colors.red);
///   canvas.drawPaint(new Paint()..color = Colors.white);
///   canvas.restore();
/// }
/// ```
///
/// This point is moot if the clip only clips one draw operation. For example,
/// the following paint method paints a pair of clean white rounded
/// rectangles, even though the clips are not done on a separate layer:
///
/// ```dart
/// void paint(Canvas canvas, Size size) {
///   canvas.save();
///   canvas.clipRRect(new RRect.fromRectXY(Offset.zero & (size / 2.0), 50.0, 50.0));
///   canvas.drawPaint(new Paint()..color = Colors.white);
///   canvas.restore();
///   canvas.save();
///   canvas.clipRRect(new RRect.fromRectXY(size.center(Offset.zero) & (size / 2.0), 50.0, 50.0));
///   canvas.drawPaint(new Paint()..color = Colors.white);
///   canvas.restore();
/// }
/// ```
///
/// (Incidentally, rather than using [clipRRect] and [drawPaint] to draw
/// rounded rectangles like this, prefer the [drawRRect] method. These
/// examples are using [drawPaint] as a proxy for "complicated draw operations
/// that will get clipped", to illustrate the point.)
///
/// ## Performance considerations
///
/// Generally speaking, [saveLayer] is relatively expensive.
///
/// There are a several different hardware architectures for GPUs (graphics
/// processing units, the hardware that handles graphics), but most of them
/// involve batching commands and reordering them for performance. When layers
/// are used, they cause the rendering pipeline to have to switch render
/// target (from one layer to another). Render target switches can flush the
/// GPU's command buffer, which typically means that optimizations that one
/// could get with larger batching are lost. Render target switches also
/// generate a lot of memory churn because the GPU needs to copy out the
/// current frame buffer contents from the part of memory that's optimized for
/// writing, and then needs to copy it back in once the previous render target
/// (layer) is restored.
///
/// See also:
///
///  * [save], which saves the current state, but does not create a new layer
///    for subsequent commands.
///  * [BlendMode], which discusses the use of [Paint.blendMode] with
///    [saveLayer]. ¿ú”¿ú⁄  ¿ú·¿úË   ¿û{¿û  ¿û1¿ûA  ¿ûN¿ûX   ¿ûíÄÎ¿ûó  ¿û¢¿û™  ¿û¡
¿û…  ¿ûﬂ¿ûÁ  ¿ûˇ¿ü  ¿ü ¿ü0  ¿üO¿üY   ¿üÅÅc¿†¬Å-/// Pops the current save stack, if there is anything to pop.
/// Otherwise, does nothing.
///
/// Use [save] and [saveLayer] to push state onto the stack.
///
/// If the state was pushed with with [saveLayer], then this call will also
/// cause the new layer to be composited into the previous layer.   ¿†ËÅ_¿¢Å"/// Returns the number of items on the save stack, including the
/// initial state. This means it returns 1 for a clean canvas, and
/// that each call to [save] and [saveLayer] increments it, and that
/// each matching call to [restore] decrements it.
///
/// This number cannot go below 1.   ¿¢KÄﬂ¿¢Äõ/// Add a translation to the current transform, shifting the coordinate space
/// horizontally by the first argument and vertically by the second argument. ¿¢˙	¿£  ¿£	¿£   ¿£.ÅD¿§;Ä˚/// Add an axis-aligned scale to the current transform, scaling by the first
/// argument in the horizontal direction and the second in the vertical
/// direction.
///
/// If [sy] is unspecified, [sx] will be used for the scale in both
/// directions. ¿§A	¿§I  ¿§M
¿§V   ¿§v8¿§{  ¿§Ç	¿§ä  ¿§ç	¿§ï   ¿§≤Äà¿•R/// Add a rotation to the current transform. The argument is in radians clockwise. ¿•¿•   ¿•>ÅJ¿¶XÅ/// Add an axis-aligned skew to the current transform, with the first argument
/// being the horizontal skew in rise over run units clockwise around the
/// origin, and the second argument being the vertical skew in rise over run
/// units clockwise around the origin. ¿¶]	¿¶e  ¿¶h	¿¶p   ¿¶åÅF¿ßÄà/// Multiply the current transform by the specified 4‚®â4 transformation matrix
/// specified as a list of values in column-major order. ¿ß&¿ß3   ¿ß’?¿ß⁄  ¿ßÂ¿ßÚ   ¿®ÇÓ¿©˘Å≈/// Reduces the clip region to the intersection of the current clip and the
/// given rectangle.
///
/// If [doAntiAlias] is true, then the clip will be anti-aliased.
///
/// If multiple draw commands intersect with the clip boundary, this can result
/// in incorrect blending at the clip boundary. See [saveLayer] for a
/// discussion of how to address that.
///
/// Use [ClipOp.difference] to subtract the provided rectangle from the
/// current clip. ¿™	¿™  ¿™ ¿™  ¿™1¿™7  ¿™¿™%¿™&¿™D¿´	Ä—¿´  ¿´¿´   ¿´6
¿´>  ¿´S¿´[  ¿´r¿´z  ¿´í
¿´ó  ¿´Ø¿´µ   ¿´ﬁÇX¿≠äÅñ/// Reduces the clip region to the intersection of the current clip and the
/// given rounded rectangle.
///
/// If [doAntiAlias] is true, then the clip will be anti-aliased.
///
/// If multiple draw commands intersect with the clip boundary, this can result
/// in incorrect blending at the clip boundary. See [saveLayer] for a
/// discussion of how to address that and some examples of using [clipRRect]. ¿≠î¿≠õ  ¿≠¢¿≠®  ¿≠µ¿Æ9O¿Æ>  ¿ÆI¿ÆV  ¿Æ\¿Æb   ¿ÆåÇ1¿∞Åd/// Reduces the clip region to the intersection of the current clip and the
/// given [Path].
///
/// If [doAntiAlias] is true, then the clip will be anti-aliased.
///
/// If multiple draw commands intersect with the clip boundary, this can result
/// in incorrect blending at the clip boundary. See [saveLayer] for a
/// discussion of how to address that. ¿∞	¿∞  ¿∞¿∞!  ¿∞.¿∞¿E¿∞≈  ¿∞œ	¿∞’  ¿∞⁄¿∞‡   ¿±	ÅJ¿±∫Ä•/// Paints the given [Color] onto the canvas, applying the given
/// [BlendMode], with the given color being the source and the background
/// being the destination. ¿±ƒ¿±À  ¿±—¿±‹   ¿≤VD¿≤[  ¿≤f	¿≤k  ¿≤q¿≤v   ¿≤ûÅƒ¿≥éÄ‚/// Draws a line between the given points using the given paint. The line is
/// stroked, the value of the [Paint.style] is ignored for this call.
///
/// The `p1` and `p2` arguments are interpreted as offsets from the origin. ¿≥ó	¿≥ü  ¿≥¢	¿≥™  ¿≥≠¿≥¥   ¿¥eÄ⁄¿¥j  ¿¥t	¿¥|  ¿¥ê	¿¥ò  ¿¥¨	¿¥¥  ¿¥»	¿¥–  ¿¥‰¿¥Ù  ¿µ¿µ   ¿µCÄ˛¿µ›Äå/// Fills the canvas with the given [Paint].
///
/// To fill the canvas with a solid color and blend mode, consider
/// [drawColor] instead. ¿µÁ¿µÓ   ¿∂D[¿∂I  ¿∂T¿∂d  ¿∂q¿∂{   ¿∂£ÅY¿∑3ÄÜ/// Draws a rectangle with the given [Paint]. Whether the rectangle is filled
/// or stroked (or both) is controlled by [Paint.style]. ¿∑<	¿∑B  ¿∑G¿∑N   ¿∑ˇÄ‰¿∏  ¿∏¿∏  ¿∏,
¿∏4  ¿∏I¿∏Q  ¿∏h¿∏p  ¿∏à¿∏ò  ¿∏∂¿∏¿   ¿∏ÁÅ@¿πÄé/// Draws a rounded rectangle with the given [Paint]. Whether the rectangle is
/// filled or stroked (or both) is controlled by [Paint.style]. ¿πâ¿πê  ¿πñ¿πù   ¿∫*Äí¿∫/  ¿∫:¿∫G  ¿∫_¿∫o  ¿∫é¿∫ò   ¿∫¿Ç¿ª÷Å/// Draws a shape consisting of the difference between two rounded rectangles
/// with the given [Paint]. Whether this shape is filled or stroked (or both)
/// is controlled by [Paint.style].
///
/// This shape is almost but not quite entirely unlike an annulus. ¿ª·¿ªË  ¿ªÓ¿ªı  ¿ª˚¿º   ¿º«Äº¿ºÃ  ¿ºÿ¿ºÂ  ¿º˛¿Ω  ¿Ω$¿Ω4  ¿ΩT¿Ω^   ¿ΩáÅè¿æMÄ∫/// Draws an axis-aligned oval that fills the given axis-aligned rectangle
/// with the given [Paint]. Whether the oval is filled or stroked (or both) is
/// controlled by [Paint.style]. ¿æV	¿æ\  ¿æa¿æh   ¿øÄ‰¿ø  ¿ø(¿ø0  ¿øF
¿øN  ¿øc¿øk  ¿øÇ¿øä  ¿ø¢¿ø≤  ¿ø–¿ø⁄   ¿¿Å∆¿¡Å/// Draws a circle centered at the point given by the first argument and
/// that has the radius given by the second argument, with the [Paint] given in
/// the third argument. Whether the circle is filled or stroked (or both) is
/// controlled by [Paint.style]. ¿¡ ¿¡(  ¿¡*¿¡2  ¿¡9¿¡@   ¿¡ ÄÃ¿¡œ  ¿¡€¿¡„  ¿¡¯¿¬   ¿¬¿¬  ¿¬7¿¬G  ¿¬g¿¬q   ¿¬öÉº¿≈7ÇÅ/// Draw an arc scaled to fit inside the given rectangle.
///
/// It starts from `startAngle` radians around the oval up to
/// `startAngle` + `sweepAngle` radians around the oval, with zero radians
/// being the point on the right hand side of the oval that crosses the
/// horizontal line that intersects the center of the rectangle and with positive
/// angles going clockwise around the oval. If `useCenter` is true, the arc is
/// closed back to the center, forming a circle sector. Otherwise, the arc is
/// not closed, forming a circle segment.
///
/// This method is optimized for drawing arcs and should be faster than [Path.arcTo]. ¿≈?	¿≈E  ¿≈J¿≈R  ¿≈]¿≈e  ¿≈p¿≈v  ¿≈Ä¿≈á   ¿∆YÅC¿∆^  	¿∆g¿∆o  ¿∆Ñ
¿∆å  ¿∆†¿∆®  ¿∆æ¿∆∆  ¿∆›¿∆Â  ¿« ¿«  ¿«#¿«)  ¿«C¿«S  ¿«p¿«z   ¿«†Å±¿»ûÄÓ/// Draws the given [Path] with the given [Paint].
///
/// Whether this shape is filled or stroked (or both) is controlled by
/// [Paint.style]. If the path is filled, then sub-paths within it are
/// implicitly closed (see [Path.close]). ¿»ß	¿»≠  ¿»≤¿»π   ¿…TÄÜ¿…Y  ¿…c	¿…i  ¿…¿…è  ¿…≠¿…∑   ¿…ﬁÅœ¿ àÄ†/// Draws the given [Image] into the canvas with its top-left corner at the
/// given [Offset]. The image is composited into the canvas using the given [Paint]. ¿ í¿ ô  ¿ ü¿ ß  ¿ Æ¿ µ   ¿À∞ÄÔ¿Àµ  ¿À¿¿À»  ¿À‡¿ÀË  ¿À¸¿Ã  ¿Ã¿Ã(  ¿ÃG¿ÃQ  ¿Ãm¿Ãr   ¿Ã£Ñ¿Œ_Å§/// Draws the subset of the given image described by the `src` argument into
/// the canvas in the axis-aligned rectangle given by the `dst` argument.
///
/// This might sample from outside the `src` rect by up to half the width of
/// an applied filter.
///
/// Multiple calls to this method with different arguments (from the same
/// image) can be batched into a single call to [drawAtlas] to improve
/// performance. ¿Œm¿Œt  ¿Œz¿ŒÄ  ¿ŒÑ¿Œä  ¿Œé¿Œï   ¿–ΩÅˇ¿–¬  ¿–—¿–Ÿ  ¿–ı¿–˝  ¿—¿—#  ¿—@¿—H  ¿—g¿—o  ¿—è¿—ó  ¿—µ¿—Ω  ¿—⁄¿—‚  ¿“¿“	  ¿“)¿“9  ¿“\¿“f  ¿“Ü¿“ã   ¿“¿Ö¿’“ÇÚ/// Draws the given [Image] into the canvas using the given [Paint].
///
/// The image is drawn in nine portions described by splitting the image by
/// drawing two horizontal lines and two vertical lines, where the `center`
/// argument describes the rectangle formed by the four points where these
/// four lines intersect each other. (This forms a 3-by-3 grid of regions,
/// the center region being described by the `center` argument.)
///
/// The four regions in the corners are drawn, without scaling, in the four
/// corners of the destination rectangle described by `dst`. The remaining
/// five regions are drawn by stretching them to fit such that they exactly
/// cover the destination rectangle while maintaining their relative
/// positions. ¿’‡¿’Á  ¿’Ì¿’Û  ¿’˙¿÷   ¿÷¿÷   ¿ÿBÇ¿ÿG  ¿ÿV¿ÿ^  ¿ÿz¿ÿÇ  ¿ÿ£¿ÿ´  ¿ÿÀ¿ÿ”  ¿ÿı¿ÿ˝  ¿Ÿ ¿Ÿ(  ¿ŸF¿ŸN  ¿Ÿk¿Ÿs  ¿Ÿí¿Ÿö  ¿Ÿ∫¿Ÿ   ¿ŸÌ¿Ÿ˜  ¿⁄¿⁄   ¿⁄QÄË¿⁄∂[/// Draw the given picture onto the canvas. To create a picture, see
/// [PictureRecorder]. ¿⁄¬¿⁄À   ¿€<?¿€A  ¿€N¿€W   ¿€Ñ√¿ﬂñÉÈ/// Draws the text in the given [Paragraph] into this canvas at the given
/// [Offset].
///
/// The [Paragraph] object must have had [Paragraph.layout] called on it
/// first.
///
/// To align the text, set the `textAlign` on the [ParagraphStyle] object
/// passed to the [new ParagraphBuilder] constructor. For more details see
/// [TextAlign] and the discussion at [new ParagraphStyle].
///
/// If the text is left aligned or justified, the left margin will be at the
/// position specified by the `offset` argument's [Offset.dx] coordinate.
///
/// If the text is right aligned or justified, the right margin will be at the
/// position described by adding the [ParagraphConstraints.width] given to
/// [Paragraph.layout], to the `offset` argument's [Offset.dx] coordinate.
///
/// If the text is centered, the centering axis will be at the position
/// described by adding half of the [ParagraphConstraints.width] given to
/// [Paragraph.layout], to the `offset` argument's [Offset.dx] coordinate. ¿ﬂ§¿ﬂØ  ¿ﬂπ¿ﬂ¡   ¿‡FÇ¿·bÅ/// Draws a sequence of points according to the given [PointMode].
///
/// The `points` argument is interpreted as offsets from the origin.
///
/// See also:
///
///  * [drawRawPoints], which takes `points` as a [Float32List] rather than a
///    [List<Offset>]. ¿·m¿·x  ¿·Ç¿·ê  ¿·ó¿·û   ¿‚\Ç∆¿„—Å]/// Draws a sequence of points according to the given [PointMode].
///
/// The `points` argument is interpreted as a list of pairs of floating point
/// numbers, where each pair represents an x and y offset from the origin.
///
/// See also:
///
///  * [drawPoints], which takes `points` as a [List<Offset>] rather than a
///    [List<Float32List>]. ¿„ﬂ¿„Í  ¿„Ù¿‰  ¿‰¿‰   ¿Â&Äπ¿Â+  ¿Â7¿ÂG  ¿Âg¿Âq  ¿Âé¿Âì  ¿Â∞¿ÂΩ   ¿Â„Ö¿È‹ÉÀ/// Draws the set of [Vertices] onto the canvas.
///
/// The [blendMode] parameter is used to control how the colors in
/// the [vertices] are combined with the colors in the [paint].
/// If there are no colors specified in [vertices] then the [blendMode] has
/// no effect. If there are colors in the [vertices],
/// then the color taken from the [Shader] or [Color] in the [paint] is
/// blended with the colors specified in the [vertices] using
/// the [blendMode] parameter.
/// For purposes of this blending,
/// the colors from the [paint] are considered the source and the colors from
/// the [vertices] are considered the destination.
///
/// All parameters must not be null.
///
/// See also:
///   * [new Vertices], which creates a set of vertices to draw on the canvas.
///   * [Vertices.raw], which creates the vertices using typed data lists
///     rather than unencoded lists.
///   * [paint], Image shaders can be used to draw images on a triangular mesh. ¿ÈÈ¿ÈÛ  ¿È¸¿Í  ¿Í¿Í   ¿ÍÙÄ¬¿Í˘  ¿Î¿Î  ¿Î/¿Î4  ¿ÎS¿Îc  ¿ÎÖ¿Îè   ¿Î∫ú¥¿ {ìΩ/// Draws many parts of an image - the [atlas] - onto the canvas.
///
/// This method allows for optimization when you want to draw many parts of an
/// image onto the canvas, such as when using sprites or zooming. It is more efficient
/// than using multiple calls to [drawImageRect] and provides more functionality
/// to individually transform each image part by a separate rotation or scale and
/// blend or modulate those parts with a solid color.
///
/// The method takes a list of [Rect] objects that each define a piece of the
/// [atlas] image to be drawn independently. Each [Rect] is associated with an
/// [RSTransform] entry in the [transforms] list which defines the location,
/// rotation, and (uniform) scale with which to draw that portion of the image.
/// Each [Rect] can also be associated with an optional [Color] which will be
/// composed with the associated image part using the [blendMode] before blending
/// the result onto the canvas. The full operation can be broken down as:
///
/// - Blend each rectangular portion of the image specified by an entry in the
/// [rects] argument with its associated entry in the [colors] list using the
/// [blendMode] argument (if a color is specified). In this part of the operation,
/// the image part will be considered the source of the operation and the associated
/// color will be considered the destination.
/// - Blend the result from the first step onto the canvas using the translation,
/// rotation, and scale properties expressed in the associated entry in the
/// [transforms] list using the properties of the [Paint] object.
///
/// If the first stage of the operation which blends each part of the image with
/// a color is needed, then both the [colors] and [blendMode] arguments must
/// not be null and there must be an entry in the [colors] list for each
/// image part. If that stage is not needed, then the [colors] argument can
/// be either null or an empty list and the [blendMode] argument may also be null.
///
/// The optional [cullRect] argument can provide an estimate of the bounds of the
/// coordinates rendered by all components of the atlas to be compared against
/// the clip to quickly reject the operation if it does not intersect.
///
/// An example usage to render many sprites from a single sprite atlas with no
/// rotations or scales:
///
/// ```dart
/// class Sprite {
///   int index;
///   double centerX;
///   double centerY;
/// }
///
/// class MyPainter extends CustomPainter {
///   // assume spriteAtlas contains N 10x10 sprites side by side in a (N*10)x10 image
///   ui.Image spriteAtlas;
///   List<Sprite> allSprites;
///
///   @override
///   void paint(Canvas canvas, Size size) {
///     Paint paint = Paint();
///     canvas.drawAtlas(spriteAtlas, <RSTransform>[
///       for (Sprite sprite in allSprites)
///         RSTransform.fromComponents(
///           rotation: 0.0,
///           scale: 1.0,
///           // Center of the sprite relative to its rect
///           anchorX: 5.0,
///           anchorY: 5.0,
///           // Location at which to draw the center of the sprite
///           translateX: sprite.centerX,
///           translateY: sprite.centerY,
///         ),
///     ], <Rect>[
///       for (Sprite sprite in allSprites)
///         Rect.fromLTWH(sprite.index * 10.0, 0.0, 10.0, 10.0),
///     ], null, null, null, paint);
///   }
///
///   ...
/// }
/// ```
///
/// Another example usage which renders sprites with an optional opacity and rotation:
///
/// ```dart
/// class Sprite {
///   int index;
///   double centerX;
///   double centerY;
///   int alpha;
///   double rotation;
/// }
///
/// class MyPainter extends CustomPainter {
///   // assume spriteAtlas contains N 10x10 sprites side by side in a (N*10)x10 image
///   ui.Image spriteAtlas;
///   List<Sprite> allSprites;
///
///   @override
///   void paint(Canvas canvas, Size size) {
///     Paint paint = Paint();
///     canvas.drawAtlas(spriteAtlas, <RSTransform>[
///       for (Sprite sprite in allSprites)
///         RSTransform.fromComponents(
///           rotation: sprite.rotation,
///           scale: 1.0,
///           // Center of the sprite relative to its rect
///           anchorX: 5.0,
///           anchorY: 5.0,
///           // Location at which to draw the center of the sprite
///           translateX: sprite.centerX,
///           translateY: sprite.centerY,
///         ),
///     ], <Rect>[
///       for (Sprite sprite in allSprites)
///         Rect.fromLTWH(sprite.index * 10.0, 0.0, 10.0, 10.0),
///     ], <Color>[
///       for (Sprite sprite in allSprites)
///         Colors.white.withAlpha(sprite.alpha),
///     ], BlendMode.srcIn, null, paint);
///   }
///
///   ...
/// }
/// ```
///
/// The length of the [transforms] and [rects] lists must be equal and
/// if the [colors] argument is not null then it must either be empty or
/// have the same length as the other two lists.
///
/// See also:
///
///  * [drawRawAtlas], which takes its arguments as typed data lists rather
///    than objects. ¿ Ö¿ å  ¿ £¿ ∂  ¿ “¿ ﬁ  ¿ ı¿  ¿¿'  ¿B¿I  ¿c¿j   ¿rùî¿!qóﬂ/// Draws many parts of an image - the [atlas] - onto the canvas.
///
/// This method allows for optimization when you want to draw many parts of an
/// image onto the canvas, such as when using sprites or zooming. It is more efficient
/// than using multiple calls to [drawImageRect] and provides more functionality
/// to individually transform each image part by a separate rotation or scale and
/// blend or modulate those parts with a solid color. It is also more efficient
/// than [drawAtlas] as the data in the arguments is already packed in a format
/// that can be directly used by the rendering code.
///
/// A full description of how this method uses its arguments to draw onto the
/// canvas can be found in the description of the [drawAtlas] method.
///
/// The [rstTransforms] argument is interpreted as a list of four-tuples, with
/// each tuple being ([RSTransform.scos], [RSTransform.ssin],
/// [RSTransform.tx], [RSTransform.ty]).
///
/// The [rects] argument is interpreted as a list of four-tuples, with each
/// tuple being ([Rect.left], [Rect.top], [Rect.right], [Rect.bottom]).
///
/// The [colors] argument, which can be null, is interpreted as a list of
/// 32-bit colors, with the same packing as [Color.value]. If the [colors]
/// argument is not null then the [blendMode] argument must also not be null.
///
/// An example usage to render many sprites from a single sprite atlas with no rotations
/// or scales:
///
/// ```dart
/// class Sprite {
///   int index;
///   double centerX;
///   double centerY;
/// }
///
/// class MyPainter extends CustomPainter {
///   // assume spriteAtlas contains N 10x10 sprites side by side in a (N*10)x10 image
///   ui.Image spriteAtlas;
///   List<Sprite> allSprites;
///
///   @override
///   void paint(Canvas canvas, Size size) {
///     // For best advantage, these lists should be cached and only specific
///     // entries updated when the sprite information changes. This code is
///     // illustrative of how to set up the data and not a recommendation for
///     // optimal usage.
///     Float32List rectList = Float32List(allSprites.length * 4);
///     Float32List transformList = Float32List(allSprites.length * 4);
///     for (int i = 0; i < allSprites.length; i++) {
///       final double rectX = sprite.spriteIndex * 10.0;
///       rectList[i * 4 + 0] = rectX;
///       rectList[i * 4 + 1] = 0.0;
///       rectList[i * 4 + 2] = rectX + 10.0;
///       rectList[i * 4 + 3] = 10.0;
///
///       // This example sets the RSTransform values directly for a common case of no
///       // rotations or scales and just a translation to position the atlas entry. For
///       // more complicated transforms one could use the RSTransform class to compute
///       // the necessary values or do the same math directly.
///       transformList[i * 4 + 0] = 1.0;
///       transformList[i * 4 + 1] = 0.0;
///       transformList[i * 4 + 2] = sprite.centerX - 5.0;
///       transformList[i * 4 + 3] = sprite.centerY - 5.0;
///     }
///     Paint paint = Paint();
///     canvas.drawAtlas(spriteAtlas, transformList, rectList, null, null, null, paint);
///   }
///
///   ...
/// }
/// ```
///
/// Another example usage which renders sprites with an optional opacity and rotation:
///
/// ```dart
/// class Sprite {
///   int index;
///   double centerX;
///   double centerY;
///   int alpha;
///   double rotation;
/// }
///
/// class MyPainter extends CustomPainter {
///   // assume spriteAtlas contains N 10x10 sprites side by side in a (N*10)x10 image
///   ui.Image spriteAtlas;
///   List<Sprite> allSprites;
///
///   @override
///   void paint(Canvas canvas, Size size) {
///     // For best advantage, these lists should be cached and only specific
///     // entries updated when the sprite information changes. This code is
///     // illustrative of how to set up the data and not a recommendation for
///     // optimal usage.
///     Float32List rectList = Float32List(allSprites.length * 4);
///     Float32List transformList = Float32List(allSprites.length * 4);
///     Int32List colorList = Int32List(allSprites.length);
///     for (int i = 0; i < allSprites.length; i++) {
///       final double rectX = sprite.spriteIndex * 10.0;
///       rectList[i * 4 + 0] = rectX;
///       rectList[i * 4 + 1] = 0.0;
///       rectList[i * 4 + 2] = rectX + 10.0;
///       rectList[i * 4 + 3] = 10.0;
///
///       // This example uses an RSTransform object to compute the necessary values for
///       // the transform using a factory helper method because the sprites contain
///       // rotation values which are not trivial to work with. But if the math for the
///       // values falls out from other calculations on the sprites then the values could
///       // possibly be generated directly from the sprite update code.
///       final RSTransform transform = RSTransform.fromComponents(
///         rotation: sprite.rotation,
///         scale: 1.0,
///         // Center of the sprite relative to its rect
///         anchorX: 5.0,
///         anchorY: 5.0,
///         // Location at which to draw the center of the sprite
///         translateX: sprite.centerX,
///         translateY: sprite.centerY,
///       );
///       transformList[i * 4 + 0] = transform.scos;
///       transformList[i * 4 + 1] = transform.ssin;
///       transformList[i * 4 + 2] = transform.tx;
///       transformList[i * 4 + 3] = transform.ty;
///
///       // This example computes the color value directly, but one could also compute
///       // an actual Color object and use its Color.value getter for the same result.
///       // Since we are using BlendMode.srcIn, only the alpha component matters for
///       // these colors which makes this a simple shift operation.
///       colorList[i] = sprite.alpha << 24;
///     }
///     Paint paint = Paint();
///     canvas.drawAtlas(spriteAtlas, transformList, rectList, colorList, BlendMode.srcIn, null, paint);
///   }
///
///   ...
/// }
/// ```
///
/// See also:
///
///  * [drawAtlas], which takes its arguments as objects rather than typed
///    data lists. ¿!~¿!Ö  ¿!ü¿!¨  ¿!Œ¿!€  ¿!ı¿"  ¿"¿"(  ¿"F¿"M  ¿"j¿"q   ¿&
Åx¿&  	¿&¿&*  ¿&I¿&S  ¿&o¿&t  ¿&ô¿&°  ¿&π¿&∆  ¿&Ê¿&Û  ¿'¿'  ¿'0¿'5  ¿'Q¿'_   ¿'ÜÇ¿(oÄ◊/// Draws a shadow for a [Path] representing the given material elevation.
///
/// The `transparentOccluder` argument should be true if the occluding object
/// is not opaque.
///
/// The arguments must not be null. ¿(z	¿(Ä  ¿(Ö¿(å  ¿(í¿(ö  ¿(§¿(™   ¿)éÄß¿)ì  ¿)ü	¿)•  ¿)Ω	¿)¬  ¿)€¿)„  ¿* ¿*    ¿*9â¸¿+®ÅN/// An object representing a sequence of recorded graphical operations.
///
/// To create a [Picture], use a [PictureRecorder].
///
/// A [Picture] can be placed in a [Scene] using a [SceneBuilder], via
/// the [SceneBuilder.addPicture] method. A [Picture] can also be
/// drawn into a [Canvas], using the [Canvas.drawPicture] method. ¿+’Ä ¿,ö¿,õ¿,úÄô/// This class is created by the engine, and should not be instantiated
/// or extended directly.
///
/// To create a [Picture], use a [PictureRecorder]. ¿,w¿,x¿,~¿,è¿,¿1j¿1o ¿1{¿1ÑÅô¿2=Äß/// Whether this reference to the underlying picture is [dispose]d.
///
/// This only returns a valid value if asserts are enabled, and must not be
/// used otherwise.   ¿3!Å¿3˚Ä…/// Returns the approximate number of bytes allocated for this object.
///
/// The actual size of this picture may be larger, particularly if it contains
/// references to image or other large objects.   ¿,£É;¿.^Åú/// Creates an image from this picture.
///
/// The returned image will be `width` pixels wide and `height` pixels high.
/// The picture is rasterized within the 0 (left), 0 (top), `width` (right),
/// `height` (bottom) bounds. Content outside these bounds is clipped.
///
/// Although the image is returned synchronously, the picture is actually
/// rasterized the first time the image is drawn and then cached. ¿.f	¿.k  ¿.q
¿.v   ¿/‚^¿/Í  ¿/Û	¿/¯  ¿/˛
¿0  ¿0
¿0   ¿0DÄÙ¿0ºn/// Release the resources used by this object. The object is no longer usable
/// after this method is called.   ¿1<)¿1A    ¿+à¿+â¿+è¿+†¿+ê¿47Üf¿5Ä‘/// Records a [Picture] containing a sequence of graphical operations.
///
/// To begin recording, construct a [Canvas] to record the commands.
/// To end recording, use the [PictureRecorder.endRecording] method. ¿5GÄÂ ¿6¿6Äù/// Creates a new idle PictureRecorder. To associate it with a
/// [Canvas] and begin recording, pass this [PictureRecorder] to the
/// [Canvas] constructor. ¿5Î¿5Ï¿5Ú¿6¿5Û¿:ã¿:ì  ¿6lÅ¨¿7˘Åu/// Whether this object is currently recording commands.
///
/// Specifically, this returns true if a [Canvas] object has been
/// created to record commands and recording has not yet ended via a
/// call to [endRecording], and false if either this
/// [PictureRecorder] has not yet been associated with a [Canvas],
/// or the [endRecording] method has already been called.   ¿6/9¿64    ¿8Ç¿99Å
/// Finishes recording graphical operations.
///
/// Returns a picture containing the graphical operations that have been
/// recorded thus far. After calling this function, both the picture recorder
/// and the canvas objects are invalid and cannot be used further.   ¿::M¿:?  ¿:M¿:V    ¿:üúñ¿:˙T/// A single shadow.
///
/// Multiple shadows are stacked together in a [TextStyle]. ¿;ÇÃ ¿<ê¿<ñÅp/// Construct a shadow.
///
/// The default shadow is a black shadow with zero offset and zero blur.
/// Default shadows should be completely covered by the casting element,
/// and not be visible.
///
/// Transparency should be adjusted through the [color] alpha.
///
/// Shadow order matters due to compositing multiple translucent objects not
/// being commutative.¿<ù(¿<£  ¿<À¿<—  ¿<Í¿<  !¿<™¿<∞¿<µ¿<ƒ¿<∂¿<Ÿ¿<ﬂ¿<‡¿<¸¿=¿=¿=¿=;¿=¿=¿=¿=¿=E¿=K¿=Z¿=z¿=S¿=L¿=V¿=\¿=Ñ¿=ä¿=ú¿=œ¿=ñ¿=ã¿=ô¿=û	¿=’,¿=Ê ¿=˜¿>)&¿>: ¿>M¿>S'¿>d ¿>v¿>t¿>y¿>~#¿>è ¿>ù¿>õ¿>†¿>•#¿>∂ ¿>ƒ¿>¬¿>«¿>Ã&¿>› ¿>Ó¿>Ï¿>Ò¿>˜Äº¿?ÆÄ¢/// Color that the shadow will be drawn with.
///
/// The shadows are shapes composited directly over the base canvas, and do not
/// represent optical occlusion. ¿?∏Å4¿@ÊÅ/// The displacement of the shadow from the casting element.
///
/// Positive x/y offsets will shift the shadow to the right and down, while
/// negative offsets shift the shadow to the left and up. The offsets are
/// relative to the position of the element that is casting it. ¿@Òi¿APO/// The standard deviation of the Gaussian to convolve with the shadow's shape. ¿BﬂÄÆ¿C_n/// The [blurRadius] in sigmas instead of logical pixels.
///
/// See the sigma argument to [MaskFilter.blur].   ¿P˛F¿Q   ¿P˛¿Pˇ¿A_Å|¿B~h/// Converts a blur radius in pixels to sigmas.
///
/// See the sigma argument to [MaskFilter.blur].
/// ¿Bì¿Bõ   ¿CëÇã¿E°Åı/// Create the [Paint] object that corresponds to this shadow description.
///
/// The [offset] is not represented in the [Paint] object.
/// To honor this as well, the shape should be translated by [offset] before
/// being filled using this [Paint].
///
/// This class does not provide a way to disable shadows to avoid
/// inconsistencies in shadow blur rendering, primarily as a method of
/// reducing test flakiness. [toPaint] should be overridden in subclasses to
/// provide this functionality.   ¿F Äı¿Fá[/// Returns a new shadow with its [offset] and [blurRadius] scaled by the given
/// factor. ¿Fç¿Fï   ¿GÖ¿K%É÷/// Linearly interpolate between two shadows.
///
/// If either shadow is null, this function linearly interpolates from a
/// a shadow that matches the other shadow in color but has a zero
/// offset and a zero blurRadius.
///
/// {@template dart.ui.shadow.lerp}
/// The `t` argument represents position on the timeline, with 0.0 meaning
/// that the interpolation has not started, returning `a` (or something
/// equivalent to `a`), 1.0 meaning that the interpolation has finished,
/// returning `b` (or something equivalent to `b`), and values in between
/// meaning that the interpolation is at the relevant point on the timeline
/// between `a` and `b`. The interpolation can be extrapolated beyond 0.0 and
/// 1.0, so negative values and values greater than 1.0 are valid (and can
/// easily be generated by curves such as [Curves.elasticInOut]).
///
/// Values for `t` are usually obtained from an [Animation<double>], such as
/// an [AnimationController].
/// {@endtemplate} ¿K*	¿K3  ¿K5	¿K>  ¿K@¿KH   ¿MÇ˛¿M“Ä•/// Linearly interpolate between two lists of shadows.
///
/// If the lists differ in length, excess items are lerped with null.
///
/// {@macro dart.ui.shadow.lerp} ¿M€¿MÍ  ¿MÏ¿M˚  ¿M˝¿N   ¿PÄÎ¿P)  ¿P,¿P4  ¿P¿P¿RÑ·¿R  ¿R!¿R0   ¿VÁL¿V˙   ¿VÁ¿VË ¿W7á&¿WÌÄØ/// A handle to a read-only byte buffer that is managed by the engine.
///
/// The creator of this object is responsible for calling [dispose] when it is
/// no longer needed. ¿X"¿X1¿X2¿X3 ¿X4¿X:   ¿YˇD¿Z=1/// The length, in bytes, of the underlying data. ¿ZH¿ZM ¿Z^¿ZhÅ¿ZÒy/// Whether [dispose] has been called.
///
/// This must only be used when asserts are enabled. Otherwise, it will throw.   ¿XEÅ`¿X«^/// Creates a copy of the data from a [Uint8List] suitable for internal use
/// in the engine. ¿X’¿X‡   ¿Y®S¿Y≠  ¿Y≥¿Yæ  ¿Y√¿Y‘   ¿[ÉÇ£¿]ûÇ/// Release the resources used by this object. The object is no longer usable
/// after this method is called.
///
/// The underlying memory allocated by this object will be retained beyond
/// this call if it is still needed by another object that has not been
/// disposed. For example, an [ImageDescriptor] that has not been disposed
/// may still retain a reference to the memory from this buffer even if it
/// has been disposed. Freeing that memory requires disposing all resources
/// that may still hold it.   ¿^*1¿^/     ¿^_èÅ¿_Äµ/// A descriptor of data that can be turned into an [Image] via a [Codec].
///
/// Use this class to determine the height, width, and byte size of image data
/// before decoding it. ¿_P¿__¿_`¿_a   ¿a0É<¿bˇ¿c ¿cÅr/// Creates an image descriptor from raw image pixels.
///
/// The `pixels` parameter is the pixel data in the encoding described by
/// `format`.
///
/// The `rowBytes` parameter is the number of bytes consumed by each row of
/// pixels in the data buffer. If unspecified, it defaults to `width` multiplied
/// by the number of bytes per pixel in the provided `format`.¿c	¿c  ¿c'¿c5  ¿c?¿cM  ¿cX¿c^  ¿ck ¿cÅ   ¿e¿e  ¿eÁ¿eÏ  ¿f∆¿fÀ  ¿ePÄì¿e√d/// The width, in pixels, of the image.
///
/// On the Web, this is only supported for [raw] images.   ¿f+Äó¿füe/// The height, in pixels, of the image.
///
/// On the Web, this is only supported for [raw] images.   ¿gÄØ¿gñh/// The number of bytes per pixel in the image.
///
/// On web, this is only supported for [raw] images.   	¿_hÅU¿_“H/// Creates an image descriptor from encoded data in a supported format. ¿_⁄¿_Î   ¿`¿l¿`»  ¿`’¿`Ê  ¿`Ì¿`˛   ¿doÄú¿dt  ¿d}¿dé  ¿dú¿d≠  ¿d¥	¿dπ  ¿dø
¿dƒ  ¿dÀ¿d–  ¿dŸ¿dﬁ   ¿e/¿e"    ¿e˜1¿e˚    ¿f›?¿f·    ¿g“Ä£¿hJn/// Release the resources used by this object. The object is no longer usable
/// after this method is called.   ¿hyÑÓ¿jÅÇ/// Creates a [Codec] object which is suitable for decoding the data in the
/// buffer to an [Image].
///
/// If only one of targetWidth or  targetHeight are specified, the other
/// dimension will be scaled according to the aspect ratio of the supplied
/// dimension.
///
/// If either targetWidth or targetHeight is less than or equal to zero, it
/// will be treated as if it is null. ¿j.¿j4  ¿j@¿jF   ¿mjt¿mo  ¿mÅ¿mà  ¿më¿mñ  ¿m¢¿mß     ≥È¿ Ncøã/// Algorithms to use when painting on the canvas.
///
/// When drawing a shape or image onto a canvas, different algorithms can be
/// used to blend the pixels. The different values of [BlendMode] specify
/// different such algorithms.
///
/// Each algorithm has two inputs, the _source_, which is the image being drawn,
/// and the _destination_, which is the image into which the source image is
/// being composited. The destination is often thought of as the _background_.
/// The source and destination both have four color channels, the red, green,
/// blue, and alpha channels. These are typically represented as numbers in the
/// range 0.0 to 1.0. The output of the algorithm also has these same four
/// channels, with values computed from the source and destination.
///
/// The documentation of each value below describes how the algorithm works. In
/// each case, an image shows the output of blending a source image with a
/// destination image. In the images below, the destination is represented by an
/// image with horizontal lines and an opaque landscape photograph, and the
/// source is represented by an image with vertical lines (the same lines but
/// rotated) and a bird clip-art image. The [src] mode shows only the source
/// image, and the [dst] mode shows only the destination image. In the
/// documentation below, the transparency is illustrated by a checkerboard
/// pattern. The [clear] mode drops both the source and destination, resulting
/// in an output that is entirely transparent (illustrated by a solid
/// checkerboard pattern).
///
/// The horizontal and vertical bars in these images show the red, green, and
/// blue channels with varying opacity levels, then all three color channels
/// together with those same varying opacity levels, then all three color
/// channels set to zero with those varying opacity levels, then two bars showing
/// a red/green/blue repeating gradient, the first with full opacity and the
/// second with partial opacity, and finally a bar with the three color channels
/// set to zero but the opacity varying in a repeating gradient.
///
/// ## Application to the [Canvas] API
///
/// When using [Canvas.saveLayer] and [Canvas.restore], the blend mode of the
/// [Paint] given to the [Canvas.saveLayer] will be applied when
/// [Canvas.restore] is called. Each call to [Canvas.saveLayer] introduces a new
/// layer onto which shapes and images are painted; when [Canvas.restore] is
/// called, that layer is then composited onto the parent layer, with the source
/// being the most-recently-drawn shapes and images, and the destination being
/// the parent layer. (For the first [Canvas.saveLayer] call, the parent layer
/// is the canvas itself.)
///
/// See also:
///
///  * [Paint.blendMode], which uses [BlendMode] to define the compositing
///    strategy.  øªÄÓ¿ @§Äﬁ/// Drop both the source and destination images, leaving nothing.
///
/// This corresponds to the "clear" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_clear.png) ¿ @ÆÅH¿ AÛÅ4/// Drop the destination image, only paint the source image.
///
/// Conceptually, the destination is first cleared, then the source image is
/// painted.
///
/// This corresponds to the "Copy" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_src.png) ¿ A˚ÅM¿ CEÅ9/// Drop the source image, only paint the destination image.
///
/// Conceptually, the source image is discarded, leaving the destination
/// untouched.
///
/// This corresponds to the "Destination" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_dst.png) ¿ CMÅÏ¿ E2Å–/// Composite the source image over the destination image.
///
/// This is the default value. It represents the most intuitive case, where
/// shapes are painted on top of what is below, with transparent areas showing
/// the destination layer.
///
/// This corresponds to the "Source over Destination" Porter-Duff operator,
/// also known as the Painter's Algorithm.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_srcOver.png) ¿ E>Å≠¿ F‰Åë/// Composite the source image under the destination image.
///
/// This is the opposite of [srcOver].
///
/// This corresponds to the "Destination over Source" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_dstOver.png)
///
/// This is useful when the source image should have been painted before the
/// destination image, but could not be. ¿ FÇö¿ IÖÇx/// Show the source image, but only where the two images overlap. The
/// destination image is not rendered, it is treated merely as a mask. The
/// color channels of the destination are ignored, only the opacity has an
/// effect.
///
/// To show the destination image instead, consider [dstIn].
///
/// To reverse the semantic of the mask (only showing the source where the
/// destination is absent, rather than where it is present), consider
/// [srcOut].
///
/// This corresponds to the "Source in Destination" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_srcIn.png) ¿ IèÇÑ¿ LÇf/// Show the destination image, but only where the two images overlap. The
/// source image is not rendered, it is treated merely as a mask. The color
/// channels of the source are ignored, only the opacity has an effect.
///
/// To show the source image instead, consider [srcIn].
///
/// To reverse the semantic of the mask (only showing the source where the
/// destination is present, rather than where it is absent), consider [dstOut].
///
/// This corresponds to the "Destination in Source" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_dstIn.png) ¿ LÇò¿ N™Çy/// Show the source image, but only where the two images do not overlap. The
/// destination image is not rendered, it is treated merely as a mask. The color
/// channels of the destination are ignored, only the opacity has an effect.
///
/// To show the destination image instead, consider [dstOut].
///
/// To reverse the semantic of the mask (only showing the source where the
/// destination is present, rather than where it is absent), consider [srcIn].
///
/// This corresponds to the "Source out Destination" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_srcOut.png) ¿ NµÇé¿ Q=Ço/// Show the destination image, but only where the two images do not overlap. The
/// source image is not rendered, it is treated merely as a mask. The color
/// channels of the source are ignored, only the opacity has an effect.
///
/// To show the source image instead, consider [srcOut].
///
/// To reverse the semantic of the mask (only showing the destination where the
/// source is present, rather than where it is absent), consider [dstIn].
///
/// This corresponds to the "Destination out Source" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_dstOut.png) ¿ QHÇg¿ S®ÇE/// Composite the source image over the destination image, but only where it
/// overlaps the destination.
///
/// This corresponds to the "Source atop Destination" Porter-Duff operator.
///
/// This is essentially the [srcOver] operator, but with the output's opacity
/// channel being set to that of the destination image instead of being a
/// combination of both image's opacity channels.
///
/// For a variant with the destination on top instead of the source, see
/// [dstATop].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_srcATop.png) ¿ S¥Ç]¿ V
Ç;/// Composite the destination image over the source image, but only where it
/// overlaps the source.
///
/// This corresponds to the "Destination atop Source" Porter-Duff operator.
///
/// This is essentially the [dstOver] operator, but with the output's opacity
/// channel being set to that of the source image instead of being a
/// combination of both image's opacity channels.
///
/// For a variant with the source on top instead of the destination, see
/// [srcATop].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_dstATop.png) ¿ VÅ;¿ WNÅ+/// Apply a bitwise `xor` operator to the source and destination images. This
/// leaves transparency where they would overlap.
///
/// This corresponds to the "Source xor Destination" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_xor.png) ¿ WVÅ¿¿ YÅ©/// Sum the components of the source and destination images.
///
/// Transparency in a pixel of one of the images reduces the contribution of
/// that image to the corresponding output pixel, as if the color of that
/// pixel in that image was darker.
///
/// This corresponds to the "Source plus Destination" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_plus.png) ¿ YÉV¿ \iÉ'/// Multiply the color components of the source and destination images.
///
/// This can only result in the same or darker colors (multiplying by white,
/// 1.0, results in no change; multiplying by black, 0.0, results in black).
///
/// When compositing two opaque images, this has similar effect to overlapping
/// two transparencies on a projector.
///
/// For a variant that also multiplies the alpha channel, consider [multiply].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_modulate.png)
///
/// See also:
///
///  * [screen], which does a similar computation but inverted.
///  * [overlay], which combines [modulate] and [screen] to favor the
///    destination image.
///  * [hardLight], which combines [modulate] and [screen] to favor the
///    source image. ¿ \øÖ!¿ a⁄Ñ‚/// Multiply the inverse of the components of the source and destination
/// images, and inverse the result.
///
/// Inverting the components means that a fully saturated channel (opaque
/// white) is treated as the value 0.0, and values normally treated as 0.0
/// (black, transparent) are treated as 1.0.
///
/// This is essentially the same as [modulate] blend mode, but with the values
/// of the colors inverted before the multiplication and the result being
/// inverted back before rendering.
///
/// This can only result in the same or lighter colors (multiplying by black,
/// 1.0, results in no change; multiplying by white, 0.0, results in white).
/// Similarly, in the alpha channel, it can only result in more opaque colors.
///
/// This has similar effect to two projectors displaying their images on the
/// same screen simultaneously.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_screen.png)
///
/// See also:
///
///  * [modulate], which does a similar computation but without inverting the
///    values.
///  * [overlay], which combines [modulate] and [screen] to favor the
///    destination image.
///  * [hardLight], which combines [modulate] and [screen] to favor the
///    source image. ¿ a˛Éﬁ¿ e’ÉÆ/// Multiply the components of the source and destination images after
/// adjusting them to favor the destination.
///
/// Specifically, if the destination value is smaller, this multiplies it with
/// the source value, whereas is the source value is smaller, it multiplies
/// the inverse of the source value with the inverse of the destination value,
/// then inverts the result.
///
/// Inverting the components means that a fully saturated channel (opaque
/// white) is treated as the value 0.0, and values normally treated as 0.0
/// (black, transparent) are treated as 1.0.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_overlay.png)
///
/// See also:
///
///  * [modulate], which always multiplies the values.
///  * [screen], which always multiplies the inverses of the values.
///  * [hardLight], which is similar to [overlay] but favors the source image
///    instead of the destination image. ¿ e·Å7¿ gÅ"/// Composite the source and destination image by choosing the lowest value
/// from each color channel.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_darken.png) ¿ gÅ:¿ hPÅ$/// Composite the source and destination image by choosing the highest value
/// from each color channel.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_lighten.png) ¿ h\Å{¿ iÕÅb/// Divide the destination by the inverse of the source.
///
/// Inverting the components means that a fully saturated channel (opaque
/// white) is treated as the value 0.0, and values normally treated as 0.0
/// (black, transparent) are treated as 1.0.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_colorDodge.png) ¿ i‹Åë¿ kdÅy/// Divide the inverse of the destination by the source, and inverse the result.
///
/// Inverting the components means that a fully saturated channel (opaque
/// white) is treated as the value 0.0, and values normally treated as 0.0
/// (black, transparent) are treated as 1.0.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_colorBurn.png) ¿ krÉ‚¿ oKÉ∞/// Multiply the components of the source and destination images after
/// adjusting them to favor the source.
///
/// Specifically, if the source value is smaller, this multiplies it with the
/// destination value, whereas is the destination value is smaller, it
/// multiplies the inverse of the destination value with the inverse of the
/// source value, then inverts the result.
///
/// Inverting the components means that a fully saturated channel (opaque
/// white) is treated as the value 0.0, and values normally treated as 0.0
/// (black, transparent) are treated as 1.0.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_hardLight.png)
///
/// See also:
///
///  * [modulate], which always multiplies the values.
///  * [screen], which always multiplies the inverses of the values.
///  * [overlay], which is similar to [hardLight] but favors the destination
///    image instead of the source image. ¿ oYÅs¿ p√ÅU/// Use [colorDodge] for source values below 0.5 and [colorBurn] for source
/// values above 0.5.
///
/// This results in a similar but softer effect than [overlay].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_softLight.png)
///
/// See also:
///
///  * [color], which is a more subtle tinting effect. ¿ p—Å≈¿ råÅ§/// Subtract the smaller value from the bigger value for each channel.
///
/// Compositing black has no effect; compositing white inverts the colors of
/// the other image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver].
///
/// The effect is similar to [exclusion] but harsher.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_difference.png) ¿ rõÅ‘¿ tfÅ≤/// Subtract double the product of the two images from the sum of the two
/// images.
///
/// Compositing black has no effect; compositing white inverts the colors of
/// the other image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver].
///
/// The effect is similar to [difference] but softer.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_exclusion.png) ¿ ttÇŸ¿ wEÇ¥/// Multiply the components of the source and destination images, including
/// the alpha channel.
///
/// This can only result in the same or darker colors (multiplying by white,
/// 1.0, results in no change; multiplying by black, 0.0, results in black).
///
/// Since the alpha channel is also multiplied, a fully-transparent pixel
/// (opacity 0.0) in one image results in a fully transparent pixel in the
/// output. This is similar to [dstIn], but with the colors combined.
///
/// For a variant that multiplies the colors but does not multiply the alpha
/// channel, consider [modulate].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_multiply.png) ¿ woÇ˜¿ zcÇ—/// Take the hue of the source image, and the saturation and luminosity of the
/// destination image.
///
/// The effect is to tint the destination image with the source image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver]. Regions that are entirely transparent in the source image take
/// their hue from the destination.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_hue.png)
///
/// See also:
///
///  * [color], which is a similar but stronger effect as it also applies the
///    saturation of the source image.
///  * [HSVColor], which allows colors to be expressed using Hue rather than
///    the red/green/blue channels of [Color]. ¿ zkÇd¿ |≈Ç=/// Take the saturation of the source image, and the hue and luminosity of the
/// destination image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver]. Regions that are entirely transparent in the source image take
/// their saturation from the destination.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_hue.png)
///
/// See also:
///
///  * [color], which also applies the hue of the source image.
///  * [luminosity], which applies the luminosity of the source image to the
///    destination. ¿ |‘Ç„¿ ≤ÇΩ/// Take the hue and saturation of the source image, and the luminosity of the
/// destination image.
///
/// The effect is to tint the destination image with the source image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver]. Regions that are entirely transparent in the source image take
/// their hue and saturation from the destination.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_color.png)
///
/// See also:
///
///  * [hue], which is a similar but weaker effect.
///  * [softLight], which is a similar tinting effect but also tints white.
///  * [saturation], which only applies the saturation of the source image. ¿ ºÇç¿ Ç?Çd/// Take the luminosity of the source image, and the hue and saturation of the
/// destination image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver]. Regions that are entirely transparent in the source image take
/// their luminosity from the destination.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_luminosity.png)
///
/// See also:
///
///  * [saturation], which applies the saturation of the source image to the
///    destination.
///  * [ImageFilter.blur], which can be used with [BackdropFilter] for a
///    related effect.    ¿ ÇNå{¿ á»Öt/// Quality levels for image sampling in [ImageFilter] and [Shader] objects that sample
/// images and for [Canvas] operations that render images.
///
/// When scaling up typically the quality is lowest at [none], higher at [low] and [medium],
/// and for very large scale factors (over 10x) the highest at [high].
///
/// When scaling down, [medium] provides the best quality especially when scaling an
/// image to less than half its size or for animating the scale factor between such
/// reductions. Otherwise, [low] and [high] provide similar effects for reductions of
/// between 50% and 100% but the image may lose detail and have dropouts below 50%.
///
/// To get high quality when scaling images up and down, or when the scale is
/// unknown, [medium] is typically a good balanced choice.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/filter_quality.png)
///
/// When building for the web using the `--web-renderer=html` option, filter
/// quality has no effect. All images are rendered using the respective
/// browser's default setting.
///
/// See also:
///
///  * [Paint.filterQuality], which is used to pass [FilterQuality] to the
///    engine while using drawImage calls on a [Canvas].
///  * [ImageShader].
///  * [ImageFilter.matrix].
///  * [Canvas.drawImage].
///  * [Canvas.drawImageRect].
///  * [Canvas.drawImageNine].
///  * [Canvas.drawAtlas].  ¿ àYÄŸ¿ â.ÄÃ/// The fastest filtering method, albeit also the lowest quality.
///
/// This value results in a "Nearest Neighbor" algorithm which just
/// repeats or eliminates pixels as an image is scaled up or down. ¿ â7Ä≤¿ âÊÄ¶/// Better quality than [none], faster than [medium].
///
/// This value results in a "Bilinear" algorithm which smoothly
/// interpolates between pixels in an image. ¿ âÓÇé¿ åvÇk/// The best all around filtering method that is only worse than [high]
/// at extremely large scale factors.
///
/// This value improves upon the "Bilinear" algorithm specified by [low]
/// by utilizing a Mipmap that pre-computes high quality lower resolutions
/// of the image at half (and quarter and eighth, etc.) sizes and then
/// blends between those to prevent loss of detail at small scale sizes.
///
/// {@template dart.ui.filterQuality.seeAlso}
/// See also:
///
///  * [FilterQuality] class-level documentation that goes into detail about
///    relative qualities of the constant values.
/// {@endtemplate} ¿ åÅÇE¿ é¬Ç&/// Best possible quality when scaling up images by scale factors larger than
/// 5-10x.
///
/// When images are scaled down, this can be worse than [medium] for scales
/// smaller than 0.5x, or when animating the scale factor.
///
/// This option is also the slowest.
///
/// This value results in a standard "Bicubic" algorithm which uses a 3rd order
/// equation to smooth the abrupt transitions between pixels while preserving
/// some of the sense of an edge and avoiding sharp peaks in the result.
///
/// {@macro dart.ui.filterQuality.seeAlso}    ¿ éÀÜ«¿ èøÄ±/// Styles to use for line endings.
///
/// See also:
///
///  * [Paint.strokeCap] for how this value is used.
///  * [StrokeJoin] for the different kinds of line segment joins.  ¿ èÕÅÖ¿ ëNÅr/// Begin and end contours with a flat edge and no extension.
///
/// ![A butt cap ends line segments with a square end that stops at the end of
/// the line segment.](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/butt_cap.png)
///
/// Compare to the [square] cap, which has the same shape, but extends past
/// the end of the line by half a stroke width. ¿ ëWÅÀ¿ ìÅµ/// Begin and end contours with a semi-circle extension.
///
/// ![A round cap adds a rounded end to the line segment that protrudes
/// by one half of the thickness of the line (which is the radius of the cap)
/// past the end of the segment.](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/round_cap.png)
///
/// The cap is colored in the diagram above to highlight it: in normal use it
/// is the same color as the line. ¿ ì'Çh¿ ïâÇI/// Begin and end contours with a half square extension. This is
/// similar to extending each contour by half the stroke width (as
/// given by [Paint.strokeWidth]).
///
/// ![A square cap has a square end that effectively extends the line length
/// by half of the stroke width.](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/square_cap.png)
///
/// The cap is colored in the diagram above to highlight it: in normal use it
/// is the same color as the line.
///
/// Compare to the [butt] cap, which has the same shape, but doesn't extend
/// past the end of the line.    ¿ ïîà¿ ó?Åg/// Styles to use for line segment joins.
///
/// This only affects line joins for polygons drawn by [Canvas.drawPath] and
/// rectangles, not points drawn as lines with [Canvas.drawPoints].
///
/// See also:
///
/// * [Paint.strokeJoin] and [Paint.strokeMiterLimit] for how this value is
///   used.
/// * [StrokeCap] for the different kinds of line endings.  ¿ óNÇY¿ ô¢Ç7/// Joins between line segments form sharp corners.
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/miter_4_join.mp4}
///
/// The center of the line segment is colored in the diagram above to
/// highlight the join, but in normal usage the join is the same color as the
/// line.
///
/// See also:
///
///   * [Paint.strokeJoin], used to set the line segment join style to this
///     value.
///   * [Paint.strokeMiterLimit], used to define when a miter is drawn instead
///     of a bevel when the join is set to this value. ¿ ô¨ÅÃ¿ õsÅÆ/// Joins between line segments are semi-circular.
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/round_join.mp4}
///
/// The center of the line segment is colored in the diagram above to
/// highlight the join, but in normal usage the join is the same color as the
/// line.
///
/// See also:
///
///   * [Paint.strokeJoin], used to set the line segment join style to this
///     value. ¿ õ}Ç¿ ùèÅ˜/// Joins between line segments connect the corners of the butt ends of the
/// line segments to give a beveled appearance.
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/bevel_join.mp4}
///
/// The center of the line segment is colored in the diagram above to
/// highlight the join, but in normal usage the join is the same color as the
/// line.
///
/// See also:
///
///   * [Paint.strokeJoin], used to set the line segment join style to this
///     value.    ¿ ùôÇﬂ¿ û2T/// Strategies for painting shapes and paths on a canvas.
///
/// See [Paint.style].  ¿ û§Ä∑¿ üWÄ¨/// Apply the [Paint] to the inside of the shape. For example, when
/// applied to the [Canvas.drawCircle] call, this results in a disc
/// of the given size being painted. ¿ ü`Å¿ †oÅ/// Apply the [Paint] to the edge of the shape. For example, when
/// applied to the [Canvas.drawCircle] call, this results is a hoop
/// of the given size being painted. The line drawn on the edge will
/// be the width given by the [Paint.strokeWidth] property.    ¿ †{åá¿ †Ø./// Different ways to clip a widget's content.  ¿ †∏Ç8¿ ¢ÏÇ/// No clip at all.
///
/// This is the default option for most widgets: if the content does not
/// overflow the widget boundary, don't pay any performance cost for clipping.
///
/// If the content does overflow, please explicitly specify the following
/// [Clip] options:
///  * [hardEdge], which is the fastest clipping, but with lower fidelity.
///  * [antiAlias], which is a little slower than [hardEdge], but with smoothed edges.
///  * [antiAliasWithSaveLayer], which is much slower than [antiAlias], and should
///    rarely be used. ¿ ¢ıÇ_¿ •LÇ:/// Clip, but do not apply anti-aliasing.
///
/// This mode enables clipping, but curves and non-axis-aligned straight lines will be
/// jagged as no effort is made to anti-alias.
///
/// Faster than other clipping modes, but slower than [none].
///
/// This is a reasonable choice when clipping is needed, if the container is an axis-
/// aligned rectangle or an axis-aligned rounded rectangle with very small corner radii.
///
/// See also:
///
///  * [antiAlias], which is more reasonable when clipping is needed and the shape is not
///    an axis-aligned rectangle. ¿ •YÉ.¿ ®~É /// Clip with anti-aliasing.
///
/// This mode has anti-aliased clipping edges to achieve a smoother look.
///
/// It' s much faster than [antiAliasWithSaveLayer], but slower than [hardEdge].
///
/// This will be the common case when dealing with circles and arcs.
///
/// Different from [hardEdge] and [antiAliasWithSaveLayer], this clipping may have
/// bleeding edge artifacts.
/// (See https://fiddle.skia.org/c/21cb4c2b2515996b537f36e7819288ae for an example.)
///
/// See also:
///
///  * [hardEdge], which is a little faster, but with lower fidelity.
///  * [antiAliasWithSaveLayer], which is much slower, but can avoid the
///    bleeding edges if there's no other way.
///  * [Paint.isAntiAlias], which is the anti-aliasing switch for general draw operations. ¿ ®åÑs¿ ¨ÈÑ4/// Clip with anti-aliasing and saveLayer immediately following the clip.
///
/// This mode not only clips with anti-aliasing, but also allocates an offscreen
/// buffer. All subsequent paints are carried out on that buffer before finally
/// being clipped and composited back.
///
/// This is very slow. It has no bleeding edge artifacts (that [antiAlias] has)
/// but it changes the semantics as an offscreen buffer is now introduced.
/// (See https://github.com/flutter/flutter/issues/18057#issuecomment-394197336
/// for a difference between paint without saveLayer and paint with saveLayer.)
///
/// This will be only rarely needed. One case where you might need this is if
/// you have an image overlaid on a very different background color. In these
/// cases, consider whether you can avoid overlaying multiple colors in one
/// spot (e.g. by having the background color only present where the image is
/// absent). If you can, [antiAlias] would be fine and much faster.
///
/// See also:
///
///  * [antiAlias], which is much faster, and has similar clipping results.    ¿ ÛfÜ;¿ ÙÚY/// The format in which image bytes should be returned when using
/// [Image.toByteData].  ¿ ıÄÇ¿ ıÅt/// Raw RGBA format.
///
/// Unencoded bytes, in RGBA row-primary form with premultiplied alpha, 8 bits per channel. ¿ ıçÄé¿ ˆx/// Raw straight RGBA format.
///
/// Unencoded bytes, in RGBA row-primary form with straight alpha, 8 bits per channel. ¿ ˆ Äª¿ ˆŒÄ•/// Raw unmodified format.
///
/// Unencoded bytes, in the image's existing format. For example, a grayscale
/// image may use a single 8-bit channel for each pixel. ¿ ˆ‡Çæ¿ ˘õÇú/// PNG format.
///
/// A loss-less compression format for images. This format is well suited for
/// images with hard edges, such as screenshots or sprites, and images with
/// text. Transparency is supported. The PNG format supports images up to
/// 2,147,483,647 pixels in either dimension, though in practice available
/// memory provides a more immediate limitation on maximum image size.
///
/// PNG images normally use the `.png` file extension and the `image/png` MIME
/// type.
///
/// See also:
///
///  * <https://en.wikipedia.org/wiki/Portable_Network_Graphics>, the Wikipedia page on PNG.
///  * <https://tools.ietf.org/rfc/rfc2083.txt>, the PNG standard.    ¿ ˘£Å‘¿ ˘Á>/// The format of pixel data given to [decodeImageFromPixels].  ¿ ˘˜Äº¿ ˙´Ä≠/// Each pixel is 32 bits, with the highest 8 bits encoding red, the next 8
/// bits encoding green, the next 8 bits encoding blue, and the lowest 8 bits
/// encoding alpha. ¿ ˙∏Äº¿ ˚lÄ≠/// Each pixel is 32 bits, with the highest 8 bits encoding blue, the next 8
/// bits encoding green, the next 8 bits encoding red, and the lowest 8 bits
/// encoding alpha.    ¿IíÉï¿J/Äó/// Determines the winding rule that decides how the interior of a [Path] is
/// calculated.
///
/// This enum is used by the [Path.fillType] property.  ¿J@ÅØ¿KËÅó/// The interior is defined by a non-zero sum of signed edge crossings.
///
/// For a given point, the point is considered to be on the inside of the path
/// if a line drawn from the point to infinity crosses lines going clockwise
/// around the point a different number of times than it crosses lines going
/// counter-clockwise around that point.
///
/// See: <https://en.wikipedia.org/wiki/Nonzero-rule> ¿KÙÅ0¿MÅ/// The interior is defined by an odd number of edge crossings.
///
/// For a given point, the point is considered to be on the inside of the path
/// if a line drawn from the point to infinity crosses an odd number of lines.
///
/// See: <https://en.wikipedia.org/wiki/Even-odd_rule>    ¿M)àL¿M›Äà/// Strategies for combining paths.
///
/// See also:
///
/// * [Path.combine], which uses this enum to decide how to combine two paths.  ¿MÔÅ£¿OàÅÑ/// Subtract the second path from the first path.
///
/// For example, if the two paths are overlapping circles of equal diameter
/// but differing centers, the result would be a crescent portion of the
/// first circle that was not overlapped by the second circle.
///
/// See also:
///
///  * [reverseDifference], which is the same but subtracting the first path
///    from the second. ¿OñÅá¿QÅk/// Create a new path that is the intersection of the two paths, leaving the
/// overlapping pieces of the path.
///
/// For example, if the two paths are overlapping circles of equal diameter
/// but differing centers, the result would be only the overlapping portion
/// of the two circles.
///
/// See also:
///  * [xor], which is the inverse of this operation ¿Q!Å$¿R@Å/// Create a new path that is the union (inclusive-or) of the two paths.
///
/// For example, if the two paths are overlapping circles of equal diameter
/// but differing centers, the result would be a figure-eight like shape
/// matching the outer boundaries of both circles. ¿RIÅÇ¿S»Ån/// Create a new path that is the exclusive-or of the two paths, leaving
/// everything but the overlapping pieces of the path.
///
/// For example, if the two paths are overlapping circles of equal diameter
/// but differing centers, the figure-eight like shape less the overlapping parts
///
/// See also:
///  * [intersect], which is the inverse of this operation ¿SœÅ£¿UaÅ}/// Subtract the first path from the second path.
///
/// For example, if the two paths are overlapping circles of equal diameter
/// but differing centers, the result would be a crescent portion of the
/// second circle that was not overlapped by the first circle.
///
/// See also:
///
///  * [difference], which is the same but subtracting the second path
///    from the first.    ¿≈bÉ{¿≈ÿ4/// Styles to use for blurs in [MaskFilter] objects.  ¿∆Äñ¿∆ØÄã/// Fuzzy inside and outside. This is useful for painting shadows that are
/// offset from the shape that ostensibly is casting the shadow. ¿∆∫ÄÕ¿«ÇÄ¡/// Solid inside, fuzzy outside. This corresponds to drawing the shape, and
/// additionally drawing the blur. This can make objects appear brighter,
/// maybe even as if they were fluorescent. ¿«åÄÊ¿»mÄ⁄/// Nothing inside, fuzzy outside. This is useful for painting shadows for
/// partially transparent shapes, when they are painted separately but without
/// an offset, so that the shadow doesn't paint below the shape. ¿»wc¿»’Y/// Fuzzy inside, nothing outside. This can make shapes appear to be lit from
/// within.    ¿Üì¿YÜí/// Defines what happens at the edge of a gradient or the sampling of a source image
/// in an [ImageFilter].
///
/// A gradient is defined along a finite inner area. In the case of a linear
/// gradient, it's between the parallel lines that are orthogonal to the line
/// drawn between two points. In the case of radial gradients, it's the disc
/// that covers the circle centered on a particular point up to a given radius.
///
/// An image filter reads source samples from a source image and performs operations
/// on those samples to produce a result image. An image defines color samples only
/// for pixels within the bounds of the image but some filter operations, such as a blur
/// filter, read samples over a wide area to compute the output for a given pixel. Such
/// a filter would need to combine samples from inside the image with hypothetical
/// color values from outside the image.
///
/// This enum is used to define how the gradient or image filter should treat the regions
/// outside that defined inner area.
///
/// See also:
///
///  * [painting.Gradient], the superclass for [LinearGradient] and
///    [RadialGradient], as used by [BoxDecoration] et al, which works in
///    relative coordinates and can create a [Shader] representing the gradient
///    for a particular [Rect] on demand.
///  * [dart:ui.Gradient], the low-level class used when dealing with the
///    [Paint.shader] property directly, with its [Gradient.linear] and
///    [Gradient.radial] constructors.
///  * [dart:ui.ImageFilter.blur], an ImageFilter that may sometimes need to
///    read samples from outside an image to combine with the pixels near the
///    edge of the image.  ¿fÇ£¿Çá/// Samples beyond the edge are clamped to the nearest color in the defined inner area.
///
/// A gradient will paint all the regions outside the inner area with the
/// color at the end of the color stop list closest to that region.
///
/// An image filter will substitute the nearest edge pixel for any samples taken from
/// outside its source image.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_sweep.png) ¿É5¿;É/// Samples beyond the edge are repeated from the far end of the defined area.
///
/// For a gradient, this technique is as if the stop points from 0.0 to 1.0 were then
/// repeated from 1.0 to 2.0, 2.0 to 3.0, and so forth (and for linear gradients, similarly
/// from -1.0 to 0.0, -2.0 to -1.0, etc).
///
/// An image filter will treat its source image as if it were tiled across the enlarged
/// sample space from which it reads, each tile in the same orientation as the base image.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_sweep.png) ¿HÉ|¿æÉY/// Samples beyond the edge are mirrored back and forth across the defined area.
///
/// For a gradient, this technique is as if the stop points from 0.0 to 1.0 were then
/// repeated backwards from 2.0 to 1.0, then forwards from 2.0 to 3.0, then backwards
/// again from 4.0 to 3.0, and so forth (and for linear gradients, similarly in the
/// negative direction).
///
/// An image filter will treat its source image as tiled in an alternating forwards and
/// backwards or upwards and downwards direction across the sample space from which
/// it is reading.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_sweep.png) ¿…ÇΩ¿!ÅÇü/// Samples beyond the edge are treated as transparent black.
///
/// A gradient will render transparency over any region that is outside the circle of a
/// radial gradient or outside the parallel lines that define the inner area of a linear
/// gradient.
///
/// An image filter will substitute transparent black for any sample it must read from
/// outside its source image.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_sweep.png)    ¿d4Å˜¿d¯w/// Defines how a list of points is interpreted when drawing a set of triangles.
///
/// Used by [Canvas.drawVertices].  ¿eQ¿eOE/// Draw each sequence of three points as the vertices of a triangle. ¿e][¿e´K/// Draw each sliding window of three points as the vertices of a triangle. ¿eΩk¿f]/// Draw the first point and each sliding window of two points as the vertices of a triangle.    ¿x
Ñ¿x∆r/// Defines how a list of points is interpreted when drawing a set of points.
///
/// Used by [Canvas.drawPoints].  ¿x‘Å∑¿zÖÅû/// Draw each point separately.
///
/// If the [Paint.strokeCap] is [StrokeCap.round], then each point is drawn
/// as a circle with the diameter of the [Paint.strokeWidth], filled as
/// described by the [Paint] (ignoring [Paint.style]).
///
/// Otherwise, each point is drawn as an axis-aligned square with sides of
/// length [Paint.strokeWidth], filled as described by the [Paint] (ignoring
/// [Paint.style]). ¿zêÄÈ¿{tÄ◊/// Draw each sequence of two points as a line segment.
///
/// If the number of points is odd, then the last point is ignored.
///
/// The lines are stroked as described by the [Paint] (ignoring
/// [Paint.style]). ¿{~Äö¿|Ää/// Draw the entire sequence of point as one line.
///
/// The lines are stroked as described by the [Paint] (ignoring
/// [Paint.style]).    ¿|Å¿|õx/// Defines how a new clip region should be merged with the existing clip
/// region.
///
/// Used by [Canvas.clipRect].  ¿|¶B¿|ﬁ5/// Subtract the new region from the existing region. ¿|ÌB¿}&6/// Intersect the new region from the existing region.      ÉÂÇÖVÅj/// {@template dart.ui.imageFormats}
/// JPEG, PNG, GIF, Animated GIF, WebP, Animated WebP, BMP, and WBMP. Additional
/// formats may be supported by the underlying platform. Flutter will
/// attempt to call platform API to decode unrecognized formats, and if the
/// platform API supports decoding the image Flutter will be able to render it.
/// {@endtemplate} Öc	Öi   ÖıÄ©Ö˙  ÜÜ   Ü†Ä∆Ü•  Ü¥Üº   áhÅám  á}áä   à~ÄƒàÉ  àíàö   âDmâJ  âVâ]  â_âg   ¿3,à⁄¿9wÜ</// Instantiates an image [Codec].
///
/// This method is a convenience wrapper around the [ImageDescriptor] API, and
/// using [ImageDescriptor] directly is preferred since it allows the caller to
/// make better determinations about how and whether to use the `targetWidth`
/// and `targetHeight` parameters.
///
/// The `list` parameter is the binary image data (e.g a PNG or GIF binary data).
/// The data can be for either static or animated images. The following image
/// formats are supported: {@macro dart.ui.imageFormats}
///
/// The `targetWidth` and `targetHeight` arguments specify the size of the
/// output image, in image pixels. If they are not equal to the intrinsic
/// dimensions of the image, then the image will be scaled after being decoded.
/// If the `allowUpscaling` parameter is not set to true, both dimensions will
/// be capped at the intrinsic dimensions of the image, even if only one of
/// them would have exceeded those intrinsic dimensions. If exactly one of these
/// two arguments is specified, then the aspect ratio will be maintained while
/// forcing the image to match the other given dimension. If neither is
/// specified, then the image maintains its intrinsic size.
///
/// Scaling the image to larger than its intrinsic size should usually be
/// avoided, since it causes the image to use more memory than necessary.
/// Instead, prefer scaling the [Canvas] transform. If the image must be scaled
/// up, the `allowUpscaling` parameter must be set to true.
///
/// The returned future can complete with an error if the image decoding has
/// failed. ¿9ê¿9õ  ¿9§¿9™  ¿9∏¿9æ  ¿9Õ¿9”  ¿9„¿<Å©¿=>Å0/// Loads a single image frame from a byte array into an [Image] object.
///
/// This is a convenience wrapper around [instantiateImageCodec]. Prefer using
/// [instantiateImageCodec] which also supports multi frame images and offers
/// better error handling. This function swallows asynchronous errors. ¿=R¿=]  ¿=b¿=x   ¿=≥Å¿=¿  ¿=⁄¿=Â  ¿>¿>'   ¿>Àä≈¿DÖD/// Convert an array of pixel values into an [Image] object.
///
/// The `pixels` parameter is the pixel data in the encoding described by
/// `format`.
///
/// The `rowBytes` parameter is the number of bytes consumed by each row of
/// pixels in the data buffer. If unspecified, it defaults to `width` multiplied
/// by the number of bytes per pixel in the provided `format`.
///
/// The `targetWidth` and `targetHeight` arguments specify the size of the
/// output image, in image pixels. If they are not equal to the intrinsic
/// dimensions of the image, then the image will be scaled after being decoded.
/// If the `allowUpscaling` parameter is not set to true, both dimensions will
/// be capped at the intrinsic dimensions of the image, even if only one of
/// them would have exceeded those intrinsic dimensions. If exactly one of these
/// two arguments is specified, then the aspect ratio will be maintained while
/// forcing the image to match the other given dimension. If neither is
/// specified, then the image maintains its intrinsic size.
///
/// Scaling the image to larger than its intrinsic size should usually be
/// avoided, since it causes the image to use more memory than necessary.
/// Instead, prefer scaling the [Canvas] transform. If the image must be scaled
/// up, the `allowUpscaling` parameter must be set to true. 	¿D.¿D9  ¿DB	¿DG  ¿DO
¿DT  ¿D]¿Dj  ¿Ds¿Dâ  ¿Dñ¿Dú  ¿Dß¿D≠  ¿Dª¿D¡  ¿D–¿D÷  ¿DÊ¿!ãÄÂ¿!ï  ¿!¶¿!≥   ¿"rÅµ¿"~  ¿"è¿"ù   ¿$)Å$¿$5  ¿$F¿$N  ¿$U¿$]   ¿oÜ ¿ryÇf/// Converts a method that receives a value-returning callback to a method that
/// returns a Future.
///
/// Return a [String] to cause an [Exception] to be synchronously thrown with
/// that string as a message.
///
/// If the callback is called with null, the future completes with an error.
///
/// Example usage:
///
/// ```dart
/// typedef IntCallback = void Function(int result);
///
/// String _doSomethingAndCallback(IntCallback callback) {
///   Timer(new Duration(seconds: 1), () { callback(1); });
/// }
///
/// Future<int> doSomething() {
///   return _futurize(_doSomethingAndCallback);
/// }
/// ```¿rÉ¿rÉ¿rÜ¿rñ    ¿ çm¿ «1/// Callback signature for [decodeImageFromList].  ¿ Ï¿ Û   ¿m‚d¿n4/// Generic callback signature, used by [_futurize].¿n)¿n) ¿n<¿n?   ¿nHÄ’¿n„Äí/// Signature for a method that receives a [_Callback].
///
/// Return value should be null on success, and a string error message on
/// failure.¿nÔ¿nÔ ¿o¿o     ï˚ <ÄÜÄ§Ä•Ä¶Ä∂Ä«Ä»ÅÅ_ÅØÇ ÇPÇûÇÔÉ-É0É~É§É•ÉÂÑ
Ñ[Ñ°ÑÌÖ=ÖPÖQÖpÖ£Ö„ÖÚÖÙÖıÜÜLÜéÜùÜüÜ†Ü≈Ü¸áVáeágáháîáÕààlà{à}à~à£à⁄â2âAâCâDâpâ∞â≤â≥âÁâÎä;äãä⁄ããã6ã:ãFãmã©ã‡ååå#åtå√çç?çCçOçúç‰çÏçç˛ééUéõé©éÂéÎèèèDèjèëè∂èºêêZêàêéê‘ë!ëFëbëôëöë⁄ë‡í-í=íbíâíØíµí¯í˛ìIìVìãì≠ìœìÒîî îuî{î†î«îÌï:ïjïpï≥ïπññ?ñuñ´ñ·ó#ó$óRóXóÄóÜóÆó‘ó˚ò ò3ò4òmòsò¬ò‰ôôôGôMôûô¿ôÊôÁööKöLöÖö≥ö¥öÏõõõcõôõüõ◊õÚú"ú&ú'úpú∏úæúˆùùJù{ùùÄù–ù˝ûû;ûTûÜûäûãû‘ü
üüHücüìüóüòüÈ†††T†n†ü†£†§†‚°°=°]°û°¢°£°Ó°Ù¢H¢f¢l¢™¢»££C£Ä£º£Ì£Ò£Ú§!§'§o§≤§∏••O•é•‘•⁄¶'¶q¶ºßßVß¶ßÛ®D®q®w®∆®Ê©©2©G©^©s©Ç©™©≤©ø©÷©¯™™&™j™™™Ó´0´;´C´I´M´N´ë´◊´›¨)¨p¨ª≠
≠U≠ï≠Ω≠¸ÆÆÆBÆhÆüÆºÆ ØØZØ¢Ø´Ø»Ø˙∞(∞H∞e∞w∞¬±±^±g±m±q±r±ø±≈±≤#≤@≤t≤x≤y≤Ö≤®≤»≤€≥≥≥3≥T≥X≥Y≥e≥ã≥å≥ò≥Ê≥Ë≥È¥¥ ¥m¥∑¥÷¥⁄µ+µxµ«∂∂e∂∞∂Ù∂¯∑H∑ì∑‰∏0∏~∏Àππ]π¨πÚ∫∫∫_∫¨∫ˆªHªïªÊº'º+ºRºVº§ºÂΩ6ΩÉΩ‘æ#æræçæëæüæ£æÓæˇøø_ørø∏øπø˝¿ @¿ @?¿ @E¿ @¢¿ @´¿ @¨¿ @Î¿ @Ò¿ A@¿ AO¿ AU¿ Aê¿ Añ¿ AÒ¿ A¯¿ A˘¿ B8¿ B>¿ Bâ¿ Bö¿ B†¿ B‚¿ BË¿ CC¿ CJ¿ CK¿ Cà¿ Cé¿ C‹¿ D-¿ DJ¿ DP¿ Dû¿ DÀ¿ D—¿ E0¿ E;¿ E<¿ Ez¿ EÄ¿ E©¿ EØ¿ E˝¿ F¿ Fb¿ Fh¿ F∑¿ F‚¿ FÌ¿ FÓ¿ G6¿ GÉ¿ G–¿ Gﬁ¿ G‰¿ H#¿ H)¿ Hv¿ Hæ¿ HŒ¿ H‘¿ I ¿ I&¿ IÉ¿ Iå¿ Iç¿ I⁄¿ J(¿ Jr¿ Jx¿ J≤¿ J∏¿ K¿ KW¿ K]¿ K©¿ KØ¿ L¿ L¿ L¿ Le¿ L∏¿ M¿ M¿ MM¿ MS¿ M†¿ MÒ¿ M˜¿ ND¿ NJ¿ N®¿ N≤¿ N≥¿ O¿ OU¿ Oü¿ O•¿ O‡¿ OÊ¿ P8¿ PÑ¿ Pä¿ P◊¿ P›¿ Q;¿ QE¿ QF¿ Qï¿ Qµ¿ Qª¿ R	¿ R¿ R_¿ R´¿ Rﬂ¿ RÂ¿ S0¿ SA¿ SG¿ S¶¿ S±¿ S≤¿ T¿ T¿ T"¿ Tp¿ Tv¿ T∆¿ U¿ UA¿ UG¿ Uí¿ U£¿ U©¿ V¿ V¿ V¿ Vd¿ Vò¿ Vû¿ VÎ¿ VÒ¿ WL¿ WS¿ WT¿ Wì¿ Wô¿ WË¿ X4¿ XZ¿ X`¿ XÆ¿ X¥¿ Y¿ Y¿ Y¿ Yc¿ Yi¿ Y∏¿ Z¿ Z¿ Z^¿ Zá¿ Zç¿ Zﬁ¿ Z‰¿ [D¿ [J¿ [Z¿ [`¿ [¢¿ [Í¿ \¿ \P¿ \g¿ \s¿ \t¿ \º¿ \Ω¿ ]¿ ].¿ ]4¿ ]Ä¿ ]Õ¿ ]¸¿ ^¿ ^S¿ ^ü¿ ^≈¿ ^À¿ _¿ _j¿ _ª¿ _¡¿ `¿ `2¿ `8¿ `ñ¿ `ú¿ `¨¿ `≤¿ a¿ a¿ a[¿ aw¿ a¡¿ aÿ¿ a˚¿ a¸¿ bE¿ bt¿ bz¿ bÀ¿ c¿ cj¿ câ¿ cè¿ c€¿ d(¿ dW¿ d]¿ dº¿ d¬¿ d“¿ dÿ¿ e¿ eX¿ e®¿ e”¿ eﬁ¿ eﬂ¿ f-¿ fL¿ fR¿ fõ¿ f¨¿ f≤¿ g¿ g¿ g¿ gj¿ gâ¿ gè¿ gÿ¿ gÈ¿ gÔ¿ hN¿ hY¿ hZ¿ hï¿ hõ¿ hÁ¿ i4¿ ic¿ ii¿ iÀ¿ iŸ¿ i⁄¿ j-¿ j3¿ j¿ jÃ¿ j˚¿ k¿ kb¿ ko¿ kp¿ kπ¿ k„¿ kÈ¿ l9¿ lÇ¿ l–¿ l˝¿ m¿ mO¿ mú¿ mÀ¿ m—¿ n2¿ n8¿ nH¿ nN¿ ná¿ nŒ¿ o¿ oI¿ oV¿ oW¿ o•¿ oΩ¿ o√¿ p¿ p¿ pl¿ pr¿ pÇ¿ pà¿ p¡¿ pŒ¿ pœ¿ q¿ q¿ qm¿ qÑ¿ qä¿ q”¿ q‰¿ qÍ¿ r"¿ r(¿ rä¿ rò¿ rô¿ rÂ¿ rÛ¿ r˘¿ sH¿ s_¿ se¿ sÆ¿ sø¿ s≈¿ s˝¿ t¿ td¿ tq¿ tr¿ t¿¿ tŸ¿ tﬂ¿ u.¿ u}¿ uÉ¿ uœ¿ v¿ vd¿ vj¿ vπ¿ v›¿ v„¿ wC¿ wl¿ wm¿ wæ¿ w◊¿ w›¿ x&¿ x,¿ xu¿ x≈¿ xÎ¿ xÒ¿ yL¿ yR¿ yb¿ yh¿ y∏¿ y·¿ z0¿ za¿ zh¿ zi¿ z∫¿ z”¿ zŸ¿ {"¿ {r¿ {ü¿ {•¿ | ¿ |¿ |¿ |¿ |^¿ |≠¿ |√¿ |—¿ |“¿ }#¿ }<¿ }B¿ }ã¿ }ë¿ }⁄¿ ~*¿ ~_¿ ~e¿ ~¬¿ ~»¿ ~ÿ¿ ~ﬁ¿ ¿ b¿ ∞¿ π¿ ∫¿ Ä¿ Ä$¿ Ä*¿ Äs¿ Ä√¿ Ä¿ Äˆ¿ ÅX¿ Å^¿ Ån¿ Åt¿ Å√¿ ÅŸ¿ Ç$¿ Ç=¿ ÇK¿ ÇM¿ ÇN¿ Ç¶¿ Ç·¿ ÇÂ¿ ÉB¿ Éâ¿ Éç¿ É‚¿ Ñ6¿ Ñå¿ Ñ‡¿ Ñ‰¿ Ö2¿ Öm¿ Öq¿ Ö ¿ ÖŒ¿ Ü¿ Üc¿ ÜÇ¿ ÜÜ¿ Üî¿ Üò¿ Ü„¿ á¿ á2¿ áO¿ áj¿ áâ¿ á®¿ á√¿ áÿ¿ à.¿ àV¿ àW¿ àõ¿ à°¿ àÁ¿ â,¿ â4¿ â5¿ âm¿ âs¿ âµ¿ â‰¿ âÎ¿ âÏ¿ ä6¿ ä^¿ äd¿ äØ¿ ä¸¿ ãE¿ ãê¿ ãñ¿ ã∆¿ ã÷¿ ã‹¿ å+¿ å_¿ åt¿ å~¿ å¿ åœ¿ å‹¿ å‚¿ ç0¿ çm¿ çs¿ çö¿ ç†¿ çÚ¿ éB¿ éç¿ éì¿ é¿¿ é»¿ é ¿ éÀ¿ éÔ¿ éÛ¿ è¿ è¿ è:¿ è}¿ è∫¿ èÀ¿ ê¿ ê¿ êb¿ ê∆¿ êÃ¿ ë¿ ëL¿ ëT¿ ëU¿ ëê¿ ëñ¿ ë‡¿ í0¿ í†¿ í¶¿ íˆ¿ ì¿ ì$¿ ì%¿ ìh¿ ì≠¿ ì“¿ ìÿ¿ î'¿ îò¿ îû¿ îÓ¿ ï¿ ï¿ ïg¿ ïá¿ ïë¿ ïì¿ ïî¿ ïæ¿ ï¬¿ ñ¿ ñS¿ ñW¿ ñe¿ ñi¿ ñµ¿ ñ¡¿ ñ¸¿ ó:¿ óL¿ óÇ¿ óà¿ óÒ¿ ó˜¿ ò?¿ òè¿ òõ¿ ò°¿ ò±¿ ò∑¿ ô¿ ô¿ ôg¿ ô†¿ ô©¿ ô™¿ ôﬂ¿ ôÂ¿ öL¿ öR¿ öö¿ öÍ¿ öˆ¿ ö¸¿ õ¿ õ¿ õ`¿ õq¿ õz¿ õ{¿ õ…¿ õ˚¿ ú¿ úh¿ ún¿ ú∂¿ ù¿ ù¿ ù¿ ù(¿ ù.¿ ù|¿ ùç¿ ùñ¿ ùò¿ ùô¿ ù”¿ ù◊¿ ùÓ¿ û-¿ ûB¿ ûì¿ û°¿ û¢¿ ûË¿ ü.¿ üU¿ ü]¿ ü^¿ ü¢¿ üË¿ †/¿ †m¿ †w¿ †y¿ †z¿ †{¿ †™¿ †∂¿ †Ã¿ †“¿ °¿ °n¿ °t¿ °¿¿ °÷¿ ¢#¿ ¢|¿ ¢—¿ ¢Í¿ ¢Ú¿ ¢Û¿ £¿ £%¿ £~¿ £Ø¿ £µ¿ £ı¿ £˚¿ §S¿ §Æ¿ §¥¿ §ƒ¿ § ¿ •&¿ •J¿ •V¿ •W¿ •v¿ •|¿ •»¿ •Œ¿ ¶!¿ ¶'¿ ¶n¿ ¶t¿ ¶…¿ ¶Ë¿ ß?¿ ßE¿ ßU¿ ß[¿ ß£¿ ßÓ¿ ®¿ ®|¿ ®â¿ ®ä¿ ®÷¿ ®‹¿ ©/¿ ©Å¿ ©™¿ ©∞¿ ™¿ ™O¿ ™°¿ ™Û¿ ™˘¿ ´I¿ ´ô¿ ´Á¿ ¨7¿ ¨}¿ ¨É¿ ¨ì¿ ¨ô¿ ¨Á¿ ≠¿ ≠¿ ≠¿ ≠F¿ ≠J¿ ≠ê¿ ≠Ø¿ ≠Ω¿ ≠Ï¿ ≠Ò¿ Æ<¿ Æá¿ Æ÷¿ Ø$¿ Øs¿ Øx¿ Ø»¿ ∞¿ ∞*¿ ∞/¿ ∞w¿ ∞x¿ ∞¨¿ ∞≠¿ ∞ÿ¿ ∞˝¿ ±&¿ ±K¿ ±v¿ ±ü¿ ±…¿ ±˘¿ ≤&¿ ≤P¿ ≤Ñ¿ ≤¥¿ ≤‡¿ ≥¿ ≥¿ ≥J¿ ≥Ä¿ ≥æ¿ ≥Ù¿ ¥6¿ ¥t¿ ¥¥¿ µ ¿ µF¿ µÜ¿ µÿ¿ ∂"¿ ∂d¿ ∂ú¿ ∂›¿ ∑¿ ∑¿ ∑K¿ ∑f¿ ∑g¿ ∑ï¿ ∑È¿ ∑Ì¿ ∑Ó¿ ∏¿ ∏?¿ ∏j¿ ∏æ¿ ∏ø¿ π¿ π¿ π)¿ πD¿ πZ¿ π`¿ πd¿ πe¿ π´¿ ππ¿ πø¿ π◊¿ π¿ ∫7¿ ∫;¿ ∫[¿ ∫´¿ ∫’¿ ∫¸¿ ª@¿ ªD¿ ªE¿ ª}¿ ª≠¿ ªÆ¿ ªÁ¿ ªÌ¿ º¿ º¿ º#¿ º)¿ ºo¿ º†¿ ºË¿ ºÓ¿ Ω6¿ ΩK¿ Ω_¿ Ω®¿ Ω‘¿ Ωÿ¿ ΩÛ¿ æ¿ æD¿ æÇ¿ æÜ¿ æá¿ æø¿ ø ¿ ø¿ øM¿ øS¿ øï¿ øÊ¿ ¿7¿ ¿X¿ ¿^¿ ¿´¿ ¿Ã¿ ¿“¿ ¿˘¿ ¿ˇ¿ ¡¿ ¡¿ ¡d¿ ¡ò¿ ¡‚¿ ¡¯¿ ¬¿ ¬a¿ ¬ú¿ ¬†¿ ¬√¿ ¬ﬁ¿ √¿ √Z¿ √^¿ √_¿ √£¿ √©¿ √—¿ √Ì¿ ƒ?¿ ƒC¿ ƒf¿ ƒÅ¿ ƒ¶¿ ƒ‰¿ ƒË¿ ƒÈ¿ ≈#¿ ≈r¿ ≈Ø¿ ≈µ¿ ≈Ú¿ ∆¿ ∆Q¿ ∆U¿ ∆w¿ ∆í¿ ∆¥¿ ∆˙¿ ∆˛¿ ∆ˇ¿ «@¿ «p¿ «v¿ «®¿ «ƒ¿ »¿ »¿ »=¿ »X¿ »}¿ »ø¿ »√¿ »ƒ¿ …¿ …¿ …\¿ …ß¿ …≠¿ …Á¿ …Ì¿  ¿  ¿  z¿  Ä¿  Á¿  Ì¿ ÀT¿ ÀZ¿ À¶¿ À˜¿ Ã¿ Ã	¿ Ã¿ Ã¿ Ãn¿ Ãö¿ Ã„¿ Õ"¿ Õ@¿ Õî¿ Õò¿ ÕΩ¿ Õÿ¿ Õ˝¿ Œ@¿ ŒD¿ ŒE¿ Œ}¿ Œ¥¿ Œµ¿ œ ¿ œN¿ œô¿ œÊ¿ –4¿ –:¿ –¿ –Ö¿ –”¿ –˜¿ –˝¿ —f¿ —l¿ —’¿ —€¿ “D¿ “J¿ “ñ¿ “Á¿ “Û¿ “˘¿ ”	¿ ”¿ ”Y¿ ”t¿ ”Ω¿ ”›¿ ‘&¿ ‘*¿ ‘Q¿ ‘l¿ ‘™¿ ‘ı¿ ‘˘¿ ‘˙¿ ’J¿ ’à¿ ’é¿ ’≤¿ ’—¿ ÷¿ ÷6¿ ÷K¿ ÷l¿ ÷å¿ ÷Á¿ ◊.¿ ◊9¿ ◊?¿ ◊P¿ ◊T¿ ◊z¿ ◊ì¿ ◊Â¿ ÿ-¿ ÿu¿ ÿÇ¿ ÿœ¿ Ÿ¿ ŸS¿ Ÿ¨¿ Ÿ˝¿ ⁄¿ ⁄¿ ⁄¿ ⁄Z¿ ⁄Æ¿ ⁄˙¿ € ¿ €(¿ €u¿ €ô¿ €Û¿ €˜¿ ‹"¿ ‹=¿ ‹b¿ ‹®¿ ‹¨¿ ‹≠¿ ‹Á¿ ‹Ì¿ ›#¿ ›)¿ ›9¿ ›?¿ ›{¿ ›≥¿ ›Â¿ ﬁ-¿ ﬁD¿ ﬁt¿ ﬁx¿ ﬁñ¿ ﬁŒ¿ ﬁ“¿ ﬁ”¿ ﬂ¿ ﬂ,¿ ﬂ2¿ ﬂW¿ ﬂ]¿ ﬂÆ¿ ﬂœ¿ ‡&¿ ‡H¿ ‡L¿ ‡M¿ ‡u¿ ‡ª¿ ‡€¿ ‡˘¿ ·'¿ ·/¿ ·<¿ ·Ç¿ ·à¿ ·å¿ ·ç¿ ·»¿ ·Œ¿ ‚¿ ‚/¿ ‚5¿ ‚C¿ ‚a¿ ‚g¿ ‚}¿ ‚É¿ ‚∞¿ ‚ ¿ ‚€¿ ‚Ú¿ „@¿ „K¿ „S¿ „]¿ „c¿ „s¿ „y¿ „¥¿ „’¿ ‰,¿ ‰N¿ ‰R¿ ‰S¿ ‰{¿ ‰î¿ ‰≤¿ ‰‡¿ ‰Ë¿ ‰ı¿ Â6¿ Âå¿ Â∑¿ Â˚¿ Ê¿ Ê	¿ Ê¿ Ê¿ ÊM¿ ÊS¿ Êü¿ ÊÈ¿ Á¿ Á4¿ Á{¿ Á¿ Á†¿ ÁÍ¿ ÁÓ¿ ÁÔ¿ Ë¿ ËF¿ ËJ¿ Ëf¿ Ë´¿ ËØ¿ Ë∞¿ ËË¿ ËÓ¿ È:¿ ÈÄ¿ È≥¿ Èπ¿ Èˇ¿ Í ¿ Í&¿ Ís¿ Íø¿ Í‚¿ ÍË¿ Î/¿ Î}¿ Î§¿ Î•¿ Î±¿ Î«¿ Ï¿ Ï4¿ Ï:¿ Ïj¿ ÏÖ¿ Ï°¿ Ï ¿ ÏË¿ Ì¿ ÌB¿ ÌM¿ Ìp¿ Ìó¿ Ìº¿ ÌË¿ Ó#¿ Óx¿ Óá¿ Ó≠¿ Óµ¿ ÓÕ¿ Ó”¿ ÓÚ¿ Ô#¿ Ô;¿ ÔA¿ Ôq¿ Ôô¿ Ô±¿ Ô∑¿ ÔË¿ ¿ ,¿ 2¿ Q¿ é¿ ¶¿ ¨¿  ¿ Ò¿ Ò¿ Ò#¿ ÒR¿ Òì¿ Ò´¿ Ò±¿ ÒÀ¿ Ò˛¿ Ú¿ Ú¿ Ú;¿ Úx¿ Úê¿ Úñ¿ Ú¨¿ ÚÂ¿ Úˆ¿ Û*¿ ÛA¿ Û_¿ Ûc¿ Ûe¿ Ûf¿ Û®¿ Û¿¿ Ù¿ Ù[¿ Ù£¿ ÙÌ¿ ı¿ ı¿ ı!¿ ı¿ ıä¿ ıã¿ ı´¿ ı±¿ ˆ
¿ ˆ¿ ˆ¿ ˆ;¿ ˆA¿ ˆë¿ ˆÃ¿ ˆ›¿ ˆﬁ¿ ˆ¿ ˆˆ¿ ˜F¿ ˜î¿ ˜‡¿ ¯-¿ ¯v¿ ¯|¿ ¯Õ¿ ¯Ÿ¿ ¯ﬂ¿ ¯Ô¿ ¯ı¿ ˘T¿ ˘ô¿ ˘†¿ ˘¢¿ ˘£¿ ˘‚¿ ˘ı¿ ˙C¿ ˙ì¿ ˙©¿ ˙µ¿ ˙∂¿ ˚¿ ˚T¿ ˚j¿ ˚v¿ ˚x¿ ˚y¿ ˚Ø¿ ˚≥¿ ˚Û¿ ˚˜¿ ¸E¿ ¸]¿ ¸a¿ ¸∞¿ ¸ˇ¿ ˝F¿ ˝é¿ ˝‹¿ ˝Í¿ ˝Ó¿ ˛:¿ ˛â¿ ˛–¿ ˛‘¿ ˛‚¿ ˛Ê¿ ˇT¿ ˇ£¿ ˇ…¿ ¿ &¿ ?¿ O¿ w¿ ä¿ î¿ ≥¿ ∑¿ ∏¿ Ÿ¿ ı¿¿¿(¿)¿m¿¿¨¿≈¿…¿ ¿¿¿L¿f¿j¿k¿Ö¿“¿¿	¿Z¿u¿{¿∆¿¿`¿Ä¿ì¿¿¿Ï¿¿9¿N¿q¿â¿è¿ì¿î¿ÿ¿ﬁ¿,¿B¿]¿q¿Å¿ù¿∞¿∫¿(¿,¿-¿b¿h¿¥¿ƒ¿ ¿¿0¿Ä¿œ¿	¿	e¿	∫¿	Á¿
¿
¿
¿
k¿
ç¿
ì¿
”¿	¿'¿7¿ã¿û¿®¿ª¿ø¿¿¿Ò¿˜¿F¿ï¿Ê¿2¿~¿Ã¿¿6¿<¿ä¿≥¿π¿¿R¿h¿n¿§¿™¿∏¿”¿Ÿ¿¿P¿o¿π¿ ¿‹¿¸¿L¿ö¿¿¿ˆ¿¿"¿*¿0¿R¿Ü¿—¿¸¿?¿É¿¿¿Ÿ¿ﬂ¿¿K¿Q¿n¿à¿é¿∞¿Œ¿È¿Ò¿˜¿¿6¿<¿W¿]¿Ä¿π¿√¿…¿Ù¿¸¿¿¿Q¿ü¿√¿’¿Í¿¿-¿~¿Ã¿¿¿¿<¿X¿\¿]¿©¿Ô¿ı¿B¿å¿‹¿+¿u¿¬¿˚¿¸¿¿2¿4¿5¿O¿¿»¿„¿Ë¿6¿X¿t¿Ç¿É¿©¿™¿“¿”¿(¿^¿ú¿Ã¿÷¿ﬁ¿‚¿„¿¿|¿}¿ó¿™¿¬¿Œ¿Ê¿3¿K¿ï¿Õ¿‘¿Í¿˙¿˛¿ˇ¿ )¿ *¿ M¿ N¿ Z¿ ä¿ å¿ ç¿ ø¿ ˚¿ ¸¿!0¿!4¿!p¿!ä¿!é¿!ÿ¿"!¿"o¿"µ¿# ¿#)¿#-¿#f¿#j¿#v¿#Ç¿#π¿#˜¿$¿$b¿$≠¿$ ¿%¿%5¿%V¿%\¿%d¿%h¿%~¿%Ç¿%é¿%õ¿%“¿&¿&P¿&è¿&€¿&ı¿'D¿'å¿'≠¿'≥¿'ª¿'Õ¿(¿(3¿(9¿(w¿(ì¿(—¿(“¿)¿)¿)T¿)o¿)p¿)q¿)ö¿)†¿)Ë¿)Ó¿*:¿*O¿*Q¿*R¿*r¿*v¿*æ¿*ÿ¿*‹¿+¿+1¿+K¿+z¿+¿+»¿+„¿+Ë¿,!¿,?¿,[¿,h¿,i¿,É¿,©¿,‰¿-¿-¿-5¿-d¿-j¿-û¿-√¿.¿.H¿.I¿.q¿.w¿.ª¿.¡¿/¿/¿/Y¿/â¿/¥¿/¸¿0P¿0k¿0‡¿0Ô¿1¿18¿1z¿1Ü¿1é¿1ñ¿1Ø¿1Õ¿1”¿1¿1Ù¿1ı¿21¿2å¿2ç¿2›¿3 ¿3)¿3+¿3,¿3O¿3S¿3¢¿3Ú¿4@¿4c¿4g¿4π¿5¿5@¿5D¿5è¿5Ÿ¿6)¿6x¿6ƒ¿7¿7d¿7¨¿7Ë¿7Ï¿86¿8Ä¿8–¿9¿9¿9]¿9i¿9é¿9¢¿9∂¿9À¿9È¿9Ù¿:@¿:å¿:•¿:Ê¿;¿;¿;V¿;~¿;Ñ¿;à¿;ú¿;¬¿;‡¿< ¿<¿<¿<¿<Q¿<U¿<§¿<Ú¿=9¿=É¿=∞¿=≤¿=≥¿=Í¿>8¿>q¿>´¿>»¿> ¿>À¿?¿?¿?V¿?d¿?h¿?¥¿@¿@D¿@H¿@ì¿@›¿A-¿A|¿A»¿B¿Bh¿B∞¿BÏ¿B¿C:¿CÑ¿C‘¿D¿D,¿D@¿DM¿D[¿Dq¿Dî¿D•¿Dπ¿DŒ¿DÏ¿DÒ¿E¿EB¿EF¿Ed¿Eö¿Eû¿Eü¿E«¿EÏ¿F*¿F:¿FP¿Fh¿FÑ¿F°¿F™¿F´¿F»¿G¿G8¿GB¿Gã¿G∑¿G¡¿G…¿G ¿G€¿Gˆ¿H¿H@¿HJ¿Hh¿H¨¿H«¿H„¿HÓ¿I¿I0¿IP¿IQ¿I}¿Iâ¿Iè¿Ië¿Ií¿Iﬂ¿IÔ¿IÛ¿J*¿J>¿Jà¿Jé¿Jﬂ¿K.¿K}¿K®¿KÆ¿KÊ¿KÒ¿KÚ¿L4¿L:¿Lã¿L‹¿L‚¿M¿M&¿M(¿M)¿MM¿MQ¿M_¿Mc¿M≤¿Mÿ¿MÌ¿N!¿N'¿Nu¿N¿¿O¿O¿O¿O¿Ol¿OÜ¿Oî¿O„¿P	¿P¿P]¿P´¿P≈¿PÀ¿P€¿Q¿Q¿Qj¿Qp¿Qæ¿R	¿R>¿RG¿Rí¿RÀ¿R—¿S¿Ss¿Sy¿Sâ¿S∆¿SÕ¿T¿T¿TU¿T†¿T·¿TÁ¿T˜¿T˝¿UF¿U_¿Ut¿Uv¿Uw¿U»¿U‚¿V¿Va¿V}¿Vô¿V¨¿V≠¿V˝¿W ¿W&¿Wv¿Wø¿X¿XY¿Xs¿Xy¿X»¿Y¿YN¿Y}¿Y¿YÄ¿Y≤¿Y∂¿Y˚¿Yˇ¿ZB¿ZÅ¿Zï¿Zô¿Zﬂ¿[
¿[¿[M¿[ê¿[∏¿[º¿\ ¿\9¿\S¿\Å¿\©¿\≈¿\‚¿]¿]¿]b¿]ß¿]≥¿]¥¿]‹¿]‚¿^/¿^~¿^°¿^«¿^Ê¿^˝¿_¿_2¿_3¿_q¿_w¿_º¿` ¿`A¿`B¿`r¿`Ø¿`∞¿`Â¿a¿a¿af¿a∞¿a±¿a¯¿b¿b=¿b>¿bÖ¿b∑¿c¿c¿cE¿cÖ¿cî¿c˙¿c˚¿d>¿dÖ¿d ¿d◊¿eM¿eN¿eì¿e⁄¿eÈ¿fQ¿fR¿fó¿fﬁ¿g#¿g8¿g∞¿g±¿g˜¿h;¿hÄ¿h«¿hÏ¿iH¿iI¿iè¿i”¿j¿j_¿j•¿jÕ¿k9¿k:¿k}¿kü¿k•¿kË¿l¿l¿lY¿lô¿l‡¿m$¿mk¿mØ¿m›¿m„¿n(¿n^¿n∞¿n–¿o/¿o3¿ow¿o“¿o”¿p"¿pg¿pm¿pº¿q¿qI¿qp¿qv¿q¬¿r¿r]¿rc¿rÜ¿rß¿r¬¿r›¿r¯¿rˇ¿s#¿sG¿sã¿s±¿sµ¿s¯¿t;¿tx¿ty¿tz¿t…¿u¿u¿uH¿uN¿uù¿uÎ¿v.¿vx¿v~¿v»¿w¿wc¿wz¿w™¿wÀ¿wÊ¿x¿x¿x#¿xL¿xp¿xº¿xÙ¿x¯¿yC¿y¿yπ¿yˆ¿y˜¿z>¿zU¿zq¿zë¿zÕ¿z—¿{.¿{/¿{q¿{ü¿{•¿{˜¿|E¿|a¿|Å¿|Ω¿|¡¿}¿}¿}g¿}§¿}„¿~$¿~j¿~Æ¿~Ú¿~˛¿?¿_¿≤¿∂¿˚¿ÄF¿ÄG¿Äô¿Äß¿Ä≠¿Ä¸¿Å!¿Å'¿Ån¿Å£¿Åø¿ÅÒ¿Åı¿ÇB¿ÇC¿ÇÖ¿Ç»¿Çÿ¿Ç˜¿É¿É=¿ÉA¿É}¿É~¿Éƒ¿É ¿Ñ¿Ñe¿Ñê¿Ñ”¿Ö¿Ö7¿ÖR¿Öz¿Öπ¿Ö∆¿ÖÚ¿Ö¯¿Ö¸¿ÜD¿Ü¥¿Üµ¿Ü˚¿á:¿áw¿á}¿á ¿à¿àF¿àê¿à–¿àÙ¿â¿â7¿â|¿ââ¿âº¿â¬¿â∆¿ä¿äò¿äô¿äﬁ¿ã¿ãC¿ãD¿ãâ¿ãÕ¿ãË¿å¿å¿å]¿å™¿å…¿åœ¿ç¿ç¿çb¿çÇ¿ç•¿çœ¿ç”¿é¿é¿éQ¿éÄ¿éû¿é¬¿é‚¿è
¿è¿è¿èf¿èg¿èß¿è◊¿èˇ¿ê%¿êE¿êd¿êu¿êy¿ê«¿ê»¿ê˝¿ë¿ëS¿ë†¿ëÎ¿í*¿í0¿íÅ¿í–¿ì"¿ìo¿ìπ¿î¿î¿îZ¿îo¿îö¿îÿ¿î‹¿ï¿ï¿ï]¿ïp¿ïv¿ï∆¿ñ¿ñN¿ñó¿ñ≤¿ñÕ¿ñÎ¿ó¿ó1¿ó7¿óÆ¿ó≤¿óˆ¿ó˜¿òF¿òw¿ò}¿ò…¿ô¿ô`¿ôØ¿ô˘¿ö1¿ö7¿öÇ¿öœ¿õ¿õL¿õR¿õ¢¿õÔ¿ú?¿úÇ¿úœ¿ù¿ùk¿ùª¿û
¿û¿û^¿û≠¿û·¿ûÁ¿ü8¿üÉ¿üæ¿üÎ¿üÔ¿üÒ¿üÚ¿†4¿†8¿†F¿†§¿†¥¿†Â¿†Î¿°¿°=¿°]¿°{¿°|¿°¡¿°«¿¢¿¢H¿¢Ö¿¢Õ¿¢—¿¢“¿¢Ò¿¢˜¿£J¿£é¿£ß¿£®¿£’¿£€¿§,¿§~¿§ö¿§±¿§≤¿§‚¿§Ë¿•8¿•á¿•£¿•©¿•˜¿¶F¿¶ï¿¶„¿¶Ù¿ß9¿ßr¿ßt¿ßu¿ßΩ¿ß¡¿®¿®^¿®§¿®®¿®Ó¿®Ú¿©>¿©ç¿©´¿©Ø¿©˘¿™I¿™j¿™™¿™Ÿ¿´ ¿´!¿´I¿´J¿´V¿´à¿´ä¿´ã¿´⁄¿´Ù¿¨/¿¨y¿¨z¿¨ï¿¨≤¿¨≥¿¨ø¿¨⁄¿≠¿≠.¿≠F¿≠©¿Æ¿Æy¿ÆÇ¿Æà¿Æ¢¿Æ¶¿Æß¿Æ≥¿Æ«¿ÆÓ¿Ø¿Ø1¿Ø7¿ØO¿Øa¿Øe¿Øg¿Øh¿Øß¿Ø´¿ØÛ¿∞>¿∞å¿∞∞¿∞¥¿±¿±Q¿±ù¿±Ì¿≤;¿≤I¿≤\¿≤z¿≤ö¿≤ÿ¿≥¿≥M¿≥N¿≥Ñ¿≥õ¿≥ú¿≥¡¿≥«¿¥¿¥[¿¥´¿¥ ¿¥·¿¥‚¿µ¿µ¿µc¿µ™¿µ¯¿∂G¿∂Ä¿∂Ü¿∂‘¿∑$¿∑s¿∑¨¿∑∆¿∑«¿∑Ê¿∑Á¿∑Ë¿∏8¿∏_¿∏e¿∏¥¿π¿π¿π¿πT¿πZ¿π†¿π“¿∫¿∫¿∫¿∫a¿∫g¿∫©¿∫Ì¿ª;¿ªò¿ªú¿ªù¿ª©¿º¿º¿º¿ºK¿ºy¿ºû¿º¢¿ºı¿ºˆ¿Ω¿Ωê¿Ω≤¿Ω∂¿Ω˘¿Ω˙¿æ>¿æ¥¿æ˜¿ø2¿øN¿øa¿øn¿øÑ¿ø™¿øœ¿øÿ¿øﬁ¿ø‚¿¿>¿¿?¿¿ü¿¡¿¡5¿¡â¿¡ö¿¡û¿¬,¿¬-¿¬Q¿¬«¿¬Î¿¬Ô¿√1¿√2¿√]¿√b¿√∑¿√·¿√˘¿ƒ%¿ƒ5¿ƒR¿ƒX¿ƒi¿ƒm¿ƒ´¿ƒ¨¿ƒ¯¿ƒ˛¿≈?¿≈_¿≈a¿≈b¿≈ó¿≈”¿≈‰¿∆¿∆¿∆j¿∆≠¿∆∑¿∆∏¿«¿«R¿«Ä¿«â¿«ä¿«◊¿»(¿»k¿»t¿»u¿»≈¿»”¿»‹¿»ﬁ¿»ﬂ¿…,¿…|¿…é¿…í¿…„¿…ˆ¿ A¿ G¿ {¿ Å¿ “¿ ÿ¿À'¿Àu¿À≈¿À÷¿À‹¿Ã+¿Ã1¿ÃW¿Ã]¿Ãm¿Ãs¿Ã¿¿ÃŸ¿ÃÍ¿Ã˚¿Õ¿Õ7¿Õ8¿ÕR¿Õi¿Õj¿Õ†¿ÕÎ¿Œ¿ŒK¿ŒL¿ŒX¿Œ{¿Œö¿Œº¿Œﬂ¿Œ„¿Œ‰¿Œ¿œ"¿œ#¿œ/¿œÄ¿œÇ¿œÉ¿œ‘¿–#¿–q¿–Ω¿–Ó¿–Ú¿—;¿—H¿—s¿—¿¿“¿“U¿“[¿“¨¿“˙¿”'¿”b¿”z¿”ö¿”≤¿”Œ¿”œ¿‘¿‘c¿‘i¿‘¥¿‘‹¿‘‚¿‘¿’¿’N¿’}¿’¨¿’€¿’Â¿’Î¿÷:¿÷Ü¿÷å¿÷ñ¿÷÷¿÷Ì¿◊¿◊¿◊2¿◊<¿◊F¿◊L¿◊^¿◊d¿◊Ö¿◊ã¿◊ï¿◊”¿◊Ô¿ÿ¿ÿ'¿ÿC¿ÿM¿ÿW¿ÿ]¿ÿ‰¿ÿÍ¿ÿÙ¿Ÿ1¿ŸT¿Ÿw¿Ÿö¿ŸΩ¿Ÿ«¿Ÿ—¿Ÿ◊¿⁄`¿⁄f¿⁄p¿⁄±¿⁄◊¿⁄˝¿€#¿€I¿€S¿€]¿€ç¿€§¿€ø¿€Ÿ¿€˜¿€¯¿‹D¿‹T¿‹|¿‹ì¿‹Æ¿‹∆¿‹Ô¿‹¿›>¿›Y¿›Å¿›ò¿›≥¿›À¿›Ù¿›ı¿ﬁ¿ﬁ+¿ﬁJ¿ﬁ]¿ﬁ^¿ﬁó¿ﬁÃ¿ﬂ¿ﬂY¿ﬂ¢¿ﬂ£¿ﬂƒ¿ﬂ–¿‡¿‡¿‡G¿‡\¿‡s¿‡ß¿‡æ¿‡»¿‡¿·	¿·(¿·?¿·I¿·ñ¿·¿¿·‰¿‚¿‚=¿‚r¿‚Å¿‚√¿‚…¿‚Õ¿‚Œ¿‚⁄¿‚˝¿„'¿„;¿„[¿„{¿„≤¿„‘¿„ˇ¿‰¿‰¿‰¿‰`¿‰a¿‰m¿‰é¿‰£¿‰∫¿‰Û¿Â¿Â;¿Â_¿Âë¿Âµ¿ÂÁ¿Âˆ¿Ê¿Ê!¿Ê%¿Ê&¿Ê2¿ÊH¿Ê]¿Êt¿Ê≠¿Ê∆¿Êı¿Á¿ÁK¿Áo¿Á°¿Á∞¿ËM¿ËS¿ËW¿ËY¿ËZ¿Ëò¿Ëú¿ËÏ¿È7¿Èâ¿Èü¿È’¿È˜¿Í¿ÍN¿Íb¿Í£¿Íß¿Í®¿ÍÃ¿ÍÎ¿Î%¿Î9¿Îr¿Îv¿Î•¿Îƒ¿Ï	¿Ï¿Ï;¿Ï?¿Ï@¿Ïo¿Ïé¿Ï”¿ÏÁ¿Ì¿Ì	¿Ì
¿ÌX¿Ì~¿Ìõ¿Ìú¿Ì‘¿Ó¿Óf¿Ó≤¿Ó˛¿Ô ¿Ô¿Ô4¿Ô8¿ÔF¿ÔJ¿Ôô¿ÔÊ¿5¿]¿©¿‘¿Ò¿Ò-¿Òú¿Ò∏¿Ò‘¿ÒÚ¿ÚK¿ÚO¿ÚP¿Úî¿Úö¿ÚË¿Û2¿Ûd¿Û∞¿ÛÕ¿Û¿Ù¿ÙL¿ÙÆ¿Ù≤¿Ù≥¿Ù˝¿ı¿ıR¿ıâ¿ıÆ¿ˆ
¿ˆ7¿ˆ¿ˆÉ¿ˆÑ¿ˆ’¿˜"¿˜I¿˜J¿˜ì¿˜À¿˜Î¿˜Ì¿˜Ó¿¯ ¿¯k¿¯l¿¯Ü¿¯´¿¯¨¿¯Õ¿˘¿˘¿˘T¿˘U¿˘a¿˘§¿˘•¿˘±¿˘ı¿˘ˆ¿˙¿˙%¿˙O¿˙c¿˙ä¿˙∫¿˙Ï¿˙¿˙Ò¿˙˝¿˚>¿˚@¿˚A¿˚y¿˚›¿˚ﬁ¿˚ı¿¸¿¸'¿¸(¿¸<¿¸~¿¸ä¿¸¡¿¸¬¿¸›¿¸Ù¿˝¿˝L¿˝}¿˝®¿˝Æ¿˝≤¿˝≥¿˝ø¿˛	¿˛
¿˛¿˛a¿˛b¿˛n¿˛ë¿˛ª¿˛œ¿˛¸¿ˇ¿ˇ@¿ˇg¿ˇk¿ˇl¿ˇx¿ˇ™¿ˇ¨¿ˇ≠¿ˇ‡¿ 1¿ 2¿ S¿ t¿ u¿ í¿ ÿ¿ ‰¿¿¿(¿í¿ì¿ü¿ı¿ˆ¿¿%¿O¿c¿ã¿∑¿‰¿Ë¿È¿ı¿1¿3¿4¿s¿w¿«¿¿^¿î¿Ã¿Õ¿	¿>¿\¿ü¿≥¿˜¿˚¿W¿X¿ú¿¢¿¿:¿k¿â¿Ã¿Ó¿,¿@¿z¿~¿⁄¿€¿	¿	@¿	^¿	°¿	µ¿	˚¿
¿
#¿
|¿
}¿
∞¿
‰¿¿E¿Y¿Ø¿¿?¿C¿¥¿¿(¿E¿G¿H¿é¿√¿Û¿=¿Y¿u¿É¿Ö¿Ü¿€¿Ù¿¯¿E¿ì¿‡¿0¿4¿â¿›¿6¿é¿·¿
¿¿h¿ç¿ë¿ü¿£¿Á¿1¿Å¿´¿ı¿=¿d¿±¿ˇ¿¿T¿d¿æ¿ƒ¿¿V¿\¿¥¿‘¿⁄¿=¿†¿¿¿¿]¿c¿ª¿¿E¿K¿•¿¿¿n¿‘¿9¿E¿F¿ô¿ü¿˜¿O¿•¿¿¿∆¿ ¿v¿ã¿ë¿ı¿Y¿º¿∆¿«¿¿¿g¿¬¿“¿ÿ¿ 1¿ Q¿ W¿ ∫¿!¿!¿!à¿!ä¿!ã¿!º¿!‰¿"¿"=¿"^¿"o¿"q¿"r¿"¶¿"¿¿"Ë¿#"¿#K¿#i¿#å¿#∞¿#”¿#Ú¿$¿$¿$&¿$(¿$)¿$f¿$à¿$™¿$◊¿$¿%	¿%"¿%;¿%L¿%N¿%O¿%ó¿%õ¿%Ì¿& ¿&¿&¿&¿&å¿&ê¿&∞¿&±¿&Ê¿&Á¿'¿'"¿'q¿'¬¿(¿(A¿(G¿(ñ¿(Ã¿(“¿)5¿)ò¿)¸¿*b¿*h¿*≥¿*˘¿+¿+¿+g¿+∫¿+˙¿,¿,¿,-¿,G¿,e¿,ç¿,ß¿,Ã¿,Ô¿-¿-/¿-k¿-~¿-´¿-Ô¿.,¿.î¿.®¿/¿/¿/û¿/ü¿/Í¿0
¿0¿0_¿0∞¿0˙¿1/¿15¿1É¿1π¿1ø¿2"¿2Ö¿2È¿3O¿3U¿3¶¿3Ï¿4¿4¿4Z¿4≠¿4Ì¿4Û¿5?¿5ç¿5◊¿6%¿6t¿6ô¿6¨¿6ø¿6“¿6Ï¿7
¿72¿7L¿7_¿7|¿7£¿7¬¿7„¿8¿82¿8_¿8ú¿9¿9¿9j¿9∆¿:
¿: ¿:ä¿:ó¿; ¿;¿;¢¿;®¿;¨¿<[¿=C¿=D¿=î¿=≤¿=∏¿>¿>Q¿>å¿>í¿>·¿?2¿?|¿?±¿?∑¿@¿@H¿@N¿@∞¿A¿Au¿A⁄¿A‡¿B/¿B¿B¢¿B®¿Bı¿CH¿Cà¿Cö¿C≠¿C«¿CÂ¿D¿D*¿DM¿Dg¿Dé¿D≠¿DŒ¿DÒ¿E¿E8¿Et¿Eá¿E¥¿EÒ¿FY¿Fm¿F‚¿FÊ¿Gß¿G®¿G˙¿H¿H6¿Hé¿Hõ¿H…¿I%¿I+¿I/¿I1¿I2¿Ip¿Iì¿I„¿J/¿J{¿JÃ¿K¿Kp¿Kö¿K∂¿L¿L&¿L-¿Lo¿Là¿L°¿Læ¿LŒ¿LÏ¿M*¿M>¿Mõ¿Mü¿M◊¿N^¿N`¿Na¿N—¿N’¿O¿OP¿OT¿OÃ¿O–¿P	¿P
¿PN¿PT¿P¢¿PÒ¿Q¿Q!¿Qù¿Q‚¿R¿R,¿RI¿RP¿R≥¿R∑¿R∏¿R‘¿RÍ¿S	¿S&¿S-¿SA¿Sw¿SÑ¿S£¿S™¿SÕ¿T ¿T)¿T-¿T.¿TS¿Ts¿Tt¿T∞¿T˙¿T˚¿UF¿U`¿Uf¿U±¿UÂ¿UÎ¿V5¿Vv¿V|¿VÕ¿W¿WP¿WV¿Wâ¿Wè¿Wô¿W∆¿WÚ¿X¿XL¿XV¿X\¿X´¿XÙ¿X˙¿YX¿Y^¿Yâ¿Yè¿Yö¿Y™¿YΩ¿Y¯¿Y˛¿ZY¿Zú¿Z¢¿Z’¿Z€¿ZÂ¿[¿[G¿[Q¿[W¿[†¿[¨¿[≤¿[˝¿\:¿\L¿\l¿\î¿\õ¿\º¿\Û¿\˘¿]/¿]J¿]æ¿]ƒ¿^)¿^w¿^}¿^†¿^…¿^÷¿_¿_¿_K¿_ê¿_≈¿_ÿ¿_‹¿_›¿_Ì¿`	¿`(¿`O¿`t¿`v¿`w¿`ë¿`∏¿a¿a¿a#¿aa¿at¿aá¿a†¿aª¿aÃ¿aÕ¿aÔ¿b¿b?¿b@¿bL¿bo¿bè¿b¢¿bÃ¿b‡¿c¿c*¿co¿cæ¿c¬¿c√¿cœ¿d1¿d3¿d4¿dÖ¿dâ¿d¨¿dÛ¿e¿eM¿eZ¿e[¿e©¿e∫¿eª¿f¿f*¿f,¿f-¿fe¿fó¿fﬁ¿f‰¿g"¿gm¿gs¿gƒ¿gÌ¿gÛ¿h.¿hW¿hç¿hÿ¿hﬁ¿i+¿iU¿iö¿i¶¿iª¿iŸ¿iˇ¿j¿j0¿jM¿jp¿j≈¿k¿kY¿k§¿k˜¿lS¿lT¿lö¿lÍ¿m¿m%¿mY¿mz¿mà¿mø¿m‰¿mÚ¿mÛ¿na¿n£¿nß¿n®¿n¯¿o,¿oh¿o¢¿o„¿oÈ¿p¿p¿pf¿p´¿p∆¿pÃ¿q¿qf¿qy¿q¥¿q›¿r¿r^¿rd¿rµ¿s ¿s¿s¿sZ¿sÑ¿s…¿sŸ¿sÓ¿t¿t0¿tG¿t`¿t}¿t†¿tı¿uL¿uç¿uÿ¿v+¿vá¿và¿v⁄¿w¿w ¿w!¿wD¿w[¿w¿w≠¿wÕ¿x¿x	¿x
¿xX¿x\¿x}¿x¡¿x“¿xÙ¿x˙¿yH¿yí¿yÀ¿y—¿z¿zm¿zÉ¿zç¿zé¿z»¿zŒ¿{¿{¿{\¿{r¿{{¿{|¿{±¿{∑¿{˘¿|¿|¿|¿|¿|g¿|s¿|w¿|ñ¿|§¿|‹¿|Í¿|Î¿}$¿}1¿}3¿}4¿}i¿}m¿}¥¿}¯¿~9¿~=¿~Ü¿~÷¿¿<¿@¿ê¿Ÿ¿Ä¿Ä¿Ä_¿Äû¿ÄŒ¿Å¿Å/¿Å5¿Å~¿Å∆¿Ç¿Çe¿Ç≤¿Çı¿Ç˚¿ÉB¿ÉX¿Ét¿É»¿ÉÊ¿ÑC¿Ñ]¿Ñ|¿Ñõ¿Ñı¿Ñ˘¿Ö'¿ÖH¿Öh¿Öä¿Ö ¿ÖÀ¿Ü)¿ÜÖ¿Ü ¿ÜË¿ÜÈ¿á1¿á7¿ác¿ái¿áy¿á¿á–¿à¿à)¿à*¿à{¿àÃ¿â¿âd¿âs¿ây¿â≈¿ä¿äd¿ä¨¿ä˙¿ãD¿ãJ¿ãó¿ãù¿ã¡¿ã«¿å¿åa¿å±¿ç¿ç&¿ç,¿çz¿ç√¿é¿éb¿é∞¿è ¿èH¿èu¿è{¿è≈¿èﬁ¿è‰¿èÚ¿ê¿êG¿ê^¿ê¢¿êÀ¿ë¿ëC¿ë]¿ëw¿ë¿ëâ¿ëè¿ëﬁ¿í,¿íz¿íò¿íû¿í¨¿íŸ¿ì¿ìD¿ì[¿ìü¿ì⁄¿î¿î1¿î9¿îC¿îI¿îö¿î‡¿ï*¿ï0¿ï>¿ïk¿ïÇ¿ï⁄¿ñ¿ñ1¿ñH¿ñ≠¿ñÍ¿ó¿ó¿ó¿ó¿óg¿ó∞¿ò¿ò9¿ò?¿òc¿òi¿ò®¿òÆ¿ò¸¿ôJ¿ôõ¿ôÊ¿ö5¿öÉ¿öŒ¿õ¿õj¿õª¿õ÷¿õ‹¿õÏ¿õÚ¿úB¿úd¿ú¨¿ú¬¿ú¿ù¿ù%¿ùa¿ùn¿ùí¿ùŸ¿û¿û¿û¿ûb¿ûê¿ûØ¿ûÕ¿ûÌ¿ü¿ü=¿ü~¿ü¿üø¿üﬁ¿ü‰¿†#¿†)¿†w¿†ª¿†Â¿†Ê¿°)¿°n¿°µ¿°Í¿°¿¢¿¢H¿¢I¿¢ô¿¢È¿£+¿£,¿£{¿£≈¿£÷¿£‹¿§"¿§4¿§s¿§t¿§Ø¿§∞¿•¿•;¿•<¿•ç¿•Ÿ¿¶(¿¶Q¿¶â¿¶ä¿¶⁄¿ß¿ß=¿ßZ¿ßx¿ß∂¿ßœ¿ß”¿®¿®¿®d¿®{¿®Å¿®≈¿®À¿©¿©e¿©é¿©î¿©ﬁ¿©Ú¿™N¿™n¿™ä¿™´¿´¿´¿´%¿´B¿´a¿´Å¿´û¿´€¿´‹¿¨*¿¨I¿¨O¿¨ì¿¨ô¿¨Î¿≠3¿≠É¿≠æ¿≠‡¿Æ¿Æ3¿Æ7¿Æâ¿Æä¿Æÿ¿ÆÏ¿ÆÚ¿Ø6¿Ø<¿Øé¿Ø÷¿Øˇ¿∞7¿∞w¿∞ò¿∞∫¿∞æ¿±¿±¿±J¿±ñ¿±≥¿±Ë¿≤¿≤"¿≤P¿≤T¿≤õ¿≤ú¿≤Î¿≥3¿≥9¿≥á¿≥º¿≥‹¿≥¸¿¥¿¥_¿¥c¿¥¿¥õ¿¥∑¿¥”¿µ¿µ@¿µA¿µp¿µv¿µª¿µ÷¿µˆ¿∂¿∂>¿∂B¿∂†¿∂°¿∂Ò¿∑,¿∑V¿∑v¿∑ë¿∑Õ¿∑˘¿∑˝¿∏¿∏8¿∏W¿∏w¿∏•¿∏‰¿∏Â¿π6¿πx¿π•¿π«¿π‚¿∫$¿∫(¿∫M¿∫|¿∫Ω¿∫æ¿ª¿ª^¿ªÑ¿ªä¿ªœ¿º
¿º,¿ºN¿ºi¿º¡¿º≈¿ºÎ¿Ω¿ΩA¿ΩÑ¿ΩÖ¿Ω“¿æ#¿æF¿æp¿æê¿æ´¿æÁ¿ø¿ø¿ø5¿øR¿øq¿øë¿øø¿ø˛¿øˇ¿¿J¿¿ú¿¿Î¿¡¿¡H¿¡g¿¡Ç¿¡ƒ¿¡»¿¡Â¿¬¿¬$¿¬T¿¬ó¿¬ò¿¬‘¿¬⁄¿√¿√g¿√±¿ƒ¿ƒV¿ƒ¶¿ƒ“¿ƒÿ¿≈0¿≈è¿≈Ø¿≈ ¿∆¿∆S¿∆W¿∆t¿∆ê¿∆Æ¿∆Õ¿∆¿«¿«3¿«`¿«ù¿«û¿«”¿«Ÿ¿»"¿»k¿»ó¿»¡¿…¿…¿…N¿…R¿…n¿…ú¿…€¿…‹¿ *¿ Å¿ Ω¿ ˇ¿À#¿À>¿À™¿ÀÆ¿ÀŒ¿ÀÍ¿Ã¿Ã5¿Ã[¿Ã†¿Ã°¿Ã¿Õ<¿ÕB¿Õë¿Õ™¿Õ∞¿Õ¸¿ŒE¿ŒX¿Œù¿Œﬂ¿Œ˛¿œ¿œ8¿œY¿œv¿œí¿œ∞¿œœ¿œÏ¿–¿–&¿–E¿–h¿–à¿–∑¿–ª¿–ﬂ¿—¿—*¿—Q¿—y¿—ü¿—ƒ¿—Î¿“¿“F¿“p¿“Ω¿“æ¿”¿”¿”Y¿”ß¿”Ù¿‘A¿‘Ñ¿‘ä¿‘ÿ¿’%¿’s¿’∫¿’À¿÷¿÷U¿÷w¿÷ñ¿÷±¿÷“¿÷Ú¿◊¿◊2¿◊T¿◊q¿◊ç¿◊´¿◊ ¿◊Ì¿ÿ¿ÿ<¿ÿ@¿ÿd¿ÿç¿ÿµ¿ÿﬂ¿Ÿ
¿Ÿ0¿ŸU¿Ÿ|¿Ÿ§¿Ÿ◊¿⁄¿⁄N¿⁄O¿⁄ñ¿⁄Ø¿⁄’¿€¿€6¿€:¿€|¿€}¿€…¿€Ÿ¿€ﬂ¿‹*¿‹7¿‹=¿‹â¿‹÷¿›¿›¿›i¿›µ¿›ª¿ﬁ¿ﬁY¿ﬁ¶¿ﬁ¨¿ﬁˆ¿ﬂB¿ﬂè¿ﬂ ¿ﬂÈ¿‡¿‡?¿‡C¿‡D¿‡â¿‡è¿‡÷¿‡‹¿‡Ï¿‡Ú¿·B¿·[¿·¶¿·≈¿··¿·¸¿‚U¿‚Y¿‚Z¿‚ü¿‚•¿‚ı¿„B¿„H¿„X¿„^¿„¨¿„ ¿‰¿‰6¿‰R¿‰m¿‰ç¿‰ÿ¿Â¿Â#¿Â$¿ÂT¿Â{¿Âù¿Â‡¿Â·¿Ê¿Ê¿Ê_¿Ê°¿ÊÔ¿Á'¿Áq¿Á±¿Á“¿Á˜¿ËG¿Ë|¿ËÇ¿Ë©¿ËØ¿Ëø¿È¿È\¿ÈÉ¿È’¿Í ¿Í!¿Íi¿ÍÑ¿Í£¿ÍÓ¿ÍÚ¿Î¿Î>¿Îp¿Î∑¿Î∏¿Î¸¿Ï¿ÏS¿Ï¨¿Ïˇ¿ÌS¿Ìã¿Ìë¿Ì·¿Ó2¿ÓÅ¿Ó”¿Ô#¿Ôw¿Ô√¿Ô…¿¿j¿ø¿Ò¿ÒF¿Òö¿ÒË¿Ú,¿Ú2¿ÚÖ¿Ú‘¿Û¿Ûm¿Û¬¿Û»¿Ù¿Ùm¿Ù∂¿Ùº¿ı¿ı(¿ı.¿ı<¿ıQ¿ıd¿ı|¿ıî¿ıú¿ı¢¿ı–¿ˆ)¿ˆG¿ˆh¿ˆn¿ˆÄ¿ˆØ¿ˆ–¿˜¿˜5¿˜_¿˜~¿˜ö¿˜◊¿˜ı¿¯¿¯Y¿¯Ö¿¯±¿¯¬¿¯◊¿˘¿˘H¿˘o¿˘y¿˘¿˘ã¿˘ì¿˘ù¿˘£¿˘¸¿˙¿˙¿˙%¿˙8¿˙P¿˙h¿˙{¿˙î¿˙ú¿˙¢¿˙–¿˚)¿˚G¿˚h¿˚n¿˚Ä¿˚Ø¿˚–¿¸¿¸5¿¸_¿¸ä¿¸¶¿¸„¿˝¿˝¿˝e¿˝ë¿˝Ω¿˝Œ¿˝„¿˛¿˛T¿˛j¿˛ò¿˛Ã¿˛¯¿ˇ¿ˇ¿ˇ¿ˇ¿ˇ&¿ˇ,¿ˇu¿ˇ¿¿ˇÛ¿ˇ˘¿ 	¿ ¿ ]¿ t¿ í¿ ¡¿ ‰¿
¿1¿R¿r¿¥¿‘¿Ô¿2¿M¿N¿v¿û¿È¿4¿ú¿ù¿‰¿#¿$¿N¿n¿ì¿∏¿›¿¿5¿W¿ç¿√¿˜¿+¿Q¿v¿ù¿≈¿À¿Ã¿5¿v¿Æ¿Ø¿ø¿¿d¿k¿o¿p¿¥¿∫¿	¿	d¿	∑¿
¿
]¿
Ø¿
Ê¿
Ï¿<¿Ñ¿ä¿€¿¿F¿L¿ö¿‰¿Í¿6¿É¿”¿Ÿ¿4¿E¿K¿Y¿n¿Å¿ô¿±¿π¿ø¿Ì¿F¿d¿Ö¿ã¿ù¿Ã¿¿k¿º¿ÿ¿¿g¿ü¿€¿¿+¿[¿É¿â¿‚¿=¿ó¿Ÿ¿¿1¿n¿´¿∑¿ÿ¿3¿=¿C¿O¿W¿a¿g¿¿¿∆¿‘¿È¿¸¿¿,¿?¿X¿`¿f¿î¿Ì¿¿,¿2¿D¿s¿√¿¿c¿¿ƒ¿¿L¿Ñ¿¿¿È¿¿@¿h¿n¿…¿ ¿{¿ÿ¿#¿i¿í¿¨¿Á¿¿¿c¿ç¿∑¿∆¿˝¿4¿i¿û¿§¿˛¿X¿∞¿˜¿ &¿ 2¿ S¿ æ¿ »¿ Œ¿ ⁄¿ ‚¿ Ï¿ Ú¿!¿!¿!U¿!j¿!ã¿!∫¿!·¿"¿"2¿"V¿"y¿"ª¿"ﬁ¿"˘¿#*¿#E¿#F¿#n¿#ô¿#Á¿$¿$a¿$õ¿%¿%L¿%M¿%]¿%≤¿%¸¿&¿&¿&¿&7¿&]¿&á¿&ß¿&‘¿&˘¿'¿'?¿'É¿'Ñ¿'—¿'◊¿('¿(<¿(B¿(h¿(¿¿) ¿)¿)D¿)à¿)å¿)™¿)»¿)Ì¿*6¿*8¿*9¿*Å¿*Ö¿*π¿*Ω¿+¿+F¿+à¿+¢¿+”¿,¿,9¿,?¿,u¿,ë¿,†¿,°¿,À¿,—¿- ¿-o¿-∏¿-æ¿.
¿.N¿.¿.ó¿.∫¿.Ó¿/¿/T¿/q¿/ã¿/ú¿/¿¿/ ¿/‘¿/€¿/ﬂ¿/‡¿0A¿0B¿0í¿0µ¿0»¿0‡¿0¿1¿1¿1%¿15¿19¿1:¿1f¿1g¿1h¿1Ç¿1»¿1Œ¿2¿22¿2M¿2a¿2q¿2ç¿2†¿2™¿3¿3¿3¿3h¿3n¿3ø¿3Ò¿44¿46¿47¿4~¿4Ç¿4«¿5¿5E¿5Ü¿5Õ¿5È¿6¿6-¿6i¿6j¿6•¿6´¿6Ô¿76¿7m¿7≤¿7Ó¿8¿8¿8I¿8O¿8ö¿8Í¿9/¿9J¿9c¿9ß¿9–¿9Ï¿:¿:¿:3¿:7¿:8¿:à¿:â¿:ú¿:û¿:ü¿:¥¿:∏¿:Ù¿;¿;¿;#¿;n¿;π¿;”¿;Ÿ¿<¿< ¿<o¿<à¿<ô¿<«¿<Ê¿=¿=>¿=}¿=“¿=”¿>¿>'¿>Q¿>|¿>£¿> ¿>Ù¿>ı¿?%¿?+¿?}¿?†¿?µ¿?∂¿?ı¿?˚¿@I¿@ï¿@◊¿@Ó¿@Ô¿AA¿A\¿A]¿Aè¿Aï¿A»¿AŒ¿A˚¿Bn¿B§¿Bÿ¿B‹¿B›¿C¿C¿CR¿Cé¿Cè¿C‹¿C‚¿D¿Dn¿Dï¿Dõ¿Dﬂ¿E(¿Ew¿Eô¿E≠¿E¿¿E÷¿F¿F¿F¿Fp¿F~¿Fû¿F±¿F≈¿F‰¿G¿G¿G¿G¿GG¿GM¿Gò¿G›¿H¿H¿H-¿Hz¿Hƒ¿I¿I[¿I©¿I˘¿JF¿Jä¿Jê¿Jﬂ¿Jˇ¿K¿KL¿Kc¿Kx¿Kè¿K§¿K≥¿K‘¿K‹¿KÈ¿L ¿L¿L*¿LA¿Lt¿L´¿LÌ¿L¯¿M ¿M¿M
¿M¿MD¿MJ¿Mí¿Mò¿Mª¿N	¿N ¿N@¿NS¿Ni¿N¿N´¿NÊ¿O¿OC¿Ox¿Oü¿O‘¿Oı¿P¿P¿P¿P¿P<¿P\¿Po¿Pä¿P™¿PÃ¿P˜¿P˚¿P¸¿Q¿QE¿QF¿Qí¿Q‰¿R ¿R:¿RS¿Rm¿Rn¿R´¿R·¿R‚¿R¸¿SI¿S{¿Sÿ¿T5¿TY¿Tu¿T¨¿T≠¿TË¿U1¿U2¿Uk¿Uö¿Uõ¿U‘¿V¿V¿VU¿Vë¿Vπ¿V¡¿V«¿V»¿V‡¿V‰¿VÂ¿VÒ¿W4¿W6¿W7¿W~¿WÇ¿W—¿WÁ¿X ¿XB¿XC¿Xë¿X¶¿XÁ¿Y,¿Y^¿YÑ¿Y¢¿Y¶¿Y¸¿Y˝¿Z1¿ZE¿ZF¿Ze¿Zf¿Zè¿Zï¿ZÊ¿[¿[¿[)¿[J¿[]¿[g¿[|¿[Ä¿[Å¿[—¿[Ù¿[˙¿\G¿\ë¿\ﬁ¿]+¿]y¿]ó¿]™¿]∫¿]Ÿ¿]ˆ¿^	¿^¿^#¿^'¿^(¿^\¿^^¿^_¿^™¿^Æ¿^˝¿_¿_N¿_e¿_f¿_±¿_Ù¿`0¿`b¿`ö¿`∫¿`æ¿a-¿a.¿ag¿am¿aπ¿a…¿aœ¿b¿bp¿b±¿bÓ¿c¿c#¿c;¿cT¿cg¿cç¿cî¿c®¿cæ¿d¿d¿di¿dm¿e¿e¿e¿eN¿ex¿e~¿eπ¿e‰¿eÂ¿eı¿f)¿fT¿fZ¿fï¿f√¿fƒ¿f€¿g¿gO¿gU¿gå¿gœ¿g–¿h ¿hC¿hv¿hw¿h≈¿h·¿hÁ¿i2¿i¿iê¿iñ¿i‰¿j¿j\¿jè¿j©¿jØ¿j‰¿jˇ¿k¿k¿k=¿kX¿ku¿k≥¿kÚ¿l¿lS¿lt¿l™¿l∞¿l—¿lÛ¿lÙ¿m¿mR¿md¿mh¿mﬂ¿m·¿m‚¿n¿nG¿nH¿nÄ¿nÑ¿nŒ¿n€¿o¿o¿oo¿oÖ¿oâ¿o◊¿oı¿o˘¿pF¿pJ¿p]¿pa¿pm¿p¢¿p¶¿p·¿q¿q#¿q'¿qG¿qx¿q~¿qÜ¿q·¿r=¿ro¿r£¿rŸ¿s ¿sd¿s°¿sµ¿s·¿sˆ¿t¿t5¿tD¿tÑ¿tå¿tô¿t∂¿tº¿t¬¿t“¿tÁ¿u¿u¿u      =•