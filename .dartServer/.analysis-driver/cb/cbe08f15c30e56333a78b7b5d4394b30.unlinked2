Ä‹popdoNotPopbubble	navigator
_navigatorsettings	_settingsrestorationScopeId_restorationScopeId_updateSettings_updateRestorationIdoverlayEntriesinstalldidPushdidAdd
didReplacewillPopwillHandlePopInternallycurrentResultpopped_popCompleterdidPopdidComplete
didPopNextdidChangeNextdidChangePreviouschangedInternalStatechangedExternalStatedispose	isCurrentisFirsthasActiveRouteBelowisActivecopyWithname	argumentstoStringkeyrestorationId	canUpdatecreateRoute	didRemovedidStartUserGesturedidStopUserGesture
controllerofupdateShouldNotifyrouteisWaitingForEnteringDecisionisWaitingForExitingDecisionmarkForPush
markForAdd
markForPopmarkForCompletemarkForRemove_transitionresolvepages	onPopPagetransitionDelegateinitialRouteonGenerateRouteonUnknownRoute	observersdefaultRouteNameonGenerateInitialRoutesreportsRouteUpdateToEnginerequestFocus	pushNamedrestorablePushNamedpushReplacementNamedrestorablePushReplacementNamedpopAndPushNamedrestorablePopAndPushNamedpushNamedAndRemoveUntil!restorablePushNamedAndRemoveUntilpushrestorablePushpushReplacementrestorablePushReplacementpushAndRemoveUntilrestorablePushAndRemoveUntilreplacerestorableReplacereplaceRouteBelowrestorableReplaceRouteBelowcanPopmaybePoppopUntilremoveRouteremoveRouteBelowmaybeOfdefaultGenerateInitialRoutescreateStatestagingaddaddingpushReplacepushingidlecompleteremovepoppingremovingdisposedrestorationInformationnotAnnouncedcurrentStatelastAnnouncedPreviousRoutelastAnnouncedPoppedNextRoutelastAnnouncedNextRoutehasPagecanUpdateFrom	handleAdd
handlePushhandleDidPopNext	handlePophandleCompletehandleRemovalpendingResult_reportRemovalToObserverfinalizewillBePresent	isPresentisPresentForRestorationsuitableForAnnouncementsuitableForTransitionAnimationshouldAnnounceChangeToNextisPresentPredicate'suitableForTransitionAnimationPredicatewillBePresentPredicateisRoutePredicate_isWaitingForExitingDecisionmarkNeedsExitingDecisionrestorationEnabledprimaryRoutesecondaryRoutenotify_overlayKey_history_serializableHistory_observedRouteAdditions_observedRouteDeletionsfocusScopeNode_debugLocked_heroControllerFromScope_effectiveObservers	initState"_rawNextPagelessRestorationScopeId_nextPagelessRestorationScopeIdrestoreStatedidToggleBucketdidChangeDependencies_updateHeroController_updateEffectiveObserversdidUpdateWidget_debugCheckDuplicatedPageKeys
deactivateactivateoverlay_allRouteOverlayEntries_lastAnnouncedRouteName_debugUpdatingPage_updatePages_flushingHistory_flushHistoryUpdates_flushObserverNotifications_flushRouteAnnouncement_getRouteBefore_getIndexBefore_getRouteAfter_routeNamed_debugCheckIsPagelessRoute_debugIsStaticCallback
_pushEntry_afterNavigation_pushReplacementEntry_pushEntryAndRemoveUntil_replaceEntry_replaceEntryBelowfinalizeRoute_getRouteById_userGesturesInProgress_userGesturesInProgressCountuserGestureInProgressuserGestureInProgressNotifier_activePointers_handlePointerDown_handlePointerUpOrCancel_cancelActivePointersbuildnamed	anonymoustype_serializableDataisRestorablegetSerializableDatacomputeSerializableDatatoRouteEntryrouteBuilder_pageToPagelessRoutesupdate_finalizePage_debugMapsEqualclearhasDatarestoreEntriesForPagecreateDefaultValuefromPrimitivesinitWithValuetoPrimitivesenablednavigatorFinder	onPresent
onCompletepresent_route	_disposed_hookOntoRouteFuture_defaultNavigatorFinder#RouteFactoryRouteListFactoryRestorableRouteBuilderRoutePredicateWillPopCallbackPopPageCallbackRoutePopDispositionRouteRouteSettingsPageNavigatorObserverHeroControllerScopeRouteTransitionRecordTransitionDelegateDefaultTransitionDelegate	Navigator_RouteLifecycle_RouteEntryPredicate_NotAnnounced_RouteEntry_NavigatorObservation_NavigatorPushObservation_NavigatorPopObservation_NavigatorRemoveObservation_NavigatorReplaceObservationNavigatorState_RouteRestorationType_RestorationInformation_NamedRestorationInformation _AnonymousRestorationInformation_HistoryPropertyNavigatorFinderCallbackRoutePresentationCallbackRouteCompletionCallbackRestorableRouteFutureÅäonGenerateRoutedynamiconGenerateInitialRoutesListStringrestorablePushTBuildContextObjectpopUntilboolpopForm	onWillPop
ModalRouteaddScopedWillPopCallbackremoveScopedWillPopCallbackWillPopScopeFuture	onPopPagedidPoppageswillPopdoNotPopbubbleSystemNavigatorOverlayOverlayEntryMaterialPageRoutecreateRouteRestorationScopeValueListenableValueNotifiervoidvalueremove	protectedmustCallSuperTickerFuturecompletethenwidgetrequestFocusfocusScopeNodemaybePopfuture	CompleterfinalizeRoutepushReplacementdidStartUserGesturepushoffstageStatedidUpdateWidgetMaterialAppdidChangeDependenciescontextbarrierColor_historycast	lastWhereeisPresentPredicateorElseroute
firstWhereentrymaintainStateisRoutePredicate	isPresent	immutablename	argumentsoverrideobjectRuntimeTypecurrentResultpoppedLocalKeyRestorationManagerruntimeTypekeysettingsfactorychildInheritedWidgetKeyHeroControllerWidget"dependOnInheritedWidgetOfExactType
controllerresolveisWaitingForEnteringDecisiontransitionDelegateIterableMapnewPageRouteHistorylocationToExitingPageRoutepageRouteToPagelessRoutestoListgrowableSetvaluestoSetexitingPageRouteisWaitingForExitingDecisioncontainsKeypagelessRouteint
routeEntrylengthcontainsisEmptymarkForPush
markForAdd
markForPopmarkForCompletemarkForRemovelastadd	pageRouteAppBarScaffoldappBar
WidgetsAppof
PopupRoute
showDialogshowMenushowModalBottomSheetPopupMenuButtonDropdownButton	PageRoutePageRouteBuilderCupertinoTabViewBuilderrestorationIdrestorationScopeIdStatefulWidgetdefaultGenerateInitialRoutesElementRenderObjectcreateElementcreateStateRenderObjectWidgetcreateRenderObjectdefaultRouteNameRestorationBucketRestorationMixinselectSingleEntryHistory PlatformRouteInformationProviderRouterrouterdidPushdidChangeNext	observersonUnknownRouteoptionalTypeArgs	pushNamedStandardMessageCodecrestorablePushNamed
didReplacedidCompletepushReplacementNamedresultrestorablePushReplacementNamed
didPopNextTransitionRouteopaquepopAndPushNamedrestorablePopAndPushNamedwillHandlePopInternallywithName	didRemovepushNamedAndRemoveUntil!restorablePushNamedAndRemoveUntilrestorablePushReplacementpushAndRemoveUntilrestorablePushAndRemoveUntildidChangePreviousreplaceoldRoutenewRouterestorableReplacenewRouteBuilderreplaceRouteBelowanchorRouterestorableReplaceRouteBelowisFirstmaybeOfcanPopLocalHistoryRoutedisposeremoveRouteremoveRouteBelowFlutterErrorStatefulElementstaterootNavigatorfindRootAncestorStateOfTypefindAncestorStateOfType
startsWith	substring_routeNamed	allowNullsplit
isNotEmptypartreportErrorFlutterErrorDetails	exceptionclearremoveWhereinitialStatestagingpushReplace	canUpdate	navigator_debugLocked
_navigatorinstalloverlayEntriesadding_observedRouteAdditionspreviousPresentpushingwhenCompleteOrCancelidle_flushHistoryUpdatesprevious
isNewFirstpopping_popCompleterisCompletedremoving_observedRouteDeletionsdidAddindex
isReplaceddisposedwheremountedVoidCallbackremoveListenereveryaddListenersuitableForTransitionAnimationwillBePresent_updateRestorationIdprimaryRoutesecondaryRouteTickerProviderStateMixin	GlobalKeyOverlayStateQueueFocusScopeNode
FocusScope
debugLabel	initStatelibrarystack
StackTracecurrentobserver'getElementForInheritedWidgetOfExactTypereportsRouteUpdateToEngineRestorableNumregisterForRestoration
removeLastaddAllrestoreEntriesForPagepagehasDatainitialRoutemaprestorationInformationnameddidToggleBucketbucketupdatechangedExternalStateServicesBindinginstanceaddPostFrameCallbackDuration_heroControllerFromScoperestorePending
deactivateactivatecurrentStatehasPageputIfAbsentcanUpdateFrom_updateSettingsmarkNeedsExitingDecision_transitionrearrangeOverlay	handleAdd
handlePushhandleDidPopNext	handlePopwillBePresentPredicatehandleCompletehandleRemovalremoveAtrouteInformationUpdatedlocationoverlayEntry	rearrangeforEachnotifyremoveFirstsuitableForAnnouncement'suitableForTransitionAnimationPredicatelastAnnouncedNextRouteshouldAnnounceChangeToNextlastAnnouncedPreviousRoute	fromPartsDiagnosticsNodeErrorSummaryErrorDescriptionDiagnosticsPropertystyleDiagnosticsTreeStyleerrorProperty!debugIsSerializableForRestorationtoRouteEntryFunctionkIsWebPluginUtilitiesgetCallbackHandle	anonymousrouteBuilderkReleaseMode
jsonEncodetoEncodableobject	postEventany
indexWhere	isCurrentinsertIteratoriteratormoveNextfinalizedidStopUserGesturePointerDownEventpointerPointerEventSchedulerBindingschedulerPhaseSchedulerPhaseRenderAbsorbPointercurrentContextfindAncestorRenderObjectOfTypesetState	absorbingWidgetsBindingcancelPointernoneListeneronPointerDownonPointerUponPointerCancelAbsorbPointernode	autofocusUnmanagedRestorationScopeinitialEntriesfromSerializableDatasublistcomputeSerializableDatagetCallbackFromHandleCallbackHandlefromRawHandletoRawHandleRestorablePropertyisRegisteredkeysisPresentForRestorationrestorationEnabledisRestorablegetSerializableDatanotifyListeners	setEquals
listEqualsdataMapEntryfromnavigatorFinder	onPresent
onComplete_getRouteByIdcallRouteSettingsInheritedWidgetTransitionDelegateStatefulWidgetRouteRouteTransitionRecord_NavigatorObservationStateTickerProviderStateMixinRestorationMixin_RestorationInformationRestorableProperty‰©£`íM^O∫-Câ¿    
dart:async dart:collection dart:convert dart:developer dart:ui package:flutter/foundation.dart package:flutter/rendering.dart package:flutter/scheduler.dart package:flutter/services.dart 
basic.dart binding.dart focus_manager.dart focus_scope.dart framework.dart heroes.dart overlay.dart restoration.dart restoration_properties.dart routes.dart ticker_provider.dart 	dart:core¿˛¥ ¿VEñ <ÄÜÄ§Ä•Ä∫Ä‘ÄÎÅÅ)Å*ÅTÅ}Å¶ÅŒÅœÅ‰Å˚ÇÇ3ÇLÇbÇyÇîÇ∫Ç–ÇÔÇÉÉ\É∏É⁄É¯É˘Ñ+Ñ/ÑXÑ\ÑjÑnÑ™ÑÛÑÙÖ Ö$ÖUÖæÖøÖ˚ÖˇÜKÜòÜ£ÜßÜ˜á:ááá à*à+àjà®à©à˙à˛âCâÖâ∏âπâÔâÛä>äÅäœããHãóãòã“ã÷åååååjå|åóå¨å≤ç çç ç!ç=çCçïç°ç¢ç◊ç›é,évéÄéÇéÉéΩé¡èè[è™èŒè“êêAêEêîê∂ê∫ë	ëOëúë‰í4ílípí±ìì$ì>ì\ìbìØì√îîîLî{îôîöîΩî√îÍîï;ïxïóïùïÌñ8ñÇñÃñóó6ó7óàóöó†óÏòòòWòßòıôEôîô«öödöeöôö∫öﬁö˝õõ!õ%õ&õpõ•õ‘õÿõŸúúúWúïúõúËú˜ú˝ùIùnù±ù≤ùÓùÙûFûöûﬂû¸ü	üü/ü0üzüÄü»üŒ††\†b†±†‡†Ì†˛°°S°à°∫°¬° °Œ°œ¢¢¢h¢ù¢£¢Ú£!£.£?£Q£Ñ£–§'§w§ §Á§•D•ó•Ê¶¶L¶û¶ÒßCßìßÂ®5®f®q®¡©©B©t©~©Ñ©à©â©ÿ©ﬁ™-™\™i™z™™™´™˚´#´)´y´ó´ù´Ë¨!¨l¨∏≠≠D≠J≠ä≠≠≠≥ÆÆ0Æ6ÆFÆLÆóÆ´Æ¯ØØ>ØâØçØéØ¡ØÓØÔ∞9∞{∞Å∞–∞˜±±±c±i±∏≤≤≤M≤Ñ≤Ö≤Ã≥≥e≥±≥Õ≥”¥ ¥n¥æµ	µYµrµxµ»∂∂T∂Z∂©∂¬∂”∂Ó∑∑∑∑∑k∑q∑•∑Ú∏F∏`∏f∏≥ππ9π?πäπÿ∫)∫q∫~∫è∫Ø∫‰∫Ë∫Èª2ªCªIªòª∞ªΩªŒª˛ªˇºAºGºóºÁΩ-ΩQΩWΩ¶Ω≈Ω“Ω„æææ^ædæ∞ø øQøkøqøæø·øÓøˇ¿ @;¿ @<¿ @¿ @Ö¿ @œ¿ A ¿ Aq¿ A™¿ A∞¿ A¿¿ A∆¿ B¿ BN¿ B[¿ Bl¿ Bé¿ Bè¿ B€¿ C(¿ C.¿ Cc¿ C¥¿ C˜¿ D9¿ D~¿ D≈¿ E¿ E¿ EO¿ Eö¿ E·¿ F¿ F ¿ Fd¿ F~¿ FÑ¿ Fî¿ Fö¿ FÍ¿ G¿ G¿ G%¿ GG¿ GH¿ Gy¿ G¿ G–¿ H¿ H¿ HU¿ Hf¿ Hl¿ Hπ¿ I¿ IV¿ Ig¿ It¿ Iá¿ Iû¿ I¢¿ I£¿ I‰¿ IÍ¿ J¿ J6¿ JR¿ Jf¿ J∆¿ K¿ K*¿ K1¿ KT¿ Kh¿ Kî¿ Kò¿ Kô¿ K‰¿ KÍ¿ L:¿ Lr¿ Lá¿ L£¿ L∑¿ M¿ Mb¿ M|¿ MÉ¿ M¶¿ M∫¿ MÊ¿ MÍ¿ MÎ¿ N3¿ N@¿ Na¿ N}¿ Në¿ NÕ¿ NÏ¿ O¿ O3¿ OH¿ ON¿ O`¿ Od¿ Oe¿ Oì¿ Oô¿ OÈ¿ P9¿ Pu¿ P{¿ PÕ¿ Q!¿ Qx¿ Qé¿ Q™¿ Qæ¿ Qˇ¿ RM¿ Rg¿ RÇ¿ RÜ¿ Rà¿ Râ¿ R¬¿ RÕ¿ R„¿ S¿ S(¿ S7¿ SK¿ SQ¿ SR¿ Sõ¿ Sø¿ S⁄¿ SÏ¿ T¿ T
¿ T$¿ TC¿ Tq¿ Tx¿ T|¿ T}¿ TÆ¿ T¥¿ T€¿ TÒ¿ TÚ¿ U¿ U"¿ Ur¿ Uç¿ Ué¿ Uö¿ Uı¿ U˜¿ U¯¿ V&¿ V*¿ Vs¿ V∫¿ Væ¿ VÃ¿ V–¿ W!¿ W1¿ W`¿ Wõ¿ W°¿ W“¿ W·¿ WÔ¿ X¿ X¿ X0¿ X`¿ Xa¿ Xä¿ Xê¿ X–¿ XÁ¿ XË¿ Y8¿ YI¿ YO¿ Yü¿ Y•¿ Yµ¿ Yª¿ Z¿ Z¿ Z9¿ Z:¿ Zx¿ Z~¿ ZÕ¿ Z⁄¿ [¿ [1¿ [N¿ [R¿ [S¿ [å¿ [í¿ [Ë¿ [Û¿ \!¿ \"¿ \.¿ \Ü¿ \à¿ \â¿ \«¿ \·¿ ]¿ ]L¿ ]j¿ ]k¿ ]ë¿ ]ó¿ ]‚¿ ^¿ ^K¿ ^L¿ ^r¿ ^x¿ ^æ¿ ^ﬂ¿ _&¿ _'¿ _N¿ _T¿ _ü¿ _À¿ _—¿ `¿ `a¿ `±¿ `–¿ a¿ a¿ aV¿ a§¿ a•¿ aÁ¿ aÌ¿ b<¿ bx¿ bÃ¿ bÕ¿ c
¿ c¿ cL¿ cl¿ cn¿ co¿ c¢¿ c¶¿ cÔ¿ d=¿ dä¿ dé¿ d›¿ e-¿ ex¿ e¬¿ eˆ¿ f-¿ fK¿ fY¿ fÜ¿ f°¿ fƒ¿ fÍ¿ fÎ¿ g<¿ gI¿ gl¿ gz¿ gï¿ gØ¿ g’¿ g÷¿ h¿ h7¿ h8¿ hÑ¿ hî¿ h»¿ i1¿ iN¿ iR¿ iS¿ i_¿ iö¿ i…¿ iÕ¿ iœ¿ i–¿ j¿ ji¿ jê¿ jµ¿ j—¿ j“¿ k#¿ k)¿ ky¿ kƒ¿ kË¿ l¿ l¿ lb¿ lh¿ l∏¿ m¿ m&¿ mN¿ mO¿ mÖ¿ mã¿ mÿ¿ n>¿ nç¿ n£¿ n§¿ n‹¿ n‚¿ o/¿ oï¿ oÊ¿ o˚¿ o¸¿ p2¿ p8¿ pÑ¿ p’¿ pÛ¿ q¿ q¿ qU¿ q[¿ qß¿ qÙ¿ rB¿ rl¿ rm¿ rß¿ r≠¿ r˘¿ sG¿ sÑ¿ sú¿ sû¿ sü¿ s¿ t¿ t¿ tk¿ tæ¿ t¬¿ u¿ u¿ u%¿ ut¿ u¡¿ u‰¿ uË¿ uÙ¿ v?¿ vO¿ v¿ v¡¿ w!¿ wÜ¿ wë¿ w‡¿ w‰¿ x1¿ xi¿ xç¿ xô¿ xª¿ xø¿ x…¿ y+¿ yi¿ yñ¿ z¿ z+¿ z|¿ z´¿ zª¿ z»¿ z‘¿ z˝¿ {¿ {¿ {#¿ {+¿ {1¿ {5¿ {=¿ {M¿ {Q¿ {_¿ {c¿ {Æ¿ {À¿ |¿ |P¿ |w¿ |¡¿ |ﬂ¿ |‡¿ }¿ }N¿ }™¿ ~¿ ~¿ ~O¿ ~¿ ~Ω¿ ~˘¿  ¿ B¿ I¿ d¿ µ¿ ≈¿ Ä¿ Ä9¿ Äá¿ ÄÆ¿ Ä˝¿ ÅN¿ Åk¿ Åz¿ ÅÅ¿ Å¨¿ Å≥¿ ÅÏ¿ ÅÛ¿ Ç!¿ Çq¿ Çí¿ Çô¿ Ç‰¿ É1¿ ÉA¿ Éú¿ Ñ¿ ÑB¿ Ñí¿ Ñ—¿ Ö¿ ÖÑ¿ Öƒ¿ Ö–¿ Ö⁄¿ Ö‚¿ Ü3¿ Üa¿ Üç¿ Üé¿ Ü‡¿ á¿ ái¿ áv¿ áæ¿ à¿ à¿ àN¿ à~¿ àè¿ àº¿ à∆¿ àŒ¿ àœ¿ à›¿ â#¿ âF¿ âñ¿ âﬂ¿ âË¿ â˚¿ ä¿ ä¿ ä¿ ä¿ ä¿ äj¿ ä∂¿ äº¿ ã¿ ãU¿ ãí¿ ãﬂ¿ å+¿ å|¿ å¶¿ å¨¿ å¯¿ çF¿ çí¿ ç›¿ é,¿ éu¿ éƒ¿ é˙¿ èF¿ èë¿ èœ¿ è˘¿ ê*¿ êy¿ ê≈¿ ë¿ ëc¿ ë≤¿ í ¿ í¿ í$¿ ír¿ í¡¿ ì¿ ì;¿ ìA¿ ìë¿ ìŒ¿ î¿ îd¿ î≠¿ î¸¿ ï>¿ ïD¿ ït¿ ïz¿ ï¢¿ ï®¿ ïﬁ¿ ï‰¿ ñ¿ ñ¿ ñ<¿ ñà¿ ñ•¿ ñ´¿ ñ‘¿ ñ⁄¿ ó!¿ ój¿ óp¿ óÄ¿ óÜ¿ ó◊¿ ó˝¿ òM¿ òv¿ ò≈¿ òÎ¿ ô7¿ ôÉ¿ ô”¿ ö¿ öd¿ ö¶¿ ö“¿ õ¿ õl¿ õÕ¿ õ”¿ õ’¿ õ÷¿ ú'¿ úg¿ úk¿ úº¿ ù
¿ ù_¿ ùú¿ ùﬂ¿ û"¿ ûO¿ û~¿ û¿ ûã¿ û∑¿ ûı¿ üQ¿ ü≤¿ üπ¿ †¿ †T¿ †¢¿ †‰¿ °0¿ °å¿ °∞¿ °¿¿ °˙¿ ¢Y¿ ¢ ¿ £¿ £R¿ £c¿ £µ¿ £ø¿ £ﬂ¿ §J¿ §ò¿ §Á¿ •3¿ •Ç¿ •ø¿ ¶¿ ¶`¿ ¶w¿ ¶…¿ ¶Ÿ¿ ¶Á¿ ¶Û¿ ¶˝¿ ß¿ ß*¿ ß+¿ ß¿ ß≥¿ ßπ¿ ß∫¿ ßÒ¿ ®,¿ ®-¿ ®v¿ ®¿¿ ®Ù¿ ©I¿ ©l¿ ©}¿ ©ü¿ ©©¿ ©±¿ ©œ¿ ™¿ ™¿ ™¿ ™#¿ ™%¿ ™&¿ ™p¿ ™t¿ ™√¿ ´¿ ´`¿ ´µ¿ ¨¿ ¨C¿ ¨G¿ ¨f¿ ¨j¿ ¨≥¿ ¨˘¿ ≠?¿ ≠â¿ ≠–¿ ≠˙¿ ≠˛¿ ÆI¿ Æì¿ Æ·¿ Ø,¿ Øv¿ Ø¡¿ ∞¿ ∞Y¿ ∞y¿ ∞}¿ ∞ò¿ ∞ú¿ ∞Ï¿ ±;¿ ±ä¿ ±⁄¿ ≤'¿ ≤t¿ ≤ñ¿ ≤ö¿ ≤È¿ ≥6¿ ≥n¿ ≥í¿ ≥ñ¿ ≥Ω¿ ≥¡¿ ¥¿ ¥_¿ ¥≠¿ ¥∆¿ ¥ ¿ µ¿ µh¿ µé¿ µí¿ µû¿ µ∞¿ µﬁ¿ µ‰¿ µÏ¿ µ¿ ∂3¿ ∂}¿ ∂¨¿ ∂∞¿ ∂º¿ ∂Ò¿ ∑¿ ∑2¿ ∑d¿ ∑|¿ ∑õ¿ ∑Ω¿ ∑€¿ ∏¿ ∏¿ ∏#¿ ∏0¿ ∏;¿ ∏D¿ ∏L¿ ∏T¿ ∏X¿ ∏û¿ ∏·¿ π¿ π¿ πf¿ πë¿ πï¿ π°¿ πΩ¿ π≈¿ π…¿ ∫¿ ∫_¿ ∫†¿ ∫Á¿ ª¿ ª¿ ª0¿ ª4¿ ªy¿ ªª¿ ªÚ¿ º)¿ º-¿ ºR¿ ºú¿ º‰¿ Ω.¿ Ω2¿ Ω>¿ ΩP¿ Ωj¿ Ω§¿ ΩŒ¿ æ¿ æT¿ æó¿ æ¢¿ æ¨¿ æ≤¿ æ∫¿ ææ¿ æ€¿ æﬂ¿ æÎ¿ ø¿ ø¿ ø¿ øA¿ øE¿ øé¿ øƒ¿ ø»¿ ¿¿ ¿b¿ ¿q¿ ¿u¿ ¿æ¿ ¿˝¿ ¡¿ ¡¿ ¡U¿ ¡}¿ ¡î¿ ¡∂¿ ¡’¿ ¬¿ ¬¿ ¬%¿ ¬-¿ ¬5¿ ¬=¿ ¬A¿ ¬â¿ ¬”¿ ¬Ô¿ ¬Û¿ √?¿ √{¿ √∆¿ ƒ¿ ƒ&¿ ƒ*¿ ƒ?¿ ƒC¿ ƒè¿ ƒ‡¿ ≈/¿ ≈Z¿ ≈^¿ ≈û¿ ≈Á¿ ∆,¿ ∆p¿ ∆ß¿ ∆´¿ ∆¸¿ «I¿ «î¿ «ò¿ «Æ¿ «≤¿ »¿ »O¿ »†¿ »”¿ »◊¿ …#¿ …q¿ …¬¿  ¿  ¿  ¿  M¿  b¿  ï¿  …¿  “¿ À%¿ ÀD¿ Àb¿ Àá¿ À“¿ ÀÏ¿ À˘¿ Ã¿ Ã¿ Ã¿ Ã¿ Ã ¿ Ã]¿ Ã•¿ ÃÛ¿ Õ>¿ ÕÑ¿ Õö¿ Õû¿ Õπ¿ ÕΩ¿ Œ	¿ ŒY¿ Œ™¿ ŒÁ¿ ŒÎ¿ Œ¸¿ œ ¿ œM¿ œõ¿ œ÷¿ œ⁄¿ –*¿ –w¿ –∆¿ —¿ —b¿ —x¿ —|¿ —∆¿ “¿ “/¿ “3¿ “F¿ “ï¿ “…¿ “Õ¿ ”¿ ”f¿ ”j¿ ”≥¿ ”‰¿ ”Ë¿ ‘2¿ ‘B¿ ‘F¿ ‘ï¿ ‘‡¿ ’/¿ ’¿ ’≠¿ ’±¿ ’ ¿ ’Œ¿ ÷¿ ÷e¿ ÷Ø¿ ÷˝¿ ◊¿ ◊#¿ ◊m¿ ◊~¿ ◊Œ¿ ◊˝¿ ÿJ¿ ÿõ¿ ÿÂ¿ Ÿ3¿ Ÿ¿ Ÿ¶¿ Ÿ™¿ ŸÓ¿ ⁄<¿ ⁄à¿ ⁄–¿ ⁄˘¿ €G¿ €M¿ €é¿ €”¿ €Ÿ¿ ‹¿ ‹2¿ ‹@¿ ‹j¿ ‹~¿ ‹ï¿ ‹‡¿ ‹˙¿ ›¿ ›]¿ ›ä¿ ›º¿ ›⁄¿ ›˜¿ ﬁ¿ ﬁE¿ ﬁp¿ ﬁí¿ ﬁ≈¿ ﬁ›¿ ﬁﬁ¿ ﬂ¿ ﬂ ¿ ﬂh¿ ﬂµ¿ ﬂÓ¿ ‡>¿ ‡D¿ ‡é¿ ‡«¿ ‡Õ¿ ·¿ ·j¿ ·π¿ ‚
¿ ‚1¿ ‚7¿ ‚Ç¿ ‚“¿ „ ¿ „b¿ „~¿ „Ñ¿ „’¿ ‰	¿ ‰¿ ‰Z¿ ‰™¿ ‰·¿ Â¿ Â¿ ÂQ¿ Ây¿ Â¿ ÂÃ¿ Â˚¿ Ê¿ ÊM¿ Ês¿ Êy¿ Ê ¿ Á¿ Ái¿ Á°¿ Á≈¿ Á∆¿ Ë¿ Ë8¿ Ë>¿ Ëé¿ Ë∆¿ Ë«¿ ËÚ¿ Ë¯¿ È(¿ È.¿ È{¿ È≠¿ ÈÀ¿ ÈÃ¿ Í
¿ Í1¿ Í2¿ Íq¿ Íw¿ Í√¿ Î¿ Î-¿ Î3¿ ÎÅ¿ Îæ¿ Î‰¿ ÎÂ¿ Ï¿ Ï>¿ Ï?¿ Ïé¿ Ï°¿ Ïß¿ ÏÊ¿ Ì5¿ ÌÖ¿ Ìº¿ Ì¬¿ Ó¿ Ó\¿ Óh¿ Ón¿ Ó±¿ Ó˝¿ ÔM¿ Ôt¿ Ôz¿ Ôä¿ Ôê¿ Ô›¿ ÔÔ¿ =¿ d¿ Ø¿ ¯¿ ÒF¿ Ò~¿ Òì¿ Ò∑¿ Ò∏¿ ÒÒ¿ Ò˜¿ Ú¿ Ú¿ Úg¿ Úé¿ Úº¿ ÚΩ¿ Û¿ Û:¿ Û@¿ Ûr¿ Ûx¿ Û∆¿ Ù¿ Ù,¿ Ù2¿ Ù}¿ Ù¥¿ ı¿ ıR¿ ıü¿ ı‰¿ ˆ1¿ ˆÄ¿ ˆâ¿ ˆª¿ ˆº¿ ˜¿ ˜6¿ ˜<¿ ˜â¿ ˜⁄¿ ¯'¿ ¯-¿ ¯y¿ ¯¨¿ ¯˜¿ ˘G¿ ˘ï¿ ˘©¿ ˘Ø¿ ˘˛¿ ˙L¿ ˙ö¿ ˙Â¿ ˙¿ ˙ˆ¿ ˚¿ ˚8¿ ˚9¿ ˚å¿ ˚√¿ ˚…¿ ˚·¿ ˚¸¿ ˚˝¿ ¸N¿ ¸]¿ ¸c¿ ¸ô¿ ¸‡¿ ˝&¿ ˝,¿ ˝r¿ ˝ø¿ ˝ˇ¿ ˛#¿ ˛)¿ ˛z¿ ˛à¿ ˛é¿ ˛‹¿ ˇ¿ ˇ¿ ˇe¿ ˇk¿ ˇµ¿ ˇ≈¿ ˇ⁄¿ ˇ‡¿ ¿ X¿ ©¿ ˆ¿,¿2¿v¿Ø¿ƒ¿ ¿‡¿Ê¿	¿¿¿;¿n¿v¿Ä¿í¿ò¿Æ¿¥¿ ¿¿¿!¿C¿`¿s¿â¿∞¿Œ¿¿˝¿¿¿¿,¿2¿H¿N¿ö¿†¿Æ¿“¿ ¿;¿Y¿_¿Ç¿Ω¿«¿œ¿’¿Ò¿¿!¿7¿á¿í¿ö¿§¿∂¿º¿Ã¿“¿¿?¿S¿Ö¿ü¿∑¿Œ¿’¿%¿)¿*¿{¿ä¿ê¿–¿	¿	k¿	§¿	π¿	ø¿	Ú¿	¯¿
B¿
Ñ¿
Õ¿¿<¿B¿Ñ¿Ω¿“¿ÿ¿$¿s¿¡¿¿[¿w¿å¿í¿®¿Æ¿—¿◊¿Â¿¿-¿@¿V¿}¿ö¿ª¿»¿”¿€¿Â¿˜¿¿C¿]¿u¿å¿ì¿Ì¿Ò¿Ú¿B¿ê¿◊¿›¿¿j¿∑¿ ¿O¿ù¿Ê¿Ï¿3¿y¿¿À¿¿X¿¶¿Ù¿A¿n¿t¿≈¿”¿Ÿ¿'¿`¿f¿¥¿ı¿˚¿L¿_¿t¿z¿≠¿≥¿…¿œ¿Ú¿¯¿¿)¿r¿z¿Ñ¿ñ¿ú¿¨¿≤¿¿6¿J¿õ¿µ¿Õ¿›¿Ù¿˚¿j¿n¿o¿ø¿¿T¿Z¿•¿Û¿B¿Ñ¿ô¿ü¿›¿„¿*¿0¿y¿¿ï¿õ¿æ¿ƒ¿“¿ˆ¿E¿M¿W¿i¿}¿‘¿Ó¿¿¿-¿4¿≠¿±¿≤¿ˇ¿ 8¿ >¿ z¿ ª¿ ¡¿!¿!T¿!Z¿!©¿!Í¿"8¿"á¿"”¿#"¿#r¿#©¿#Ø¿$ ¿$¿$¿$b¿$õ¿$°¿$Ô¿%)¿%/¿%à¿%é¿%£¿%©¿%‹¿%‚¿%¯¿%˛¿&!¿&'¿&5¿&Y¿&†¿&®¿&≤¿&ƒ¿& ¿&⁄¿&‡¿'+¿'W¿'k¿'∑¿'—¿'È¿'˘¿(¿(¿(Å¿(Ö¿(Ü¿(”¿)¿)¿)X¿)°¿)¿*2¿*G¿*M¿*Ü¿*å¿*”¿*Ÿ¿+"¿+(¿+>¿+D¿+g¿+m¿+{¿+ô¿+‰¿+Ï¿+ˆ¿,¿,¿,n¿,à¿,†¿,∞¿,«¿,Œ¿-B¿-F¿-G¿-ï¿-Â¿.	¿.¿.S¿.ö¿.…¿.œ¿/¿/M¿/S¿/°¿/Î¿/Ò¿0>¿0k¿0q¿0∞¿0˛¿1¿1¿1j¿1π¿1ˆ¿26¿2Ä¿2Œ¿3¿3B¿3H¿3ô¿3ß¿3≠¿3˚¿44¿4:¿4à¿4é¿4ﬁ¿4ˆ¿5¿5¿5D¿5J¿5`¿5f¿5â¿5è¿5ù¿5Ω¿6¿6 ¿6*¿6<¿6B¿6R¿6X¿6®¿6◊¿6Î¿7+¿7E¿7^¿7~¿7ï¿7ú¿8¿8¿8¿8[¿8´¿8œ¿8’¿9#¿9t¿9√¿:¿:¿: ¿:a¿:g¿:Æ¿:¥¿:˝¿;¿;¿;¿;B¿;H¿;V¿;v¿;€¿;„¿;Ì¿;ˇ¿<¿<Y¿<s¿<å¿<¨¿<√¿< ¿=@¿=D¿=E¿=í¿=ß¿=≠¿=ﬁ¿>$¿>q¿>±¿>’¿>€¿?,¿?:¿?@¿?é¿?«¿?Õ¿@¿@,¿@2¿@H¿@N¿@q¿@w¿@Ö¿@†¿@æ¿@—¿@Ù¿A3¿A@¿AK¿AS¿A]¿Ao¿Au¿AÖ¿Aã¿A◊¿AÛ¿B¿B[¿Bâ¿Bç¿Bé¿B◊¿BÏ¿BÚ¿C-¿C{¿C ¿C¸¿D¿D¿DE¿DK¿DÜ¿D‘¿E!¿Eg¿E¥¿E¯¿E˛¿FJ¿Fï¿F™¿F∞¿F˘¿Fˇ¿G¿G8¿G>¿Gö¿G¨¿G¿¿HG¿Hú¿H†¿H°¿HÒ¿I@¿Iz¿IÄ¿Iº¿J¿JZ¿J®¿J¯¿KF¿KÑ¿Kä¿K÷¿L#¿Lc¿L±¿LÛ¿L˘¿MJ¿MX¿M^¿M¨¿MÂ¿MÎ¿N9¿Nz¿Nè¿Nï¿N´¿N±¿N‘¿N⁄¿NË¿O¿O5¿OH¿Ok¿OÆ¿Oª¿O∆¿OŒ¿Oÿ¿OÍ¿O¿P ¿P¿PV¿PÖ¿Pô¿Q¿Qr¿Qv¿Qw¿Q«¿R¿RL¿RR¿Rò¿RÊ¿S0¿Sr¿Sá¿Sç¿S∆¿SÃ¿T¿T
¿TS¿TY¿To¿Tí¿Tò¿U ¿U¿U&¿U⁄¿VQ¿VU¿VV¿V£¿VÍ¿W
¿W¿WO¿Wñ¿W≈¿WÀ¿X¿XI¿XO¿Xù¿XÁ¿XÌ¿Y:¿Yg¿Ym¿Y≥¿Z¿ZN¿Zû¿ZÁ¿[4¿[Ñ¿[≈¿[À¿\¿\*¿\0¿\~¿\∑¿\Ω¿]¿] ¿]&¿]<¿]B¿]e¿]k¿]y¿]ü¿]À¿]ﬁ¿^8¿^\¿^g¿^o¿^y¿^ã¿^ë¿^°¿^ß¿^Ò¿_¿_1¿_∞¿_˝¿`¿`¿`K¿`í¿`≤¿`∏¿a¿aR¿aú¿aﬁ¿aÛ¿a˘¿b5¿b;¿bs¿by¿b¬¿b»¿bﬁ¿c¿c¿ct¿cÜ¿cö¿dL¿d¿¿dƒ¿d≈¿e¿e2¿e8¿el¿e∏¿f¿fV¿f¶¿fŒ¿f‘¿g$¿gL¿gR¿g£¿g‚¿h2¿hz¿h«¿i¿i1¿i7¿iá¿i©¿iØ¿i˝¿j¿j¿j(¿j.¿j}¿j»¿k¿k=¿kQ¿k‘¿l)¿l-¿l.¿l{¿lõ¿l°¿lﬂ¿m.¿m}¿mØ¿mƒ¿m ¿m˚¿n¿n9¿n?¿nà¿nú¿oV¿oŸ¿o›¿oﬁ¿p+¿py¿pî¿pö¿pÿ¿q"¿qq¿q¿¿r¿r8¿r>¿ré¿r∂¿rº¿s¿sL¿sú¿s‰¿t1¿tÇ¿tõ¿t°¿tÔ¿u¿u
¿u¿u ¿um¿uÄ¿u–¿uˇ¿v¿v£¿w¿w¿w¿wZ¿w®¿w√¿w…¿x¿x_¿x≠¿xı¿y
¿y¿yK¿yQ¿yâ¿yè¿yÿ¿yÏ¿z≥¿{F¿{J¿{K¿{õ¿{©¿{Ø¿{‚¿|1¿|Å¿|ö¿|†¿|⁄¿|Ô¿|ı¿}¿}¿}V¿}n¿}õ¿}›¿~¿~¿~¿~g¿~∏¿~‹¿~‚¿¿b¿≥¿ ¿–¿Ä¿Ä\¿Äb¿Ä≤¿Å ¿Å>¿ÅD¿Åï¿Å‹¿Å‚¿Ç-¿Çx¿Çá¿Çú¿Ç¢¿Ç≤¿Ç∏¿É¿ÉC¿Éî¿É≈¿ÉŸ¿Ñ2¿Ñh¿Ñl¿Ñm¿Ñª¿Ñ–¿Ñ÷¿Ö¿ÖV¿Ö§¿ÖÈ¿Ü6¿Ü<¿Üà¿Ü÷¿á¿án¿áº¿à¿à¿à]¿à¨¿àÏ¿â¿â¿âf¿âl¿âπ¿â‡¿âı¿â˚¿ä¿ä¿äN¿äT¿äb¿äx¿äò¿ä†¿ä™¿äº¿ä¬¿äÙ¿ä˙¿ã¿ã¿ã\¿ãd¿ãn¿ãÇ¿ãŒ¿ã¯¿ã¸¿ã˝¿åJ¿åÄ¿åÜ¿åª¿ç¿ç1¿ç7¿çÄ¿ç´¿ç±¿ç¿çˆ¿é<¿éQ¿éW¿ém¿és¿éñ¿éú¿é™¿é¡¿è¿è¿è¿è)¿èr¿è°¿è•¿è¶¿èı¿ê&¿ê,¿êd¿ê¥¿ë¿ë¿ë¿ëd¿ë≥¿ë˚¿íG¿íò¿í±¿í∑¿ì¿ì¿ì%¿ìc¿ìx¿ì~¿ìœ¿î¿îK¿îÄ¿îÑ¿îÖ¿î‘¿ï$¿ïM¿ïS¿ïê¿ï‡¿ñ-¿ñE¿ñK¿ñê¿ñﬂ¿ó'¿ós¿óƒ¿ó›¿ó„¿ò4¿ò|¿òÇ¿ò¿¿ò’¿ô(¿ôh¿ôl¿ôm¿ôΩ¿ôÃ¿ô“¿ôı¿ô˚¿ö	¿ö%¿ö5¿öE¿ög¿öq¿öw¿ö»¿õ¿õ<¿õB¿õì¿õ€¿õ·¿ú!¿ú=¿úY¿úy¿úÄ¿ú»¿úÁ¿ù0¿ùc¿ùi¿ùÇ¿ùÿ¿ùÂ¿û7¿û=¿û>¿ûN¿ûm¿ûâ¿ûÁ¿ü@¿üÄ¿üã¿üì¿ü¶¿ü∞¿ü«¿üÀ¿üÃ¿†¿†3¿†9¿†\¿†b¿†p¿†≥¿†◊¿†Ó¿° ¿°¿°6¿°>¿°H¿°N¿°ü¿°Ë¿¢¿¢¿¢f¿¢l¿¢¨¿¢Œ¿¢Í¿£
¿£¿£Y¿£x¿£¡¿£Ù¿£˙¿§¿§i¿§v¿§»¿§Œ¿§‰¿§Ë¿§È¿• ¿•&¿•u¿•ó¿•ù¿•Ó¿¶<¿¶ä¿¶†¿¶¶¿¶ˆ¿ßB¿ßë¿ßÃ¿®<¿®z¿®≈¿©¿©C¿©h¿©z¿©º¿©—¿©›¿™M¿™ê¿™π¿™ÿ¿´¿´)¿´?¿´l¿´Ö¿´ï¿´¯¿¨¿¨
¿¨+¿¨?¿¨c¿¨Ñ¿¨ù¿¨÷¿≠¿≠è¿≠‰¿≠Û¿Æ ¿Æ¿Æ%¿Æ=¿ÆE¿ÆÜ¿ÆÒ¿Ø3¿Øô¿Øü¿Øﬁ¿ØÂ¿∞1¿∞Ä¿∞…¿∞È¿±+¿±C¿±¢¿±Ã¿±–¿±—¿±›¿≤¿≤¿≤¿≤K¿≤N¿≤Ä¿≤•¿≤ ¿≤¿≥¿≥D¿≥k¿≥ë¿≥¡¿≥Ò¿¥!¿¥Q¿¥Å¿¥±¿¥Â¿µ¿µD¿µr¿µü¿µÀ¿µˆ¿∂¿∂B¿∂l¿∂ö¿∂¬¿∂È¿∑¿∑9¿∑a¿∑â¿∑±¿∑Ÿ¿∏¿∏'¿∏L¿∏u¿∏ö¿∏ø¿∏Û¿π ¿π#¿πo¿πñ¿πÊ¿π˝¿∫V¿∫[¿∫y¿∫~¿∫˙¿ªO¿ªz¿ª”¿º:¿º~¿º‡¿Ω¿Ω¿Ω*¿Ω/¿Ωò¿Ωº¿ΩÎ¿æ#¿æã¿æ‡¿øF¿øé¿ø¬¿øÏ¿øÓ¿øÔ¿¿0¿¿1¿¿[¿¿ñ¿¿„¿¡¿¡¿¡¿¡8¿¡G¿¡Y¿¡Ü¿¡©¿¡…¿¡¿¬¿¬7¿¬i¿¬ú¿¬÷¿√
¿√¿√<¿√=¿√I¿√g¿√†¿√°¿√Ÿ¿√⁄¿√˙¿ƒc¿ƒ∆¿≈'¿≈(¿≈x¿≈æ¿≈‹¿∆,¿∆t¿∆á¿∆…¿«¿«¿«E¿«Ö¿«ã¿«ú¿«†¿«°¿«œ¿«–¿«˚¿»¿»'¿»9¿»M¿»í¿»∏¿»º¿»Ω¿…!¿…R¿…q¿…ï¿…ª¿…›¿…Ú¿ ¿ J¿ u¿ Æ¿ µ¿ π¿ ∫¿À\¿ÀË¿Ã¿Ã+¿Ã7¿ÃW¿Ã§¿ÃÃ¿Ã”¿Õ¿Õ-¿ÕB¿Õo¿ÕŒ¿Œ¿Œ4¿Œ`¿Œó¿Œ∆¿ŒÒ¿œ9¿œe¿œÆ¿œ∏¿œ¬¿œœ¿–¿–(¿–S¿–Y¿–o¿–ê¿–ñ¿–ó¿–˚¿—(¿—f¿—o¿—|¿—±¿—ﬁ¿“¿“"¿“(¿“,¿“-¿“c¿“Ü¿“∂¿“∫¿“ª¿“·¿“Á¿”4¿”w¿”}¿”Œ¿”Í¿‘N¿‘m¿‘ë¿‘º¿‘Ë¿’¿’]¿’£¿’∫¿’ﬂ¿’Ú¿’¯¿÷ ¿÷K¿÷_¿÷e¿÷¿÷ê¿÷î¿÷ï¿÷Ø¿÷’¿÷Ô¿◊>¿◊i¿◊m¿◊n¿◊÷¿◊ı¿ÿ¿ÿD¿ÿq¿ÿï¿ÿ¬¿ÿˇ¿Ÿ¿Ÿ¿Ÿ¿Ÿ¿Ÿc¿Ÿw¿Ÿ†¿Ÿ∂¿Ÿ◊¿Ÿ›¿Ÿ·¿Ÿ‚¿Ÿ˚¿Ÿ¸¿⁄¿⁄.¿⁄J¿⁄r¿⁄v¿⁄w¿⁄ü¿⁄†¿⁄œ¿⁄¸¿€¿€7¿€á¿€’¿€‹¿‹¿‹&¿‹=¿‹i¿‹î¿‹ò¿‹ô¿‹Ã¿›¿›¿›C¿›ì¿›·¿›Ë¿ﬁ$¿ﬁ2¿ﬁI¿ﬁu¿ﬁë¿ﬁæ¿ﬁ¬¿ﬁ√¿ﬁ◊¿ﬂ¿ﬂC¿ﬂG¿ﬂH¿ﬂ[¿ﬂú¿ﬂ…¿ﬂ ¿‡¿‡g¿‡©¿‡¯¿·I¿·J¿·∑¿·∏¿·⁄¿·Ò¿·˛¿‚)¿‚D¿‚}¿‚°¿‚π¿‚ÿ¿‚˙¿„¿„9¿„W¿„ß¿„ƒ¿„–¿„€¿‰ ¿‰¿‰¿‰¿‰¿‰.¿‰m¿‰©¿‰≠¿‰Æ¿‰≈¿Â¿ÂB¿ÂF¿ÂG¿Âü¿Â†¿Â≈¿Ê¿ÊE¿ÊI¿ÊJ¿Êv¿Ê∑¿ÊÙ¿Ê¯¿Ê˘¿Á8¿Ái¿Á∑¿ÁÛ¿Ë¿Ë¿ËL¿Ëã¿Ëí¿Ëñ¿Ëó¿Ëﬂ¿ÈQ¿È°¿È¢¿ÈÈ¿Í!¿Í%¿Í&¿Í2¿ÍÜ¿Íá¿Íì¿Í€¿Î¿Î	¿ÎS¿ÎT¿Î`¿Îw¿ÎÉ¿Î«¿Ï¿Ïl¿Ïs¿Ïú¿Ï†¿Ï°¿Ï≠¿Ï√¿Ïœ¿Ì¿Ìd¿Ì∑¿Ìæ¿ÌÊ¿ÌÍ¿ÌÎ¿Ì˜¿Ó¿Ó)¿Óz¿ÓÀ¿Ô¿Ô&¿Ô@¿Ôj¿Ôn¿Ôo¿Ô{¿Ô¶¿Ô≤¿¿T¿®¿∂¿Ω¿‹¿Ò¿Ò
¿Ò¿Ò¿Ò0¿Ò<¿Òç¿Ò‹¿Ú0¿Ú>¿ÚE¿ÚS¿Ú}¿ÚÅ¿ÚÇ¿ÚÀ¿ÚÚ¿Û¿Û]¿Ûa¿Ûc¿Ûd¿Ûã¿Û§¿Ûª¿Û‘¿ÛŸ¿Û˛¿Ù&¿Ù'¿ÙR¿ÙT¿ÙU¿Ùï¿Ù≤¿Ù”¿Ù˜¿ı"¿ı#¿ı/¿ı[¿ıè¿ıì¿ıï¿ıñ¿ı’¿ıÒ¿ˆ¿ˆ6¿ˆa¿ˆb¿ˆn¿ˆö¿ˆÕ¿ˆ—¿ˆ”¿ˆ‘¿˜¿˜5¿˜V¿˜z¿˜•¿˜¶¿˜≤¿˜ﬁ¿¯¿¯¿¯¿¯¿¯^¿¯~¿¯ü¿¯√¿¯Ó¿¯Ô¿¯˚¿˘'¿˘r¿˘v¿˘x¿˘y¿˘°¿˘•¿˘Ó¿˙N¿˙z¿˙™¿˙Ó¿˚M¿˚¨¿˚≠¿˚˜¿¸N¿¸O¿¸™¿¸´¿¸◊¿¸ÿ¿˝¿˝¿˝¿˝.¿˝E¿˝U¿˝ä¿˝≥¿˝◊¿˝˚¿˛¿˛C¿˛á¿˛Æ¿˛ø¿˛Ë¿ˇ¿ˇ ¿ˇ-¿ˇ\¿ˇÄ¿ˇ°¿ˇ»¿ ¿ 6¿ G¿ p¿ ô¿ ®¿ µ¿ ø¿ «¿ ⁄¿ ‰¿%¿O¿q¿w¿£¿§¿Ò¿&¿c¿©¿—¿¿¿;¿m¿s¿w¿x¿∑¿¿¿h¿i¿u¿æ¿¿A¿B¿Ö¿ß¿Œ¿‘¿Ú¿¿ ¿W¿§¿Ÿ¿¿)¿T¿]¿k¿ë¿·¿0¿9¿T¿§¿™¿´¿˘¿	"¿	T¿	v¿	π¿	¡¿	„¿	¸¿
&¿
8¿
w¿
Æ¿
√¿
Ù¿6¿g¿ï¿∏¿ˇ¿¿)¿8¿E¿P¿X¿^¿_¿k¿Ü¿“¿ ¿m¿ä¿ë¿¨¿‰¿ ¿9¿=¿>¿J¿Å¿ß¿¡¿Ó¿˚¿¿%¿)¿5¿o¿p¿|¿ù¿¿¿¸¿*¿T¿X¿Y¿õ¿‘¿˚¿P¿d¿≥¿¿4¿i¿∏¿	¿Z¿ù¿¿6¿â¿ÿ¿¸¿9¿e¿é¿Ω¿¿f¿ä¿¥¿	¿[¿í¿´¿‹¿¿$¿9¿K¿[¿k¿w¿é¿ú¿…¿—¿!¿:¿r¿ß¿€¿˛¿¿¿	¿.¿X¿∑¿¿¿Ó¿Ú¿Û¿ˇ¿-¿S¿c¿ò¿¡¿Â¿	¿*¿Q¿ï¿º¿Õ¿ˆ¿¿.¿;¿j¿é¿Ø¿÷¿¿D¿U¿~¿ß¿∂¿√¿Õ¿’¿Ë¿Ú¿%¿i¿ç¿–¿¸¿  ¿ (¿ K¿ Q¿ è¿ °¿ ≈¿ È¿!
¿!1¿!u¿!ú¿!≠¿!÷¿!ˇ¿"¿"¿"%¿":¿"F¿"\¿"b¿"c¿"ë¿"ª¿"ø¿"¿¿"È¿"˘¿#(¿#_¿#á¿#¢¿#”¿#ˆ¿$ ¿$¿$¿$%¿$)¿$*¿$6¿$L¿$é¿$∞¿$»¿$Ã¿$Õ¿$Ÿ¿$Ì¿%¿%G¿%q¿%ì¿%ô¿%ù¿%û¿%™¿%Ω¿%ÿ¿%Ë¿&¿&¿& ¿&0¿&t¿&°¿&¥¿&æ¿&ﬂ¿&˝¿'+¿'B¿'W¿'ê¿'™¿'Æ¿'Ø¿'Ú¿(+¿(,¿(c¿(~¿(Æ¿(’¿(‹¿(‡¿(·¿)¿)¿)(¿)@¿)P¿)s¿)ö¿)ª¿)Œ¿)ÿ¿)Ÿ¿*¿*g¿*±¿*¯¿*ˇ¿+.¿+N¿+°¿+–¿,¿,C¿,ê¿,·¿,‚¿-4¿-â¿-º¿.¿.S¿.†¿.¡¿/¿/-¿/q¿/Å¿/º¿0
¿0+¿0g¿0≠¿0¸¿1¿1d¿1¿1Õ¿1˘¿23¿24¿2\¿2x¿2ñ¿2≈¿2Ú¿2Û¿3-¿3ù¿3û¿3≈¿3Ò¿4!¿4`¿4µ¿4˛¿5¿5<¿5î¿5π¿5⁄¿5Â¿6¿6*¿6<¿6D¿6l¿6{¿6Ω¿6È¿6¯¿7$¿7S¿7s¿7é¿7´¿7±¿7≤¿7‘¿8&¿86¿8ã¿8«¿9¿9;¿9ã¿9Æ¿9 ¿9‹¿9‰¿:#¿:O¿:^¿:Æ¿:‚¿;¿;¿;4¿;:¿;u¿;†¿;°¿;Û¿<&¿<z¿<«¿<ﬂ¿=¿=R¿=ó¿=∫¿=»¿=‰¿>¿>(¿>w¿>Ü¿>£¿>µ¿>∂¿>÷¿>◊¿?"¿?#¿??¿?Q¿?R¿?w¿?ù¿?Ø¿?∑¿?Ô¿@¿@$¿@%¿@L¿@x¿@ª¿@÷¿@·¿A¿A9¿A{¿AÖ¿A’¿B ¿B@¿Br¿Bõ¿BÃ¿B◊¿B˝¿C¿C<¿Cé¿Cﬂ¿CÍ¿D¿D¿Df¿Dπ¿D¿E'¿EN¿EV¿E\¿E]¿EØ¿F<¿Fl¿Fπ¿F÷¿F◊¿G¿G7¿GÇ¿Gö¿G¡¿G‰¿GÒ¿H%¿Hë¿HŒ¿H‡¿HË¿HÈ¿IS¿I£¿IÔ¿J¿JB¿Jà¿J≈¿K¿Kc¿Kï¿K“¿K⁄¿L¿L¿L¿L@¿Ls¿L¢¿LÕ¿Lˆ¿MK¿Me¿Mu¿M¢¿M“¿N¿NT¿N_¿Nå¿Nñ¿Nó¿Nª¿O¿OO¿O§¿O√¿Oˆ¿PA¿PY¿P~¿P°¿P¨¿P“¿P‰¿PÏ¿Q¿QZ¿Qâ¿Q∏¿Qÿ¿Qı¿R¿R¿R¿Re¿R¡¿RÒ¿S¿SI¿Sr¿S≤¿S¿T¿T¿T3¿Tl¿T£¿T‹¿T‚¿U¿U.¿Ui¿U¶¿UÆ¿U¥¿UÒ¿V)¿VE¿V~¿VÇ¿VÉ¿V§¿V•¿V„¿W¿W1¿WÄ¿Wœ¿X ¿Xg¿Xå¿X£¿XÕ¿Y¿Yé¿YÙ¿ZT¿Zê¿Z©¿ZŒ¿Z¿[¿[/¿[L¿[¨¿[π¿[˘¿\¿\2¿\b¿\|¿\õ¿\√¿\“¿]¿](¿]4¿]E¿]h¿]í¿]∏¿]‹¿]¯¿^¿^<¿^ú¿^¬¿^œ¿_¿_R¿_ì¿_œ¿_Â¿_Ò¿`¿`Z¿`î¿`≈¿`Í¿`˚¿a¿aX¿aâ¿aÆ¿b ¿b=¿b^¿bo¿bë¿b±¿b“¿c8¿cx¿cé¿cö¿cø¿c‰¿d¿d>¿dJ¿dq¿dÁ¿dÙ¿e3¿eÄ¿e°¿e∑¿e√¿f¿f%¿f6¿f\¿fò¿f©¿f–¿fÚ¿g2¿gF¿gk¿gê¿gµ¿gË¿h¿h¿h3¿hP¿h∞¿hΩ¿hˇ¿i¿i:¿ik¿i¶¿iπ¿i≈¿i˝¿j¿j7¿jâ¿jø¿j◊¿jË¿k¿k5¿kN¿k_¿kg¿ky¿kç¿k•¿kﬁ¿k‰¿l¿l?¿l@¿lå¿l¢¿l¡¿l¬¿lÊ¿m¿ma¿m¡¿m ¿n
¿nQ¿nó¿nƒ¿nÃ¿n“¿n”¿o!¿o.¿ob¿o¨¿oÀ¿o‚¿oË¿p¿p7¿p=¿pW¿pÑ¿pä¿p®¿p¨¿p≠¿p‘¿p˚¿q"¿qI¿qW¿q]¿qé¿q‰¿r¿r!¿r"¿rS¿r™¿r·¿rÁ¿rÎ¿rÏ¿s¿s4¿sM¿s~¿s™¿sæ¿s–¿sÿ¿tH¿tI¿tÇ¿tø¿tÒ¿t˚¿u/¿u7¿u¨¿uÌ¿v%¿va¿vi¿v{¿vÅ¿vÖ¿vÜ¿v“¿w¿w1¿w5¿w6¿wy¿w∞¿w¬¿w»¿w⁄¿wﬁ¿wﬂ¿x*¿xo¿xÅ¿xá¿xƒ¿x»¿x…¿y+¿yF¿y`¿yï¿y®¿y∏¿y‰¿z ¿z^¿zª¿{	¿{0¿{Q¿{f¿{q¿{y¿{å¿{ñ¿{»¿{⁄¿{ˆ¿{˝¿|C¿|j¿||¿|©¿|„¿}O¿}m¿}Ã¿}˚¿~
¿~Å¿~è¿~ô¿~Æ¿~∫¿~˜¿	¿&¿`¿À¿Ä ¿Äó¿Ä•¿ÄØ¿Äƒ¿Ä–¿Ä÷¿Ä˛¿Å¿Å¿Å¿ÅB¿ÅH¿Å{¿ÅÅ¿Å¥¿Å∫¿Å–¿Å÷¿Å˘¿Åˇ¿Ç¿Ç*¿ÇT¿Ç\¿Çf¿Çx¿Ç~¿Çé¿Çî¿Çﬁ¿É¿É¿É@¿ÉX¿Éo¿Év¿Éº¿É¿¿É¡¿ÉÓ¿ÉÙ¿Ñ1¿Ñ7¿Ñj¿Ñp¿Ñ∑¿ÑΩ¿Ö¿Ö¿Ö"¿Ö(¿ÖK¿ÖQ¿Ö_¿Ö{¿ÖØ¿Ö∑¿Ö¡¿Ö”¿ÖÁ¿Ü¿Ü0¿ÜG¿ÜN¿Üm¿ÜÚ¿á/¿áF¿áb¿áù¿á€¿áÚ¿à¿à¿à¿àd¿à≥¿à–¿à÷¿â¿â¿âM¿âS¿âi¿âo¿âí¿âò¿â¶¿â¿¿â¯¿ä ¿ä
¿ä¿ä"¿ä2¿ä8¿äâ¿ä∫¿äŒ¿ã¿ã0¿ã@¿ãW¿ã^¿ã√¿ã«¿ã»¿å¿åc¿åÄ¿åÜ¿åŒ¿å‘¿ç¿ç¿ç_¿çe¿çÆ¿ç¥¿ç ¿ç–¿çÛ¿ç˘¿é¿é ¿éb¿éj¿ét¿éÜ¿éö¿éÍ¿è¿è¿è)¿è0¿èO¿è‘¿ê¿ê(¿êD¿ê¿êƒ¿êÓ¿ë¿ë¿ë¿ë`¿ëm¿ës¿ë¨¿ë≤¿ëÂ¿ëÎ¿í¿í¿í*¿í0¿í>¿íT¿íÑ¿íå¿íñ¿í®¿íÆ¿íæ¿íƒ¿ì¿ì;¿ìO¿ìî¿ì¨¿ìº¿ì”¿ì⁄¿ìÔ¿î)¿î-¿î.¿îz¿îá¿îç¿î–¿î÷¿ï¿ï¿ï\¿ïb¿ï´¿ï±¿ï«¿ïÕ¿ï¿ïˆ¿ñ¿ñ¿ñR¿ñZ¿ñd¿ñv¿ñä¿ñ’¿ñÌ¿ñ˝¿ó¿ó¿ó0¿óq¿óu¿óv¿ó«¿ò¿ò¿òL¿òR¿òÖ¿òã¿ò°¿òß¿ò ¿ò–¿òﬁ¿ô¿ôS¿ô[¿ôe¿ôw¿ô}¿ôç¿ôì¿ô„¿ö¿ö&¿ö_¿öx¿öò¿öØ¿ö∂¿õ¿õ¿õ¿õn¿õ¨¿õ≤¿õ˝¿ú¿úD¿úJ¿úë¿úó¿ú‡¿úÊ¿ú¸¿ù¿ù%¿ù+¿ù9¿ùV¿ù≤¿ù∫¿ùƒ¿ù÷¿ùÍ¿û)¿ûB¿ûb¿ûy¿ûÄ¿û¢¿ü'¿üd¿ü~¿üö¿ü’¿†¿†C¿†d¿†h¿†i¿†ò¿†û¿†Ã¿†“¿†Ë¿†Ó¿°¿°¿°%¿°>¿°\¿°¿°æ¿°À¿°÷¿°ﬁ¿°Ë¿°˙¿¢ ¿¢¿¢¿¢b¿¢~¿¢í¿¢…¿¢¯¿£@¿£Y¿£]¿£^¿£ò¿£®¿£Ã¿£Ó¿§¿§2¿§Ñ¿§‡¿§Ô¿•¿•=¿•J¿•U¿•]¿•p¿•z¿•ã¿•è¿•ê¿•√¿•‹¿•Ï¿¶a¿¶≤¿¶≈¿¶œ¿¶‚¿¶Ê¿¶Á¿ß¿ß¿ßP¿ßV¿ßÑ¿ßä¿ß¬¿ß»¿®¿®¿®-¿®P¿®V¿®∏¿® ¿®ﬁ¿©H¿©j¿©‘¿™Y¿™ö¿™º¿™ÿ¿´¿´Q¿´h¿´â¿´ç¿´é¿´µ¿´–¿´‡¿´˚¿¨¿¨¿¨9¿¨e¿¨ù¿¨∂¿¨“¿¨‚¿¨˛¿≠¿≠¿≠>¿≠B¿≠C¿≠t¿≠ç¿≠›¿Æ&¿Æl¿Æm¿Æò¿Æ≥¿Æ‡¿Æ·¿Ø¿Ø4¿Øv¿Ø™¿Øª¿Ø›¿ØÁ¿∞¿∞¿∞S¿∞ù¿∞æ¿∞…¿∞Û¿±)¿±I¿±Å¿±é¿±ò¿±Œ¿±÷¿±◊¿≤¿≤:¿≤D¿≤J¿≤g¿≤k¿≤l¿≤º¿≥¿≥¿≥¿≥W¿≥]¿≥s¿≥y¿≥ú¿≥¢¿≥∞¿≥À¿≥˙¿¥¿¥`¿¥m¿¥x¿¥Ä¿¥ä¿¥ú¿¥¢¿¥≤¿¥∏¿µ¿µ7¿µK¿µ¥¿µ“¿µ˚¿∂-¿∂í¿∂Æ¿∂≤¿∂≥¿∂ˇ¿∑G¿∑[¿∑a¿∑§¿∑™¿∑„¿∑È¿∏!¿∏'¿∏p¿∏v¿∏å¿∏Ø¿∏µ¿π#¿π5¿πI¿π‡¿∫¿∫l¿∫Ò¿ª2¿ªT¿ªp¿ª´¿ª¿º¿º;¿º?¿º@¿ºí¿º≠¿ºΩ¿ºÿ¿ºÎ¿ºı¿Ω¿ΩB¿Ωc¿ΩÀ¿æ
¿æe¿æ~¿æö¿æ™¿æ∆¿æŸ¿æ„¿ø¿ø
¿ø¿ø[¿øå¿øí¿øŒ¿ø‘¿øÍ¿ø¿¿¿¿¿¿'¿¿H¿¿t¿¿Œ¿¿Ú¿¿˝¿¡¿¡¿¡!¿¡'¿¡-¿¡=¿¡C¿¡ç¿¡π¿¡Õ¿¬/¿¬M¿¬v¿¬£¿¬’¿√9¿√U¿√Y¿√Z¿√¶¿√◊¿√›¿ƒ#¿ƒ)¿ƒe¿ƒk¿ƒ£¿ƒ©¿ƒÚ¿ƒ¯¿≈¿≈1¿≈7¿≈™¿≈º¿≈–¿∆e¿∆ä¿∆˜¿«|¿«Ω¿«‚¿«˛¿»9¿»w¿»ß¿»»¿»Ã¿»Õ¿…¿…7¿…G¿…b¿…u¿…¿…†¿…Ã¿…¸¿ ¿ S¿ x¿ ë¿ œ¿ Ù¿À¿À(¿À.¿ÀJ¿ÀK¿À[¿Àw¿Àä¿Àî¿À∑¿Àª¿Àº¿Àˆ¿À¸¿Ã-¿Ã3¿ÃC¿ÃI¿Ãò¿Ã„¿Õ,¿ÕX¿Õl¿Õ“¿ÕÌ¿Œ¿Œ4¿ŒR¿Œ≠¿Œ±¿Œ≤¿ŒÏ¿ŒÚ¿œ-¿œ3¿œd¿œj¿œ¢¿œ®¿œÒ¿–¿–¢¿–¿¿–È¿—¿—{¿“ ¿“¿“_¿“Ñ¿“†¿“€¿”¿”@¿”a¿”e¿”f¿”©¿”ƒ¿”Â¿”Û¿‘¿‘¿‘1¿‘;¿‘v¿‘¢¿‘ı¿’H¿’∂¿’Ê¿÷¿÷;¿÷W¿÷g¿÷É¿÷ñ¿÷†¿÷¥¿÷Ÿ¿÷›¿÷ﬁ¿◊(¿◊a¿◊g¿◊¢¿◊®¿◊∏¿◊æ¿ÿ¿ÿ¿ÿn¿ÿù¿ÿ±¿Ÿ$¿ŸB¿Ÿk¿Ÿå¿Ÿ∏¿⁄¿⁄¿⁄ ¿⁄j¿⁄£¿⁄©¿⁄Ó¿⁄Ù¿€/¿€5¿€m¿€s¿€º¿€–¿‹z¿‹õ¿‹«¿‹Ï¿›Y¿›ﬁ¿›ˇ¿ﬁ@¿ﬁe¿ﬁÅ¿ﬁº¿ﬁ˝¿ﬂ)¿ﬂJ¿ﬂN¿ﬂO¿ﬂö¿ﬂµ¿ﬂÌ¿‡I¿‡•¿·¿·=¿·V¿·{¿·ä¿·ú¿·¢¿·Ú¿‚¿‚G¿‚c¿‚ú¿‚†¿‚°¿‚Ã¿‚“¿„¿„¿„¿„¿„i¿„Å¿„ì¿„˜¿‰¿‰V¿‰é¿‰⁄¿‰¯¿Â7¿Âv¿Âz¿Â{¿ÂÃ¿Ê¿ÊA¿ÊG¿Êy¿Ê¿Êè¿Êï¿Ê„¿Á ¿Áq¿Á¢¿Á∂¿Á¯¿ËD¿Ëé¿Ë®¿ËØ¿Ë ¿Ëﬁ¿È¿Ès¿Èî¿È¶¿ÈÙ¿ÍC¿Íç¿Íß¿ÍÆ¿Í—¿Î0¿ÎK¿Îr¿Îà¿Î¨¿Î¡¿Î÷¿Îˇ¿Ï¿Ï¿Ï¿Ï¿ÏO¿ÏU¿ÏÇ¿Ïà¿Ïû¿Ï§¿Ï€¿Ï·¿ÏÔ¿Ì¿Ì$¿Ì,¿Ì6¿ÌH¿Ì^¿Ìd¿Ìñ¿Ìú¿Ì™¿Ì«¿Ì˚¿Ó¿Ó¿Ó¿Ó3¿Ób¿Ó}¿Óç¿Ó®¿Óª¿Ó≈¿Ô¿Ô0¿Ôí¿Ô·¿¿J¿R¿_¿{¿µ¿ª¿Ó¿Ò#¿ÒÑ¿Òî¿Ò∞¿Ò√¿ÒÕ¿Ò¿ÒÙ¿Òı¿Ú4¿Ú:¿Úl¿Úr¿Úà¿Úé¿Ú±¿Ú∑¿Ú≈¿Úﬁ¿Û¿Û!¿Û+¿Û=¿Ûi¿ÛØ¿Û˘¿Ù¿Ù¿Ù9¿Ù_¿Ùo¿Ù|¿Ù∑¿ı¿ı¿ı(¿ı.¿ı2¿ı3¿ıÄ¿ıÜ¿ıª¿ıÊ¿ˆ¿ˆ¿ˆ,¿ˆG¿ˆZ¿ˆd¿ˆä¿ˆ∑¿˜¿˜*¿˜>¿˜q¿˜Å¿˜ù¿˜∞¿˜∫¿˜Œ¿˜Ê¿¯¿¯e¿¯É¿¯ï¿¯û¿¯¢¿¯£¿¯Ù¿˘8¿˘>¿˘x¿˘Æ¿˘…¿˘Ÿ¿˘Ù¿˙¿˙¿˙2¿˙^¿˙∫¿˚¿˚ç¿˚Æ¿˚«¿˚Ï¿˚˚¿¸¿¸¿¸c¿¸Å¿¸¥¿¸ƒ¿¸‡¿¸Û¿¸˝¿˝¿˝¿˝S¿˝Y¿˝©¿˝˘¿˛F¿˛ê¿˛∫¿˛¿¿ˇ¿ˇ^¿ˇv¿ˇ£¿ˇÔ¿ =¿ U¿ o¿ ∆¿¿c¿ì¿ﬁ¿	¿Z¿Â¿Ú¿/¿5¿K¿ì¿≤¿Õ¿¿¿F¿J¿K¿_¿â¿°¿÷¿¿*¿E¿I¿J¿ç¿µ¿‡¿
¿Q¿U¿V¿ù¿¬¿»¿ÿ¿ﬁ¿(¿_¿®¿©¿˜¿O¿P¿ã¿ë¿’¿€¿	¿	6¿	X¿	Ä¿	Æ¿	À¿	˜¿
 ¿
"¿
a¿
Ü¿
ƒ¿
Ì¿¿5¿G¿O¿ì¿œ¿’¿Ÿ¿⁄¿˙¿ ¿N¿í¿∞¿Ÿ¿˚¿#¿g¿é¿î¿ò¿ô¿≈¿∆¿˙¿"¿&¿'¿]¿à¿å¿ç¿Æ¿¿e¿¨¿ı¿$¿£¿∑¿€¿*¿Q¿[¿a¿Æ¿≤¿≥¿ø¿Ê¿¿"¿p¿æ¿—¿ˆ¿¿8¿g¿ö¿∏¿¿)¿K¿h¿ñ¿¥¿“¿Ù¿q¿Ç¿ë¿û¿©¿≤¿π¿Ω¿ø¿¿¿›¿Ê¿Û¿ı¿ˆ¿¿\¿Ü¿†¿¿¿Â¿
¿8¿s¿ì¿∏¿·¿‚¿(¿B¿z¿ô¿Ò¿¿¿G¿ú¿»¿!¿'¿+¿,¿P¿n¿ã¿å¿≠¿Æ¿œ¿¿#¿'¿(¿9¿d¿Ö¿â¿ä¿ó¿œ¿–¿=¿\¿~¿∑¿“¿Í¿˜¿¿=¿D¿H¿J¿K¿ê¿±¿…¿Ê¿¿M¿N¿†¿æ¿Á¿¿2¿e¿l¿p¿q¿}¿®¿Â¿ˇ¿ ¿ (¿ <¿ D¿ H¿ I¿ U¿ u¿ ä¿ •¿ ¶¿ ≤¿ Î¿![¿!v¿!à¿!å¿!é¿!è¿!ÿ¿!˝¿"¿":¿"`¿"≠¿"Æ¿#¿#!¿#—¿#˛¿$)¿$K¿$~¿$Ö¿$â¿$ä¿$ñ¿%¿%+¿%,¿%8¿%c¿%}¿%◊¿%Û¿&0¿&J¿&g¿&Ñ¿&ò¿&†¿&§¿&•¿&±¿&—¿'¿'"¿'#¿'/¿'h¿'∂¿'“¿'Â¿'È¿'Î¿'Ï¿(=¿(Å¿(∂¿(∑¿(∆¿(«¿(Ú¿)¿)M¿)}¿)µ¿)”¿*
¿*g¿*ã¿*å¿*’¿+ ¿+!¿+P¿+|¿+¶¿+∏¿+¿¿+¡¿+Ó¿,	¿,~¿,—¿,Ó¿-(¿-_¿-Å¿-∞¿-‡¿.E¿.V¿.å¿.¬¿.Ã¿.ﬁ¿.Ê¿.Á¿/¿/m¿/¢¿/¬¿/Ô¿09¿0o¿0 ¿0˙¿1J¿1§¿1Ÿ¿1·¿1Á¿2X¿2ß¿2®¿2¿2Ò¿3X¿3Y¿3w¿3ù¿3∂¿3º¿3¿¿3¡¿3◊¿3¿4¿44¿4T¿4Z¿4Ñ¿4¶¿4‚¿5¿5K¿5Ñ¿5∞¿5€¿5·¿5Â¿5Ê¿6;¿6q¿6Ö¿6ã¿6≥¿6‹¿6Ú¿6˙¿7 ¿7¿7¿7¿7'¿7A¿7j¿7x¿7~¿7†¿7∑¿7ª¿7º¿7Œ¿7œ¿8¿8¿8^¿8x¿8¢¿8ÿ¿91¿9F¿9L¿9¢¿9ƒ¿9Ÿ¿9ﬂ¿:¿:m¿:s¿:Ü¿:ä¿:ã¿:Æ¿:Ø¿:ª¿:¿;¿;¿;¿;¿;O¿;ò¿<¿<¿<M¿<U¿<Y¿<Z¿<f¿<†¿<√¿<«¿<»¿<‘¿<Ô¿=¿=¿=¿="¿=A¿=C¿=D¿=â¿=ç¿=‹¿>¿>W¿>X¿>†¿>Î¿>˙¿>˛¿?N¿?ï¿?ô¿?»¿@*¿@+¿@g¿@k¿@π¿@’¿@Ÿ¿A	¿AG¿AH¿Añ¿AÕ¿A—¿B ¿Bo¿B≥¿B∑¿C¿CR¿Cû¿CÌ¿D<¿DS¿DW¿D§¿D…¿DÕ¿E¿El¿E≥¿E◊¿E€¿F&¿Fu¿F©¿F≠¿F¡¿G¿GM¿GQ¿G©¿Gπ¿G˛¿H'¿H-¿Hu¿Hè¿H√¿H‡¿Hı¿I8¿I9¿Iá¿I◊¿J¿JG¿JH¿Jã¿Jë¿J·¿K.¿Ky¿Kö¿K†¿KÌ¿L;¿LY¿LÜ¿Lá¿Lœ¿L‡¿LÊ¿M%¿MU¿MV¿M£¿M¥¿M∫¿N¿N>¿Nå¿N≤¿N ¿N‰¿O!¿O>¿Oa¿Ox¿O|¿O}¿O¿¿O∆¿P¿P=¿P>¿Pu¿P{¿PØ¿P–¿P‰¿PÂ¿PÒ¿Q¿Q¿Q&¿QL¿Qe¿Qà¿Qé¿Qí¿Qì¿Qü¿Q∫¿Q’¿QÍ¿R¿R¿R¿R'¿RO¿Ri¿RÖ¿Râ¿Rä¿R§¿R•¿R±¿Rƒ¿RŸ¿S¿S/¿S3¿S4¿S@¿S¿SÄ¿S¢¿SÁ¿T¿T¿T ¿T!¿TJ¿Tb¿Tê¿T¨¿TË¿U¿U)¿U9¿UA¿UÉ¿Uò¿U±¿U÷¿Uﬁ¿U‚¿U„¿VC¿VE    Ä•  Ä∫  Ä‘  ÄÎÅ ÅÅ& Å*  ÅT  Å}  Å¶  Åœ  Å‰  Å˚  Ç  Ç3  ÇL  Çb  Çy  Çî  Ç∫  Ç–    éÉ¿ Dì3Ñ†/// An abstraction for an entry managed by a [Navigator].
///
/// This class defines an abstract interface between the navigator and the
/// "routes" that are pushed on and popped off the navigator. Most routes have
/// visual affordances, which they place in the navigators [Overlay] using one
/// or more [OverlayEntry] objects.
///
/// See [Navigator] for more explanation of how to use a [Route] with
/// navigation, including code examples.
///
/// See [MaterialPageRoute] for a route that replaces the entire screen with a
/// platform-adaptive transition.
///
/// A route can belong to a page if the [settings] are a subclass of [Page]. A
/// page-based route, as opposed to a pageless route, is created from
/// [Page.createRoute] during [Navigator.pages] updates. The page associated
/// with this route may change during the lifetime of the route. If the
/// [Navigator] updates the page of this route, it calls [changedInternalState]
/// to notify the route that the page has been updated.
///
/// The type argument `T` is the route's return type, as used by
/// [currentResult], [popped], and [didPop]. The type `void` may be used if the
/// route does not return a value.ì9ì9ì@Äÿ ì≈ì |/// Initialize the [Route].
///
/// If the [settings] are not provided, an empty [RouteSettings] object is
/// used instead.ìÕì›  ìÙìÍìˇìˆîîîîî}îç  óó+  öOö0 öFöSö[öZöTö\öaö]≤O3≤c ≤s≤|≤≤~≤}≤Ä≤Åî^îb//// The navigator that the route is in, if any.   îúÇ~óÇ;/// The settings for this route.
///
/// See [RouteSettings] for details.
///
/// The settings can change during the route's lifetime. If the settings
/// change, the route's overlays will be marked dirty (see
/// [changedInternalState]).
///
/// If the route is created from a [Page] in the [Navigator.pages] list, then
/// this will be a [Page] subclass, and it will be updated each time its
/// corresponding [Page] in the [Navigator.pages] has changed. Once the
/// [Route] is removed from the history, this value stops updating (and
/// remains with its last value).   ó9Ç◊ôÊÇw/// The restoration scope ID to be used for the [RestorationScope] surrounding
/// this route.
///
/// The restoration scope ID is null if restoration is currently disabled
/// for this route.
///
/// If the restoration scope ID changes (e.g. because restoration is enabled
/// or disabled) during the life of the route, the [ValueListenable] notifies
/// its listeners. As an example, the ID changes to null while the route is
/// transitioning off screen, which triggers a notification on this field. At
/// that point, the route is considered as no longer present for restoration
/// purposes and its state will not be restored.   õ€Å’ùáÅÄ/// The overlay entries of this route.
///
/// These are typically populated by [install]. The [Navigator] is in charge
/// of adding them to and removing them from the [Overlay].
///
/// There must be at least one entry in this list after [install] has been
/// invoked.
///
/// The [Navigator] will take care of keeping the entries together if the
/// route is moved in the history.   Øê]ØÃ0/// Whether calling [didPop] would return false.   ØÒÅ%± Ä˝/// When this route is popped (see [Navigator.pop]) if the result isn't
/// specified or if it's null, this value will be used instead.
///
/// This fallback is implemented by [didComplete]. This value is used if the
/// argument to that method is null.   ±Å2≤-Ä˘/// A future that completes when this route is popped off the navigator.
///
/// The future completes with the value given to [Navigator.pop], if any, or
/// else the value of [currentResult]. See [didComplete] for more discussion
/// on this topic.   ¿ I•ÅÚ¿ J*u/// Whether this route is the top-most route on the navigator.
///
/// If this is true, then [isActive] is also true.   ¿ KõÇN¿ L}Ä–/// Whether this route is the bottom-most active route on the navigator.
///
/// If [isFirst] and [isCurrent] are both true then this is the only route on
/// the navigator (and [isActive] will also be true).   ¿ MÌÅv¿ NKE/// Whether there is at least one active route underneath this route.  ¿ N5¿ N6¿ OgÉ¿ QÉÇ /// Whether this route is on the navigator.
///
/// If the route is not only active, but also the current route (the top-most
/// route), then [isCurrent] will also be true. If it is the first route (the
/// bottom-most route), then [isFirst] will also be true.
///
/// If a higher route is entirely opaque, then the route will be active but not
/// rendered. It is even possible for the route to be active but for the stateful
/// widgets within the route to not be instantiated. See [ModalRoute.maintainState].   ögÄΩöl  ö|öã   õreõw  õåõï   ù¥Åzü!Å=/// Called when the route is inserted into the navigator.
///
/// Uses this to populate [overlayEntries]. There must be at least one entry in
/// this list after [install] has been invoked. The [Navigator] will be in charge
/// to add them to the [Overlay] or remove them from it by calling
/// [OverlayEntry.remove].  û˛ûˇüüü2Çõ°Åù/// Called after [install] when the route is pushed onto the navigator.
///
/// The returned value resolves when the push transition is complete.
///
/// The [didAdd] method will be called instead of [didPush] when the route
/// immediately appears on screen without any push transition.
///
/// The [didChangeNext] and [didChangePrevious] methods are typically called
/// immediately after this method is called.  †‚†„†Ô†°—á∂£FÅC/// Called after [install] when the route is added to the navigator.
///
/// This method is called instead of [didPush] when the route immediately
/// appears on screen without any push transition.
///
/// The [didChangeNext] and [didChangePrevious] methods are typically called
/// immediately after this method is called.  £#£$£0£1©ãÅ™ÅÄ /// Called after [install] when the route replaced another in the navigator.
///
/// The [didChangeNext] and [didChangePrevious] methods are typically called
/// immediately after this method is called. ™å™ù  ™^™_™k™l™≠ÑﬂØ,Ñ0/// Returns whether calling [Navigator.maybePop] when this [Route] is current
/// ([isCurrent]) should do anything.
///
/// [Navigator.maybePop] is usually used instead of [Navigator.pop] to handle
/// the system back button.
///
/// By default, if a [Route] is the first route in the history (i.e., if
/// [isFirst]), it reports that pops should be bubbled
/// ([RoutePopDisposition.bubble]). This behavior prevents the user from
/// popping the first route off the history and being stranded at a blank
/// screen; instead, the larger scope is popped (e.g. the application quits,
/// so that the user returns to the previous application).
///
/// In other cases, the default behavior is to accept the pop
/// ([RoutePopDisposition.pop]).
///
/// The third possible value is [RoutePopDisposition.doNotPop], which causes
/// the pop request to be ignored entirely.
///
/// See also:
///
///  * [Form], which provides a [Form.onWillPop] callback that uses this
///    mechanism.
///  * [WillPopScope], another widget that provides a way to intercept the
///    back button.   ≤áÑî∂⁄Ñ/// A request was made to pop this route. If the route can handle it
/// internally (e.g. because it has its own stack of internal state) then
/// return false, otherwise return true (by returning the value of calling
/// `super.didPop`). Returning false will prevent the default behavior of
/// [NavigatorState.pop].
///
/// When this function returns true, the navigator removes this route from
/// the history but does not yet call [dispose]. Instead, it is the route's
/// responsibility to call [NavigatorState.finalizeRoute], which will in turn
/// call [dispose] on the route. This sequence lets the route perform an
/// exit animation (or some other visual effect) after being popped but prior
/// to being disposed.
///
/// This method should call [didComplete] to resolve the [popped] future (and
/// this is all that the default implementation does); routes should not wait
/// for their exit animation to complete before doing so.
///
/// See [popped], [didComplete], and [currentResult] for a discussion of the
/// `result` argument. ∂·	∂Â  ∂ƒ∂≈∑É»∫ñÉ5/// The route was popped or is otherwise being removed somewhat gracefully.
///
/// This is called by [didPop] and in response to
/// [NavigatorState.pushReplacement]. If [didPop] was not called, then the
/// [NavigatorState.finalizeRoute] method must be called immediately, and no exit
/// animation will run.
///
/// The [popped] future is completed by this method. The `result` argument
/// specifies the value that this future is completed with, unless it is null,
/// in which case [currentResult] is used instead.
///
/// This should be called before the pop animation, if any, takes place,
/// though in some cases the animation may be driven by the user before the
/// route is committed to being popped; this can in particular happen with the
/// iOS-style back gesture. See [NavigatorState.didStartUserGesture]. ∫¢	∫¶  ∫s∫t∫Ä∫Å∫ÎÅª’Äº/// The given route, which was above this one, has been popped off the
/// navigator.
///
/// This route is now the current route ([isCurrent] is now true), and there
/// is no next route. ª‡ª  ª≤ª≥ªøª¿ºÇΩÍÅ≥/// This route's next route has changed to the given new route.
///
/// This is called on a route whenever the next route changes for any reason,
/// so long as it is in the history, including when a route is first added to
/// a [Navigator] (e.g. by [Navigator.push]), except for cases when
/// [didPopNext] would be called.
///
/// The `nextRoute` argument will be null if there's no new next route (i.e.
/// if [isCurrent] is true). Ω¯æ	  Ω«Ω»Ω‘Ω’æÇ ¿ @Å∂/// This route's previous route has changed to the given new route.
///
/// This is called on a route whenever the previous route changes for any
/// reason, so long as it is in the history, except for immediately after the
/// route itself has been pushed (in which case [didPush] or [didReplace] will
/// be called instead).
///
/// The `previousRoute` argument will be null if there's no previous route
/// (i.e. if [isFirst] is true). ¿ @¿ @)  ø„ø‰øøÒ¿ @>ÇO¿ BsÅ˚/// Called whenever the internal state of the route has changed.
///
/// This should be called whenever [willHandlePopInternally], [didPop],
/// [ModalRoute.offstage], or other internal state of the route changes value.
/// It is used by [ModalRoute], for example, to report the new information via
/// its inherited widget to any children of the route.
///
/// See also:
///
///  * [changedExternalState], which is called when the [Navigator] has
///    updated in some manner that might affect the routes.  ¿ BP¿ BQ¿ B]¿ B^¿ BëÑµ¿ G,ÑI/// Called whenever the [Navigator] has updated in some manner that might
/// affect routes, to indicate that the route may wish to rebuild as well.
///
/// This is called by the [Navigator] whenever the
/// [NavigatorState]'s [State.widget] changes (as in [State.didUpdateWidget]),
/// for example because the [MaterialApp] has been rebuilt. This
/// ensures that routes that directly refer to the state of the
/// widget that built the [MaterialApp] will be notified when that
/// widget rebuilds, since it would otherwise be difficult to notify
/// the routes that state they depend on may have changed.
///
/// It is also called whenever the [Navigator]'s dependencies change
/// (as in [State.didChangeDependencies]). This allows routes to use the
/// [Navigator]'s context ([NavigatorState.context]), for example in
/// [ModalRoute.barrierColor], and update accordingly.
///
/// The [ModalRoute] subclass overrides this to force the barrier
/// overlay to rebuild.
///
/// See also:
///
///  * [changedInternalState], the equivalent but for changes to the internal
///    state of the route.  ¿ G	¿ G
¿ G¿ G¿ GJÇW¿ I{Å˜/// Discards any resources used by the object.
///
/// This method should not remove its [overlayEntries] from the [Overlay]. The
/// object's owner is in charge of doing that.
///
/// After this is called, the object is not in a usable state and should be
/// discarded.
///
/// This method should only be called by the object's owner; typically the
/// [Navigator] owns a route and so will call this method when the route is
/// removed, after which the route is no longer referenced by the navigator.  ¿ IX¿ IY¿ Ii¿ Ij ¿ RâÉm¿ R”8/// Data that might be useful in constructing a [Route]. ¿ RÂk ¿ S¿ S%*/// Creates data used to construct routes.¿ S,	¿ S2  ¿ S;¿ SA   ¿ Tp¿ TÎW/// The name of the route (e.g., "/settings").
///
/// If null, the route is anonymous. ¿ TÙÄó¿ UÇy/// The arguments passed to this route.
///
/// May be used when building the route, e.g. in [Navigator.onGenerateRoute].  ¿ STÅ'¿ Sœh/// Creates a copy of this route settings object with the given fields
/// replaced with the new values. ¿ Sﬁ¿ SÁ  ¿ S¿ S˘   ¿ Uêd¿ U£   ¿ Uê¿ Uë¿ R¬¿ R√¿ U¯Üè¿ W@Å8/// Describes the configuration of a [Route].
///
/// The type argument `T` is the corresponding [Route]'s return type, as
/// used by [Route.currentResult], [Route.popped], and [Route.didPop].
///
/// See also:
///
///  * [Navigator.pages], which accepts a list of [Page]s and updates its routes
///    history.¿ WE¿ WE¿ WbÄ˝ ¿ W⁄¿ Wﬁk/// Creates a page and initializes [key] for subclasses.
///
/// The [arguments] argument must not be null.¿ WÂ¿ WÎ  ¿ WÛ¿ W¸  ¿ X¿ X  ¿ X¿ X"  	¿ X7¿ X<¿ X]¿ XA¿ X=¿ XC¿ XR¿ XI¿ XT¿ XcÄÇ¿ X‚h/// The key associated with this page.
///
/// This key will be used for comparing pages in [canUpdate]. ¿ XÍÅM¿ Z*Å/// Restoration ID to save and restore the state of the [Route] configured by
/// this page.
///
/// If no restoration ID is provided, the [Route] will not restore its state.
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter.  ¿ Z<Å¿ Z·Äó/// Whether this page can be updated with the [other] page.
///
/// Two pages are consider updatable if they have same the [runtimeType] and
/// [key]. ¿ ZÎ¿ Z˙   ¿ [UÄÀ¿ [˛Äé/// Creates the [Route] that corresponds to this page.
///
/// The created [Route] must have its [Route.settings] property set to this [Page]. ¿ \
¿ \  ¿ [Í¿ [Î¿ \$a¿ \7   ¿ \$¿ \% ¿ \âÜ‰¿ \Õ=/// An interface for observing the behavior of a [Navigator].  ¿ ]N¿ ]^  ¿ \„h¿ ]39/// The navigator that the observer is observing, if any.   ¿ ]mÄ›¿ ^
Äè/// The [Navigator] pushed `route`.
///
/// The route immediately below that one, and thus the previously active
/// route, is `previousRoute`. ¿ ^¿ ^"  ¿ ^(¿ ^9   ¿ ^NÄ◊¿ ^ÊÄä/// The [Navigator] popped `route`.
///
/// The route immediately below that one, and thus the newly active
/// route, is `previousRoute`. ¿ ^Ì¿ ^˝  ¿ _¿ _   ¿ _)Å¿ `◊Åñ/// The [Navigator] removed `route`.
///
/// If only one route is being removed, then the route immediately below
/// that one, if any, is `previousRoute`.
///
/// If multiple routes are being removed, then the route below the
/// bottommost route being removed, if any, is `previousRoute`, and this
/// method will be called once for each removed route, from the topmost route
/// to the bottommost route. ¿ `·¿ `Ò  ¿ `˜¿ a   ¿ aÄÜ¿ a]8/// The [Navigator] replaced `oldRoute` with `newRoute`. ¿ aj¿ a{  ¿ aÑ¿ aï   ¿ aßÅ$¿ bÄ /// The [Navigator]'s routes are being moved by a user gesture.
///
/// For example, this is called when an iOS back gesture starts, and is used
/// to disabled hero animations during such interactions. ¿ bì¿ b£  ¿ b©¿ b∫   ¿ bœÄú¿ cSx/// User gesture is no longer controlling the [Navigator].
///
/// Paired with an earlier call to [didStartUserGesture].    ¿ coÜ_¿ e»ÇR/// An inherited widget to host a hero controller.
///
/// The hosted hero controller will be picked up by the navigator in the
/// [child] subtree. Once a navigator picks up this controller, the navigator
/// will bar any navigator below its subtree from receiving this controller.
///
/// The hero controller inside the [HeroControllerScope] can only subscribe to
/// one navigator at a time. An assertion will be thrown if the hero controller
/// subscribes to more than one navigators. This can happen when there are
/// multiple navigators under the same [HeroControllerScope] in parallel. ¿ e¯ÄÒ ¿ f5¿ fH4/// Creates a widget to host the input [controller].¿ fO¿ fU  ¿ f]'¿ f{  ¿ fä¿ fõ  ¿ f®¿ fÆ¿ f¡¿ f∫¿ fØ¿ fΩ¿ fÀ¿ f–¿ fÁ¿ f‘¿ f—¿ f÷¿ f‡¿ f€¿ f‚¿ fÌÄÁ¿ gd¿ ge¿ giY/// Creates a widget to prevent the subtree from receiving the hero controller
/// above.¿ gp¿ gv  ¿ g~¿ gè  ¿ gß¿ gú¿ g©¿ g∂¿ gª¿ g“¿ gø¿ gº¿ g¡¿ gÀ¿ g∆¿ gÕ¿ gÿ]¿ h+:/// The hero controller that is hosted inside this widget.  ¿ h:Å¿ h≠W/// Retrieves the [HeroController] from the closest [HeroControllerScope]
/// ancestor. ¿ h∞¿ hæ   ¿ iUw¿ if  ¿ iy¿ ié  ¿ iU¿ iV ¿ i–âÕ¿ jxÄò/// A [Route] wrapper interface that can be staged for [TransitionDelegate] to
/// decide how its underlying [Route] should transition on or off screen.   ¿ jí>¿ j "/// Retrieves the wrapped [Route].   ¿ j‘Å<¿ kÛÅ/// Whether this route is waiting for the decision on how to enter the screen.
///
/// If this property is true, this route requires an explicit decision on how
/// to transition into the screen. Such a decision should be made in the
/// [TransitionDelegate.resolve].   ¿ lÅ9¿ m1Å	/// Whether this route is waiting for the decision on how to exit the screen.
///
/// If this property is true, this route requires an explicit decision on how
/// to transition off the screen. Such a decision should be made in the
/// [TransitionDelegate.resolve].   ¿ mQÅQ¿ nîÅ3/// Marks the [route] to be pushed with transition.
///
/// During [TransitionDelegate.resolve], this can be called on an entering
/// route (where [RouteTransitionRecord.isWaitingForEnteringDecision] is true) in indicate that the
/// route should be pushed onto the [Navigator] with an animated transition.   ¿ n¶ÅT¿ oÌÅ7/// Marks the [route] to be added without transition.
///
/// During [TransitionDelegate.resolve], this can be called on an entering
/// route (where [RouteTransitionRecord.isWaitingForEnteringDecision] is true) in indicate that the
/// route should be added onto the [Navigator] without an animated transition.   ¿ o˛Å¿ p˙ÄÏ/// Marks the [route] to be popped with transition.
///
/// During [TransitionDelegate.resolve], this can be called on an exiting
/// route to indicate that the route should be popped off the [Navigator] with
/// an animated transition. ¿ q¿ q   ¿ qÅP¿ rIÅ/// Marks the [route] to be completed without transition.
///
/// During [TransitionDelegate.resolve], this can be called on an exiting
/// route to indicate that the route should be completed with the provided
/// result and removed from the [Navigator] without an animated transition. ¿ rZ¿ rc   ¿ roÅ,¿ sãÅ/// Marks the [route] to be removed without transition.
///
/// During [TransitionDelegate.resolve], this can be called on an exiting
/// route to indicate that the route should be removed from the [Navigator]
/// without completing and without an animated transition.    ¿ sü®5¿ |_à∞/// The delegate that decides how pages added and removed from [Navigator.pages]
/// transition in or out of the screen.
///
/// This abstract class implements the API to be called by [Navigator] when it
/// requires explicit decisions on how the routes transition on or off the screen.
///
/// To make route transition decisions, subclass must implement [resolve].
///
/// {@tool snippet}
/// The following example demonstrates how to implement a subclass that always
/// removes or adds routes without animated transitions and puts the removed
/// routes at the top of the list.
///
/// ```dart
/// class NoAnimationTransitionDelegate extends TransitionDelegate<void> {
///   @override
///   Iterable<RouteTransitionRecord> resolve({
///     required List<RouteTransitionRecord> newPageRouteHistory,
///     required Map<RouteTransitionRecord?, RouteTransitionRecord> locationToExitingPageRoute,
///     required Map<RouteTransitionRecord?, List<RouteTransitionRecord>> pageRouteToPagelessRoutes,
///   }) {
///     final List<RouteTransitionRecord> results = <RouteTransitionRecord>[];
///
///     for (final RouteTransitionRecord pageRoute in newPageRouteHistory) {
///       if (pageRoute.isWaitingForEnteringDecision) {
///         pageRoute.markForAdd();
///       }
///       results.add(pageRoute);
///
///     }
///     for (final RouteTransitionRecord exitingPageRoute in locationToExitingPageRoute.values) {
///       if (exitingPageRoute.isWaitingForExitingDecision) {
///        exitingPageRoute.markForRemove();
///        final List<RouteTransitionRecord>? pagelessRoutes = pageRouteToPagelessRoutes[exitingPageRoute];
///        if (pagelessRoutes != null) {
///          for (final RouteTransitionRecord pagelessRoute in pagelessRoutes) {
///             pagelessRoute.markForRemove();
///           }
///        }
///       }
///       results.add(exitingPageRoute);
///
///     }
///     return results;
///   }
/// }
///
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [Navigator.transitionDelegate], which uses this class to make route
///    transition decisions.
///  * [DefaultTransitionDelegate], which implements the default way to decide
///    how routes transition in or out of the screen.¿ |r¿ |r¿ |ye ¿ |…¿ |€G/// Creates a delegate and enables subclass to create a constant class.    ¿ |‚ç;¿ }  ¿ }8¿ }:  ¿ }RV¿ }è  ¿ }Æ[¿ }Ò   ¿ ä!ë±¿ ö»èÓ/// A method that will be called by the [Navigator] to decide how routes
/// transition in or out of the screen when [Navigator.pages] is updated.
///
/// The `newPageRouteHistory` list contains all page-based routes in the order
/// that will be on the [Navigator]'s history stack after this update
/// completes. If a route in `newPageRouteHistory` has its
/// [RouteTransitionRecord.isWaitingForEnteringDecision] set to true, this
/// route requires explicit decision on how it should transition onto the
/// Navigator. To make a decision, call [RouteTransitionRecord.markForPush] or
/// [RouteTransitionRecord.markForAdd].
///
/// The `locationToExitingPageRoute` contains the pages-based routes that
/// are removed from the routes history after page update. This map records
/// page-based routes to be removed with the location of the route in the
/// original route history before the update. The keys are the locations
/// represented by the page-based routes that are directly below the removed
/// routes, and the value are the page-based routes to be removed. The
/// location is null if the route to be removed is the bottom most route. If
/// a route in `locationToExitingPageRoute` has its
/// [RouteTransitionRecord.isWaitingForExitingDecision] set to true, this
/// route requires explicit decision on how it should transition off the
/// Navigator. To make a decision for a removed route, call
/// [RouteTransitionRecord.markForPop],
/// [RouteTransitionRecord.markForComplete] or
/// [RouteTransitionRecord.markForRemove]. It is possible that decisions are
/// not required for routes in the `locationToExitingPageRoute`. This can
/// happen if the routes have already been popped in earlier page updates and
/// are still waiting for popping animations to finish. In such case, those
/// routes are still included in the `locationToExitingPageRoute` with their
/// [RouteTransitionRecord.isWaitingForExitingDecision] set to false and no
/// decisions are required.
///
/// The `pageRouteToPagelessRoutes` records the page-based routes and their
/// associated pageless routes. If a page-based route is waiting for exiting
/// decision, its associated pageless routes also require explicit decisions
/// on how to transition off the screen.
///
/// Once all the decisions have been made, this method must merge the removed
/// routes (whether or not they require decisions) and the
/// `newPageRouteHistory` and return the merged result. The order in the
/// result will be the order the [Navigator] uses for updating the route
/// history. The return list must preserve the same order of routes in
/// `newPageRouteHistory`. The removed routes, however, can be inserted into
/// the return list freely as long as all of them are included.
///
/// For example, consider the following case.
///
/// `newPageRouteHistory = [A, B, C]`
///
/// `locationToExitingPageRoute = {A -> D, C -> E}`
///
/// The following outputs are valid.
///
/// `result = [A, B ,C ,D ,E]` is valid.
/// `result = [D, A, B ,C ,E]` is also valid because exiting route can be
/// inserted in any place.
///
/// The following outputs are invalid.
///
/// `result = [B, A, C ,D ,E]` is invalid because B must be after A.
/// `result = [A, B, C ,E]` is invalid because results must include D.
///
/// See also:
///
///  * [RouteTransitionRecord.markForPush], which makes route enter the screen
///    with an animated transition.
///  * [RouteTransitionRecord.markForAdd], which makes route enter the screen
///    without an animated transition.
///  * [RouteTransitionRecord.markForPop], which makes route exit the screen
///    with an animated transition.
///  * [RouteTransitionRecord.markForRemove], which does not complete the
///    route and makes it exit the screen without an animated transition.
///  * [RouteTransitionRecord.markForComplete], which completes the route and
///    makes it exit the screen without an animated transition.
///  * [DefaultTransitionDelegate.resolve], which implements the default way
///    to decide how routes transition in or out of the screen. ¿ ö÷8¿ ö¸  ¿ õV¿ õQ  ¿ õp[¿ õ≥    ¿ õ÷éN¿ ùÂÇ/// The default implementation of [TransitionDelegate] that the [Navigator] will
/// use if its [Navigator.transitionDelegate] is not specified.
///
/// This transition delegate follows two rules. Firstly, all the entering routes
/// are placed on top of the exiting routes if they are at the same location.
/// Secondly, the top most route will always transition with an animated transition.
/// All the other routes below will either be completed with
/// [Route.currentResult] or added without an animated transition.¿ ùˇ¿ ùˇ¿ û$Y ¿ ûW¿ ûp*/// Creates a default transition delegate. ¿ ûu¿ ûz¿ û{  ¿ ûÅã°¿ û≠  ¿ ûª8¿ û·  ¿ û˘V¿ ü6  ¿ üU[¿ üò  ¿ ûÅ¿ ûÇ ¿ ™&¿Ï¿ ⁄÷∞©/// A widget that manages a set of child widgets with a stack discipline.
///
/// Many apps have a navigator near the top of their widget hierarchy in order
/// to display their logical history using an [Overlay] with the most recently
/// visited pages visually on top of the older pages. Using this pattern lets
/// the navigator visually transition from one page to another by moving the widgets
/// around in the overlay. Similarly, the navigator can be used to show a dialog
/// by positioning the dialog widget above the current page.
///
/// ## Using the Navigator API
///
/// Mobile apps typically reveal their contents via full-screen elements
/// called "screens" or "pages". In Flutter these elements are called
/// routes and they're managed by a [Navigator] widget. The navigator
/// manages a stack of [Route] objects and provides two ways for managing
/// the stack, the declarative API [Navigator.pages] or imperative API
/// [Navigator.push] and [Navigator.pop].
///
/// When your user interface fits this paradigm of a stack, where the user
/// should be able to _navigate_ back to an earlier element in the stack,
/// the use of routes and the Navigator is appropriate. On certain platforms,
/// such as Android, the system UI will provide a back button (outside the
/// bounds of your application) that will allow the user to navigate back
/// to earlier routes in your application's stack. On platforms that don't
/// have this build-in navigation mechanism, the use of an [AppBar] (typically
/// used in the [Scaffold.appBar] property) can automatically add a back
/// button for user navigation.
///
/// ## Using the Pages API
///
/// The [Navigator] will convert its [Navigator.pages] into a stack of [Route]s
/// if it is provided. A change in [Navigator.pages] will trigger an update to
/// the stack of [Route]s. The [Navigator] will update its routes to match the
/// new configuration of its [Navigator.pages]. To use this API, one can create
/// a [Page] subclass and defines a list of [Page]s for [Navigator.pages]. A
/// [Navigator.onPopPage] callback is also required to properly clean up the
/// input pages in case of a pop.
///
/// By Default, the [Navigator] will use [DefaultTransitionDelegate] to decide
/// how routes transition in or out of the screen. To customize it, define a
/// [TransitionDelegate] subclass and provide it to the
/// [Navigator.transitionDelegate].
///
/// ### Displaying a full-screen route
///
/// Although you can create a navigator directly, it's most common to use the
/// navigator created by the `Router` which itself is created and configured by
/// a [WidgetsApp] or a [MaterialApp] widget. You can refer to that navigator
/// with [Navigator.of].
///
/// A [MaterialApp] is the simplest way to set things up. The [MaterialApp]'s
/// home becomes the route at the bottom of the [Navigator]'s stack. It is what
/// you see when the app is launched.
///
/// ```dart
/// void main() {
///   runApp(MaterialApp(home: MyAppHome()));
/// }
/// ```
///
/// To push a new route on the stack you can create an instance of
/// [MaterialPageRoute] with a builder function that creates whatever you
/// want to appear on the screen. For example:
///
/// ```dart
/// Navigator.push(context, MaterialPageRoute<void>(
///   builder: (BuildContext context) {
///     return Scaffold(
///       appBar: AppBar(title: Text('My Page')),
///       body: Center(
///         child: TextButton(
///           child: Text('POP'),
///           onPressed: () {
///             Navigator.pop(context);
///           },
///         ),
///       ),
///     );
///   },
/// ));
/// ```
///
/// The route defines its widget with a builder function instead of a
/// child widget because it will be built and rebuilt in different
/// contexts depending on when it's pushed and popped.
///
/// As you can see, the new route can be popped, revealing the app's home
/// page, with the Navigator's pop method:
///
/// ```dart
/// Navigator.pop(context);
/// ```
///
/// It usually isn't necessary to provide a widget that pops the Navigator
/// in a route with a [Scaffold] because the Scaffold automatically adds a
/// 'back' button to its AppBar. Pressing the back button causes
/// [Navigator.pop] to be called. On Android, pressing the system back
/// button does the same thing.
///
/// ### Using named navigator routes
///
/// Mobile apps often manage a large number of routes and it's often
/// easiest to refer to them by name. Route names, by convention,
/// use a path-like structure (for example, '/a/b/c').
/// The app's home page route is named '/' by default.
///
/// The [MaterialApp] can be created
/// with a [Map<String, WidgetBuilder>] which maps from a route's name to
/// a builder function that will create it. The [MaterialApp] uses this
/// map to create a value for its navigator's [onGenerateRoute] callback.
///
/// ```dart
/// void main() {
///   runApp(MaterialApp(
///     home: MyAppHome(), // becomes the route named '/'
///     routes: <String, WidgetBuilder> {
///       '/a': (BuildContext context) => MyPage(title: 'page A'),
///       '/b': (BuildContext context) => MyPage(title: 'page B'),
///       '/c': (BuildContext context) => MyPage(title: 'page C'),
///     },
///   ));
/// }
/// ```
///
/// To show a route by name:
///
/// ```dart
/// Navigator.pushNamed(context, '/b');
/// ```
///
/// ### Routes can return a value
///
/// When a route is pushed to ask the user for a value, the value can be
/// returned via the [pop] method's result parameter.
///
/// Methods that push a route return a [Future]. The Future resolves when the
/// route is popped and the [Future]'s value is the [pop] method's `result`
/// parameter.
///
/// For example if we wanted to ask the user to press 'OK' to confirm an
/// operation we could `await` the result of [Navigator.push]:
///
/// ```dart
/// bool value = await Navigator.push(context, MaterialPageRoute<bool>(
///   builder: (BuildContext context) {
///     return Center(
///       child: GestureDetector(
///         child: Text('OK'),
///         onTap: () { Navigator.pop(context, true); }
///       ),
///     );
///   }
/// ));
/// ```
///
/// If the user presses 'OK' then value will be true. If the user backs
/// out of the route, for example by pressing the Scaffold's back button,
/// the value will be null.
///
/// When a route is used to return a value, the route's type parameter must
/// match the type of [pop]'s result. That's why we've used
/// `MaterialPageRoute<bool>` instead of `MaterialPageRoute<void>` or just
/// `MaterialPageRoute`. (If you prefer to not specify the types, though, that's
/// fine too.)
///
/// ### Popup routes
///
/// Routes don't have to obscure the entire screen. [PopupRoute]s cover the
/// screen with a [ModalRoute.barrierColor] that can be only partially opaque to
/// allow the current screen to show through. Popup routes are "modal" because
/// they block input to the widgets below.
///
/// There are functions which create and show popup routes. For
/// example: [showDialog], [showMenu], and [showModalBottomSheet]. These
/// functions return their pushed route's Future as described above.
/// Callers can await the returned value to take an action when the
/// route is popped, or to discover the route's value.
///
/// There are also widgets which create popup routes, like [PopupMenuButton] and
/// [DropdownButton]. These widgets create internal subclasses of PopupRoute
/// and use the Navigator's push and pop methods to show and dismiss them.
///
/// ### Custom routes
///
/// You can create your own subclass of one of the widget library route classes
/// like [PopupRoute], [ModalRoute], or [PageRoute], to control the animated
/// transition employed to show the route, the color and behavior of the route's
/// modal barrier, and other aspects of the route.
///
/// The [PageRouteBuilder] class makes it possible to define a custom route
/// in terms of callbacks. Here's an example that rotates and fades its child
/// when the route appears or disappears. This route does not obscure the entire
/// screen because it specifies `opaque: false`, just as a popup route does.
///
/// ```dart
/// Navigator.push(context, PageRouteBuilder(
///   opaque: false,
///   pageBuilder: (BuildContext context, _, __) {
///     return Center(child: Text('My PageRoute'));
///   },
///   transitionsBuilder: (___, Animation<double> animation, ____, Widget child) {
///     return FadeTransition(
///       opacity: animation,
///       child: RotationTransition(
///         turns: Tween<double>(begin: 0.5, end: 1.0).animate(animation),
///         child: child,
///       ),
///     );
///   }
/// ));
/// ```
///
/// The page route is built in two parts, the "page" and the
/// "transitions". The page becomes a descendant of the child passed to
/// the `transitionsBuilder` function. Typically the page is only built once,
/// because it doesn't depend on its animation parameters (elided with `_`
/// and `__` in this example). The transition is built on every frame
/// for its duration.
///
/// ### Nesting Navigators
///
/// An app can use more than one [Navigator]. Nesting one [Navigator] below
/// another [Navigator] can be used to create an "inner journey" such as tabbed
/// navigation, user registration, store checkout, or other independent journeys
/// that represent a subsection of your overall application.
///
/// #### Example
///
/// It is standard practice for iOS apps to use tabbed navigation where each
/// tab maintains its own navigation history. Therefore, each tab has its own
/// [Navigator], creating a kind of "parallel navigation."
///
/// In addition to the parallel navigation of the tabs, it is still possible to
/// launch full-screen pages that completely cover the tabs. For example: an
/// on-boarding flow, or an alert dialog. Therefore, there must exist a "root"
/// [Navigator] that sits above the tab navigation. As a result, each of the
/// tab's [Navigator]s are actually nested [Navigator]s sitting below a single
/// root [Navigator].
///
/// In practice, the nested [Navigator]s for tabbed navigation sit in the
/// [WidgetsApp] and [CupertinoTabView] widgets and do not need to be explicitly
/// created or managed.
///
/// {@tool sample}
/// The following example demonstrates how a nested [Navigator] can be used to
/// present a standalone user registration journey.
///
/// Even though this example uses two [Navigator]s to demonstrate nested
/// [Navigator]s, a similar result is possible using only a single [Navigator].
///
/// Run this example with `flutter run --route=/signup` to start it with
/// the signup flow instead of on the home page.
///
/// ** See code in examples/api/lib/widgets/navigator/navigator.0.dart **
/// {@end-tool}
///
/// [Navigator.of] operates on the nearest ancestor [Navigator] from the given
/// [BuildContext]. Be sure to provide a [BuildContext] below the intended
/// [Navigator], especially in large `build` methods where nested [Navigator]s
/// are created. The [Builder] widget can be used to access a [BuildContext] at
/// a desired location in the widget subtree.
///
/// ## State Restoration
///
/// If provided with a [restorationScopeId] and when surrounded by a valid
/// [RestorationScope] the [Navigator] will restore its state by recreating
/// the current history stack of [Route]s during state restoration and by
/// restoring the internal state of those [Route]s. However, not all [Route]s
/// on the stack can be restored:
///
///  * [Page]-based routes restore their state if [Page.restorationId] is
///    provided.
///  * [Route]s added with the classic imperative API ([push], [pushNamed], and
///    friends) can never restore their state.
///  * A [Route] added with the restorable imperative API ([restorablePush],
///    [restorablePushNamed], and all other imperative methods with "restorable"
///    in their name) restores its state if all routes below it up to and
///    including the first [Page]-based route below it are restored. If there
///    is no [Page]-based route below it, it only restores its state if all
///    routes below it restore theirs.
///
/// If a [Route] is deemed restorable, the [Navigator] will set its
/// [Route.restorationScopeId] to a non-null value. Routes can use that ID to
/// store and restore their own state. As an example, the [ModalRoute] will
/// use this ID to create a [RestorationScope] for its content widgets. ¿ ⁄˚É· ¿ ‹&¿ ‹/Å/// Creates a widget that maintains a stack-based history of child widgets.
///
/// The [onGenerateRoute], [pages], [onGenerateInitialRoutes],
/// [transitionDelegate], [observers]  arguments must not be null.
///
/// If the [pages] is not empty, the [onPopPage] must not be null.¿ ‹6¿ ‹<  ¿ ‹D$¿ ‹J  ¿ ‹n¿ ‹t  ¿ ‹Ç¿ ‹à  ¿ ‹ôE¿ ‹ü  ¿ ‹‰¿ ‹Í  ¿ ‹˛¿ ›  ¿ ›D¿ ›  ¿ ›a'¿ ›g  ¿ ›é,¿ ›î  ¿ ›¿¿ ›∆  ¿ ›ﬁ¿ ›‰  ?¿ ‹Q¿ ‹f¿ ‹g¿ ‹W¿ ‹e¿ ‹X¿ ‹\¿ ‹d¿ ‹]¿ ‹∏¿ ‹¡¿ ‹¬¿ ›1¿ ›7¿ ›P¿ ›X¿ ›Q¿ ›Y¿ ›Z¿ ›É¿ ›ü¿ ›∏¿ ›π¿ ›•¿ ›∑¿ ›¶¿ ›‘¿ ›˛¿ ﬁ¿ ﬁ¿ ﬁ¿ ﬁ¿ ﬁ¿ ﬁ¿ ﬁ"¿ ﬁB¿ ﬁ;¿ ﬁ#¿ ﬁ>¿ ﬁL¿ ﬁR¿ ﬁm¿ ﬁf¿ ﬁS¿ ﬁi¿ ﬁw¿ ﬁ}¿ ﬁè¿ ﬁà¿ ﬁ~¿ ﬁã¿ ﬁô¿ ﬁü¿ ﬁ¬¿ ﬁª¿ ﬁ†¿ ﬁæ¿ ﬁÃ¿ ﬁ—¿ ﬁ⁄¿ ﬁ’¿ ﬁ“¿ ﬁ◊¿ ﬁ‡Ü"¿ ‰˝Ö /// The list of pages with which to populate the history.
///
/// Pages are turned into routes using [Page.createRoute] in a manner
/// analogous to how [Widget]s are turned into [Element]s (and [State]s or
/// [RenderObject]s) using [Widget.createElement] (and
/// [StatefulWidget.createState] or [RenderObjectWidget.createRenderObject]).
///
/// When this list is updated, the new list is compared to the previous
/// list and the set of routes is updated accordingly.
///
/// Some [Route]s do not correspond to [Page] objects, namely, those that are
/// added to the history using the [Navigator] API ([push] and friends). A
/// [Route] that does not correspond to a [Page] object is called a pageless
/// route and is tied to the [Route] that _does_ correspond to a [Page] object
/// that is below it in the history.
///
/// Pages that are added or removed may be animated as controlled by the
/// [transitionDelegate]. If a page is removed that had other pageless routes
/// pushed on top of it using [push] and friends, those pageless routes are
/// also removed with or without animation as determined by the
/// [transitionDelegate].
///
/// To use this API, an [onPopPage] callback must also be provided to properly
/// clean up this list if a page has been popped.
///
/// If [initialRoute] is non-null when the widget is first created, then
/// [onGenerateInitialRoutes] is used to generate routes that are above those
/// corresponding to [pages] in the initial history. ¿ ÂÇº¿ Á∫ÇÅ/// Called when [pop] is invoked but the current [Route] corresponds to a
/// [Page] found in the [pages] list.
///
/// The `result` argument is the value with which the route is to complete
/// (e.g. the value returned from a dialog).
///
/// This callback is responsible for calling [Route.didPop] and returning
/// whether this pop is successful.
///
/// The [Navigator] widget should be rebuilt with a [pages] list that does not
/// contain the [Page] for the given [Route]. The next time the [pages] list
/// is updated, if the [Page] corresponding to this [Route] is still present,
/// it will be interpreted as a new route to display. ¿ Á»Ä¸¿ Ë≤Äø/// The delegate used for deciding how routes transition in or off the screen
/// during the [pages] updates.
///
/// Defaults to [DefaultTransitionDelegate] if not specified, cannot be null. ¿ Ë…Å ¿ ÈΩÄŸ/// The name of the first route to show.
///
/// Defaults to [Navigator.defaultRouteName].
///
/// The value is interpreted according to [onGenerateInitialRoutes], which
/// defaults to [defaultGenerateInitialRoutes]. ¿ ÈŒa¿ Í ;/// Called to generate a route for a given [RouteSettings]. ¿ Í4ÅÆ¿ Î‘Å{/// Called when [onGenerateRoute] fails to generate a route.
///
/// This callback is typically used for error handling. For example, this
/// callback might always generate a "not found" page that describes the route
/// that wasn't found.
///
/// Unknown routes can arise either from errors in the app or from external
/// requests to push routes, such as from Android intents. ¿ ÎÁU¿ Ï3+/// A list of observers for this navigator. ¿ ÏAÖt¿ Ò£Ö/// Restoration ID to save and restore the state of the navigator, including
/// its history.
///
/// {@template flutter.widgets.navigator.restorationScopeId}
/// If a restoration ID is provided, the navigator will persist its internal
/// state (including the route history as well as the restorable state of the
/// routes) and restore it during state restoration.
///
/// If no restoration ID is provided, the route history stack will not be
/// restored and state restoration is disabled for the individual routes as
/// well.
///
/// The state is persisted in a [RestorationBucket] claimed from
/// the surrounding [RestorationScope] using the provided restoration ID.
/// Within that bucket, the [Navigator] also creates a new [RestorationScope]
/// for its children (the [Route]s).
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter.
///  * [RestorationMixin], which contains a runnable code sample showcasing
///    state restoration in Flutter.
///  * [Navigator], which explains under the heading "state restoration"
///    how and under what conditions the navigator restores its state.
///  * [Navigator.restorablePush], which includes an example showcasing how
///    to push a restorable route unto the navigator.
/// {@endtemplate} ¿ Ò∫Å ¿ Ú§Ä…/// The name for the default route of the application.
///
/// See also:
///
///  * [dart:ui.PlatformDispatcher.defaultRouteName], which reflects the route that the
///    application was started with.¿ Ú∑¿ ÚøÉ˙¿ ˆ¢É±/// Called when the widget is created to generate the initial list of [Route]
/// objects if [initialRoute] is not null.
///
/// Defaults to [defaultGenerateInitialRoutes].
///
/// The [NavigatorState] and [initialRoute] will be passed to the callback.
/// The callback must return a list of [Route] objects with which the history
/// will be primed.
///
/// When parsing the initialRoute, if there's any chance that the it may
/// contain complex characters, it's best to use the
/// [characters](https://pub.dev/packages/characters) API. This will ensure
/// that extended grapheme clusters and surrogate pairs are treated as single
/// characters by the code, the same way that they appear to the user. For
/// example, the string "üë®‚Äçüë©‚Äçüë¶" appears to the user as a single
/// character and `string.characters.length` intuitively returns 1. On the
/// other hand, `string.length` returns 8, and `string.runes.length` returns
/// 5! ¿ ˆæÑx¿ ˚Ñ(/// Whether this navigator should report route update message back to the
/// engine when the top-most route changes.
///
/// If the property is set to true, this navigator automatically sends the
/// route update message to the engine when it detects top-most route changes.
/// The messages are used by the web engine to update the browser URL bar.
///
/// If the property is set to true when the [Navigator] is first created,
/// single-entry history mode is requested using
/// [SystemNavigator.selectSingleEntryHistory]. This means this property
/// should not be used at the same time as [PlatformRouteInformationProvider]
/// is used with a [Router] (including when used with [MaterialApp.router],
/// for example).
///
/// If there are multiple navigators in the widget tree, at most one of them
/// can set this property to true (typically, the top-most one created from
/// the [WidgetsApp]). Otherwise, the web engine may receive multiple route
/// update messages from different navigators and fail to update the URL
/// bar.
///
/// Defaults to false. ¿ ˚;Äø¿ ˚ÓÄü/// Whether or not the navigator and it's new topmost route should request focus
/// when the new route is pushed onto the navigator.
///
/// Defaults to true.  ¿ ˚ˇå)¿gäá/// Push a named route onto the navigator that most tightly encloses the given
/// context.
///
/// {@template flutter.widgets.navigator.pushNamed}
/// The route name will be passed to the [Navigator.onGenerateRoute]
/// callback. The returned route will be pushed into the navigator.
///
/// The new route and the previous route (if any) are notified (see
/// [Route.didPush] and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didPush]).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// Returns a [Future] that completes to the `result` value passed to [pop]
/// when the pushed route is popped off the navigator.
///
/// The `T` type argument is the type of the return value of the route.
///
/// To use [pushNamed], an [Navigator.onGenerateRoute] callback must be
/// provided,
/// {@endtemplate}
///
/// {@template flutter.widgets.Navigator.pushNamed}
/// The provided `arguments` are passed to the pushed route via
/// [RouteSettings.arguments]. Any object can be passed as `arguments` (e.g. a
/// [String], [int], or an instance of a custom `MyRouteArguments` class).
/// Often, a [Map] is used to pass key-value pairs.
///
/// The `arguments` may be used in [Navigator.onGenerateRoute] or
/// [Navigator.onUnknownRoute] to construct the route.
/// {@endtemplate}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _didPushButton() {
///   Navigator.pushNamed(context, '/settings');
/// }
/// ```
/// {@end-tool}
///
/// {@tool snippet}
///
/// The following example shows how to pass additional `arguments` to the
/// route:
///
/// ```dart
/// void _showBerlinWeather() {
///   Navigator.pushNamed(
///     context,
///     '/weather',
///     arguments: <String, String>{
///       'city': 'Berlin',
///       'country': 'Germany',
///     },
///   );
/// }
/// ```
/// {@end-tool}
///
/// {@tool snippet}
///
/// The following example shows how to pass a custom Object to the route:
///
/// ```dart
/// class WeatherRouteArguments {
///   WeatherRouteArguments({ required this.city, required this.country });
///   final String city;
///   final String country;
///
///   bool get isGermanCapital {
///     return country == 'Germany' && city == 'Berlin';
///   }
/// }
///
/// void _showWeather() {
///   Navigator.pushNamed(
///     context,
///     '/weather',
///     arguments: WeatherRouteArguments(city: 'Berlin', country: 'Germany'),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushNamed], which pushes a route that can be restored
///    during state restoration.¿q¿q¿â¿ó  ¿£¿´  ¿ª¿ƒ  ¿A¿B¿,áƒ¿Üp/// Push a named route onto the navigator that most tightly encloses the given
/// context.
///
/// {@template flutter.widgets.navigator.restorablePushNamed}
/// Unlike [Route]s pushed via [pushNamed], [Route]s pushed with this method
/// are restored during state restoration according to the rules outlined
/// in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed}
///
/// {@template flutter.widgets.Navigator.restorablePushNamed.arguments}
/// The provided `arguments` are passed to the pushed route via
/// [RouteSettings.arguments]. Any object that is serializable via the
/// [StandardMessageCodec] can be passed as `arguments`. Often, a Map is used
/// to pass key-value pairs.
///
/// The arguments may be used in [Navigator.onGenerateRoute] or
/// [Navigator.onUnknownRoute] to construct the route.
/// {@endtemplate}
///
/// {@template flutter.widgets.Navigator.restorablePushNamed.returnValue}
/// The method returns an opaque ID for the pushed route that can be used by
/// the [RestorableRouteFuture] to gain access to the actual [Route] object
/// added to the navigator and its return value. You can ignore the return
/// value of this method, if you do not care about the route object or the
/// route's return value.
/// {@endtemplate}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _showParisWeather() {
///   Navigator.restorablePushNamed(
///     context,
///     '/weather',
///     arguments: <String, String>{
///       'city': 'Paris',
///       'country': 'France',
///     },
///   );
/// }
/// ```
/// {@end-tool}¿/¿/¿G¿U  ¿a¿i  ¿y¿Ç  ¿˘¿˙¿Ùäy¿^àŸ/// Replace the current route of the navigator that most tightly encloses the
/// given context by pushing the route named [routeName] and then disposing
/// the previous route once the new route has finished animating in.
///
/// {@template flutter.widgets.navigator.pushReplacementNamed}
/// If non-null, `result` will be used as the result of the route that is
/// removed; the future that had been returned from pushing that old route
/// will complete with `result`. Routes such as dialogs or popup menus
/// typically use this mechanism to return the value selected by the user to
/// the widget that created their route. The type of `result`, if provided,
/// must match the type argument of the class of the old route (`TO`).
///
/// The route name will be passed to the [Navigator.onGenerateRoute]
/// callback. The returned route will be pushed into the navigator.
///
/// The new route and the route below the removed route are notified (see
/// [Route.didPush] and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didReplace]). The removed route is notified once the
/// new route has finished animating (see [Route.didComplete]). The removed
/// route's exit animation is not run (see [popAndPushNamed] for a variant
/// that does animated the removed route).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// Returns a [Future] that completes to the `result` value passed to [pop]
/// when the pushed route is popped off the navigator.
///
/// The `T` type argument is the type of the return value of the new route,
/// and `TO` is the type of the return value of the old route.
///
/// To use [pushReplacementNamed], a [Navigator.onGenerateRoute] callback must
/// be provided.
/// {@endtemplate}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _switchToBrightness() {
///   Navigator.pushReplacementNamed(context, '/settings/brightness');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushReplacementNamed], which pushes a replacement route that
///    can be restored during state restoration.¿s¿s¿Ü¿Ü¿ü¿≠  ¿π¿¡  ¿—
¿÷  ¿·¿Í  ¿8¿9¿qÖ?¿çÉ≈/// Replace the current route of the navigator that most tightly encloses the
/// given context by pushing the route named [routeName] and then disposing
/// the previous route once the new route has finished animating in.
///
/// {@template flutter.widgets.navigator.restorablePushReplacementNamed}
/// Unlike [Route]s pushed via [pushReplacementNamed], [Route]s pushed with
/// this method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushReplacementNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _switchToAudioVolume() {
///   Navigator.restorablePushReplacementNamed(context, '/settings/volume');
/// }
/// ```
/// {@end-tool}¿¨¿¨¿ø¿ø¿ÿ¿Ê  ¿Ú¿˙  ¿

¿  ¿¿#  ¿k¿l¿¥à–¿'áD/// Pop the current route off the navigator that most tightly encloses the
/// given context and push a named route in its place.
///
/// {@template flutter.widgets.navigator.popAndPushNamed}
/// The popping of the previous route is handled as per [pop].
///
/// The new route's name will be passed to the [Navigator.onGenerateRoute]
/// callback. The returned route will be pushed into the navigator.
///
/// The new route, the old route, and the route below the old route (if any)
/// are all notified (see [Route.didPop], [Route.didComplete],
/// [Route.didPopNext], [Route.didPush], and [Route.didChangeNext]). If the
/// [Navigator] has any [Navigator.observers], they will be notified as well
/// (see [NavigatorObserver.didPop] and [NavigatorObserver.didPush]). The
/// animations for the pop and the push are performed simultaneously, so the
/// route below may be briefly visible even if both the old route and the new
/// route are opaque (see [TransitionRoute.opaque]).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// Returns a [Future] that completes to the `result` value passed to [pop]
/// when the pushed route is popped off the navigator.
///
/// The `T` type argument is the type of the return value of the new route,
/// and `TO` is the return value type of the old route.
///
/// To use [popAndPushNamed], a [Navigator.onGenerateRoute] callback must be provided.
///
/// {@endtemplate}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _selectAccessibility() {
///   Navigator.popAndPushNamed(context, '/settings/accessibility');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePopAndPushNamed], which pushes a new route that can be
///    restored during state restoration.¿'è¿'è¿'¢¿'¢¿'ª¿'…  ¿'’¿'›  ¿'Ì
¿'Ú  ¿'˝¿(  ¿'Y¿'Z¿(àÑΩ¿,,ÉO/// Pop the current route off the navigator that most tightly encloses the
/// given context and push a named route in its place.
///
/// {@template flutter.widgets.navigator.restorablePopAndPushNamed}
/// Unlike [Route]s pushed via [popAndPushNamed], [Route]s pushed with
/// this method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.popAndPushNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _selectNetwork() {
///   Navigator.restorablePopAndPushNamed(context, '/settings/network');
/// }
/// ```
/// {@end-tool}¿,F¿,F¿,Y¿,Y¿,r¿,Ä  ¿,å¿,î  ¿,§
¿,©  ¿,¥¿,Ω  ¿,
¿,¿-Iä¬¿6ˇâ/// Push the route with the given name onto the navigator that most tightly
/// encloses the given context, and then remove all the previous routes until
/// the `predicate` returns true.
///
/// {@template flutter.widgets.navigator.pushNamedAndRemoveUntil}
/// The predicate may be applied to the same route more than once if
/// [Route.willHandlePopInternally] is true.
///
/// To remove routes until a route with a certain name, use the
/// [RoutePredicate] returned from [ModalRoute.withName].
///
/// To remove all the routes below the pushed route, use a [RoutePredicate]
/// that always returns false (e.g. `(Route<dynamic> route) => false`).
///
/// The removed routes are removed without being completed, so this method
/// does not take a return value argument.
///
/// The new route's name (`routeName`) will be passed to the
/// [Navigator.onGenerateRoute] callback. The returned route will be pushed
/// into the navigator.
///
/// The new route and the route below the bottommost removed route (which
/// becomes the route below the new route) are notified (see [Route.didPush]
/// and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didPush] and [NavigatorObserver.didRemove]). The
/// removed routes are disposed, without being notified, once the new route
/// has finished animating. The futures that had been returned from pushing
/// those routes will not complete.
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// Returns a [Future] that completes to the `result` value passed to [pop]
/// when the pushed route is popped off the navigator.
///
/// The `T` type argument is the type of the return value of the new route.
///
/// To use [pushNamedAndRemoveUntil], an [Navigator.onGenerateRoute] callback
/// must be provided.
/// {@endtemplate}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _resetToCalendar() {
///   Navigator.pushNamedAndRemoveUntil(context, '/calendar', ModalRoute.withName('/'));
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushNamedAndRemoveUntil], which pushes a new route that can
///    be restored during state restoration.¿7¿7¿7/¿7=  ¿7I¿7Q  ¿7b¿7r  ¿7Ç¿7ã  ¿6Ÿ¿6⁄¿8Ö4¿<#ÉΩ/// Push the route with the given name onto the navigator that most tightly
/// encloses the given context, and then remove all the previous routes until
/// the `predicate` returns true.
///
/// {@template flutter.widgets.navigator.restorablePushNamedAndRemoveUntil}
/// Unlike [Route]s pushed via [pushNamedAndRemoveUntil], [Route]s pushed with
/// this method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamedAndRemoveUntil}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _resetToOverview() {
///   Navigator.restorablePushNamedAndRemoveUntil(context, '/overview', ModalRoute.withName('/'));
/// }
/// ```
/// {@end-tool}¿<E¿<E¿<]¿<k  ¿<w¿<  ¿<ê¿<†  ¿<∞¿<π  ¿<¿<¿=GÖE¿BÑa/// Push the given route onto the navigator that most tightly encloses the
/// given context.
///
/// {@template flutter.widgets.navigator.push}
/// The new route and the previous route (if any) are notified (see
/// [Route.didPush] and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didPush]).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// Returns a [Future] that completes to the `result` value passed to [pop]
/// when the pushed route is popped off the navigator.
///
/// The `T` type argument is the type of the return value of the route.
/// {@endtemplate}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _openMyPage() {
///   Navigator.push<void>(
///     context,
///     MaterialPageRoute<void>(
///       builder: (BuildContext context) => const MyPage(),
///     ),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePush], which pushes a route that can be restored during
///    state restoration.¿B ¿B ¿B3¿BA  ¿BI¿BS  ¿Aı¿Aˆ¿BêÜ¿G–Ñ„/// Push a new route onto the navigator that most tightly encloses the
/// given context.
///
/// {@template flutter.widgets.navigator.restorablePush}
/// Unlike [Route]s pushed via [push], [Route]s pushed with this method are
/// restored during state restoration according to the rules outlined in the
/// "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.push}
///
/// {@template flutter.widgets.Navigator.restorablePush}
/// The method takes a _static_ [RestorableRouteBuilder] as argument, which
/// must instantiate and return a new [Route] object that will be added to
/// the navigator. The provided `arguments` object is passed to the
/// `routeBuilder`. The navigator calls the static `routeBuilder` function
/// again during state restoration to re-create the route object.
///
/// Any object that is serializable via the [StandardMessageCodec] can be
/// passed as `arguments`. Often, a Map is used to pass key-value pairs.
/// {@endtemplate}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator.restorable_push.0.dart **
/// {@end-tool}¿Gﬂ¿Gﬂ¿GÚ¿H   ¿H&¿H#  ¿H1¿H:  ¿GÆ¿GØ¿H£à“¿P≠áÉ/// Replace the current route of the navigator that most tightly encloses the
/// given context by pushing the given route and then disposing the previous
/// route once the new route has finished animating in.
///
/// {@template flutter.widgets.navigator.pushReplacement}
/// If non-null, `result` will be used as the result of the route that is
/// removed; the future that had been returned from pushing that old route will
/// complete with `result`. Routes such as dialogs or popup menus typically
/// use this mechanism to return the value selected by the user to the widget
/// that created their route. The type of `result`, if provided, must match
/// the type argument of the class of the old route (`TO`).
///
/// The new route and the route below the removed route are notified (see
/// [Route.didPush] and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didReplace]). The removed route is notified once the
/// new route has finished animating (see [Route.didComplete]).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// Returns a [Future] that completes to the `result` value passed to [pop]
/// when the pushed route is popped off the navigator.
///
/// The `T` type argument is the type of the return value of the new route,
/// and `TO` is the type of the return value of the old route.
/// {@endtemplate}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _completeLogin() {
///   Navigator.pushReplacement<void, void>(
///     context,
///     MaterialPageRoute<void>(
///       builder: (BuildContext context) => const MyHomePage(),
///     ),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushReplacement], which pushes a replacement route that can
///    be restored during state restoration.¿PΩ¿PΩ¿P–¿P–¿P‰¿PÚ  ¿P˙¿Q  ¿Q
¿Q  ¿Pá¿Pà¿QyÑ€¿U6Ép/// Replace the current route of the navigator that most tightly encloses the
/// given context by pushing a new route and then disposing the previous
/// route once the new route has finished animating in.
///
/// {@template flutter.widgets.navigator.restorablePushReplacement}
/// Unlike [Route]s pushed via [pushReplacement], [Route]s pushed with this
/// method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushReplacement}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator.restorable_push_replacement.0.dart **
/// {@end-tool}¿UP¿UP¿Uc¿Uc¿Uw¿UÖ  ¿Uç&¿U®  ¿U∑
¿Uº  ¿U√¿UÃ  ¿U¿U¿VXâ®¿_EàZ/// Push the given route onto the navigator that most tightly encloses the
/// given context, and then remove all the previous routes until the
/// `predicate` returns true.
///
/// {@template flutter.widgets.navigator.pushAndRemoveUntil}
/// The predicate may be applied to the same route more than once if
/// [Route.willHandlePopInternally] is true.
///
/// To remove routes until a route with a certain name, use the
/// [RoutePredicate] returned from [ModalRoute.withName].
///
/// To remove all the routes below the pushed route, use a [RoutePredicate]
/// that always returns false (e.g. `(Route<dynamic> route) => false`).
///
/// The removed routes are removed without being completed, so this method
/// does not take a return value argument.
///
/// The newly pushed route and its preceding route are notified for
/// [Route.didPush]. After removal, the new route and its new preceding route,
/// (the route below the bottommost removed route) are notified through
/// [Route.didChangeNext]). If the [Navigator] has any [Navigator.observers],
/// they will be notified as well (see [NavigatorObserver.didPush] and
/// [NavigatorObserver.didRemove]). The removed routes are disposed of and
/// notified, once the new route has finished animating. The futures that had
/// been returned from pushing those routes will not complete.
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// Returns a [Future] that completes to the `result` value passed to [pop]
/// when the pushed route is popped off the navigator.
///
/// The `T` type argument is the type of the return value of the new route.
/// {@endtemplate}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _finishAccountCreation() {
///   Navigator.pushAndRemoveUntil<void>(
///     context,
///     MaterialPageRoute<void>(builder: (BuildContext context) => const MyHomePage()),
///     ModalRoute.withName('/'),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushAndRemoveUntil], which pushes a route that can be
///    restored during state restoration.¿_X¿_X¿_k¿_y  ¿_Å¿_ã  ¿_î¿_§  ¿_¿_ ¿`Ñø¿c™ÉY/// Push a new route onto the navigator that most tightly encloses the
/// given context, and then remove all the previous routes until the
/// `predicate` returns true.
///
/// {@template flutter.widgets.navigator.restorablePushAndRemoveUntil}
/// Unlike [Route]s pushed via [pushAndRemoveUntil], [Route]s pushed with this
/// method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushAndRemoveUntil}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator.restorable_push_and_remove_until.0.dart **
/// {@end-tool}¿c«¿c«¿c⁄¿cË  ¿c)¿d  ¿d¿d+  ¿d6¿d?  ¿cà¿câ¿d«áe¿k_Ü5/// Replaces a route on the navigator that most tightly encloses the given
/// context with a new route.
///
/// {@template flutter.widgets.navigator.replace}
/// The old route must not be currently visible, as this method skips the
/// animations and therefore the removal would be jarring if it was visible.
/// To replace the top-most route, consider [pushReplacement] instead, which
/// _does_ animate the new route, and delays removing the old route until the
/// new route has finished animating.
///
/// The removed route is removed without being completed, so this method does
/// not take a return value argument.
///
/// The new route, the route below the new route (if any), and the route above
/// the new route, are all notified (see [Route.didReplace],
/// [Route.didChangeNext], and [Route.didChangePrevious]). If the [Navigator]
/// has any [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didReplace]). The removed route is disposed without
/// being notified. The future that had been returned from pushing that routes
/// will not complete.
///
/// This can be useful in combination with [removeRouteBelow] when building a
/// non-linear user experience.
///
/// The `T` type argument is the type of the return value of the new route.
/// {@endtemplate}
///
/// See also:
///
///  * [replaceRouteBelow], which is the same but identifies the route to be
///    removed by reference to the route above it, rather than directly.
///  * [restorableReplace], which adds a replacement route that can be
///    restored during state restoration.¿kg¿kg¿kz¿kà  ¿kí ¿k´  ¿k¥¿k«  ¿k?¿k@¿l0É¨¿n¨Ç=/// Replaces a route on the navigator that most tightly encloses the given
/// context with a new route.
///
/// {@template flutter.widgets.navigator.restorableReplace}
/// Unlike [Route]s added via [replace], [Route]s added with this method are
/// restored during state restoration according to the rules outlined in the
/// "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.replace}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}¿næ¿næ¿n—¿nﬂ  ¿nÈ ¿o  ¿o2¿o/  ¿o?¿oH  ¿nä¿nã¿o‡á+¿v!Ö‚/// Replaces a route on the navigator that most tightly encloses the given
/// context with a new route. The route to be replaced is the one below the
/// given `anchorRoute`.
///
/// {@template flutter.widgets.navigator.replaceRouteBelow}
/// The old route must not be current visible, as this method skips the
/// animations and therefore the removal would be jarring if it was visible.
/// To replace the top-most route, consider [pushReplacement] instead, which
/// _does_ animate the new route, and delays removing the old route until the
/// new route has finished animating.
///
/// The removed route is removed without being completed, so this method does
/// not take a return value argument.
///
/// The new route, the route below the new route (if any), and the route above
/// the new route, are all notified (see [Route.didReplace],
/// [Route.didChangeNext], and [Route.didChangePrevious]). If the [Navigator]
/// has any [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didReplace]). The removed route is disposed without
/// being notified. The future that had been returned from pushing that routes
/// will not complete.
///
/// The `T` type argument is the type of the return value of the new route.
/// {@endtemplate}
///
/// See also:
///
///  * [replace], which is the same but identifies the route to be removed
///    directly.
///  * [restorableReplaceRouteBelow], which adds a replacement route that can
///    be restored during state restoration.¿v3¿v3¿vF¿vT  ¿v^#¿vw  ¿vÉ¿vñ  ¿v¿v¿wÑ:¿y¸Ç¨/// Replaces a route on the navigator that most tightly encloses the given
/// context with a new route. The route to be replaced is the one below the
/// given `anchorRoute`.
///
/// {@template flutter.widgets.navigator.restorableReplaceRouteBelow}
/// Unlike [Route]s added via [restorableReplaceRouteBelow], [Route]s added
/// with this method are restored during state restoration according to the
/// rules outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.replaceRouteBelow}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}¿z¿z¿z+¿z9  ¿zC#¿z\  ¿zh2¿zå  ¿zú¿z•  ¿y⁄¿y€¿{MÇ«¿}|Ç/// Whether the navigator that most tightly encloses the given context can be
/// popped.
///
/// {@template flutter.widgets.navigator.canPop}
/// The initial route cannot be popped off the navigator, which implies that
/// this function returns true only if popping the navigator would not remove
/// the initial route.
///
/// If there is no [Navigator] in scope, returns false.
/// {@endtemplate}
///
/// See also:
///
///  * [Route.isFirst], which returns true for routes for which [canPop]
///    returns false. ¿}É¿}ë   ¿~ÜS¿ÉÔÖr/// Consults the current route's [Route.willPop] method, and acts accordingly,
/// potentially popping the route as a result; returns whether the pop request
/// should be considered handled.
///
/// {@template flutter.widgets.navigator.maybePop}
/// If [Route.willPop] returns [RoutePopDisposition.pop], then the [pop]
/// method is called, and this method returns true, indicating that it handled
/// the pop request.
///
/// If [Route.willPop] returns [RoutePopDisposition.doNotPop], then this
/// method returns true, but does not do anything beyond that.
///
/// If [Route.willPop] returns [RoutePopDisposition.bubble], then this method
/// returns false, and the caller is responsible for sending the request to
/// the containing scope (e.g. by closing the application).
///
/// This method is typically called for a user-initiated [pop]. For example on
/// Android it's called by the binding for the system's back button.
///
/// The `T` type argument is the type of the return value of the current
/// route. (Typically this isn't known; consider specifying `dynamic` or
/// `Null`.)
/// {@endtemplate}
///
/// See also:
///
///  * [Form], which provides an `onWillPop` callback that enables the form
///    to veto a [pop] initiated by the app's back button.
///  * [ModalRoute], which provides a `scopedWillPopCallback` that can be used
///    to define the route's `willPop` method.¿É¯¿É¯¿Ñ¿Ñ  ¿Ñ#	¿Ñ'  ¿É«¿É»¿Ñoáå¿ãêÜ¶/// Pop the top-most route off the navigator that most tightly encloses the
/// given context.
///
/// {@template flutter.widgets.navigator.pop}
/// The current route's [Route.didPop] method is called first. If that method
/// returns false, then the route remains in the [Navigator]'s history (the
/// route is expected to have popped some internal state; see e.g.
/// [LocalHistoryRoute]). Otherwise, the rest of this description applies.
///
/// If non-null, `result` will be used as the result of the route that is
/// popped; the future that had been returned from pushing the popped route
/// will complete with `result`. Routes such as dialogs or popup menus
/// typically use this mechanism to return the value selected by the user to
/// the widget that created their route. The type of `result`, if provided,
/// must match the type argument of the class of the popped route (`T`).
///
/// The popped route and the route below it are notified (see [Route.didPop],
/// [Route.didComplete], and [Route.didPopNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didPop]).
///
/// The `T` type argument is the type of the return value of the popped route.
///
/// The type of `result`, if provided, must match the type argument of the
/// class of the popped route (`T`).
/// {@endtemplate}
///
/// {@tool snippet}
///
/// Typical usage for closing a route is as follows:
///
/// ```dart
/// void _close() {
///   Navigator.pop(context);
/// }
/// ```
/// {@end-tool}
///
/// A dialog box might be closed with a result:
///
/// ```dart
/// void _accept() {
///   Navigator.pop(context, true); // dialog returns true
/// }
/// ```¿ãî¿ãî¿ãß¿ãµ  ¿ãø	¿ã√  ¿ãp¿ãq¿ãˇÉ•¿è7Ç˘/// Calls [pop] repeatedly on the navigator that most tightly encloses the
/// given context until the predicate returns true.
///
/// {@template flutter.widgets.navigator.popUntil}
/// The predicate may be applied to the same route more than once if
/// [Route.willHandlePopInternally] is true.
///
/// To pop until a route with a certain name, use the [RoutePredicate]
/// returned from [ModalRoute.withName].
///
/// The routes are closed with null as their `return` value.
///
/// See [pop] for more details of the semantics of popping a route.
/// {@endtemplate}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _logout() {
///   Navigator.popUntil(context, ModalRoute.withName('/login'));
/// }
/// ```
/// {@end-tool} ¿è@¿èN  ¿èV¿èf   ¿è®Ñ€¿îÑ./// Immediately remove `route` from the navigator that most tightly encloses
/// the given context, and [Route.dispose] it.
///
/// {@template flutter.widgets.navigator.removeRoute}
/// The removed route is removed without being completed, so this method does
/// not take a return value argument. No animations are run as a result of
/// this method call.
///
/// The routes below and above the removed route are notified (see
/// [Route.didChangeNext] and [Route.didChangePrevious]). If the [Navigator]
/// has any [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didRemove]). The removed route is disposed without
/// being notified. The future that had been returned from pushing that routes
/// will not complete.
///
/// The given `route` must be in the history; this method will throw an
/// exception if it is not.
///
/// Ongoing gestures within the current route are canceled.
/// {@endtemplate}
///
/// This method is used, for example, to instantly dismiss dropdown menus that
/// are up when the screen's orientation changes. ¿î¿î+  ¿î3¿îC   ¿îáÑ‰¿ò„Ñ%/// Immediately remove a route from the navigator that most tightly encloses
/// the given context, and [Route.dispose] it. The route to be removed is the
/// one below the given `anchorRoute`.
///
/// {@template flutter.widgets.navigator.removeRouteBelow}
/// The removed route is removed without being completed, so this method does
/// not take a return value argument. No animations are run as a result of
/// this method call.
///
/// The routes below and above the removed route are notified (see
/// [Route.didChangeNext] and [Route.didChangePrevious]). If the [Navigator]
/// has any [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didRemove]). The removed route is disposed without
/// being notified. The future that had been returned from pushing that routes
/// will not complete.
///
/// The given `anchorRoute` must be in the history and must have a route below
/// it; this method will throw an exception if it is not or does not.
///
/// Ongoing gestures within the current route are canceled.
/// {@endtemplate} ¿òÙ¿ô  ¿ô
¿ô   ¿ôoÜ[¿ú9Çã/// The state from the closest instance of this class that encloses the given
/// context.
///
/// Typical usage is as follows:
///
/// ```dart
/// Navigator.of(context)
///   ..pop()
///   ..pop()
///   ..pushNamed('/settings');
/// ```
///
/// If `rootNavigator` is set to true, the state from the furthest instance of
/// this class is given instead. Useful for pushing contents above all
/// subsequent instances of [Navigator].
///
/// If there is no [Navigator] in the give `context`, this function will throw
/// a [FlutterError] in debug mode, and an exception in release mode.
///
/// This method can be expensive (it walks the element tree). ¿úA¿úO  ¿ú]¿úc  ¿úr¿üŒÖ¿¢≈Ç≥/// The state from the closest instance of this class that encloses the given
/// context, if any.
///
/// Typical usage is as follows:
///
/// ```dart
/// NavigatorState? navigatorState = Navigator.maybeOf(context);
/// if (navigatorState != null) {
///   navigatorState
///     ..pop()
///     ..pop()
///     ..pushNamed('/settings');
/// }
/// ```
///
/// If `rootNavigator` is set to true, the state from the furthest instance of
/// this class is given instead. Useful for pushing contents above all
/// subsequent instances of [Navigator].
///
/// Will return null if there is no ancestor [Navigator] in the `context`.
///
/// This method can be expensive (it walks the element tree). ¿¢“¿¢‡  ¿¢Ó¿¢Ù  ¿£¿§Îå‰¿ßÍÇ∆/// Turn a route name into a set of [Route] objects.
///
/// This is the default value of [onGenerateInitialRoutes], which is used if
/// [initialRoute] is not null.
///
/// If this string starts with a `/` character and has multiple `/` characters
/// in it, then the string is split on those characters and substrings from
/// the start of the string up to each such character are, in turn, used as
/// routes to push.
///
/// For example, if the route `/stocks/HOOLI` was used as the [initialRoute],
/// then the [Navigator] would push the following routes on startup: `/`,
/// `/stocks`, `/stocks/HOOLI`. This enables deep linking while allowing the
/// application to maintain a predictable route history. ¿®¿®  ¿®!¿®)   ¿±”=¿±Ó   ¿±”¿±‘ ¿¿1Ä”¿¿7       ¿¡≤\¿¡  ¿¡:Ç ¿¡:¿¡E ¿¡K
¿¡Q  ¿¡_%¿¡y  ¿¡å¿¡í  /¿¡≤¿¡∏¿¡∆¿¡ø¿¡π¿¡¬¿¡“¿¡ÿ¿¡Ì¿¡Ê¿¡Ÿ¿¡È¿¡˘¿¡ˇ¿√¿¬”¿¬ô¿¬f¿¬4¿¬¿¬¿¬¿¬+¿¬,¿¬O¿¬B¿¬R¿¬a¿¬b¿¬Å¿¬t¿¬Ñ¿¬ì¿¬î¿¬¥¿¬ß¿¬∑¿¬∆¿¬«¿¬Ó¿¬·¿¬Ò¿√ ¿√¿√,¿√¿√.
¿√?&¿√` ¿√?¿√@¿√i5¿√à  ¿√£4¿√π ¿√»¿√’¿√÷¿√‹¿√Ï  ¿√¸9¿ƒ ¿ƒ)¿ƒe:¿ƒt ¿ƒì¿ƒ»5¿ƒÿ ¿ƒÒ¿Ÿ‰¿ŸÏ  ¿⁄y$¿⁄~ ¿⁄ô¿Í›)¿Í‚ ¿Î¿≈*Çu¿≈ÃÄë/// Restoration ID to be used for the encapsulating route when restoration is
/// enabled for it or null if restoration cannot be enabled for it.   ¿«£+¿«¨    ¿‰Äó¿‰    ¿‰∞Äï¿‰π    ¿ÂIU¿ÂR    ¿Â¢Ä¶¿Â´    ¿ÊLÄ´¿ÊU    ¿Í(]¿Í=   ¿Í(¿Í)¿ÍâQ¿Íû   ¿Íâ¿Íä¿ÚÑF¿Úç    ¿ÚÕÄì¿Ú—  ¿Ú‰
¿ÚÍ   ¿«“ÄÈ¿«◊  ¿«Â¿«Ù   ¿»øÅ˘¿»ƒ  ¿»–!¿»È  ¿»Û(¿…   ¿ ºáo¿ ¡  ¿ Œ!¿ Á  ¿ Ò¿À   ¿À!¿À%  ¿À.(¿ÀH   ¿“/Ää¿“4  ¿“E¿“U   ¿“ΩÉ÷¿”ÒÅ /// Process the to-be-popped route.
///
/// A route can be marked for pop by transition delegate or Navigator.pop,
/// this method actually pops the route by calling Route.didPop.
///
/// Returns true if the route is popped; otherwise, returns false if the route
/// refuses to be popped. ¿”˝!¿‘  ¿‘ (¿‘:   ¿÷óÄ’¿÷ú    ¿◊pÅ°¿◊u  ¿◊Ö!¿◊û  ¿◊®(¿◊¬   ¿ŸÄÀ¿Ÿ  ¿Ÿ#!¿Ÿ<  ¿ŸF¿ŸU   ¿Ÿ˛w¿⁄ ¿⁄¿⁄¿⁄
	¿⁄   ¿⁄—Å∆¿⁄÷  ¿⁄ﬂ¿⁄Â  ¿⁄Ò¿‹ŒÅÛ¿‹” ¿‹‹¿‹‹¿‹ﬂ¿‹‚  ¿‹Î¿‹Ò  ¿‹˝¿ﬁ≈ÄÅ¿ﬁ     ¿ﬂJÑ«¿ﬂO    ¿Ê˚Åö¿Á   ¿Á¿Á,   ¿ËôE¿Ë•  ¿Ë∏¿Ë≈   ¿Ë·o¿ËÌ  ¿È¿È"   ¿ÈSM¿È_  ¿Èv¿ÈÉ   ¿È§ÄÄ¿È¿  ¿È—¿È·   ¿ÎG¿Î    ¿ÎVÅI¿Îg   ¿ÎV¿ÎW¿Ï£ÅF¿Ï¥   ¿Ï£¿Ï§¿ÌÌÅÄ¿Ì˛  ¿Ó
¿Ó  ¿ÌÌ¿ÌÓ¿ÔqÅò¿ÔÇ  ¿Ôì¿Ôú  ¿Ôq¿Ôr¿ÒÅs¿Ò   ¿Ò¿Ò ¿ÛdÄÔ¿Ûs  ¿ÛçK ¿Ûç¿Û¢ ¿Û®¿ÛÆ  ¿Ûø¿Û≈   ¿Û€!¿Û  ¿Ù $¿Ù   ¿Ù)(¿Ù.  ¿Ù5¿ÙH    ¿ÙUÅ?¿Ù[  ¿ÙóÄä ¿Ùó¿Ù∞ ¿Ù∂¿Ù∆  ¿Ù◊¿ÙË  ¿Ù˝¿ı¿ı¿ı¿ı  ¿ı%m¿ı6  ¿ı=¿ıP  ¿ı%¿ı& ¿ıñÅ<¿ıú  ¿ı◊Äâ ¿ı◊¿ıÔ ¿ıı¿ˆ  ¿ˆ¿ˆ'  ¿ˆ<¿ˆA¿ˆ^¿ˆB¿ˆP  ¿ˆdl¿ˆu  ¿ˆ|¿ˆè  ¿ˆd¿ˆe ¿ˆ‘ÅE¿ˆ⁄  ¿˜Äå ¿˜¿˜3 ¿˜9¿˜I  ¿˜Z¿˜k  ¿˜Ä¿˜Ö¿˜¢¿˜Ü¿˜î  ¿˜®o¿˜π  ¿˜¿¿˜”  ¿˜®¿˜© ¿¯Å\¿¯!  ¿¯`Äç ¿¯`¿¯| ¿¯Ç¿¯í  ¿¯£¿¯¥  ¿¯…¿¯Œ¿¯Î¿¯œ¿¯›  ¿¯ÒÄÑ¿˘  ¿˘	¿˘  ¿¯Ò¿¯Ú ¿˘y¿E¿˘Ùt/// The state for a [Navigator] widget.
///
/// A reference to this class can be obtained by calling [Navigator.of].  ¿˙P(¿˙m  ¿˙|,¿˙é ¿˙¶¿˙ß¿˙ô¿˙•¿˙ö¿˙¨@¿˙√ ¿˙⁄¿˙Í¿˙Î¿˙[¿˚ ¿˚-¿˚2¿˚H¿˚3¿˚I¿˚J¿˚O[¿˚r ¿˚å¿˚ë¿˚ß¿˚í¿˚®¿˚©¿˚ØÄù¿¸G/// The [FocusScopeNode] for the [FocusScope] that encloses the routes.¿¸¿¸-¿¸K¿¸8¿¸.¿¸:¿¸Q¿¸V ¿¸e¿¸≠(¿¸Ω  ¿¸⁄0¿¸˜  ¿πS¿“ ¿˜¿¿¿¿	¿¿
¿(„¿(Î  ¿)¿) ¿)!¿VÖ¿Vä ¿Vù¿è$¿ì ¿≤¿´Ä¢¿K/// Notifies its listeners if the value of [userGestureInProgress] changes.¿3¿@¿E¿A¿F¿L¿G¿õ(¿™ ¿¡¿¬¿º¿¿¿Ω¿V¿    ¿+C¿C   ¿+¿,¿'±y¿(@/// The overlay this navigator uses for its visual presentation.   ¿(.Ä±¿(I    ¿L@¿T    ¿∑Äù¿ª  ¿”	¿ÿ   ¿XÅO¿jÄ˙/// Whether a route is currently being manipulated by the user, e.g.
/// as during an iOS back gesture.
///
/// See also:
///
///  * [userGestureInProgressNotifier], which notifies its listeners if
///    the value of [userGestureInProgress] changes.   ;¿˝Üg¿˝    ¿˝¿˝¿kâ—¿|  ¿â¿ù  ¿ß¿≠  ¿k¿l¿@ÄË¿Q  ¿a¿u  ¿@¿A¿rÄÂ¿É   ¿r¿s¿[â¨¿`  ¿v!¿á   ¿ÄÊ¿    ¿ıá…¿  ¿¿!  ¿ı¿ˆ¿"¬Åf¿"«    ¿$,Äü¿$=   ¿$,¿$-¿$œÄÕ¿$‡   ¿$œ¿$–¿%†Ç¿%±   ¿%†¿%°¿)*≠W¿)/    ¿Vßö¿V¨  ¿V¬¿V»  ¿V⁄¿pØÇ;¿p¥    ¿rÓÉñ¿rÛ    ¿vàÄ¨¿vï  ¿v•	¿v™  ¿v∞¿v∆   ¿w8Ä•¿w<  ¿wL	¿wQ  ¿wW¿wm   ¿w·ÄÊ¿wÓ  ¿w˝	¿x  ¿x¿x   ¿xÀàH¿x’ ¿x·¿x·¿x‰¿xÏ  ¿xÛ¿y  ¿y¿y  ¿y ¿ÅÇ®¿É"Å¡/// Push a named route onto the navigator.
///
/// {@macro flutter.widgets.navigator.pushNamed}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _aaronBurrSir() {
///   navigator.pushNamed('/nyc/1776');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushNamed], which pushes a route that can be restored
///    during state restoration.¿É,¿É,¿ÉD¿ÉL  ¿É\¿Ée  ¿É¿É¿É√ÑS¿ÖÅÈ/// Push a named route onto the navigator.
///
/// {@macro flutter.widgets.navigator.restorablePushNamed}
///
/// {@macro flutter.widgets.navigator.pushNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _openDetails() {
///   navigator.restorablePushNamed('/nyc/1776');
/// }
/// ```
/// {@end-tool}¿Ü¿Ü¿Ü¿Ü$  ¿Ü4¿Ü=  ¿Ö’¿Ö÷¿àÉ¨¿ä€Çs/// Replace the current route of the navigator by pushing the route named
/// [routeName] and then disposing the previous route once the new route has
/// finished animating in.
///
/// {@macro flutter.widgets.navigator.pushReplacementNamed}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _startBike() {
///   navigator.pushReplacementNamed('/jouett/1781');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushReplacementNamed], which pushes a replacement route that
///  can be restored during state restoration.¿ä¿ä¿ã¿ã¿ã¿ã$  ¿ã4
¿ã9  ¿ãD¿ãM  ¿äº¿äΩ¿ã ÖH¿é£Çë/// Replace the current route of the navigator by pushing the route named
/// [routeName] and then disposing the previous route once the new route has
/// finished animating in.
///
/// {@macro flutter.widgets.navigator.restorablePushReplacementNamed}
///
/// {@macro flutter.widgets.navigator.pushReplacementNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _startCar() {
///   navigator.restorablePushReplacementNamed('/jouett/1781');
/// }
/// ```
/// {@end-tool}¿é¬¿é¬¿é’¿é’¿éÓ¿éˆ  ¿è
¿è  ¿è¿è  ¿éà¿éâ¿ëÉ¿ì\Å˙/// Pop the current route off the navigator and push a named route in its
/// place.
///
/// {@macro flutter.widgets.navigator.popAndPushNamed}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _begin() {
///   navigator.popAndPushNamed('/nyc/1776');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePopAndPushNamed], which pushes a new route that can be
///    restored during state restoration.¿ìl¿ìl¿ì¿ì¿ìò¿ì†  ¿ì∞
¿ìµ  ¿ì¿¿ì…  ¿ì=¿ì>¿î0ÉD¿ñìÇ/// Pop the current route off the navigator and push a named route in its
/// place.
///
/// {@macro flutter.widgets.navigator.restorablePopAndPushNamed}
///
/// {@macro flutter.widgets.navigator.popAndPushNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _end() {
///   navigator.restorablePopAndPushNamed('/nyc/1776');
/// }
/// ```
/// {@end-tool}¿ñ≠¿ñ≠¿ñ¿¿ñ¿¿ñŸ¿ñ·  ¿ñÒ
¿ñˆ  ¿ó¿ó
  ¿ñx¿ñy¿óxÉ£¿ö3Ço/// Push the route with the given name onto the navigator, and then remove all
/// the previous routes until the `predicate` returns true.
///
/// {@macro flutter.widgets.navigator.pushNamedAndRemoveUntil}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _handleOpenCalendar() {
///   navigator.pushNamedAndRemoveUntil('/calendar', ModalRoute.withName('/'));
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushNamedAndRemoveUntil], which pushes a new route that can
///    be restored during state restoration.¿öK¿öK¿öc¿ök  ¿ö|¿öå  ¿öú¿ö•  ¿ö¿ö¿õÖH¿ùÛÇé/// Push the route with the given name onto the navigator, and then remove all
/// the previous routes until the `predicate` returns true.
///
/// {@macro flutter.widgets.navigator.restorablePushNamedAndRemoveUntil}
///
/// {@macro flutter.widgets.navigator.pushNamedAndRemoveUntil}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _openCalendar() {
///   navigator.restorablePushNamedAndRemoveUntil('/calendar', ModalRoute.withName('/'));
/// }
/// ```
/// {@end-tool}¿û¿û¿û-¿û5  ¿ûF¿ûV  ¿ûf¿ûo  ¿ùÿ¿ùŸ¿†kÇÒ¿¢üÅÊ/// Push the given route onto the navigator.
///
/// {@macro flutter.widgets.navigator.push}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _openPage() {
///   navigator.push<void>(
///     MaterialPageRoute<void>(
///       builder: (BuildContext context) => const MyPage(),
///     ),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePush], which pushes a route that can be restored during
///    state restoration.¿¢§¿¢§¿¢∑¿¢¡  ¿¢Ä¿¢Å¿£`Ç.¿£e  ¿£Ä¿£ê   ¿•íÅS¿•ó  ¿•Æ¿•∏   ¿¶ÈÑ£¿®ÁÅƒ/// Push a new route onto the navigator.
///
/// {@macro flutter.widgets.navigator.restorablePush}
///
/// {@macro flutter.widgets.navigator.push}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator_state.restorable_push.0.dart **
/// {@end-tool}¿®ˆ¿®ˆ¿©	&¿©$  ¿©2¿©;  ¿®Ã¿®Õ¿´êÅ±¿´ï  ¿´†¿´≠   ¿≠EÖ%¿≠J  ¿≠[¿≠l   ¿≤nÑC¿µXÇò/// Replace the current route of the navigator by pushing the given route and
/// then disposing the previous route once the new route has finished
/// animating in.
///
/// {@macro flutter.widgets.navigator.pushReplacement}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _doOpenPage() {
///   navigator.pushReplacement<void, void>(
///     MaterialPageRoute<void>(
///       builder: (BuildContext context) => const MyHomePage(),
///     ),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushReplacement], which pushes a replacement route that can
///    be restored during state restoration.¿µh¿µh¿µ{¿µ{¿µè¿µô  ¿µ§
¿µ©  ¿µ9¿µ:¿∂µÖâ¿πRÇ_/// Replace the current route of the navigator by pushing a new route and
/// then disposing the previous route once the new route has finished
/// animating in.
///
/// {@macro flutter.widgets.navigator.restorablePushReplacement}
///
/// {@macro flutter.widgets.navigator.pushReplacement}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator_state.restorable_push_replacement.0.dart **
/// {@end-tool}¿πl¿πl¿π¿π¿πì&¿πÆ  ¿πΩ
¿π¬  ¿π…¿π“  ¿π7¿π8¿ºBÇ«¿ºG ¿º]¿º]¿ºq¿º~  ¿ºÑ
¿ºâ   ¿øÑK¿¡⁄Ç}/// Push the given route onto the navigator, and then remove all the previous
/// routes until the `predicate` returns true.
///
/// {@macro flutter.widgets.navigator.pushAndRemoveUntil}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _resetAndOpenPage() {
///   navigator.pushAndRemoveUntil<void>(
///     MaterialPageRoute<void>(builder: (BuildContext context) => const MyHomePage()),
///     ModalRoute.withName('/'),
///   );
/// }
/// ```
/// {@end-tool}
///
///
/// See also:
///
///  * [restorablePushAndRemoveUntil], which pushes a route that can be
///    restored during state restoration.¿¡Ì¿¡Ì¿¬ ¿¬
  ¿¬¿¬#  ¿¡ª¿¡º¿√\Öo¿≈ŸÇA/// Push a new route onto the navigator, and then remove all the previous
/// routes until the `predicate` returns true.
///
/// {@macro flutter.widgets.navigator.restorablePushAndRemoveUntil}
///
/// {@macro flutter.widgets.navigator.pushAndRemoveUntil}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator_state.restorable_push_and_remove_until.0.dart **
/// {@end-tool}¿≈ˆ¿≈ˆ¿∆	)¿∆$  ¿∆4¿∆D  ¿∆O¿∆X  ¿≈æ¿≈ø¿»œÇÎ¿»‘  ¿»Ì¿»˙  ¿… ¿…   ¿ÀæÇÚ¿ÕsÅá/// Replaces a route on the navigator with a new route.
///
/// {@macro flutter.widgets.navigator.replace}
///
/// See also:
///
///  * [replaceRouteBelow], which is the same but identifies the route to be
///    removed by reference to the route above it, rather than directly.
///  * [restorableReplace], which adds a replacement route that can be
///    restored during state restoration.¿Õ{¿Õ{¿Õê ¿Õ©  ¿Õ≤¿Õ≈  ¿ÕZ¿Õ[¿Œ¥Ñ∞¿–Å,/// Replaces a route on the navigator with a new route.
///
/// {@macro flutter.widgets.navigator.restorableReplace}
///
/// {@macro flutter.widgets.navigator.replace}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}¿– ¿– ¿–5 ¿–N  ¿–W2¿–{  ¿–ã¿–î  ¿œÛ¿œÙ¿”hÉt¿”m  ¿”{¿”à  ¿”é¿”û   ¿÷‡É>¿ÿ∏Å®/// Replaces a route on the navigator with a new route. The route to be
/// replaced is the one below the given `anchorRoute`.
///
/// {@macro flutter.widgets.navigator.replaceRouteBelow}
///
/// See also:
///
///  * [replace], which is the same but identifies the route to be removed
///    directly.
///  * [restorableReplaceRouteBelow], which adds a replacement route that can
///    be restored during state restoration.¿ÿ ¿ÿ ¿ÿﬂ#¿ÿ¯  ¿Ÿ¿Ÿ  ¿ÿü¿ÿ†¿⁄"Ö+¿€ŸÅá/// Replaces a route on the navigator with a new route. The route to be
/// replaced is the one below the given `anchorRoute`.
///
/// {@macro flutter.widgets.navigator.restorableReplaceRouteBelow}
///
/// {@macro flutter.widgets.navigator.replaceRouteBelow}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}¿€ı¿€ı¿‹
#¿‹#  ¿‹/2¿‹S  ¿‹c¿‹l  ¿€æ¿€ø¿ﬂQÉN¿ﬂV  ¿ﬂi¿ﬂv  ¿ﬂ|¿ﬂå   ¿‚£Ç÷¿„àÄœ/// Whether the navigator can be popped.
///
/// {@macro flutter.widgets.navigator.canPop}
///
/// See also:
///
///  * [Route.isFirst], which returns true for routes for which [canPop]
///    returns false.   ¿Â}Ü†¿Á≈Ç/// Consults the current route's [Route.willPop] method, and acts accordingly,
/// potentially popping the route as a result; returns whether the pop request
/// should be considered handled.
///
/// {@macro flutter.widgets.navigator.maybePop}
///
/// See also:
///
///  * [Form], which provides an `onWillPop` callback that enables the form
///    to veto a [pop] initiated by the app's back button.
///  * [ModalRoute], which provides a `scopedWillPopCallback` that can be used
///    to define the route's `willPop` method.¿ÁŒ¿ÁŒ¿Á„	¿ÁÁ  ¿Á§¿Á•¿Ï!Ö“¿Ó:Åœ/// Pop the top-most route off the navigator.
///
/// {@macro flutter.widgets.navigator.pop}
///
/// {@tool snippet}
///
/// Typical usage for closing a route is as follows:
///
/// ```dart
/// void _handleClose() {
///   navigator.pop();
/// }
/// ```
/// {@end-tool}
/// {@tool snippet}
///
/// A dialog box might be closed with a result:
///
/// ```dart
/// void _handleAccept() {
///   navigator.pop(true); // dialog returns true
/// }
/// ```
/// {@end-tool}¿Ó>¿Ó>¿ÓS	¿ÓW  ¿Ó!¿Ó"¿Ò˜É:¿ÛDÅ+/// Calls [pop] repeatedly until the predicate returns true.
///
/// {@macro flutter.widgets.navigator.popUntil}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _doLogout() {
///   navigator.popUntil(ModalRoute.withName('/login'));
/// }
/// ```
/// {@end-tool} ¿ÛM¿Û]   ¿ı5Él¿ı¬ÄÅ/// Immediately remove `route` from the navigator, and [Route.dispose] it.
///
/// {@macro flutter.widgets.navigator.removeRoute} ¿ıŒ¿ıﬁ   ¿¯•Ñ[¿˘ÄÃ/// Immediately remove a route from the navigator, and [Route.dispose] it. The
/// route to be removed is the one below the given `anchorRoute`.
///
/// {@macro flutter.widgets.navigator.removeRouteBelow} ¿˘ê¿˘†   ¿˝áE¿ˇ}Ç]/// Complete the lifecycle for a route that has been popped off the navigator.
///
/// When the navigator pops a route, the navigator retains a reference to the
/// route in order to call [Route.dispose] if the navigator itself is removed
/// from the tree. When the route is finished with any exit animation, the
/// route should call this function to complete its lifecycle (e.g., to
/// receive a call to [Route.dispose]).
///
/// The given `route` must have already received a call to [Route.didPop].
/// This function may be called directly from [Route.didPop] if [Route.didPop]
/// will return true. ¿ˇã¿ˇõ   ¿MÄ˚¿k ¿y¿y¿|	¿Ñ  ¿M¿N¿RÉÜ¿	Äº/// The navigator is being controlled by a user gesture.
///
/// For example, called when the user beings an iOS back gesture.
///
/// When the gesture finishes, call [didStopUserGesture].   ¿‹Åª¿ôÄØ/// A user gesture completed.
///
/// Notifies the navigator that a gesture regarding which the navigator was
/// previously notified with [didStartUserGesture] has completed.   ¿»]¿Õ  ¿‡¿Ú   ¿)b¿.  ¿G¿U   ¿èÉ"¿î    ¿µÑ¿»  ¿Œ¿‹  ¿µ¿∂ ¿ˆáS¿  ¿!: ¿!¿8 ¿9	¿?  ¿F¿L¿Y¿R¿M¿U¿^Ä´¿}¿~¿É ¿ä¿õ  ¿§¿∂  ¿ƒ¿“   ¿Ä‘¿+¿,¿5 ¿<5¿f  ¿w¿â  ¿ó¿•   ¿‰ÇF¿¿¿ ¿¿!   ¿. ¿J  ¿p¿x  ¿R¿Z    ¿é¿ó    ¿∞v¿∑    ¿*^¿H   ¿*¿+¿åB¿®  ¿¥¿ƒ  ¿å¿ç¿“Åu¿ﬁ  ¿Î¿˚  ¿2¿  ¿%¿4¿5 ¿KÑB¿Q  ¿íÄ∫ ¿í¿Æ ¿µ¿ƒ  ¿Õ¿‹  ¿Í ¿˘  ¿¿¿&¿¿¿"¿)¿.¿J¿/¿D¿E¿PÅ¿t¿u¿â ¿ä¿ô   ¿ K(¿ a ¿ K¿ L¿ w¿ Ñ  ¿ å¿ ö   ¿sÄ‘¿å   ¿s¿t¿ ®Ä„¿ √  ¿ œ¿ ﬂ  ¿ ®¿ © ¿!èÜ[¿!ï  ¿!⁄Ä“ ¿!⁄¿!˙ ¿"¿"  ¿"!¿"0  ¿"> ¿"M  ¿"g¿"m¿"Ç¿"{¿"n¿"~¿"Ö¿"ä¿"™¿"ã¿"†¿"°¿"∞Åÿ¿"ÿ¿"Ÿ¿"Ì ¿"Ó¿"˝   ¿&ß(¿&Ω ¿&ß¿&®¿&”2¿&˘  ¿'	¿'  ¿$åÄû¿%   ¿$å¿$ç¿%.Åu¿%G   ¿%.¿%/¿'%Ä√¿'@  ¿'L¿'\  ¿'%¿'& ¿'ÏïV¿'Ú   ¿(É1¿(ü  ¿7—2¿7⁄    ¿=(¿=-   ¿=¿=	¿(…äˆ¿(Œ  ¿(’¿(Ë   ¿3√Ç!¿3»  ¿3€¿3È  ¿3Ù¿4  ¿4'¿4'  ¿48¿4F   ¿5ËÅ,¿5Ì  ¿5˝¿6  ¿6¿67   ¿7Ä¢¿7    ¿8ÇÇ¿8  ¿8/¿8=  ¿8B¿8R   ¿:±S¿:Ÿ   ¿:±¿:≤¿;ÅP¿;0  ¿;?¿;H  ¿;¿;	¿<\j¿<m  ¿<{!¿<ò  ¿<\¿<]¿< J¿<ﬁ   ¿< ¿<À ¿AHî¸¿GøÜp/// Gives access to a [Route] object and its return value that was added to a
/// navigator via one of its "restorable" API methods.
///
/// When a [State] object wants access to the return value of a [Route] object
/// it has pushed onto the [Navigator], a [RestorableRouteFuture] ensures that
/// it will also have access to that value after state restoration.
///
/// To show a new route on the navigator defined by the [navigatorFinder], call
/// [present], which will invoke the [onPresent] callback. The [onPresent]
/// callback must add a new route to the navigator provided to it using one
/// of the "restorable" API methods. When the newly added route completes, the
/// [onComplete] callback executes. It is given the return value of the route,
/// which may be null.
///
/// While the route added via [present] is shown on the navigator, it can be
/// accessed via the [route] getter.
///
/// If the property is restored to a state in which [present] had been called on
/// it, but the route has not completed yet, the [RestorableRouteFuture] will
/// obtain the restored route object from the navigator again and call
/// [onComplete] once it completes.
///
/// The [RestorableRouteFuture] can only keep track of one active [route].
/// When [present] has been called to add a route, it may only be called again
/// after the previously added route has completed.
///
/// {@tool dartpad}
/// This example uses a [RestorableRouteFuture] in the `_MyHomeState` to push a
/// new `MyCounter` route and to retrieve its return value.
///
/// ** See code in examples/api/lib/widgets/navigator/restorable_route_future.0.dart **
/// {@end-tool}¿G’¿G’¿H Å7 ¿Hw¿Håp/// Creates a [RestorableRouteFuture].
///
/// The [onPresent] and [navigatorFinder] arguments must not be null.¿Hì.¿Hô  ¿H«¿H÷  ¿H‰¿HÍ  ¿H™¿H¸¿I¿I¿I¿I¿I¿I¿I¿I5¿I.¿I¿I1¿I;Å
¿J6Ä÷/// A callback that given the [BuildContext] of the [State] object to which
/// this property is registered returns the [NavigatorState] of the navigator
/// to which the route instantiated in [onPresent] is added. ¿JJÇ:¿L{Å¸/// A callback that add a new [Route] to the provided navigator.
///
/// The callback must use one of the API methods on the [NavigatorState] that
/// have "restorable" in their name (e.g. [NavigatorState.restorablePush],
/// [NavigatorState.restorablePushNamed], etc.) and return the opaque ID
/// returned by those methods.
///
/// This callback is invoked when [present] is called with the `arguments`
/// Object that was passed to that method and the [NavigatorState] obtained
/// from [navigatorFinder]. ¿LâÄ ¿MIÄï/// A callback that is invoked when the [Route] added via [onPresent]
/// completes.
///
/// The return value of that route is passed to this method. ¿P“¿P‹  ¿Rå¿Rë ¿Rù¿OÄΩ¿P!Äí/// Whether the [Route] created by [present] is currently shown.
///
/// Returns true after [present] has been called until the [Route] completes.   ¿P@Äè¿Pøj/// The route that [present] added to the Navigator.
///
/// Returns null when currently no route is shown   ¿S6H¿SK   ¿S6¿S7¿SÇÄù¿Sï    ¿MXÇ#¿NìÅ)/// Shows the route created by [onPresent] and invoke [onComplete] when it
/// completes.
///
/// The `arguments` object is passed to [onPresent] and can be used to
/// customize the route. It must be serializable via the
/// [StandardMessageCodec]. Often, a [Map] is used to pass key-value pairs. ¿Nú¿N•   ¿PÁ1¿P˚   ¿PÁ¿PË¿Qu¿Q-  ¿Q;¿QD  ¿Q¿Q¿QïÄÑ¿Q©   ¿Qï¿Qñ¿Rk¿R0  ¿R?¿RH  ¿R¿R¿RßÄã¿R∏   ¿Rß¿R®¿T#Åæ¿T(  ¿T=	¿TE   ¿UÂ]¿U˚  ¿V¿V!     ãòÇÈåÅÄ„/// Indicates whether the current route should be popped.
///
/// Used as the return value for [Route.willPop].
///
/// See also:
///
///  * [WillPopScope], a widget that hooks into the route's [Route.willPop]
///    mechanism.  åôÄÖçy/// Pop the route.
///
/// If [Route.willPop] returns [pop] then the back button will actually pop
/// the current route. ç#|çóm/// Do not pop the route.
///
/// If [Route.willPop] returns [doNotPop] then the back button will be ignored. ç§Ä⁄éxÄÀ/// Delegate this to the next level of navigation.
///
/// If [Route.willPop] returns [bubble] then the back button will be handled
/// by the [SystemNavigator], which will usually close the application.    ¿πÊÜ¿πÎ   ¿πˇ¿πˇ  ¿∫Ä¿∫Ä  ¿∫¸¿∫¸  ¿ª|¿ª|  ¿ª’¿ª’  ¿º<¿º<  ¿ºÄ¿ºÄ  ¿º‚¿º‚  ¿Ωö¿Ωö  ¿Ωæ¿Ωæ  ¿ΩÌ¿ΩÌ  ¿æç¿æç  ¿æ‚¿æ‚  ¿øê¿øê  ¿øƒ¿øƒ     ¿¿4¿≈   ¿ﬂ¿ﬂ  ¿Ë	¿Ë         
É˘Ä˘Ñ≤Ä∞/// Creates a route for the given route settings.
///
/// Used by [Navigator.onGenerateRoute].
///
/// See also:
///
///  * [Navigator], which is where all the [Route]s end up.  Ñ⁄ÑÈ   ÑÙÄ…Ö]`/// Creates a series of one or more routes.
///
/// Used by [Navigator.onGenerateInitialRoutes].  ÖéÖû  Ö®Ö∞   ÖøÇjá“Ç
/// Creates a [Route] that is to be added to a [Navigator].
///
/// The route can be configured with the provided `arguments`. The provided
/// `context` is the `BuildContext` of the [Navigator] to which the route is
/// added.
///
/// Used by the restorable methods of the [Navigator] that add anonymous routes
/// (e.g. [NavigatorState.restorablePush]). For this use case, the
/// [RestorableRouteBuilder] must be static function as the [Navigator] will
/// call it again during state restoration to re-create the route.áÈáÈ à à  àà   à+|àr>/// Signature for the [Navigator.popUntil] predicate argument.  àëà°   à©ÅâçÄ€/// Signature for a callback that verifies that it's OK to call [Navigator.pop].
///
/// Used by [Form.onWillPop], [ModalRoute.addScopedWillPopCallback],
/// [ModalRoute.removeScopedWillPopCallback], and [WillPopScope].    âπÅ›ãPÅé/// Signature for the [Navigator.onPopPage] callback.
///
/// This callback must call [Route.didPop] on the specified route and must
/// properly update the pages list the next time it is passed into
/// [Navigator.pages] so that it no longer includes the corresponding [Page].
/// (Otherwise, the page will be interpreted as a new page to show when the
/// [Navigator.pages] list is next updated.)  ãpãÄ  ãÜãè   ¿øÔ@¿ø˜   ¿¿¿¿)   ¿=DÅ¿>Ä¡/// A callback that given a [BuildContext] finds a [NavigatorState].
///
/// Used by [RestorableRouteFuture.navigatorFinder] to determine the navigator
/// to which a new route should be added.  ¿>@¿>N   ¿>XÅ—¿?–Åo/// A callback that given some `arguments` and a `navigator` adds a new
/// restorable route to that `navigator` and returns the opaque ID of that
/// new route.
///
/// Usually, this callback calls one of the imperative methods on the Navigator
/// that have "restorable" in the name and returns their return value.
///
/// Used by [RestorableRouteFuture.onPresent].  ¿?¸¿@  ¿@¿@   ¿@+Å¿AÄ›/// A callback to handle the result of a completed [Route].
///
/// The return value of the route (which can be null for e.g. void routes) is
/// passed to the callback.
///
/// Used by [RestorableRouteFuture.onComplete].¿A)¿A) ¿A<¿A?     ñ <ÄÜÄ§Ä•Ä∫Ä‘ÄÎÅÅ)Å*ÅTÅ}Å¶ÅŒÅœÅ‰Å˚ÇÇ3ÇLÇbÇyÇîÇ∫Ç–ÇÔÇÉÉ\É∏É⁄É¯É˘Ñ+Ñ/ÑXÑ\ÑjÑnÑ™ÑÛÑÙÖ Ö$ÖUÖæÖøÖ˚ÖˇÜKÜòÜ£ÜßÜ˜á:ááá à*à+àjà®à©à˙à˛âCâÖâ∏âπâÔâÛä>äÅäœããHãóãòã“ã÷åååååjå|åóå¨å≤ç çç ç!ç=çCçïç°ç¢ç◊ç›é,évéÄéÇéÉéΩé¡èè[è™èŒè“êêAêEêîê∂ê∫ë	ëOëúë‰í4ílípí±ìì$ì>ì\ìbìØì√îîîLî{îôîöîΩî√îÍîï;ïxïóïùïÌñ8ñÇñÃñóó6ó7óàóöó†óÏòòòWòßòıôEôîô«öödöeöôö∫öﬁö˝õõ!õ%õ&õpõ•õ‘õÿõŸúúúWúïúõúËú˜ú˝ùIùnù±ù≤ùÓùÙûFûöûﬂû¸ü	üü/ü0üzüÄü»üŒ††\†b†±†‡†Ì†˛°°S°à°∫°¬° °Œ°œ¢¢¢h¢ù¢£¢Ú£!£.£?£Q£Ñ£–§'§w§ §Á§•D•ó•Ê¶¶L¶û¶ÒßCßìßÂ®5®f®q®¡©©B©t©~©Ñ©à©â©ÿ©ﬁ™-™\™i™z™™™´™˚´#´)´y´ó´ù´Ë¨!¨l¨∏≠≠D≠J≠ä≠≠≠≥ÆÆ0Æ6ÆFÆLÆóÆ´Æ¯ØØ>ØâØçØéØ¡ØÓØÔ∞9∞{∞Å∞–∞˜±±±c±i±∏≤≤≤M≤Ñ≤Ö≤Ã≥≥e≥±≥Õ≥”¥ ¥n¥æµ	µYµrµxµ»∂∂T∂Z∂©∂¬∂”∂Ó∑∑∑∑∑k∑q∑•∑Ú∏F∏`∏f∏≥ππ9π?πäπÿ∫)∫q∫~∫è∫Ø∫‰∫Ë∫Èª2ªCªIªòª∞ªΩªŒª˛ªˇºAºGºóºÁΩ-ΩQΩWΩ¶Ω≈Ω“Ω„æææ^ædæ∞ø øQøkøqøæø·øÓøˇ¿ @;¿ @<¿ @¿ @Ö¿ @œ¿ A ¿ Aq¿ A™¿ A∞¿ A¿¿ A∆¿ B¿ BN¿ B[¿ Bl¿ Bé¿ Bè¿ B€¿ C(¿ C.¿ Cc¿ C¥¿ C˜¿ D9¿ D~¿ D≈¿ E¿ E¿ EO¿ Eö¿ E·¿ F¿ F ¿ Fd¿ F~¿ FÑ¿ Fî¿ Fö¿ FÍ¿ G¿ G¿ G%¿ GG¿ GH¿ Gy¿ G¿ G–¿ H¿ H¿ HU¿ Hf¿ Hl¿ Hπ¿ I¿ IV¿ Ig¿ It¿ Iá¿ Iû¿ I¢¿ I£¿ I‰¿ IÍ¿ J¿ J6¿ JR¿ Jf¿ J∆¿ K¿ K*¿ K1¿ KT¿ Kh¿ Kî¿ Kò¿ Kô¿ K‰¿ KÍ¿ L:¿ Lr¿ Lá¿ L£¿ L∑¿ M¿ Mb¿ M|¿ MÉ¿ M¶¿ M∫¿ MÊ¿ MÍ¿ MÎ¿ N3¿ N@¿ Na¿ N}¿ Në¿ NÕ¿ NÏ¿ O¿ O3¿ OH¿ ON¿ O`¿ Od¿ Oe¿ Oì¿ Oô¿ OÈ¿ P9¿ Pu¿ P{¿ PÕ¿ Q!¿ Qx¿ Qé¿ Q™¿ Qæ¿ Qˇ¿ RM¿ Rg¿ RÇ¿ RÜ¿ Rà¿ Râ¿ R¬¿ RÕ¿ R„¿ S¿ S(¿ S7¿ SK¿ SQ¿ SR¿ Sõ¿ Sø¿ S⁄¿ SÏ¿ T¿ T
¿ T$¿ TC¿ Tq¿ Tx¿ T|¿ T}¿ TÆ¿ T¥¿ T€¿ TÒ¿ TÚ¿ U¿ U"¿ Ur¿ Uç¿ Ué¿ Uö¿ Uı¿ U˜¿ U¯¿ V&¿ V*¿ Vs¿ V∫¿ Væ¿ VÃ¿ V–¿ W!¿ W1¿ W`¿ Wõ¿ W°¿ W“¿ W·¿ WÔ¿ X¿ X¿ X0¿ X`¿ Xa¿ Xä¿ Xê¿ X–¿ XÁ¿ XË¿ Y8¿ YI¿ YO¿ Yü¿ Y•¿ Yµ¿ Yª¿ Z¿ Z¿ Z9¿ Z:¿ Zx¿ Z~¿ ZÕ¿ Z⁄¿ [¿ [1¿ [N¿ [R¿ [S¿ [å¿ [í¿ [Ë¿ [Û¿ \!¿ \"¿ \.¿ \Ü¿ \à¿ \â¿ \«¿ \·¿ ]¿ ]L¿ ]j¿ ]k¿ ]ë¿ ]ó¿ ]‚¿ ^¿ ^K¿ ^L¿ ^r¿ ^x¿ ^æ¿ ^ﬂ¿ _&¿ _'¿ _N¿ _T¿ _ü¿ _À¿ _—¿ `¿ `a¿ `±¿ `–¿ a¿ a¿ aV¿ a§¿ a•¿ aÁ¿ aÌ¿ b<¿ bx¿ bÃ¿ bÕ¿ c
¿ c¿ cL¿ cl¿ cn¿ co¿ c¢¿ c¶¿ cÔ¿ d=¿ dä¿ dé¿ d›¿ e-¿ ex¿ e¬¿ eˆ¿ f-¿ fK¿ fY¿ fÜ¿ f°¿ fƒ¿ fÍ¿ fÎ¿ g<¿ gI¿ gl¿ gz¿ gï¿ gØ¿ g’¿ g÷¿ h¿ h7¿ h8¿ hÑ¿ hî¿ h»¿ i1¿ iN¿ iR¿ iS¿ i_¿ iö¿ i…¿ iÕ¿ iœ¿ i–¿ j¿ ji¿ jê¿ jµ¿ j—¿ j“¿ k#¿ k)¿ ky¿ kƒ¿ kË¿ l¿ l¿ lb¿ lh¿ l∏¿ m¿ m&¿ mN¿ mO¿ mÖ¿ mã¿ mÿ¿ n>¿ nç¿ n£¿ n§¿ n‹¿ n‚¿ o/¿ oï¿ oÊ¿ o˚¿ o¸¿ p2¿ p8¿ pÑ¿ p’¿ pÛ¿ q¿ q¿ qU¿ q[¿ qß¿ qÙ¿ rB¿ rl¿ rm¿ rß¿ r≠¿ r˘¿ sG¿ sÑ¿ sú¿ sû¿ sü¿ s¿ t¿ t¿ tk¿ tæ¿ t¬¿ u¿ u¿ u%¿ ut¿ u¡¿ u‰¿ uË¿ uÙ¿ v?¿ vO¿ v¿ v¡¿ w!¿ wÜ¿ wë¿ w‡¿ w‰¿ x1¿ xi¿ xç¿ xô¿ xª¿ xø¿ x…¿ y+¿ yi¿ yñ¿ z¿ z+¿ z|¿ z´¿ zª¿ z»¿ z‘¿ z˝¿ {¿ {¿ {#¿ {+¿ {1¿ {5¿ {=¿ {M¿ {Q¿ {_¿ {c¿ {Æ¿ {À¿ |¿ |P¿ |w¿ |¡¿ |ﬂ¿ |‡¿ }¿ }N¿ }™¿ ~¿ ~¿ ~O¿ ~¿ ~Ω¿ ~˘¿  ¿ B¿ I¿ d¿ µ¿ ≈¿ Ä¿ Ä9¿ Äá¿ ÄÆ¿ Ä˝¿ ÅN¿ Åk¿ Åz¿ ÅÅ¿ Å¨¿ Å≥¿ ÅÏ¿ ÅÛ¿ Ç!¿ Çq¿ Çí¿ Çô¿ Ç‰¿ É1¿ ÉA¿ Éú¿ Ñ¿ ÑB¿ Ñí¿ Ñ—¿ Ö¿ ÖÑ¿ Öƒ¿ Ö–¿ Ö⁄¿ Ö‚¿ Ü3¿ Üa¿ Üç¿ Üé¿ Ü‡¿ á¿ ái¿ áv¿ áæ¿ à¿ à¿ àN¿ à~¿ àè¿ àº¿ à∆¿ àŒ¿ àœ¿ à›¿ â#¿ âF¿ âñ¿ âﬂ¿ âË¿ â˚¿ ä¿ ä¿ ä¿ ä¿ ä¿ äj¿ ä∂¿ äº¿ ã¿ ãU¿ ãí¿ ãﬂ¿ å+¿ å|¿ å¶¿ å¨¿ å¯¿ çF¿ çí¿ ç›¿ é,¿ éu¿ éƒ¿ é˙¿ èF¿ èë¿ èœ¿ è˘¿ ê*¿ êy¿ ê≈¿ ë¿ ëc¿ ë≤¿ í ¿ í¿ í$¿ ír¿ í¡¿ ì¿ ì;¿ ìA¿ ìë¿ ìŒ¿ î¿ îd¿ î≠¿ î¸¿ ï>¿ ïD¿ ït¿ ïz¿ ï¢¿ ï®¿ ïﬁ¿ ï‰¿ ñ¿ ñ¿ ñ<¿ ñà¿ ñ•¿ ñ´¿ ñ‘¿ ñ⁄¿ ó!¿ ój¿ óp¿ óÄ¿ óÜ¿ ó◊¿ ó˝¿ òM¿ òv¿ ò≈¿ òÎ¿ ô7¿ ôÉ¿ ô”¿ ö¿ öd¿ ö¶¿ ö“¿ õ¿ õl¿ õÕ¿ õ”¿ õ’¿ õ÷¿ ú'¿ úg¿ úk¿ úº¿ ù
¿ ù_¿ ùú¿ ùﬂ¿ û"¿ ûO¿ û~¿ û¿ ûã¿ û∑¿ ûı¿ üQ¿ ü≤¿ üπ¿ †¿ †T¿ †¢¿ †‰¿ °0¿ °å¿ °∞¿ °¿¿ °˙¿ ¢Y¿ ¢ ¿ £¿ £R¿ £c¿ £µ¿ £ø¿ £ﬂ¿ §J¿ §ò¿ §Á¿ •3¿ •Ç¿ •ø¿ ¶¿ ¶`¿ ¶w¿ ¶…¿ ¶Ÿ¿ ¶Á¿ ¶Û¿ ¶˝¿ ß¿ ß*¿ ß+¿ ß¿ ß≥¿ ßπ¿ ß∫¿ ßÒ¿ ®,¿ ®-¿ ®v¿ ®¿¿ ®Ù¿ ©I¿ ©l¿ ©}¿ ©ü¿ ©©¿ ©±¿ ©œ¿ ™¿ ™¿ ™¿ ™#¿ ™%¿ ™&¿ ™p¿ ™t¿ ™√¿ ´¿ ´`¿ ´µ¿ ¨¿ ¨C¿ ¨G¿ ¨f¿ ¨j¿ ¨≥¿ ¨˘¿ ≠?¿ ≠â¿ ≠–¿ ≠˙¿ ≠˛¿ ÆI¿ Æì¿ Æ·¿ Ø,¿ Øv¿ Ø¡¿ ∞¿ ∞Y¿ ∞y¿ ∞}¿ ∞ò¿ ∞ú¿ ∞Ï¿ ±;¿ ±ä¿ ±⁄¿ ≤'¿ ≤t¿ ≤ñ¿ ≤ö¿ ≤È¿ ≥6¿ ≥n¿ ≥í¿ ≥ñ¿ ≥Ω¿ ≥¡¿ ¥¿ ¥_¿ ¥≠¿ ¥∆¿ ¥ ¿ µ¿ µh¿ µé¿ µí¿ µû¿ µ∞¿ µﬁ¿ µ‰¿ µÏ¿ µ¿ ∂3¿ ∂}¿ ∂¨¿ ∂∞¿ ∂º¿ ∂Ò¿ ∑¿ ∑2¿ ∑d¿ ∑|¿ ∑õ¿ ∑Ω¿ ∑€¿ ∏¿ ∏¿ ∏#¿ ∏0¿ ∏;¿ ∏D¿ ∏L¿ ∏T¿ ∏X¿ ∏û¿ ∏·¿ π¿ π¿ πf¿ πë¿ πï¿ π°¿ πΩ¿ π≈¿ π…¿ ∫¿ ∫_¿ ∫†¿ ∫Á¿ ª¿ ª¿ ª0¿ ª4¿ ªy¿ ªª¿ ªÚ¿ º)¿ º-¿ ºR¿ ºú¿ º‰¿ Ω.¿ Ω2¿ Ω>¿ ΩP¿ Ωj¿ Ω§¿ ΩŒ¿ æ¿ æT¿ æó¿ æ¢¿ æ¨¿ æ≤¿ æ∫¿ ææ¿ æ€¿ æﬂ¿ æÎ¿ ø¿ ø¿ ø¿ øA¿ øE¿ øé¿ øƒ¿ ø»¿ ¿¿ ¿b¿ ¿q¿ ¿u¿ ¿æ¿ ¿˝¿ ¡¿ ¡¿ ¡U¿ ¡}¿ ¡î¿ ¡∂¿ ¡’¿ ¬¿ ¬¿ ¬%¿ ¬-¿ ¬5¿ ¬=¿ ¬A¿ ¬â¿ ¬”¿ ¬Ô¿ ¬Û¿ √?¿ √{¿ √∆¿ ƒ¿ ƒ&¿ ƒ*¿ ƒ?¿ ƒC¿ ƒè¿ ƒ‡¿ ≈/¿ ≈Z¿ ≈^¿ ≈û¿ ≈Á¿ ∆,¿ ∆p¿ ∆ß¿ ∆´¿ ∆¸¿ «I¿ «î¿ «ò¿ «Æ¿ «≤¿ »¿ »O¿ »†¿ »”¿ »◊¿ …#¿ …q¿ …¬¿  ¿  ¿  ¿  M¿  b¿  ï¿  …¿  “¿ À%¿ ÀD¿ Àb¿ Àá¿ À“¿ ÀÏ¿ À˘¿ Ã¿ Ã¿ Ã¿ Ã¿ Ã ¿ Ã]¿ Ã•¿ ÃÛ¿ Õ>¿ ÕÑ¿ Õö¿ Õû¿ Õπ¿ ÕΩ¿ Œ	¿ ŒY¿ Œ™¿ ŒÁ¿ ŒÎ¿ Œ¸¿ œ ¿ œM¿ œõ¿ œ÷¿ œ⁄¿ –*¿ –w¿ –∆¿ —¿ —b¿ —x¿ —|¿ —∆¿ “¿ “/¿ “3¿ “F¿ “ï¿ “…¿ “Õ¿ ”¿ ”f¿ ”j¿ ”≥¿ ”‰¿ ”Ë¿ ‘2¿ ‘B¿ ‘F¿ ‘ï¿ ‘‡¿ ’/¿ ’¿ ’≠¿ ’±¿ ’ ¿ ’Œ¿ ÷¿ ÷e¿ ÷Ø¿ ÷˝¿ ◊¿ ◊#¿ ◊m¿ ◊~¿ ◊Œ¿ ◊˝¿ ÿJ¿ ÿõ¿ ÿÂ¿ Ÿ3¿ Ÿ¿ Ÿ¶¿ Ÿ™¿ ŸÓ¿ ⁄<¿ ⁄à¿ ⁄–¿ ⁄˘¿ €G¿ €M¿ €é¿ €”¿ €Ÿ¿ ‹¿ ‹2¿ ‹@¿ ‹j¿ ‹~¿ ‹ï¿ ‹‡¿ ‹˙¿ ›¿ ›]¿ ›ä¿ ›º¿ ›⁄¿ ›˜¿ ﬁ¿ ﬁE¿ ﬁp¿ ﬁí¿ ﬁ≈¿ ﬁ›¿ ﬁﬁ¿ ﬂ¿ ﬂ ¿ ﬂh¿ ﬂµ¿ ﬂÓ¿ ‡>¿ ‡D¿ ‡é¿ ‡«¿ ‡Õ¿ ·¿ ·j¿ ·π¿ ‚
¿ ‚1¿ ‚7¿ ‚Ç¿ ‚“¿ „ ¿ „b¿ „~¿ „Ñ¿ „’¿ ‰	¿ ‰¿ ‰Z¿ ‰™¿ ‰·¿ Â¿ Â¿ ÂQ¿ Ây¿ Â¿ ÂÃ¿ Â˚¿ Ê¿ ÊM¿ Ês¿ Êy¿ Ê ¿ Á¿ Ái¿ Á°¿ Á≈¿ Á∆¿ Ë¿ Ë8¿ Ë>¿ Ëé¿ Ë∆¿ Ë«¿ ËÚ¿ Ë¯¿ È(¿ È.¿ È{¿ È≠¿ ÈÀ¿ ÈÃ¿ Í
¿ Í1¿ Í2¿ Íq¿ Íw¿ Í√¿ Î¿ Î-¿ Î3¿ ÎÅ¿ Îæ¿ Î‰¿ ÎÂ¿ Ï¿ Ï>¿ Ï?¿ Ïé¿ Ï°¿ Ïß¿ ÏÊ¿ Ì5¿ ÌÖ¿ Ìº¿ Ì¬¿ Ó¿ Ó\¿ Óh¿ Ón¿ Ó±¿ Ó˝¿ ÔM¿ Ôt¿ Ôz¿ Ôä¿ Ôê¿ Ô›¿ ÔÔ¿ =¿ d¿ Ø¿ ¯¿ ÒF¿ Ò~¿ Òì¿ Ò∑¿ Ò∏¿ ÒÒ¿ Ò˜¿ Ú¿ Ú¿ Úg¿ Úé¿ Úº¿ ÚΩ¿ Û¿ Û:¿ Û@¿ Ûr¿ Ûx¿ Û∆¿ Ù¿ Ù,¿ Ù2¿ Ù}¿ Ù¥¿ ı¿ ıR¿ ıü¿ ı‰¿ ˆ1¿ ˆÄ¿ ˆâ¿ ˆª¿ ˆº¿ ˜¿ ˜6¿ ˜<¿ ˜â¿ ˜⁄¿ ¯'¿ ¯-¿ ¯y¿ ¯¨¿ ¯˜¿ ˘G¿ ˘ï¿ ˘©¿ ˘Ø¿ ˘˛¿ ˙L¿ ˙ö¿ ˙Â¿ ˙¿ ˙ˆ¿ ˚¿ ˚8¿ ˚9¿ ˚å¿ ˚√¿ ˚…¿ ˚·¿ ˚¸¿ ˚˝¿ ¸N¿ ¸]¿ ¸c¿ ¸ô¿ ¸‡¿ ˝&¿ ˝,¿ ˝r¿ ˝ø¿ ˝ˇ¿ ˛#¿ ˛)¿ ˛z¿ ˛à¿ ˛é¿ ˛‹¿ ˇ¿ ˇ¿ ˇe¿ ˇk¿ ˇµ¿ ˇ≈¿ ˇ⁄¿ ˇ‡¿ ¿ X¿ ©¿ ˆ¿,¿2¿v¿Ø¿ƒ¿ ¿‡¿Ê¿	¿¿¿;¿n¿v¿Ä¿í¿ò¿Æ¿¥¿ ¿¿¿!¿C¿`¿s¿â¿∞¿Œ¿¿˝¿¿¿¿,¿2¿H¿N¿ö¿†¿Æ¿“¿ ¿;¿Y¿_¿Ç¿Ω¿«¿œ¿’¿Ò¿¿!¿7¿á¿í¿ö¿§¿∂¿º¿Ã¿“¿¿?¿S¿Ö¿ü¿∑¿Œ¿’¿%¿)¿*¿{¿ä¿ê¿–¿	¿	k¿	§¿	π¿	ø¿	Ú¿	¯¿
B¿
Ñ¿
Õ¿¿<¿B¿Ñ¿Ω¿“¿ÿ¿$¿s¿¡¿¿[¿w¿å¿í¿®¿Æ¿—¿◊¿Â¿¿-¿@¿V¿}¿ö¿ª¿»¿”¿€¿Â¿˜¿¿C¿]¿u¿å¿ì¿Ì¿Ò¿Ú¿B¿ê¿◊¿›¿¿j¿∑¿ ¿O¿ù¿Ê¿Ï¿3¿y¿¿À¿¿X¿¶¿Ù¿A¿n¿t¿≈¿”¿Ÿ¿'¿`¿f¿¥¿ı¿˚¿L¿_¿t¿z¿≠¿≥¿…¿œ¿Ú¿¯¿¿)¿r¿z¿Ñ¿ñ¿ú¿¨¿≤¿¿6¿J¿õ¿µ¿Õ¿›¿Ù¿˚¿j¿n¿o¿ø¿¿T¿Z¿•¿Û¿B¿Ñ¿ô¿ü¿›¿„¿*¿0¿y¿¿ï¿õ¿æ¿ƒ¿“¿ˆ¿E¿M¿W¿i¿}¿‘¿Ó¿¿¿-¿4¿≠¿±¿≤¿ˇ¿ 8¿ >¿ z¿ ª¿ ¡¿!¿!T¿!Z¿!©¿!Í¿"8¿"á¿"”¿#"¿#r¿#©¿#Ø¿$ ¿$¿$¿$b¿$õ¿$°¿$Ô¿%)¿%/¿%à¿%é¿%£¿%©¿%‹¿%‚¿%¯¿%˛¿&!¿&'¿&5¿&Y¿&†¿&®¿&≤¿&ƒ¿& ¿&⁄¿&‡¿'+¿'W¿'k¿'∑¿'—¿'È¿'˘¿(¿(¿(Å¿(Ö¿(Ü¿(”¿)¿)¿)X¿)°¿)¿*2¿*G¿*M¿*Ü¿*å¿*”¿*Ÿ¿+"¿+(¿+>¿+D¿+g¿+m¿+{¿+ô¿+‰¿+Ï¿+ˆ¿,¿,¿,n¿,à¿,†¿,∞¿,«¿,Œ¿-B¿-F¿-G¿-ï¿-Â¿.	¿.¿.S¿.ö¿.…¿.œ¿/¿/M¿/S¿/°¿/Î¿/Ò¿0>¿0k¿0q¿0∞¿0˛¿1¿1¿1j¿1π¿1ˆ¿26¿2Ä¿2Œ¿3¿3B¿3H¿3ô¿3ß¿3≠¿3˚¿44¿4:¿4à¿4é¿4ﬁ¿4ˆ¿5¿5¿5D¿5J¿5`¿5f¿5â¿5è¿5ù¿5Ω¿6¿6 ¿6*¿6<¿6B¿6R¿6X¿6®¿6◊¿6Î¿7+¿7E¿7^¿7~¿7ï¿7ú¿8¿8¿8¿8[¿8´¿8œ¿8’¿9#¿9t¿9√¿:¿:¿: ¿:a¿:g¿:Æ¿:¥¿:˝¿;¿;¿;¿;B¿;H¿;V¿;v¿;€¿;„¿;Ì¿;ˇ¿<¿<Y¿<s¿<å¿<¨¿<√¿< ¿=@¿=D¿=E¿=í¿=ß¿=≠¿=ﬁ¿>$¿>q¿>±¿>’¿>€¿?,¿?:¿?@¿?é¿?«¿?Õ¿@¿@,¿@2¿@H¿@N¿@q¿@w¿@Ö¿@†¿@æ¿@—¿@Ù¿A3¿A@¿AK¿AS¿A]¿Ao¿Au¿AÖ¿Aã¿A◊¿AÛ¿B¿B[¿Bâ¿Bç¿Bé¿B◊¿BÏ¿BÚ¿C-¿C{¿C ¿C¸¿D¿D¿DE¿DK¿DÜ¿D‘¿E!¿Eg¿E¥¿E¯¿E˛¿FJ¿Fï¿F™¿F∞¿F˘¿Fˇ¿G¿G8¿G>¿Gö¿G¨¿G¿¿HG¿Hú¿H†¿H°¿HÒ¿I@¿Iz¿IÄ¿Iº¿J¿JZ¿J®¿J¯¿KF¿KÑ¿Kä¿K÷¿L#¿Lc¿L±¿LÛ¿L˘¿MJ¿MX¿M^¿M¨¿MÂ¿MÎ¿N9¿Nz¿Nè¿Nï¿N´¿N±¿N‘¿N⁄¿NË¿O¿O5¿OH¿Ok¿OÆ¿Oª¿O∆¿OŒ¿Oÿ¿OÍ¿O¿P ¿P¿PV¿PÖ¿Pô¿Q¿Qr¿Qv¿Qw¿Q«¿R¿RL¿RR¿Rò¿RÊ¿S0¿Sr¿Sá¿Sç¿S∆¿SÃ¿T¿T
¿TS¿TY¿To¿Tí¿Tò¿U ¿U¿U&¿U⁄¿VQ¿VU¿VV¿V£¿VÍ¿W
¿W¿WO¿Wñ¿W≈¿WÀ¿X¿XI¿XO¿Xù¿XÁ¿XÌ¿Y:¿Yg¿Ym¿Y≥¿Z¿ZN¿Zû¿ZÁ¿[4¿[Ñ¿[≈¿[À¿\¿\*¿\0¿\~¿\∑¿\Ω¿]¿] ¿]&¿]<¿]B¿]e¿]k¿]y¿]ü¿]À¿]ﬁ¿^8¿^\¿^g¿^o¿^y¿^ã¿^ë¿^°¿^ß¿^Ò¿_¿_1¿_∞¿_˝¿`¿`¿`K¿`í¿`≤¿`∏¿a¿aR¿aú¿aﬁ¿aÛ¿a˘¿b5¿b;¿bs¿by¿b¬¿b»¿bﬁ¿c¿c¿ct¿cÜ¿cö¿dL¿d¿¿dƒ¿d≈¿e¿e2¿e8¿el¿e∏¿f¿fV¿f¶¿fŒ¿f‘¿g$¿gL¿gR¿g£¿g‚¿h2¿hz¿h«¿i¿i1¿i7¿iá¿i©¿iØ¿i˝¿j¿j¿j(¿j.¿j}¿j»¿k¿k=¿kQ¿k‘¿l)¿l-¿l.¿l{¿lõ¿l°¿lﬂ¿m.¿m}¿mØ¿mƒ¿m ¿m˚¿n¿n9¿n?¿nà¿nú¿oV¿oŸ¿o›¿oﬁ¿p+¿py¿pî¿pö¿pÿ¿q"¿qq¿q¿¿r¿r8¿r>¿ré¿r∂¿rº¿s¿sL¿sú¿s‰¿t1¿tÇ¿tõ¿t°¿tÔ¿u¿u
¿u¿u ¿um¿uÄ¿u–¿uˇ¿v¿v£¿w¿w¿w¿wZ¿w®¿w√¿w…¿x¿x_¿x≠¿xı¿y
¿y¿yK¿yQ¿yâ¿yè¿yÿ¿yÏ¿z≥¿{F¿{J¿{K¿{õ¿{©¿{Ø¿{‚¿|1¿|Å¿|ö¿|†¿|⁄¿|Ô¿|ı¿}¿}¿}V¿}n¿}õ¿}›¿~¿~¿~¿~g¿~∏¿~‹¿~‚¿¿b¿≥¿ ¿–¿Ä¿Ä\¿Äb¿Ä≤¿Å ¿Å>¿ÅD¿Åï¿Å‹¿Å‚¿Ç-¿Çx¿Çá¿Çú¿Ç¢¿Ç≤¿Ç∏¿É¿ÉC¿Éî¿É≈¿ÉŸ¿Ñ2¿Ñh¿Ñl¿Ñm¿Ñª¿Ñ–¿Ñ÷¿Ö¿ÖV¿Ö§¿ÖÈ¿Ü6¿Ü<¿Üà¿Ü÷¿á¿án¿áº¿à¿à¿à]¿à¨¿àÏ¿â¿â¿âf¿âl¿âπ¿â‡¿âı¿â˚¿ä¿ä¿äN¿äT¿äb¿äx¿äò¿ä†¿ä™¿äº¿ä¬¿äÙ¿ä˙¿ã¿ã¿ã\¿ãd¿ãn¿ãÇ¿ãŒ¿ã¯¿ã¸¿ã˝¿åJ¿åÄ¿åÜ¿åª¿ç¿ç1¿ç7¿çÄ¿ç´¿ç±¿ç¿çˆ¿é<¿éQ¿éW¿ém¿és¿éñ¿éú¿é™¿é¡¿è¿è¿è¿è)¿èr¿è°¿è•¿è¶¿èı¿ê&¿ê,¿êd¿ê¥¿ë¿ë¿ë¿ëd¿ë≥¿ë˚¿íG¿íò¿í±¿í∑¿ì¿ì¿ì%¿ìc¿ìx¿ì~¿ìœ¿î¿îK¿îÄ¿îÑ¿îÖ¿î‘¿ï$¿ïM¿ïS¿ïê¿ï‡¿ñ-¿ñE¿ñK¿ñê¿ñﬂ¿ó'¿ós¿óƒ¿ó›¿ó„¿ò4¿ò|¿òÇ¿ò¿¿ò’¿ô(¿ôh¿ôl¿ôm¿ôΩ¿ôÃ¿ô“¿ôı¿ô˚¿ö	¿ö%¿ö5¿öE¿ög¿öq¿öw¿ö»¿õ¿õ<¿õB¿õì¿õ€¿õ·¿ú!¿ú=¿úY¿úy¿úÄ¿ú»¿úÁ¿ù0¿ùc¿ùi¿ùÇ¿ùÿ¿ùÂ¿û7¿û=¿û>¿ûN¿ûm¿ûâ¿ûÁ¿ü@¿üÄ¿üã¿üì¿ü¶¿ü∞¿ü«¿üÀ¿üÃ¿†¿†3¿†9¿†\¿†b¿†p¿†≥¿†◊¿†Ó¿° ¿°¿°6¿°>¿°H¿°N¿°ü¿°Ë¿¢¿¢¿¢f¿¢l¿¢¨¿¢Œ¿¢Í¿£
¿£¿£Y¿£x¿£¡¿£Ù¿£˙¿§¿§i¿§v¿§»¿§Œ¿§‰¿§Ë¿§È¿• ¿•&¿•u¿•ó¿•ù¿•Ó¿¶<¿¶ä¿¶†¿¶¶¿¶ˆ¿ßB¿ßë¿ßÃ¿®<¿®z¿®≈¿©¿©C¿©h¿©z¿©º¿©—¿©›¿™M¿™ê¿™π¿™ÿ¿´¿´)¿´?¿´l¿´Ö¿´ï¿´¯¿¨¿¨
¿¨+¿¨?¿¨c¿¨Ñ¿¨ù¿¨÷¿≠¿≠è¿≠‰¿≠Û¿Æ ¿Æ¿Æ%¿Æ=¿ÆE¿ÆÜ¿ÆÒ¿Ø3¿Øô¿Øü¿Øﬁ¿ØÂ¿∞1¿∞Ä¿∞…¿∞È¿±+¿±C¿±¢¿±Ã¿±–¿±—¿±›¿≤¿≤¿≤¿≤K¿≤N¿≤Ä¿≤•¿≤ ¿≤¿≥¿≥D¿≥k¿≥ë¿≥¡¿≥Ò¿¥!¿¥Q¿¥Å¿¥±¿¥Â¿µ¿µD¿µr¿µü¿µÀ¿µˆ¿∂¿∂B¿∂l¿∂ö¿∂¬¿∂È¿∑¿∑9¿∑a¿∑â¿∑±¿∑Ÿ¿∏¿∏'¿∏L¿∏u¿∏ö¿∏ø¿∏Û¿π ¿π#¿πo¿πñ¿πÊ¿π˝¿∫V¿∫[¿∫y¿∫~¿∫˙¿ªO¿ªz¿ª”¿º:¿º~¿º‡¿Ω¿Ω¿Ω*¿Ω/¿Ωò¿Ωº¿ΩÎ¿æ#¿æã¿æ‡¿øF¿øé¿ø¬¿øÏ¿øÓ¿øÔ¿¿0¿¿1¿¿[¿¿ñ¿¿„¿¡¿¡¿¡¿¡8¿¡G¿¡Y¿¡Ü¿¡©¿¡…¿¡¿¬¿¬7¿¬i¿¬ú¿¬÷¿√
¿√¿√<¿√=¿√I¿√g¿√†¿√°¿√Ÿ¿√⁄¿√˙¿ƒc¿ƒ∆¿≈'¿≈(¿≈x¿≈æ¿≈‹¿∆,¿∆t¿∆á¿∆…¿«¿«¿«E¿«Ö¿«ã¿«ú¿«†¿«°¿«œ¿«–¿«˚¿»¿»'¿»9¿»M¿»í¿»∏¿»º¿»Ω¿…!¿…R¿…q¿…ï¿…ª¿…›¿…Ú¿ ¿ J¿ u¿ Æ¿ µ¿ π¿ ∫¿À\¿ÀË¿Ã¿Ã+¿Ã7¿ÃW¿Ã§¿ÃÃ¿Ã”¿Õ¿Õ-¿ÕB¿Õo¿ÕŒ¿Œ¿Œ4¿Œ`¿Œó¿Œ∆¿ŒÒ¿œ9¿œe¿œÆ¿œ∏¿œ¬¿œœ¿–¿–(¿–S¿–Y¿–o¿–ê¿–ñ¿–ó¿–˚¿—(¿—f¿—o¿—|¿—±¿—ﬁ¿“¿“"¿“(¿“,¿“-¿“c¿“Ü¿“∂¿“∫¿“ª¿“·¿“Á¿”4¿”w¿”}¿”Œ¿”Í¿‘N¿‘m¿‘ë¿‘º¿‘Ë¿’¿’]¿’£¿’∫¿’ﬂ¿’Ú¿’¯¿÷ ¿÷K¿÷_¿÷e¿÷¿÷ê¿÷î¿÷ï¿÷Ø¿÷’¿÷Ô¿◊>¿◊i¿◊m¿◊n¿◊÷¿◊ı¿ÿ¿ÿD¿ÿq¿ÿï¿ÿ¬¿ÿˇ¿Ÿ¿Ÿ¿Ÿ¿Ÿ¿Ÿc¿Ÿw¿Ÿ†¿Ÿ∂¿Ÿ◊¿Ÿ›¿Ÿ·¿Ÿ‚¿Ÿ˚¿Ÿ¸¿⁄¿⁄.¿⁄J¿⁄r¿⁄v¿⁄w¿⁄ü¿⁄†¿⁄œ¿⁄¸¿€¿€7¿€á¿€’¿€‹¿‹¿‹&¿‹=¿‹i¿‹î¿‹ò¿‹ô¿‹Ã¿›¿›¿›C¿›ì¿›·¿›Ë¿ﬁ$¿ﬁ2¿ﬁI¿ﬁu¿ﬁë¿ﬁæ¿ﬁ¬¿ﬁ√¿ﬁ◊¿ﬂ¿ﬂC¿ﬂG¿ﬂH¿ﬂ[¿ﬂú¿ﬂ…¿ﬂ ¿‡¿‡g¿‡©¿‡¯¿·I¿·J¿·∑¿·∏¿·⁄¿·Ò¿·˛¿‚)¿‚D¿‚}¿‚°¿‚π¿‚ÿ¿‚˙¿„¿„9¿„W¿„ß¿„ƒ¿„–¿„€¿‰ ¿‰¿‰¿‰¿‰¿‰.¿‰m¿‰©¿‰≠¿‰Æ¿‰≈¿Â¿ÂB¿ÂF¿ÂG¿Âü¿Â†¿Â≈¿Ê¿ÊE¿ÊI¿ÊJ¿Êv¿Ê∑¿ÊÙ¿Ê¯¿Ê˘¿Á8¿Ái¿Á∑¿ÁÛ¿Ë¿Ë¿ËL¿Ëã¿Ëí¿Ëñ¿Ëó¿Ëﬂ¿ÈQ¿È°¿È¢¿ÈÈ¿Í!¿Í%¿Í&¿Í2¿ÍÜ¿Íá¿Íì¿Í€¿Î¿Î	¿ÎS¿ÎT¿Î`¿Îw¿ÎÉ¿Î«¿Ï¿Ïl¿Ïs¿Ïú¿Ï†¿Ï°¿Ï≠¿Ï√¿Ïœ¿Ì¿Ìd¿Ì∑¿Ìæ¿ÌÊ¿ÌÍ¿ÌÎ¿Ì˜¿Ó¿Ó)¿Óz¿ÓÀ¿Ô¿Ô&¿Ô@¿Ôj¿Ôn¿Ôo¿Ô{¿Ô¶¿Ô≤¿¿T¿®¿∂¿Ω¿‹¿Ò¿Ò
¿Ò¿Ò¿Ò0¿Ò<¿Òç¿Ò‹¿Ú0¿Ú>¿ÚE¿ÚS¿Ú}¿ÚÅ¿ÚÇ¿ÚÀ¿ÚÚ¿Û¿Û]¿Ûa¿Ûc¿Ûd¿Ûã¿Û§¿Ûª¿Û‘¿ÛŸ¿Û˛¿Ù&¿Ù'¿ÙR¿ÙT¿ÙU¿Ùï¿Ù≤¿Ù”¿Ù˜¿ı"¿ı#¿ı/¿ı[¿ıè¿ıì¿ıï¿ıñ¿ı’¿ıÒ¿ˆ¿ˆ6¿ˆa¿ˆb¿ˆn¿ˆö¿ˆÕ¿ˆ—¿ˆ”¿ˆ‘¿˜¿˜5¿˜V¿˜z¿˜•¿˜¶¿˜≤¿˜ﬁ¿¯¿¯¿¯¿¯¿¯^¿¯~¿¯ü¿¯√¿¯Ó¿¯Ô¿¯˚¿˘'¿˘r¿˘v¿˘x¿˘y¿˘°¿˘•¿˘Ó¿˙N¿˙z¿˙™¿˙Ó¿˚M¿˚¨¿˚≠¿˚˜¿¸N¿¸O¿¸™¿¸´¿¸◊¿¸ÿ¿˝¿˝¿˝¿˝.¿˝E¿˝U¿˝ä¿˝≥¿˝◊¿˝˚¿˛¿˛C¿˛á¿˛Æ¿˛ø¿˛Ë¿ˇ¿ˇ ¿ˇ-¿ˇ\¿ˇÄ¿ˇ°¿ˇ»¿ ¿ 6¿ G¿ p¿ ô¿ ®¿ µ¿ ø¿ «¿ ⁄¿ ‰¿%¿O¿q¿w¿£¿§¿Ò¿&¿c¿©¿—¿¿¿;¿m¿s¿w¿x¿∑¿¿¿h¿i¿u¿æ¿¿A¿B¿Ö¿ß¿Œ¿‘¿Ú¿¿ ¿W¿§¿Ÿ¿¿)¿T¿]¿k¿ë¿·¿0¿9¿T¿§¿™¿´¿˘¿	"¿	T¿	v¿	π¿	¡¿	„¿	¸¿
&¿
8¿
w¿
Æ¿
√¿
Ù¿6¿g¿ï¿∏¿ˇ¿¿)¿8¿E¿P¿X¿^¿_¿k¿Ü¿“¿ ¿m¿ä¿ë¿¨¿‰¿ ¿9¿=¿>¿J¿Å¿ß¿¡¿Ó¿˚¿¿%¿)¿5¿o¿p¿|¿ù¿¿¿¸¿*¿T¿X¿Y¿õ¿‘¿˚¿P¿d¿≥¿¿4¿i¿∏¿	¿Z¿ù¿¿6¿â¿ÿ¿¸¿9¿e¿é¿Ω¿¿f¿ä¿¥¿	¿[¿í¿´¿‹¿¿$¿9¿K¿[¿k¿w¿é¿ú¿…¿—¿!¿:¿r¿ß¿€¿˛¿¿¿	¿.¿X¿∑¿¿¿Ó¿Ú¿Û¿ˇ¿-¿S¿c¿ò¿¡¿Â¿	¿*¿Q¿ï¿º¿Õ¿ˆ¿¿.¿;¿j¿é¿Ø¿÷¿¿D¿U¿~¿ß¿∂¿√¿Õ¿’¿Ë¿Ú¿%¿i¿ç¿–¿¸¿  ¿ (¿ K¿ Q¿ è¿ °¿ ≈¿ È¿!
¿!1¿!u¿!ú¿!≠¿!÷¿!ˇ¿"¿"¿"%¿":¿"F¿"\¿"b¿"c¿"ë¿"ª¿"ø¿"¿¿"È¿"˘¿#(¿#_¿#á¿#¢¿#”¿#ˆ¿$ ¿$¿$¿$%¿$)¿$*¿$6¿$L¿$é¿$∞¿$»¿$Ã¿$Õ¿$Ÿ¿$Ì¿%¿%G¿%q¿%ì¿%ô¿%ù¿%û¿%™¿%Ω¿%ÿ¿%Ë¿&¿&¿& ¿&0¿&t¿&°¿&¥¿&æ¿&ﬂ¿&˝¿'+¿'B¿'W¿'ê¿'™¿'Æ¿'Ø¿'Ú¿(+¿(,¿(c¿(~¿(Æ¿(’¿(‹¿(‡¿(·¿)¿)¿)(¿)@¿)P¿)s¿)ö¿)ª¿)Œ¿)ÿ¿)Ÿ¿*¿*g¿*±¿*¯¿*ˇ¿+.¿+N¿+°¿+–¿,¿,C¿,ê¿,·¿,‚¿-4¿-â¿-º¿.¿.S¿.†¿.¡¿/¿/-¿/q¿/Å¿/º¿0
¿0+¿0g¿0≠¿0¸¿1¿1d¿1¿1Õ¿1˘¿23¿24¿2\¿2x¿2ñ¿2≈¿2Ú¿2Û¿3-¿3ù¿3û¿3≈¿3Ò¿4!¿4`¿4µ¿4˛¿5¿5<¿5î¿5π¿5⁄¿5Â¿6¿6*¿6<¿6D¿6l¿6{¿6Ω¿6È¿6¯¿7$¿7S¿7s¿7é¿7´¿7±¿7≤¿7‘¿8&¿86¿8ã¿8«¿9¿9;¿9ã¿9Æ¿9 ¿9‹¿9‰¿:#¿:O¿:^¿:Æ¿:‚¿;¿;¿;4¿;:¿;u¿;†¿;°¿;Û¿<&¿<z¿<«¿<ﬂ¿=¿=R¿=ó¿=∫¿=»¿=‰¿>¿>(¿>w¿>Ü¿>£¿>µ¿>∂¿>÷¿>◊¿?"¿?#¿??¿?Q¿?R¿?w¿?ù¿?Ø¿?∑¿?Ô¿@¿@$¿@%¿@L¿@x¿@ª¿@÷¿@·¿A¿A9¿A{¿AÖ¿A’¿B ¿B@¿Br¿Bõ¿BÃ¿B◊¿B˝¿C¿C<¿Cé¿Cﬂ¿CÍ¿D¿D¿Df¿Dπ¿D¿E'¿EN¿EV¿E\¿E]¿EØ¿F<¿Fl¿Fπ¿F÷¿F◊¿G¿G7¿GÇ¿Gö¿G¡¿G‰¿GÒ¿H%¿Hë¿HŒ¿H‡¿HË¿HÈ¿IS¿I£¿IÔ¿J¿JB¿Jà¿J≈¿K¿Kc¿Kï¿K“¿K⁄¿L¿L¿L¿L@¿Ls¿L¢¿LÕ¿Lˆ¿MK¿Me¿Mu¿M¢¿M“¿N¿NT¿N_¿Nå¿Nñ¿Nó¿Nª¿O¿OO¿O§¿O√¿Oˆ¿PA¿PY¿P~¿P°¿P¨¿P“¿P‰¿PÏ¿Q¿QZ¿Qâ¿Q∏¿Qÿ¿Qı¿R¿R¿R¿Re¿R¡¿RÒ¿S¿SI¿Sr¿S≤¿S¿T¿T¿T3¿Tl¿T£¿T‹¿T‚¿U¿U.¿Ui¿U¶¿UÆ¿U¥¿UÒ¿V)¿VE¿V~¿VÇ¿VÉ¿V§¿V•¿V„¿W¿W1¿WÄ¿Wœ¿X ¿Xg¿Xå¿X£¿XÕ¿Y¿Yé¿YÙ¿ZT¿Zê¿Z©¿ZŒ¿Z¿[¿[/¿[L¿[¨¿[π¿[˘¿\¿\2¿\b¿\|¿\õ¿\√¿\“¿]¿](¿]4¿]E¿]h¿]í¿]∏¿]‹¿]¯¿^¿^<¿^ú¿^¬¿^œ¿_¿_R¿_ì¿_œ¿_Â¿_Ò¿`¿`Z¿`î¿`≈¿`Í¿`˚¿a¿aX¿aâ¿aÆ¿b ¿b=¿b^¿bo¿bë¿b±¿b“¿c8¿cx¿cé¿cö¿cø¿c‰¿d¿d>¿dJ¿dq¿dÁ¿dÙ¿e3¿eÄ¿e°¿e∑¿e√¿f¿f%¿f6¿f\¿fò¿f©¿f–¿fÚ¿g2¿gF¿gk¿gê¿gµ¿gË¿h¿h¿h3¿hP¿h∞¿hΩ¿hˇ¿i¿i:¿ik¿i¶¿iπ¿i≈¿i˝¿j¿j7¿jâ¿jø¿j◊¿jË¿k¿k5¿kN¿k_¿kg¿ky¿kç¿k•¿kﬁ¿k‰¿l¿l?¿l@¿lå¿l¢¿l¡¿l¬¿lÊ¿m¿ma¿m¡¿m ¿n
¿nQ¿nó¿nƒ¿nÃ¿n“¿n”¿o!¿o.¿ob¿o¨¿oÀ¿o‚¿oË¿p¿p7¿p=¿pW¿pÑ¿pä¿p®¿p¨¿p≠¿p‘¿p˚¿q"¿qI¿qW¿q]¿qé¿q‰¿r¿r!¿r"¿rS¿r™¿r·¿rÁ¿rÎ¿rÏ¿s¿s4¿sM¿s~¿s™¿sæ¿s–¿sÿ¿tH¿tI¿tÇ¿tø¿tÒ¿t˚¿u/¿u7¿u¨¿uÌ¿v%¿va¿vi¿v{¿vÅ¿vÖ¿vÜ¿v“¿w¿w1¿w5¿w6¿wy¿w∞¿w¬¿w»¿w⁄¿wﬁ¿wﬂ¿x*¿xo¿xÅ¿xá¿xƒ¿x»¿x…¿y+¿yF¿y`¿yï¿y®¿y∏¿y‰¿z ¿z^¿zª¿{	¿{0¿{Q¿{f¿{q¿{y¿{å¿{ñ¿{»¿{⁄¿{ˆ¿{˝¿|C¿|j¿||¿|©¿|„¿}O¿}m¿}Ã¿}˚¿~
¿~Å¿~è¿~ô¿~Æ¿~∫¿~˜¿	¿&¿`¿À¿Ä ¿Äó¿Ä•¿ÄØ¿Äƒ¿Ä–¿Ä÷¿Ä˛¿Å¿Å¿Å¿ÅB¿ÅH¿Å{¿ÅÅ¿Å¥¿Å∫¿Å–¿Å÷¿Å˘¿Åˇ¿Ç¿Ç*¿ÇT¿Ç\¿Çf¿Çx¿Ç~¿Çé¿Çî¿Çﬁ¿É¿É¿É@¿ÉX¿Éo¿Év¿Éº¿É¿¿É¡¿ÉÓ¿ÉÙ¿Ñ1¿Ñ7¿Ñj¿Ñp¿Ñ∑¿ÑΩ¿Ö¿Ö¿Ö"¿Ö(¿ÖK¿ÖQ¿Ö_¿Ö{¿ÖØ¿Ö∑¿Ö¡¿Ö”¿ÖÁ¿Ü¿Ü0¿ÜG¿ÜN¿Üm¿ÜÚ¿á/¿áF¿áb¿áù¿á€¿áÚ¿à¿à¿à¿àd¿à≥¿à–¿à÷¿â¿â¿âM¿âS¿âi¿âo¿âí¿âò¿â¶¿â¿¿â¯¿ä ¿ä
¿ä¿ä"¿ä2¿ä8¿äâ¿ä∫¿äŒ¿ã¿ã0¿ã@¿ãW¿ã^¿ã√¿ã«¿ã»¿å¿åc¿åÄ¿åÜ¿åŒ¿å‘¿ç¿ç¿ç_¿çe¿çÆ¿ç¥¿ç ¿ç–¿çÛ¿ç˘¿é¿é ¿éb¿éj¿ét¿éÜ¿éö¿éÍ¿è¿è¿è)¿è0¿èO¿è‘¿ê¿ê(¿êD¿ê¿êƒ¿êÓ¿ë¿ë¿ë¿ë`¿ëm¿ës¿ë¨¿ë≤¿ëÂ¿ëÎ¿í¿í¿í*¿í0¿í>¿íT¿íÑ¿íå¿íñ¿í®¿íÆ¿íæ¿íƒ¿ì¿ì;¿ìO¿ìî¿ì¨¿ìº¿ì”¿ì⁄¿ìÔ¿î)¿î-¿î.¿îz¿îá¿îç¿î–¿î÷¿ï¿ï¿ï\¿ïb¿ï´¿ï±¿ï«¿ïÕ¿ï¿ïˆ¿ñ¿ñ¿ñR¿ñZ¿ñd¿ñv¿ñä¿ñ’¿ñÌ¿ñ˝¿ó¿ó¿ó0¿óq¿óu¿óv¿ó«¿ò¿ò¿òL¿òR¿òÖ¿òã¿ò°¿òß¿ò ¿ò–¿òﬁ¿ô¿ôS¿ô[¿ôe¿ôw¿ô}¿ôç¿ôì¿ô„¿ö¿ö&¿ö_¿öx¿öò¿öØ¿ö∂¿õ¿õ¿õ¿õn¿õ¨¿õ≤¿õ˝¿ú¿úD¿úJ¿úë¿úó¿ú‡¿úÊ¿ú¸¿ù¿ù%¿ù+¿ù9¿ùV¿ù≤¿ù∫¿ùƒ¿ù÷¿ùÍ¿û)¿ûB¿ûb¿ûy¿ûÄ¿û¢¿ü'¿üd¿ü~¿üö¿ü’¿†¿†C¿†d¿†h¿†i¿†ò¿†û¿†Ã¿†“¿†Ë¿†Ó¿°¿°¿°%¿°>¿°\¿°¿°æ¿°À¿°÷¿°ﬁ¿°Ë¿°˙¿¢ ¿¢¿¢¿¢b¿¢~¿¢í¿¢…¿¢¯¿£@¿£Y¿£]¿£^¿£ò¿£®¿£Ã¿£Ó¿§¿§2¿§Ñ¿§‡¿§Ô¿•¿•=¿•J¿•U¿•]¿•p¿•z¿•ã¿•è¿•ê¿•√¿•‹¿•Ï¿¶a¿¶≤¿¶≈¿¶œ¿¶‚¿¶Ê¿¶Á¿ß¿ß¿ßP¿ßV¿ßÑ¿ßä¿ß¬¿ß»¿®¿®¿®-¿®P¿®V¿®∏¿® ¿®ﬁ¿©H¿©j¿©‘¿™Y¿™ö¿™º¿™ÿ¿´¿´Q¿´h¿´â¿´ç¿´é¿´µ¿´–¿´‡¿´˚¿¨¿¨¿¨9¿¨e¿¨ù¿¨∂¿¨“¿¨‚¿¨˛¿≠¿≠¿≠>¿≠B¿≠C¿≠t¿≠ç¿≠›¿Æ&¿Æl¿Æm¿Æò¿Æ≥¿Æ‡¿Æ·¿Ø¿Ø4¿Øv¿Ø™¿Øª¿Ø›¿ØÁ¿∞¿∞¿∞S¿∞ù¿∞æ¿∞…¿∞Û¿±)¿±I¿±Å¿±é¿±ò¿±Œ¿±÷¿±◊¿≤¿≤:¿≤D¿≤J¿≤g¿≤k¿≤l¿≤º¿≥¿≥¿≥¿≥W¿≥]¿≥s¿≥y¿≥ú¿≥¢¿≥∞¿≥À¿≥˙¿¥¿¥`¿¥m¿¥x¿¥Ä¿¥ä¿¥ú¿¥¢¿¥≤¿¥∏¿µ¿µ7¿µK¿µ¥¿µ“¿µ˚¿∂-¿∂í¿∂Æ¿∂≤¿∂≥¿∂ˇ¿∑G¿∑[¿∑a¿∑§¿∑™¿∑„¿∑È¿∏!¿∏'¿∏p¿∏v¿∏å¿∏Ø¿∏µ¿π#¿π5¿πI¿π‡¿∫¿∫l¿∫Ò¿ª2¿ªT¿ªp¿ª´¿ª¿º¿º;¿º?¿º@¿ºí¿º≠¿ºΩ¿ºÿ¿ºÎ¿ºı¿Ω¿ΩB¿Ωc¿ΩÀ¿æ
¿æe¿æ~¿æö¿æ™¿æ∆¿æŸ¿æ„¿ø¿ø
¿ø¿ø[¿øå¿øí¿øŒ¿ø‘¿øÍ¿ø¿¿¿¿¿¿'¿¿H¿¿t¿¿Œ¿¿Ú¿¿˝¿¡¿¡¿¡!¿¡'¿¡-¿¡=¿¡C¿¡ç¿¡π¿¡Õ¿¬/¿¬M¿¬v¿¬£¿¬’¿√9¿√U¿√Y¿√Z¿√¶¿√◊¿√›¿ƒ#¿ƒ)¿ƒe¿ƒk¿ƒ£¿ƒ©¿ƒÚ¿ƒ¯¿≈¿≈1¿≈7¿≈™¿≈º¿≈–¿∆e¿∆ä¿∆˜¿«|¿«Ω¿«‚¿«˛¿»9¿»w¿»ß¿»»¿»Ã¿»Õ¿…¿…7¿…G¿…b¿…u¿…¿…†¿…Ã¿…¸¿ ¿ S¿ x¿ ë¿ œ¿ Ù¿À¿À(¿À.¿ÀJ¿ÀK¿À[¿Àw¿Àä¿Àî¿À∑¿Àª¿Àº¿Àˆ¿À¸¿Ã-¿Ã3¿ÃC¿ÃI¿Ãò¿Ã„¿Õ,¿ÕX¿Õl¿Õ“¿ÕÌ¿Œ¿Œ4¿ŒR¿Œ≠¿Œ±¿Œ≤¿ŒÏ¿ŒÚ¿œ-¿œ3¿œd¿œj¿œ¢¿œ®¿œÒ¿–¿–¢¿–¿¿–È¿—¿—{¿“ ¿“¿“_¿“Ñ¿“†¿“€¿”¿”@¿”a¿”e¿”f¿”©¿”ƒ¿”Â¿”Û¿‘¿‘¿‘1¿‘;¿‘v¿‘¢¿‘ı¿’H¿’∂¿’Ê¿÷¿÷;¿÷W¿÷g¿÷É¿÷ñ¿÷†¿÷¥¿÷Ÿ¿÷›¿÷ﬁ¿◊(¿◊a¿◊g¿◊¢¿◊®¿◊∏¿◊æ¿ÿ¿ÿ¿ÿn¿ÿù¿ÿ±¿Ÿ$¿ŸB¿Ÿk¿Ÿå¿Ÿ∏¿⁄¿⁄¿⁄ ¿⁄j¿⁄£¿⁄©¿⁄Ó¿⁄Ù¿€/¿€5¿€m¿€s¿€º¿€–¿‹z¿‹õ¿‹«¿‹Ï¿›Y¿›ﬁ¿›ˇ¿ﬁ@¿ﬁe¿ﬁÅ¿ﬁº¿ﬁ˝¿ﬂ)¿ﬂJ¿ﬂN¿ﬂO¿ﬂö¿ﬂµ¿ﬂÌ¿‡I¿‡•¿·¿·=¿·V¿·{¿·ä¿·ú¿·¢¿·Ú¿‚¿‚G¿‚c¿‚ú¿‚†¿‚°¿‚Ã¿‚“¿„¿„¿„¿„¿„i¿„Å¿„ì¿„˜¿‰¿‰V¿‰é¿‰⁄¿‰¯¿Â7¿Âv¿Âz¿Â{¿ÂÃ¿Ê¿ÊA¿ÊG¿Êy¿Ê¿Êè¿Êï¿Ê„¿Á ¿Áq¿Á¢¿Á∂¿Á¯¿ËD¿Ëé¿Ë®¿ËØ¿Ë ¿Ëﬁ¿È¿Ès¿Èî¿È¶¿ÈÙ¿ÍC¿Íç¿Íß¿ÍÆ¿Í—¿Î0¿ÎK¿Îr¿Îà¿Î¨¿Î¡¿Î÷¿Îˇ¿Ï¿Ï¿Ï¿Ï¿ÏO¿ÏU¿ÏÇ¿Ïà¿Ïû¿Ï§¿Ï€¿Ï·¿ÏÔ¿Ì¿Ì$¿Ì,¿Ì6¿ÌH¿Ì^¿Ìd¿Ìñ¿Ìú¿Ì™¿Ì«¿Ì˚¿Ó¿Ó¿Ó¿Ó3¿Ób¿Ó}¿Óç¿Ó®¿Óª¿Ó≈¿Ô¿Ô0¿Ôí¿Ô·¿¿J¿R¿_¿{¿µ¿ª¿Ó¿Ò#¿ÒÑ¿Òî¿Ò∞¿Ò√¿ÒÕ¿Ò¿ÒÙ¿Òı¿Ú4¿Ú:¿Úl¿Úr¿Úà¿Úé¿Ú±¿Ú∑¿Ú≈¿Úﬁ¿Û¿Û!¿Û+¿Û=¿Ûi¿ÛØ¿Û˘¿Ù¿Ù¿Ù9¿Ù_¿Ùo¿Ù|¿Ù∑¿ı¿ı¿ı(¿ı.¿ı2¿ı3¿ıÄ¿ıÜ¿ıª¿ıÊ¿ˆ¿ˆ¿ˆ,¿ˆG¿ˆZ¿ˆd¿ˆä¿ˆ∑¿˜¿˜*¿˜>¿˜q¿˜Å¿˜ù¿˜∞¿˜∫¿˜Œ¿˜Ê¿¯¿¯e¿¯É¿¯ï¿¯û¿¯¢¿¯£¿¯Ù¿˘8¿˘>¿˘x¿˘Æ¿˘…¿˘Ÿ¿˘Ù¿˙¿˙¿˙2¿˙^¿˙∫¿˚¿˚ç¿˚Æ¿˚«¿˚Ï¿˚˚¿¸¿¸¿¸c¿¸Å¿¸¥¿¸ƒ¿¸‡¿¸Û¿¸˝¿˝¿˝¿˝S¿˝Y¿˝©¿˝˘¿˛F¿˛ê¿˛∫¿˛¿¿ˇ¿ˇ^¿ˇv¿ˇ£¿ˇÔ¿ =¿ U¿ o¿ ∆¿¿c¿ì¿ﬁ¿	¿Z¿Â¿Ú¿/¿5¿K¿ì¿≤¿Õ¿¿¿F¿J¿K¿_¿â¿°¿÷¿¿*¿E¿I¿J¿ç¿µ¿‡¿
¿Q¿U¿V¿ù¿¬¿»¿ÿ¿ﬁ¿(¿_¿®¿©¿˜¿O¿P¿ã¿ë¿’¿€¿	¿	6¿	X¿	Ä¿	Æ¿	À¿	˜¿
 ¿
"¿
a¿
Ü¿
ƒ¿
Ì¿¿5¿G¿O¿ì¿œ¿’¿Ÿ¿⁄¿˙¿ ¿N¿í¿∞¿Ÿ¿˚¿#¿g¿é¿î¿ò¿ô¿≈¿∆¿˙¿"¿&¿'¿]¿à¿å¿ç¿Æ¿¿e¿¨¿ı¿$¿£¿∑¿€¿*¿Q¿[¿a¿Æ¿≤¿≥¿ø¿Ê¿¿"¿p¿æ¿—¿ˆ¿¿8¿g¿ö¿∏¿¿)¿K¿h¿ñ¿¥¿“¿Ù¿q¿Ç¿ë¿û¿©¿≤¿π¿Ω¿ø¿¿¿›¿Ê¿Û¿ı¿ˆ¿¿\¿Ü¿†¿¿¿Â¿
¿8¿s¿ì¿∏¿·¿‚¿(¿B¿z¿ô¿Ò¿¿¿G¿ú¿»¿!¿'¿+¿,¿P¿n¿ã¿å¿≠¿Æ¿œ¿¿#¿'¿(¿9¿d¿Ö¿â¿ä¿ó¿œ¿–¿=¿\¿~¿∑¿“¿Í¿˜¿¿=¿D¿H¿J¿K¿ê¿±¿…¿Ê¿¿M¿N¿†¿æ¿Á¿¿2¿e¿l¿p¿q¿}¿®¿Â¿ˇ¿ ¿ (¿ <¿ D¿ H¿ I¿ U¿ u¿ ä¿ •¿ ¶¿ ≤¿ Î¿![¿!v¿!à¿!å¿!é¿!è¿!ÿ¿!˝¿"¿":¿"`¿"≠¿"Æ¿#¿#!¿#—¿#˛¿$)¿$K¿$~¿$Ö¿$â¿$ä¿$ñ¿%¿%+¿%,¿%8¿%c¿%}¿%◊¿%Û¿&0¿&J¿&g¿&Ñ¿&ò¿&†¿&§¿&•¿&±¿&—¿'¿'"¿'#¿'/¿'h¿'∂¿'“¿'Â¿'È¿'Î¿'Ï¿(=¿(Å¿(∂¿(∑¿(∆¿(«¿(Ú¿)¿)M¿)}¿)µ¿)”¿*
¿*g¿*ã¿*å¿*’¿+ ¿+!¿+P¿+|¿+¶¿+∏¿+¿¿+¡¿+Ó¿,	¿,~¿,—¿,Ó¿-(¿-_¿-Å¿-∞¿-‡¿.E¿.V¿.å¿.¬¿.Ã¿.ﬁ¿.Ê¿.Á¿/¿/m¿/¢¿/¬¿/Ô¿09¿0o¿0 ¿0˙¿1J¿1§¿1Ÿ¿1·¿1Á¿2X¿2ß¿2®¿2¿2Ò¿3X¿3Y¿3w¿3ù¿3∂¿3º¿3¿¿3¡¿3◊¿3¿4¿44¿4T¿4Z¿4Ñ¿4¶¿4‚¿5¿5K¿5Ñ¿5∞¿5€¿5·¿5Â¿5Ê¿6;¿6q¿6Ö¿6ã¿6≥¿6‹¿6Ú¿6˙¿7 ¿7¿7¿7¿7'¿7A¿7j¿7x¿7~¿7†¿7∑¿7ª¿7º¿7Œ¿7œ¿8¿8¿8^¿8x¿8¢¿8ÿ¿91¿9F¿9L¿9¢¿9ƒ¿9Ÿ¿9ﬂ¿:¿:m¿:s¿:Ü¿:ä¿:ã¿:Æ¿:Ø¿:ª¿:¿;¿;¿;¿;¿;O¿;ò¿<¿<¿<M¿<U¿<Y¿<Z¿<f¿<†¿<√¿<«¿<»¿<‘¿<Ô¿=¿=¿=¿="¿=A¿=C¿=D¿=â¿=ç¿=‹¿>¿>W¿>X¿>†¿>Î¿>˙¿>˛¿?N¿?ï¿?ô¿?»¿@*¿@+¿@g¿@k¿@π¿@’¿@Ÿ¿A	¿AG¿AH¿Añ¿AÕ¿A—¿B ¿Bo¿B≥¿B∑¿C¿CR¿Cû¿CÌ¿D<¿DS¿DW¿D§¿D…¿DÕ¿E¿El¿E≥¿E◊¿E€¿F&¿Fu¿F©¿F≠¿F¡¿G¿GM¿GQ¿G©¿Gπ¿G˛¿H'¿H-¿Hu¿Hè¿H√¿H‡¿Hı¿I8¿I9¿Iá¿I◊¿J¿JG¿JH¿Jã¿Jë¿J·¿K.¿Ky¿Kö¿K†¿KÌ¿L;¿LY¿LÜ¿Lá¿Lœ¿L‡¿LÊ¿M%¿MU¿MV¿M£¿M¥¿M∫¿N¿N>¿Nå¿N≤¿N ¿N‰¿O!¿O>¿Oa¿Ox¿O|¿O}¿O¿¿O∆¿P¿P=¿P>¿Pu¿P{¿PØ¿P–¿P‰¿PÂ¿PÒ¿Q¿Q¿Q&¿QL¿Qe¿Qà¿Qé¿Qí¿Qì¿Qü¿Q∫¿Q’¿QÍ¿R¿R¿R¿R'¿RO¿Ri¿RÖ¿Râ¿Rä¿R§¿R•¿R±¿Rƒ¿RŸ¿S¿S/¿S3¿S4¿S@¿S¿SÄ¿S¢¿SÁ¿T¿T¿T ¿T!¿TJ¿Tb¿Tê¿T¨¿TË¿U¿U)¿U9¿UA¿UÉ¿Uò¿U±¿U÷¿Uﬁ¿U‚¿U„¿VC¿VE     S`