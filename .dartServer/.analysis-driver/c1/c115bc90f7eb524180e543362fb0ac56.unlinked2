ÅDsetupParentDatacomputeMinIntrinsicWidthcomputeMaxIntrinsicWidthcomputeMinIntrinsicHeightcomputeMaxIntrinsicHeightcomputeDistanceToActualBaselinecomputeDryLayoutperformLayoutcomputeSizeForNoChildhitTestChildrenapplyPaintTransformpaintdeferToChildopaquetranslucentbehaviorhitTesthitTestSelfdebugFillPropertiesadditionalConstraints_additionalConstraintsdebugPaintSizemaxWidth	_maxWidth	maxHeight
_maxHeight_limitConstraints_computeSizeaspectRatio_aspectRatio_applyAspectRatio	stepWidth
_stepWidth
stepHeight_stepHeight
_applyStepalwaysNeedsCompositing_alphaopacity_opacityalwaysIncludeSemantics_alwaysIncludeSemanticsvisitChildrenForSemantics_currentlyNeedsCompositingattachdetach_updateOpacitylayershaderCallback_shaderCallback	blendMode
_blendModefilter_filter_reclipaddListenerremoveListenergetClipgetApproximateClipRectshouldRecliptoStringshapetextDirectionclipper_clipper_markNeedsClip_defaultClip_clipclipBehavior_clipBehavior_updateClipdescribeApproximatePaintClip_debugPaint
_debugTextborderRadius_borderRadius_cachedRect_cachedPath_getClipPath	elevation
_elevationshadowColor_shadowColorcolor_colordescribeSemanticsConfiguration_shape
background
foreground_painter
decoration_decorationposition	_positionconfiguration_configurationorigin_origin	alignment
_alignment_textDirectiontransformHitTests
_transform	transformfilterQuality_filterQualitysetIdentityrotateXrotateYrotateZ	translatescale_effectiveTransform_resolvedAlignment_resolve_markNeedResolution_fitAffectsLayoutfit_fit_hasVisualOverflow_clearPaintData_updatePaintData_paintChildWithTransformtranslation_translationonPointerDownonPointerMoveonPointerUponPointerHoveronPointerCancelonPointerSignalhandleEvent_opaquehitTestBehavioronEnteronHoveronExitcursor_cursorvalidForMouseTracker_validForMouseTrackerisRepaintBoundarytoImagedebugSymmetricPaintCount_debugSymmetricPaintCountdebugAsymmetricPaintCount_debugAsymmetricPaintCountdebugResetMetrics!debugRegisterRepaintBoundaryPaintignoring	_ignoringignoringSemantics_ignoringSemantics_effectiveIgnoringSemanticsoffstage	_offstagesizedByParentperformResizedebugDescribeChildren	absorbing
_absorbingmetaDatavalidActions_validActionsonTap_onTaponLongPress_onLongPressonHorizontalDragUpdate_onHorizontalDragUpdateonVerticalDragUpdate_onVerticalDragUpdatescrollFactor_isValidAction_performSemanticScrollLeft_performSemanticScrollRight_performSemanticScrollUp_performSemanticScrollDown	container
_containerexplicitChildNodes_explicitChildNodesexcludeSemantics_excludeSemanticschecked_checkedenabled_enabledselected	_selectedbutton_buttonslider_sliderkeyboardKey_keyboardKeylink_linkheader_header	textField
_textFieldreadOnly	_readOnly	focusable
_focusablefocused_focusedinMutuallyExclusiveGroup_inMutuallyExclusiveGroupobscured	_obscured	multiline
_multilinescopesRoute_scopesRoute
namesRoute_namesRoutehidden_hiddenimage_image
liveRegion_liveRegionmaxValueLength_maxValueLengthcurrentValueLength_currentValueLengthtoggled_toggledattributedLabel_attributedLabelattributedValue_attributedValueattributedIncreasedValue_attributedIncreasedValueattributedDecreasedValue_attributedDecreasedValueattributedHint_attributedHinthintOverrides_hintOverridessortKey_sortKeytagForChildren_tagForChildren	onDismiss
_onDismissonScrollLeft_onScrollLeftonScrollRight_onScrollRight
onScrollUp_onScrollUponScrollDown_onScrollDown
onIncrease_onIncrease
onDecrease_onDecreaseonCopy_onCopyonCut_onCutonPaste_onPasteonMoveCursorForwardByCharacter_onMoveCursorForwardByCharacteronMoveCursorBackwardByCharacter _onMoveCursorBackwardByCharacteronMoveCursorForwardByWord_onMoveCursorForwardByWordonMoveCursorBackwardByWord_onMoveCursorBackwardByWordonSetSelection_onSetSelection	onSetText
_onSetTextonDidGainAccessibilityFocus_onDidGainAccessibilityFocusonDidLoseAccessibilityFocus_onDidLoseAccessibilityFocuscustomSemanticsActions_customSemanticsActions_performTap_performLongPress_performDismiss_performScrollLeft_performScrollRight_performScrollUp_performScrollDown_performIncrease_performDecrease_performCopy_performCut_performPaste$_performMoveCursorForwardByCharacter%_performMoveCursorBackwardByCharacter_performMoveCursorForwardByWord _performMoveCursorBackwardByWord_performSetSelection_performSetText!_performDidGainAccessibilityFocus!_performDidLoseAccessibilityFocusblocking	_blocking	excluding
_excludingindex_index_previousLayoutSizeshowWhenUnlinked_showWhenUnlinkedoffset_offsetleaderAnchor_leaderAnchorfollowerAnchor_followerAnchorgetCurrentTransformvalue_valuesized_sized3RenderProxyBoxRenderProxyBoxMixinHitTestBehavior!RenderProxyBoxWithHitTestBehaviorRenderConstrainedBoxRenderLimitedBoxRenderAspectRatioRenderIntrinsicWidthRenderIntrinsicHeightRenderOpacityRenderAnimatedOpacityMixinRenderAnimatedOpacityShaderCallbackRenderShaderMaskRenderBackdropFilterCustomClipperShapeBorderClipper_RenderCustomClipRenderClipRectRenderClipRRectRenderClipOvalRenderClipPath_RenderPhysicalModelBaseRenderPhysicalModelRenderPhysicalShapeDecorationPositionRenderDecoratedBoxRenderTransformRenderFittedBoxRenderFractionalTranslationPointerDownEventListenerPointerMoveEventListenerPointerUpEventListenerPointerCancelEventListenerPointerSignalEventListenerRenderPointerListenerRenderMouseRegionRenderRepaintBoundaryRenderIgnorePointerRenderOffstageRenderAbsorbPointerRenderMetaDataRenderSemanticsGestureHandlerRenderSemanticsAnnotationsRenderBlockSemanticsRenderMergeSemanticsRenderExcludeSemanticsRenderIndexedSemanticsRenderLeaderLayerRenderFollowerLayerRenderAnnotatedRegionÅÁImageFilterGradientImageColorPointerEventPointerDownEventPointerMoveEventPointerUpEventPointerCancelEventRenderProxySliver	RenderBoxRenderObjectWithChildMixinchildoptionalTypeArgsToverridevoidRenderObject
parentData
ParentDatadoublegetMinIntrinsicWidthgetMaxIntrinsicWidthgetMinIntrinsicHeightgetMaxIntrinsicHeightTextBaselinegetDistanceToActualBaselinecomputeDistanceToActualBaselineSizeBoxConstraintsgetDryLayoutcomputeSizeForNoChildlayoutconstraintsparentUsesSizesizesmallestboolBoxHitTestResultOffsethitTestpositionMatrix4PaintingContext
paintChilddeferToChildcontainshitTestChildrentranslucentaddBoxHitTestEntryopaqueDiagnosticPropertiesBuilderdebugFillPropertiesEnumPropertydefaultValuedebugAssertIsValidmarkNeedsLayouthasBoundedWidthhasTightWidthminWidthcomputeMinIntrinsicWidthisFinitehasInfiniteWidthconstrainWidthcomputeMaxIntrinsicWidthhasBoundedHeighthasTightHeight	minHeightcomputeMinIntrinsicHeighthasInfiniteHeightconstrainHeightcomputeMaxIntrinsicHeightenforce	constrainzerodebugPaintSizePaintisEmptycolorcanvasdrawRectDiagnosticsPropertymaxWidth	maxHeightinfinityChildLayouterlayoutChildChildLayoutHelperdryLayoutChildDoublePropertyFlutterErrorruntimeTypeisTighttightAlignRowCrossAxisAlignmentstretchceiltightenwidthheightColumngetAlphaFromOpacityintmarkNeedsCompositingBitsUpdatemarkNeedsPaintmarkNeedsSemanticsUpdatelayerneedsCompositingpushOpacitypaintoldLayerOpacityLayerRenderObjectVisitorFlagPropertyvalueifTrueRenderSliverAnimatedOpacityRenderSliver_currentlyNeedsCompositing	Animation_opacityattachedopacityremoveListener_updateOpacityaddListener_alwaysIncludeSemanticsPipelineOwnerattachdetach_alphaalwaysIncludeSemanticsShaderRect
ShaderMasklinear	BlendModemodulateShaderMaskLayershadermaskRect	blendMode	pushLayersrcOverBackdropFilterLayerblurfilterClipRectClipPath	ClipRRectClipOvalShapeBorder
ListenablereclipVoidCallbackStringobjectRuntimeTypePathTextDirectiongetOuterPathtextDirectionshapeClip	antiAliasshouldRecliphasSizeperformLayoutgetClipgetApproximateClipRectTextPainterTileModerepeatedstrokeWidthstylePaintingStylestroketextTextSpan	TextStylefontSizertlclipperclipBehaviornone_clipper_updateClip_clippushClipRectClipRectLayershift_debugPaint
_debugTextRRectBorderRadius_markNeedsCliptoRRectpushClipRRect	outerRectClipRRectLayer	drawRRect	tlRadiusXaddOvalcenterdxdydistanceSquaredpushClipPathClipPathLayerdrawPathaddRectdebugDisableShadowsSemanticsConfigurationdescribeSemanticsConfiguration	elevationColorPropertyshadowColorBoxShape	rectanglePhysicalModelLayercircle
fromRectXYrectaddRRectclipPathchildPaintBoundsdebugCreator
DecorationImageConfiguration
backgroundempty
BoxPainterBoxDecorationdisposeImageProviderresolvecreateBoxPaintercopyWithgetSaveCount	fromPartsDiagnosticsNodeErrorSummaryErrorDescriptionDiagnosticsTreeStyleerrorProperty	isComplexsetIsComplexHint
foregroundtoDiagnosticsNodenameAlignmentGeometryFilterQuality	transform	alignmentfilterQualityoriginAlignmentDirectionalcenterStart	Alignmentxltr	centerEndlocalToGlobalglobalToLocalcopysetIdentityrotateXrotateYrotateZ	translateyzscaleidentity	alongSizemultiplyaddWithPaintTransformMatrixUtilsgetAsTranslationpushTransformTransformLayertranslationValuesmatrixstorageImageFilterLayerimageFilterTransformPropertyBoxFitcontain	scaleDowncoverfill	fitHeightfitWidthdebugCheckingIntrinsicsdebugCannotComputeDryLayoutreasonloosensizeConstraints,constrainSizeAndAttemptToPreserveAspectRatiounconstrainedSizeFittedSizesapplyBoxFitdestinationsourceinscribelefttopeverysetZerodebugNeedsLayoutaddWithPaintOffsetoffsetListenerPointerSignalEventbehaviorPointerHoverEventListenerbiggestHitTestEntrydebugHandleEventcallPointerHoverEventFlagsSummaryFunctionifEmptyMouseRegionMouseTrackerAnnotationMouseCursordeferPointerEnterEventListenerPointerExitEventListenerifFalsedebugDumpRenderTree
pixelRatiodebugNeedsPaintOffsetLayertoImageFutureincludedParentincludedChildMessagePropertyPercentPropertyunittooltipmessageSemanticsNodedescription%markNeedsLayoutForSizedByParentChangecomputeDryLayoutperformResizevisitChildrenForSemanticsListoffstagesparsedynamicGestureTapCallbackGestureLongPressCallbackGestureDragUpdateCallbackSemanticsActiontap
scrollLeftscrollRightSet	setEqualsonTap	longPressonLongPressonScrollRightonScrollLeftscrollUp
onScrollUp
scrollDownonScrollDownDragUpdateDetailsdeltaprimaryDeltaglobalPositionIterablePropertyAttributedStringSemanticsHintOverridesSemanticsSortKeySemanticsTagMoveCursorHandlerSetSelectionHandlerSetTextHandlerMapCustomSemanticsActionisSemanticBoundaryExcludeSemantics	SemanticsSemanticsFlaghasCheckedState	isCheckedhasEnabledState	isEnabled
isSelectedisButtonisSliderisKeyboardKeyisLinkisHeaderisTextField
isReadOnlyisFocusable	isFocusedisInMutuallyExclusiveGroup
isObscuredisMultilinescopesRoute
namesRouteisHiddenisImage
liveRegionmaxValueLengthcurrentValueLength	isToggledattributedLabelattributedValueattributedIncreasedValueattributedDecreasedValueattributedHinthintOverridessortKeydismissincreasedecreasecutpastemoveCursorForwardByCharactermoveCursorBackwardByCharactermoveCursorForwardByWordmoveCursorBackwardByWordsetSelectionsetTextdidGainAccessibilityFocus	FocusNode
FocusScopeFocusManagerdidLoseAccessibilityFocuscustomActionexplicitChildNodes
isNotEmptyaddTagForChildren	onDismiss
onIncrease
onDecreaseonCopyonCutonPasteonMoveCursorForwardByCharacteronMoveCursorBackwardByCharacteronMoveCursorForwardByWordonMoveCursorBackwardByWordonSetSelection	onSetTextonDidGainAccessibilityFocusonDidLoseAccessibilityFocuscustomSemanticsActionsTextSelection+isBlockingSemanticsOfPreviouslyPaintedNodesisMergingSemanticsOfDescendants
ScrollViewscrollIndexCustomScrollViewindexInParentCompositedTransformTargetLeaderLayer	LayerLink
leaderSizelinkCompositedTransformFollowerFollowerLayertopLeft
bottomLeftgetLastTransformleadershowWhenUnlinkedlinkedOffsetunlinkedOffsetfromLTRBnegativeInfinityAnnotatedRegionLayerLayerfindObject	RenderBoxRenderObjectWithChildMixinRenderProxyBoxMixinRenderProxyBoxRenderAnimatedOpacityMixin
ListenableCustomClipper_RenderCustomClip_RenderPhysicalModelBase!RenderProxyBoxWithHitTestBehaviorMouseTrackerAnnotationc‹àßÕ–—–E”UúÛát package:flutter/gestures.dart   dart:ui package:flutter/animation.dart package:flutter/foundation.dart package:flutter/gestures.dart package:flutter/semantics.dart package:flutter/services.dart 'package:vector_math/vector_math_64.dart box.dart 
layer.dart layout_helper.dart object.dart 	dart:core¿ë¬ ¿“xïS <ÄÜÄ§Ä•ÄÊÄÁÅÅ:ÅbÅãÅ≥Å¥ÅÊÅÁÅ˙ÇÇ,ÇBÇCÇoÇÇìÇßÇπÇœÇ–ÉÉÉdÉ≤ÑÑEÑIÑòÑÈÖ8ÖLÖPÖ^ÖbÖ≤Ö√Ü7ÜYÜ_ÜÆÜ˚áá4áLáPáRáSá{ááºààPà≠àøââ(âUâ°âƒâÌääää%äXäoä°ä±äµä∂ä¬äıãã>ãNãRãSã_ãíã©ã€ãÎãÔãã¸å/åFåxåàåååçåôå‹åÛç.çjçnçoç{ç±ç ç˘çˇé.é2é3é?éXéqé©é√é–èèèèèUèôè‘èıè˘è˙êêVêñêöêõêßêÌêÓê˙ë1ëHërëvëxëyëùë¥íí>íNíOíöíÈìììì^ìôì®ì™ì´ìÍîîNîÅîáîÀîÒï#ï9ïNïOïwïìïîï†ïËññ'ññøñÙñ˙óóóó!ólómóyóæóÈòFòJòLòMò~òÇò—ôôjôwô{ôÀöö1öeöõö°öõ	õõRõÄõªõÚúúúHúéú∑úÎùù.ùWùeùâù†ù§ù•ù±ù‰û<ûjû´û«û˘ü4üFüJüKüWüäü‚††Q†m†ü†⁄†Ï††Ò†˝°0°ä°π°˚¢¢K¢à¢õ¢ü¢†¢¨¢ﬂ£9£h£™£«£˙§7§J§N§O§[§t§≠§∆••8•E•î•ö•û•ü•´•·•˙¶I¶V¶•¶´¶Ø¶∞¶º¶¸ß'ß7ßPßÇßöß«ß˛®®®#®'®(®4®y®§©©©©©M©ê©î©·™,™w™∆™ﬂ™„´.´t´Ñ´¥¨¨:¨@¨á¨õ¨∞¨∆¨Ì≠≠I≠≠ú≠ª≠–≠—Æ&ÆJÆ^Æ}Æ®ÆƒÆ“ÆÈØ ØØØ\ØÇØóØ∑Ø‚Øˇ∞∞%∞<∞@∞A∞Ç∞ù∞√±.±V±∆±Õ±—±“≤4≤M≤ü≤Œ≤‘≥≥≥≥%≥[≥t≥î≥…≥–≥‘≥’≥·≥˙¥¥3¥e¥l¥p¥q¥}¥¬¥ÌµFµ°µ•µßµ®µ„µÁ∂3∂Ç∂–∂‘∑∑l∑§∑®∑ı∏C∏í∏Ÿ∏›π)πzπÀ∫∫g∫µªªQªûª‰º$ºUºíºòº€ºÒΩΩ(ΩLΩnΩìΩ∂ΩÀΩÃΩˆΩ¸æLæìæΩæ‘æˆøø*øFøeøsøçø§ø®ø©øµøË¿ @¿ @%¿ @<¿ @n¿ @~¿ @Ç¿ @É¿ @è¿ @¬¿ @€¿ @ˇ¿ A¿ AH¿ AX¿ A\¿ A]¿ Ai¿ Aú¿ A¥¿ A◊¿ AÓ¿ B ¿ B0¿ B4¿ B5¿ BA¿ Bt¿ Bå¿ BØ¿ B∆¿ B¯¿ C¿ C¿ C¿ CD¿ Cr¿ CÇ¿ CÕ¿ CÈ¿ D¿ Dv¿ D«¿ E¿ E7¿ EB¿ EJ¿ E]¿ Eg¿ Eh¿ EÖ¿ E®¿ E©¿ E“¿ EÂ¿ EÊ¿ F3¿ F¿ Fñ¿ F∞¿ F’¿ F‚¿ G¿ G-¿ G3¿ G4¿ GÇ¿ GÃ¿ H¿ H/¿ H0¿ HX¿ H|¿ H°¿ Hß¿ H®¿ H“¿ H¯¿ I¿ I#¿ I$¿ IL¿ Ip¿ Iï¿ Iõ¿ Iú¿ I∆¿ IÏ¿ J¿ J¿ J¿ JO¿ JS¿ JT¿ J`¿ Jñ¿ J¡¿ J≈¿ J∆¿ J“¿ JÎ¿ K¿ K,¿ K]¿ Ka¿ Kb¿ Kn¿ K≥¿ Kﬁ¿ L¿ L"¿ L$¿ L%¿ La¿ Le¿ L≤¿ M¿ M6¿ M:¿ MÜ¿ M÷¿ N"¿ Nl¿ Nπ¿ N·¿ NÂ¿ O5¿ OÅ¿ Oø¿ O√¿ P¿ P^¿ P≠¿ Pƒ¿ P»¿ P÷¿ P⁄¿ Q)¿ Qp¿ Qæ¿ Q—¿ R¿ R`¿ R≠¿ R·¿ S¿ Se¿ Sk¿ Sª¿ S‹¿ Sı¿ T¿ T$¿ T:¿ To¿ T¶¿ T≈¿ TÊ¿ T˚¿ T¸¿ UG¿ UM¿ Uu¿ Uú¿ U≤¿ U”¿ U˝¿ V¿ V(¿ V@¿ VW¿ V[¿ V\¿ V®¿ VÆ¿ V÷¿ Vˇ¿ W¿ W8¿ Wb¿ WÄ¿ Wé¿ Wß¿ Wæ¿ W¬¿ W√¿ W¸¿ X¿ X.¿ XB¿ Xk¿ Xo¿ Xp¿ X|¿ XØ¿ X‹¿ X‡¿ X·¿ XÌ¿ Y ¿ Y7¿ YI¿ Yá¿ Y±¿ Yµ¿ Y∂¿ Y¬¿ Yı¿ Z¿ Z¿ Z7¿ Zp¿ Zå¿ ZÀ¿ Z˜¿ Z˚¿ Z¸¿ [¿ [;¿ [R¿ [d¿ [}¿ [∂¿ [“¿ \¿ \=¿ \A¿ \B¿ \£¿ \º¿ \‰¿ ]5¿ ]U¿ ]¶¿ ]Æ¿ ]œ¿ ^!¿ ^B¿ ^ñ¿ ^û¿ ^Õ¿ ^⁄¿ ^˝¿ _¿ _¿ _¿ _¿ _J¿ _c¿ _ò¿ _∏¿ _ø¿ _√¿ _ƒ¿ _–¿ _È¿ `¿ `4¿ `T¿ `[¿ `_¿ ``¿ `l¿ `±¿ `‹¿ a¿ aV¿ aZ¿ a\¿ a]¿ aí¿ añ¿ a‰¿ b4¿ bi¿ bm¿ bπ¿ c	¿ cW¿ c¢¿ c¿ d¿ d¿ dj¿ d∏¿ e¿ e¿ e"¿ e0¿ e4¿ eÉ¿ eÀ¿ f¿ f-¿ f|¿ f¿¿ g¿ gD¿ gy¿ g ¿ g‰¿ g˙¿ h¿ h¿ h¿ hO¿ hf¿ hx¿ hí¿ h–¿ hÌ¿ i¿ i!¿ i"¿ i.¿ ia¿ ix¿ iä¿ i§¿ i‚¿ iˇ¿ j/¿ j3¿ j4¿ j@¿ js¿ j†¿ j§¿ j•¿ k¿ k¿ kH¿ kö¿ kª¿ kˆ¿ k˛¿ l-¿ l:¿ l]¿ lc¿ lg¿ lh¿ lt¿ l™¿ l√¿ l¯¿ m¿ m¿ m#¿ m$¿ m0¿ mI¿ mb¿ mî¿ m¥¿ mª¿ mø¿ m¡¿ m¬¿ mÌ¿ mÒ¿ nA¿ nv¿ nz¿ n≈¿ o¿ o^¿ oÆ¿ o€¿ p¿ p¿ p[¿ pm¿ pá¿ p∞¿ p∆¿ pÊ¿ q¿ qF¿ qa¿ qö¿ q—¿ qÊ¿ qÁ¿ qÛ¿ r7¿ r8¿ rF¿ rG¿ r|¿ rÇ¿ r“¿ rÎ¿ rÒ¿ s¿ s¿ s_¿ s¶¿ s∑¿ sŸ¿ sÏ¿ t
¿ t%¿ tO¿ tj¿ tx¿ t¥¿ t›¿ tÛ¿ u(¿ u^¿ uÜ¿ uú¿ u‹¿ u˛¿ v¿ v¿ vI¿ vO¿ vç¿ vì¿ v¨¿ vÍ¿ w
¿ w5¿ w_¿ wm¿ wí¿ w≤¿ w∂¿ w∑¿ w√¿ w˙¿ x¿ x,¿ xw¿ xç¿ xù¿ x•¿ x≈¿ y'¿ y-¿ y1¿ y2¿ y>¿ y~¿ y¿¿ y◊¿ y€¿ y‹¿ yË¿ z-¿ zX¿ zê¿ {¿ {¿ {¿ {¿ {e¿ {i¿ {∏¿ |¿ |O¿ |´¿ |∫¿ |ª¿ |«¿ }¿ }>¿ }?¿ }}¿ }É¿ }”¿ }Ï¿ }Ú¿ ~;¿ ~c¿ ~i¿ ~π¿  ¿ .¿ M¿ v¿ ë¿ ¨¿ ∫¿ ‡¿ Ä¿ Ä$¿ Ä6¿ Äa¿ Äw¿ Ä{¿ Ä|¿ Ä¬¿ Ä»¿ Å¿ Å¿ Å%¿ Å+¿ Å{¿ Å¬¿ Ç¿ Ç"¿ ÇM¿ Çw¿ ÇÖ¿ Ç™¿ Ç ¿ ÇŒ¿ Çœ¿ Ç€¿ É ¿ É¿ ÉB¿ Éâ¿ Éç¿ Éé¿ Éö¿ É¨¿ Éÿ¿ ÉÏ¿ É¿ ÉÒ¿ Ñ¿ Ñ-¿ Ñg¿ ÑÖ¿ Ñ»¿ Ñ¯¿ ÖE¿ Öo¿ Öá¿ ÖØ¿ Ö”¿ ÖŸ¿ Ö›¿ Öﬁ¿ ÖÍ¿ Ü!¿ Ü:¿ ÜS¿ Üû¿ Ü¥¿ Üƒ¿ ÜÃ¿ ÜÏ¿ áO¿ áU¿ áY¿ áZ¿ áf¿ á¶¿ áË¿ áˇ¿ à¿ à¿ à¿ àU¿ àÄ¿ à–¿ âM¿ âQ¿ âS¿ âT¿ âõ¿ âü¿ â¿ ä¿ äë¿ ä∆¿ äÃ¿ ä˚¿ ã¿ ã=¿ ãf¿ ã|¿ ãú¿ ãÀ¿ ã·¿ ã˝¿ å7¿ å;¿ å=¿ å>¿ åá¿ åã¿ å«¿ å˛¿ åˇ¿ ç8¿ ç<¿ çã¿ ç¿¿ ç¿ éH¿ éN¿ éï¿ é™¿ é¿¿ éÏ¿ è¿ èA¿ èc¿ èå¿ è´¿ è¿¿ è¡¿ èÕ¿ ê¿ ê¿ êM¿ êS¿ ê¢¿ êÎ¿ êÒ¿ ë1¿ ëK¿ ëô¿ ë—¿ í	¿ í+¿ íX¿ ís¿ íï¿ í£¿ í¿¿ í÷¿ í⁄¿ í€¿ ì¿ ì%¿ ìt¿ ìø¿ ìË¿ î ¿ î#¿ î>¿ î[¿ îi¿ îÅ¿ îó¿ îõ¿ îú¿ î®¿ î‹¿ î›¿ îÈ¿ ï ¿ ï9¿ ïY¿ ï|¿ ïâ¿ ï¿¿ ï„¿ ñ¿ ñ;¿ ñH¿ ñ\¿ ñb¿ ñf¿ ñh¿ ñi¿ ñ∑¿ ñª¿ ó¿ ó¿ óS¿ ót¿ óz¿ ó®¿ óÊ¿ ò¿ òã¿ ò©¿ ò ¿ ò‚¿ ô ¿ ô¿ ô¿ ô!¿ ôj¿ ôk¿ ôª¿ ôÃ¿ ô“¿ ö¿ ö2¿ öZ¿ öt¿ öô¿ ö¥¿ öŒ¿ ö‹¿ öÒ¿ õ¿ õ¿ õ¿ õe¿ õt¿ õz¿ õ≤¿ õ€¿ õÛ¿ ú¿ ú1¿ úN¿ ú\¿ út¿ úä¿ úé¿ úè¿ úõ¿ úœ¿ ú–¿ ú‹¿ ù¿ ù,¿ ùL¿ ùs¿ ùí¿ ù∑¿ ùÌ¿ ù˙¿ û¿ û¿ û¿ û¿ û¿ ûH¿ ûL¿ ûï¿ û¶¿ û™¿ û˚¿ ûˇ¿ üH¿ üî¿ ü•¿ ü©¿ üÙ¿ †B¿ †ì¿ †„¿ †Á¿ †ı¿ †˘¿ °B¿ °ç¿ °÷¿ ¢¿ ¢n¿ ¢£¿ ¢√¿ ¢…¿ £¿ £\¿ £]¿ £z¿ £{¿ £æ¿ £ƒ¿ §¿ §c¿ §z¿ §Ü¿ §”¿ §‘¿ •$¿ •U¿ •[¿ •™¿ •˙¿ ¶¿ ¶¿ ¶p¿ ¶q¿ ¶º¿ ¶‡¿ ¶¯¿ ¶˘¿ ß>¿ ßÅ¿ ßµ¿ ßª¿ ßˇ¿ ®F¿ ®â¿ ®–¿ ©¿ ©¿ ©^¿ ©Ø¿ ™ ¿ ™Q¿ ™W¿ ™ü¿ ™Ó¿ ™˚¿ ´¿ ´O¿ ´[¿ ´a¿ ´ß¿ ´Û¿ ¨'¿ ¨c¿ ¨d¿ ¨p¿ ¨±¿ ¨≥¿ ¨¥¿ ¨˚¿ ≠2¿ ≠Y¿ ≠_¿ ≠å¿ ≠í¿ ≠⁄¿ Æ)¿ Æv¿ Æπ¿ Æ÷¿ ÆÔ¿ Ø¿ Ø%¿ Ø&¿ Øe¿ ØÄ¿ ØÅ¿ Ø…¿ Øœ¿ ∞¿ ∞A¿ ∞g¿ ∞h¿ ∞ù¿ ∞©¿ ∞≈¿ ±¿ ±¿ ±¿ ±'¿ ±]¿ ±ì¿ ±¶¿ ±˜¿ ≤!¿ ≤\¿ ≤`¿ ≤b¿ ≤c¿ ≤†¿ ≤∂¿ ≤Ã¿ ≤Î¿ ≥¿ ≥8¿ ≥S¿ ≥x¿ ≥ç¿ ≥é¿ ≥Ã¿ ≥˘¿ ¥¿ ¥E¿ ¥e¿ ¥s¿ ¥¶¿ ¥¡¿ ¥˜¿ µ+¿ µg¿ µñ¿ µÆ¿ µ¥¿ µ»¿ µ˙¿ ∂)¿ ∂/¿ ∂3¿ ∂4¿ ∂@¿ ∂e¿ ∂~¿ ∂©¿ ∂≠¿ ∂Æ¿ ∂∫¿ ∂Ã¿ ∂˙¿ ∑¿ ∑¿ ∑¿ ∑-¿ ∑?¿ ∑U¿ ∑u¿ ∑y¿ ∑z¿ ∑ê¿ ∑ú¿ ∑ù¿ ∑«¿ ∑Ë¿ ∏
¿ ∏'¿ ∏?¿ ∏E¿ ∏I¿ ∏_¿ ∏`¿ ∏l¿ ∏Ö¿ ∏∂¿ ∏—¿ ∏Í¿ ∏˛¿ π¿ π¿ π¿ πQ¿ πU¿ πV¿ πb¿ πú¿ πÂ¿ πÈ¿ πÍ¿ ∫ ¿ ∫¿ ∫'¿ ∫g¿ ∫w¿ ∫ï¿ ∫º¿ ∫”¿ ∫˜¿ ªn¿ ªö¿ ª∑¿ ª¡¿ ª›¿ º¿ º'¿ ºE¿ ºZ¿ ºv¿ ºú¿ º∫¿ º…¿ º÷¿ Ω(¿ Ω2¿ ΩF¿ ΩY¿ Ωc¿ Ωg¿ Ωi¿ Ωj¿ Ωë¿ Ωï¿ Ω„¿ æ4¿ æJ¿ æÅ¿ æ£¿ æ©¿ æ˘¿ ø
¿ ø¿ øP¿ øÄ¿ øì¿ ø©¿ øÀ¿ øÛ¿ ¿¿ ¿b¿ ¿c¿ ¿o¿ ¿û¿ ¿ü¿ ¿´¿ ¿Û¿ ¡¿ ¡$¿ ¡A¿ ¡g¿ ¡}¿ ¡É¿ ¡π¿ ¡Ω¿ ¡æ¿ ¡ ¿ ¬¿ ¬¿ ¬A¿ ¬X¿ ¬~¿ ¬ö¿ ¬¨¿ ¬æ¿ ¬’¿ ¬˚¿ √(¿ √3¿ √B¿ √n¿ √Ñ¿ √å¿ √ô¿ √≠¿ √≥¿ √∑¿ √∏¿ √ƒ¿ ƒ¿ ƒ¿ ƒ/¿ ƒ^¿ ƒ£¿ ≈¿ ≈&¿ ≈9¿ ≈C¿ ≈G¿ ≈I¿ ≈J¿ ≈y¿ ≈}¿ ≈Õ¿ ∆¿ ∆1¿ ∆j¿ ∆î¿ ∆ö¿ ∆Í¿ «¿ «¿ «L¿ «R¿ «õ¿ «À¿ «ﬂ¿ «ı¿ »(¿ »K¿ »s¿ »ò¿ »Ω¿ …¿ …>¿ …B¿ …C¿ …s¿ …y¿ …ƒ¿ …ﬂ¿ …Â¿  ¿  M¿  k¿  î¿  Ø¿  œ¿  ›¿  ¯¿ À¿ À¿ À¿ À¿ Àf¿ Àg¿ Às¿ Àª¿ À◊¿ ÀÏ¿ Ã	¿ Ã/¿ ÃE¿ ÃK¿ ÃÅ¿ ÃÖ¿ ÃÜ¿ Ãí¿ Ã…¿ Ã‚¿ Õ	¿ Õ ¿ ÕG¿ Õc¿ Õu¿ Õë¿ Õ£¿ Õ∫¿ Õ‡¿ Œ¿ Œ¿ Œ(¿ ŒT¿ Œj¿ Œr¿ Œ¿ Œì¿ Œô¿ Œù¿ Œû¿ Œ™¿ ŒÍ¿ Œ˙¿ œ¿ œD¿ œä¿ –¿ –¿ –¿ –(¿ –,¿ –.¿ –/¿ –R¿ –V¿ –§¿ –Ì¿ —7¿ —n¿ —ë¿ —ó¿ —Á¿ “¿ “
¿ “S¿ “É¿ “ñ¿ “¨¿ “Œ¿ “ˆ¿ ”¿ ”e¿ ”f¿ ”{¿ ”î¿ ”ï¿ ”∂¿ ”’¿ ”Ô¿ ‘"¿ ‘(¿ ‘@¿ ‘D¿ ‘E¿ ‘Q¿ ‘Ä¿ ‘Å¿ ‘ç¿ ‘’¿ ‘Ë¿ ’¿ ’,¿ ’x¿ ’ö¿ ’ ¿ ’˚¿ ÷¿ ÷7¿ ÷q¿ ÷Ö¿ ÷ª¿ ÷ø¿ ÷¿¿ ÷Ã¿ ◊¿ ◊¿ ◊C¿ ◊Z¿ ◊Ä¿ ◊ú¿ ◊Æ¿ ◊¿¿ ◊‡¿ ◊˜¿ ÿ¿ ÿJ¿ ÿU¿ ÿd¿ ÿê¿ ÿ¶¿ ÿÆ¿ ÿª¿ ÿœ¿ ÿ’¿ ÿŸ¿ ÿ⁄¿ ÿÊ¿ Ÿ&¿ Ÿ6¿ ŸQ¿ ŸÄ¿ Ÿ”¿ ⁄d¿ ⁄l¿ ⁄¿ ⁄â¿ ⁄ç¿ ⁄è¿ ⁄ê¿ ⁄≤¿ ⁄∂¿ ⁄˚¿ €<¿ €@¿ €~¿ €ú¿ €†¿ €⁄¿ ‹¿ ‹]¿ ‹î¿ ‹Ø¿ ‹µ¿ ›¿ ›S¿ ›£¿ ›∂¿ ›º¿ ﬁ¿ ﬁ5¿ ﬁH¿ ﬁ^¿ ﬁÄ¿ ﬁ®¿ ﬁÕ¿ ﬂ¿ ﬂ¿ ﬂ$¿ ﬂd¿ ﬂe¿ ﬂq¿ ﬂπ¿ ﬂ’¿ ﬂÍ¿ ‡¿ ‡-¿ ‡C¿ ‡I¿ ‡¿ ‡É¿ ‡Ñ¿ ‡ê¿ ‡«¿ ‡‡¿ ·¿ ·¿ ·D¿ ·`¿ ·r¿ ·ê¿ ·¢¿ ·π¿ ·ﬂ¿ ‚¿ ‚¿ ‚&¿ ‚R¿ ‚h¿ ‚p¿ ‚}¿ ‚ë¿ ‚ó¿ ‚õ¿ ‚ú¿ ‚®¿ ‚Ë¿ ‚¯¿ „¿ „B¿ „á¿ „∫¿ „¬¿ „’¿ „ﬂ¿ „„¿ „Â¿ „Ê¿ ‰*¿ ‰.¿ ‰¿ ‰µ¿ ‰ˇ¿ ÂL¿ ÂÜ¿ Â£¿ Â¬¿ Â·¿ Â˚¿ Ê¿ Ê>¿ Ê]¿ Êì¿ Ê±¿ Ê’¿ Ê˙¿ Á¿ Á0¿ ÁS¿ Áù¿ Áû¿ ÁÌ¿ ÁÛ¿ Ë¿ Ë¿ Ëh¿ Ëñ¿ Ëº¿ Ë—¿ ËÒ¿ È¿ È8¿ ÈF¿ ÈÇ¿ Èö¿ È–¿ È¯¿ Í¿ Í¿ Í¿ Í+¿ ÍT¿ Íj¿ Íã¿ Í¶¿ Íƒ¿ Í“¿ ÍÏ¿ Î¿ Î¿ Î¿ Î#¿ Î@¿ ÎP¿ Îk¿ ÎÜ¿ Îû¿ Î¨¿ Î¿¿ Î÷¿ Î⁄¿ Î€¿ ÎÁ¿ Ï¿ Ï¿ Ï¿ Ïf¿ Ïò¿ Ï∫¿ Ïæ¿ Ïø¿ ÏÀ¿ Ì¿ Ì=¿ Ìz¿ ÌÆ¿ ÌË¿ ÌÏ¿ ÌÓ¿ ÌÔ¿ Ó4¿ ÓC¿ ÓG¿ Óã¿ Óœ¿ Ó˘¿ Óˇ¿ Ô¿ Ô$¿ Ôo¿ Ô∑¿ ÔÀ¿ Ô„¿ Ô˘¿ "¿ E¿ e¿ Å¿ õ¿ Ã¿ Í¿ Ò¿ ÒE¿ Òc¿ Òá¿ Òû¿ Ò√¿ Ò—¿ Òˆ¿ Ú¿ Ú,¿ ÚC¿ Úf¿ Úp¿ Úq¿ Ú}¿ Úƒ¿ Ú≈¿ Ú„¿ ÚÈ¿ Û8¿ ÛP¿ Ûp¿ ÛÉ¿ Û°¿ Ûº¿ Û‘¿ Û‚¿ Ûˆ¿ Ù¿ Ù¿ Ù¿ ÙA¿ ÙG¿ Ùí¿ Ù≠¿ Ù≥¿ Ù˛¿ ı¿ ı>¿ ıq¿ ıê¿ ı∫¿ ıŸ¿ ıÁ¿ ˆ¿ ˆ¿ ˆ¿ ˆ¿ ˆ)¿ ˆD¿ ˆY¿ ˆu¿ ˆã¿ ˆ™¿ ˆ˙¿ ˜¿ ˜D¿ ˜å¿ ˜í¿ ˜ñ¿ ˜ó¿ ˜£¿ ˜Î¿ ¯¿ ¯¿ ¯9¿ ¯_¿ ¯u¿ ¯{¿ ¯±¿ ¯µ¿ ¯∂¿ ¯¬¿ ¯˘¿ ˘¿ ˘'¿ ˘]¿ ˘î¿ ˘ÿ¿ ˘¯¿ ˙
¿ ˙-¿ ˙N¿ ˙t¿ ˙è¿ ˙•¿ ˙À¿ ˙˙¿ ˚+¿ ˚:¿ ˚F¿ ˚f¿ ˚p¿ ˚Ö¿ ˚ë¿ ˚∑¿ ˚ƒ¿ ˚Î¿ ¸¿ ¸F¿ ¸^¿ ¸É¿ ¸Ÿ¿ ¸Î¿ ˝¿ ˝,¿ ˝8¿ ˝E¿ ˝Y¿ ˝_¿ ˝c¿ ˝d¿ ˝p¿ ˝∂¿ ˝‚¿ ˛&¿ ˛|¿ ˛Ä¿ ˛Ç¿ ˛É¿ ˛»¿ ˛Ã¿ ˇ¿ ˇ¿ ˇ"¿ ˇ&¿ ˇr¿ ˇÇ¿ ˇ≈¿ ˇÏ¿ ˇÚ¿ +¿ 1¿ ¿ π¿ —¿ Á¿¿4¿P¿j¿õ¿ª¿Ò¿¿3¿A¿X¿w¿é¿±¿Ã¿Ò¿˚¿¸¿¿O¿P¿\¿ú¿ù¿©¿Ò¿¿"¿?¿e¿{¿Å¿∑¿ª¿º¿»¿ˇ¿¿-¿\¿ê¿∞¿¬¿Â¿¿+¿E¿[¿Å¿∞¿·¿¿¸¿¿&¿;¿G¿m¿z¿ö¿¿¿ı¿¿2¿à¿ö¿∆¿€¿Á¿Ù¿	¿	¿	¿	¿	¿	e¿	ë¿	‰¿	Ë¿	Í¿	Î¿
¿
*¿
^¿
l¿
m¿
¶¿
¥¿
∂¿
∑¿
˙¿,¿K¿Q¿ü¿ﬁ¿‰¿3¿^¿u¿ô¿⁄¿¿1¿T¿u¿õ¿º¿Ÿ¿ ¿¿¿.¿/¿O¿U¿w¿£¿Ω¿‚¿˝¿¿)¿B¿W¿p¿Ü¿ä¿ã¿÷¿¿&¿Q¿l¿à¿ñ¿≠¿√¿«¿»¿¿W¿q¿w¿∫¿ ¿:¿_¿è¿™¿À¿Ÿ¿ı¿¿¿¿¿.¿G¿\¿p¿µ¿˛¿J¿ñ¿—¿Á¿Î¿Ï¿¯¿¿z¿~¿¿ã¿¬¿‚¿¿B¿ô¿Œ¿È¿˚¿3¿H¿T¿ò¿™¿È¿#¿ã¿©¿¿e¿¬¿—¿K¿¿¿Œ¿ÿ¿Ì¿˘¿¿=¿C¿e¿ö¿ﬁ¿˛¿"¿(¿,¿-¿9¿~¿©¿¿M¿Q¿S¿T¿å¿ª¿Ù¿˙¿+¿?¿_¿s¿ï¿∑¿⁄¿¸¿¿4¿J¿j¿ä¿≤¿⁄¿Ù¿¯¿˘¿ I¿ Å¿ á¿ ÷¿!¿!:¿!M¿!k¿!Ö¿!ì¿!®¿!æ¿!ﬁ¿!‚¿!„¿"'¿"-¿"y¿"√¿"…¿#¿#Y¿#©¿#¯¿$7¿$à¿$∫¿$€¿%¿%$¿%2¿%J¿%`¿%Ä¿%Ñ¿%Ö¿%¡¿%«¿&¿&N¿&Ñ¿&•¿&—¿&Ú¿' ¿'¿'2¿'R¿'V¿'W¿'c¿'±¿'≤¿'ˇ¿(H¿(k¿(q¿(¡¿)¿),¿)-¿)D¿)ì¿)≤¿)∏¿*¿*S¿*x¿*¬¿*›¿*˙¿+¿+.¿+D¿+d¿+h¿+i¿+ª¿+¡¿,¿,7¿,X¿,Ñ¿,•¿,≥¿,Ô¿-¿-A¿-i¿-¿-É¿-Ñ¿-µ¿-Ã¿-Î¿.¿.!¿.%¿.&¿.i¿.ä¿.¨¿.¬¿.‚¿.Ê¿.Á¿/*¿/K¿/m¿/É¿/£¿/ß¿/®¿/Î¿0¿0.¿0D¿0d¿0h¿0i¿0´¿0Ï¿1¿1&¿1F¿1J¿1K¿1z¿1≠¿1Õ¿1„¿2¿2¿2¿2-¿2y¿2Ø¿2»¿2˜¿3¿3B¿3[¿3Ä¿3∑¿3Ô¿3ı¿4¿4:¿4u¿4é¿4¬¿4’¿4Ÿ¿4⁄¿4Ê¿5.¿5e¿5¢¿5‡¿5˙¿62¿66¿67¿6C¿6ì¿6“¿6˚¿7<¿7V¿7í¿7‘¿7›¿7‰¿7Ë¿7È¿7ı¿8,¿8E¿8{¿8û¿8Î¿9¿97¿9U¿9i¿9Ä¿9ô¿9Í¿9˜¿:¿:>¿:V¿:`¿:o¿:œ¿;¿;P¿;v¿;ü¿;™¿;”¿<¿<J¿<[¿<î¿<û¿<÷¿<ﬁ¿<‰¿<Ë¿<È¿<ı¿=6¿=d¿=h¿=i¿=u¿=∫¿=Â¿>,¿>o¿>√¿?(¿?¿?É¿?Ö¿?Ü¿?À¿?˙¿@.¿@4¿@p¿@Ñ¿@•¿@Ÿ¿@˚¿A¿A4¿AP¿Ar¿Aó¿A™¿A…¿A¿B¿B*¿B+¿BL¿BM¿Ba¿BÖ¿Bì¿BŒ¿B“¿B”¿BÚ¿C¿C'¿C+¿C,¿CS¿Cf¿CÉ¿Cò¿C≥¿CÃ¿C‰¿D¿D¿D5¿DK¿DQ¿DU¿DV¿Dû¿D∏¿D«¿D·¿D¸¿E¿E!¿EB¿ET¿Eñ¿EØ¿Eº¿E’¿EÌ¿EÛ¿E˜¿E¯¿F1¿F7¿Fá¿Fÿ¿G¿G¿GM¿Gu¿G¶¿G∆¿GÒ¿H¿H)¿H7¿HO¿Hf¿HÅ¿HÖ¿HÜ¿H¬¿H»¿I¿IO¿IÖ¿I¶¿I“¿IÛ¿J¿J¿J4¿JO¿JS¿JT¿Jï¿Jñ¿J¢¿Jÿ¿JÒ¿K;¿K<¿Kà¿K÷¿L"¿LC¿Lh¿Lz¿L€¿L˛¿M¿M¿M)¿MG¿Ms¿M≥¿Mø¿MŸ¿M·¿M‚¿M˜¿N¿N]¿Nœ¿O
¿O'¿OB¿O\¿O{¿Oô¿O≥¿P	¿P¿P¿PA¿PG¿PK¿PL¿PX¿Pq¿Pä¿PÕ¿P‚¿Q¿QH¿Qº¿Q˜¿R¿R%¿R@¿RZ¿Ry¿Ró¿R±¿S	¿S¿S"¿S;¿SH¿Sk¿Sq¿Su¿Sv¿Sí¿S©¿S™¿S‡¿SÊ¿T¿TE¿Tg¿Tà¿T£¿T≈¿T‚¿T˙¿U¿U"¿U&¿U'¿UB¿Ua¿Ux¿U|¿U}¿Uô¿Uµ¿U√¿Uƒ¿U›¿Uˇ¿V&¿V3¿VE¿Vo¿V≥¿V˝¿WI¿W¨¿X¿X{¿X≠¿Y
¿Y/¿Yg¿Y≤¿Y∏¿Yº¿YΩ¿Z¿Z]¿Zz¿Zû¿Z∏¿Z»¿Z›¿ZÚ¿[?¿[H¿[Q¿[É¿[î¿[ò¿[ô¿[•¿[‹¿\¿\(¿\@¿\[¿\ó¿\ª¿\’¿\Â¿]¿]#¿]n¿]í¿]õ¿]®¿]·¿]Á¿]Î¿]Ï¿]¯¿^H¿^Ä¿^î¿^¨¿^’¿^Ú¿_¿_H¿_ä¿_ì¿_ö¿_û¿_ü¿_´¿_Ï¿`¿`5¿`B¿`\¿`É¿`â¿`ç¿`é¿`ö¿`ﬂ¿a
¿a@¿aî¿a˘¿a˝¿aˇ¿b ¿bD¿bH¿bò¿b·¿c¿c¿cY¿c¶¿cπ¿cÙ¿d8¿d>¿dq¿dë¿d≤¿d’¿dÎ¿e¿e2¿eG¿eH¿eë¿eó¿eÊ¿f¿fI¿f`¿fÇ¿fù¿fº¿f ¿f‰¿f˙¿g¿g¿g¿g+¿gs¿g∂¿gÛ¿h1¿hK¿hÉ¿há¿hà¿h’¿i¿iA¿iG¿ió¿iË¿j¿j¿j¿j_¿j~¿j§¿jƒ¿k¿k$¿k>¿kz¿kº¿k≈¿kÃ¿k–¿k—¿k›¿l¿l3¿lL¿lo¿l†¿l“¿l‹¿l‚¿lÊ¿lÁ¿lÛ¿m4¿mM¿mp¿mî¿mõ¿mü¿m†¿m¨¿mÒ¿n¿ni¿n¿¿nƒ¿n∆¿n«¿o¿o¿o9¿oÉ¿oÑ¿oæ¿o¬¿oˆ¿p@¿pA¿py¿p}¿p±¿p˜¿p¯¿q4¿q8¿ql¿q∫¿qª¿q˜¿q˚¿r/¿r}¿r~¿r∏¿rº¿s¿sP¿sT¿s§¿sÍ¿t¿t¿tY¿t]¿t¨¿tÙ¿u=¿uC¿uç¿uß¿uø¿u◊¿uÌ¿v¿v ¿v:¿vw¿vç¿vΩ¿væ¿w¿wY¿wi¿wî¿wï¿wÂ¿x¿x¿x_¿x~¿x•¿x¶¿xÙ¿y!¿y"¿yr¿y¢¿y—¿y“¿z¿z=¿z>¿zJ¿zÖ¿z•¿z©¿z™¿z∂¿zÛ¿{¿{B¿{k¿{é¿{∑¿{ÿ¿{ˇ¿|#¿|M¿|r¿|ù¿|¬¿|Ì¿|Ò¿|Ú¿|˛¿}C¿}n¿}ö¿}≠¿}»¿}Á¿~¿~!¿~B¿~e¿~à¿~ë¿~™¿~≤¿~∂¿~∏¿~π¿¿¿W¿§¿¬¿∆¿Ä¿Äe¿ÄÜ¿Ää¿ÄÕ¿Ä—¿Å#¿Å'¿Å5¿Å9¿Å{¿Åó¿Å˝¿ÇF¿ÇL¿Çò¿ÇÁ¿É¿É¿É0¿ÉB¿ÉS¿É¿É•¿ÉΩ¿É”¿Ñ¿Ñ1¿ÑP¿Ñi¿Ñû¿Ñ∑¿Ö¿Ö	¿Ö¿Ö]¿Öû¿Ö¢¿Ö£¿ÖØ¿ÖÏ¿Ü¿ÜO¿Üm¿Üq¿Ür¿Ü√¿á¿á/¿á5¿á~¿á∆¿à¿àI¿àO¿à†¿àÎ¿â¿â¿â3¿âQ¿âa¿â|¿âò¿âØ¿â¸¿ä¿ä¿ä¿ä¿äG¿äM¿äÜ¿ä∫¿äÍ¿ã0¿ãP¿ãk¿ã∏¿ã–¿ã÷¿ã⁄¿ã€¿ãÁ¿å¿å¿åY¿åp¿åv¿å∫¿å‡¿å·¿åÌ¿ç¿ç¿ç¿çC¿çZ¿ç|¿çò¿çØ¿çÛ¿é0¿éH¿éN¿éR¿éS¿é_¿éô¿é∑¿é∏¿éƒ¿éÈ¿è¿è$¿è(¿è)¿è5¿èG¿èí¿èÌ¿ê¿ê8¿êL¿êP¿êQ¿ê]¿êò¿ê∏¿êº¿êΩ¿ê…¿ë¿ë9¿ëe¿ëx¿ëì¿ë≠¿ë«¿ëﬂ¿ëË¿í¿í	¿ír¿í«¿ìW¿ì[¿ì]¿ì^¿ìë¿ìï¿ì·¿î-¿îz¿î∆¿ï¿ïe¿ïÄ¿ïÑ¿ï”¿ñ!¿ñr¿ñ¡¿ó¿ó\¿ó™¿óÌ¿óÒ¿ò7¿òÑ¿ò–¿ô¿ôf¿ô≥¿ôË¿ö¿öW¿öX¿öd¿öä¿öã¿ö’¿öÂ¿öÎ¿õ;¿õw¿õ}¿õŒ¿õ¸¿ú¿úP¿úâ¿úÿ¿ù'¿ùI¿ùO¿ùe¿ùk¿ù≤¿ù‘¿ù⁄¿ùË¿û¿ûJ¿ûP¿ûb¿ûõ¿û£¿û©¿û‹¿ü¿ü¿ü8¿ü±¿üÏ¿†I¿†é¿†©¿†≥¿†π¿†À¿†¯¿°¿°6¿°Q¿°r¿°ö¿°Ó¿°ˇ¿¢¿¢¿¢%¿¢-¿¢7¿¢I¿¢O¿¢_¿¢e¿¢™¿¢˙¿£4¿£R¿£ç¿£Ÿ¿£›¿£ﬁ¿§.¿§}¿§À¿•¿•¿•i¿•u¿•{¿•…¿¶¿¶+¿¶l¿¶ë¿¶í¿¶·¿ß/¿ß{¿ß»¿®¿®F¿®L¿®ô¿®•¿®´¿®¸¿©G¿©_¿©¢¿©»¿©…¿™¿™+¿™1¿™|¿™ô¿™©¿™Œ¿™Ù¿´¿´¿´¿´¿´"¿´â¿´ô¿´ƒ¿´Ï¿´˜¿¨ ¿¨3¿¨=¿¨A¿¨B¿¨N¿¨ì¿¨æ¿¨›¿¨Ì¿≠
¿≠Q¿≠∫¿≠…¿Æ=¿Æ]¿Æ•¿Æ˝¿Ø"¿Øä¿ØØ¿Ø˝¿∞#¿∞¿¿∞Â¿±O¿±Ñ¿±Â¿±ˆ¿≤Z¿≤d¿≤ˇ¿≥@¿≥H¿≥[¿≥e¿≥|¿≥È¿≥Ì¿≥Ô¿≥¿¥*¿¥.¿¥}¿¥Ã¿µ¿µF¿µJ¿µë¿µ—¿∂¿∂¿∂%¿∂)¿∂w¿∂•¿∂ÿ¿∑¿∑¿∑n¿∑º¿∑‘¿∑Í¿∏¿∏!¿∏>¿∏m¿∏É¿∏¢¿∏¶¿∏ß¿∏Á¿∏Ì¿π>¿πã¿π≠¿πø¿π‹¿π˜¿∫¿∫!¿∫8¿∫t¿∫ñ¿∫ö¿∫õ¿∫˚¿ª¿ª1¿ª7¿ªÜ¿ªª¿ª◊¿ª˛¿º#¿º1¿ºq¿ºë¿ºÀ¿ºÌ¿ºÒ¿ºÚ¿Ω;¿Ω<¿ΩH¿Ωê¿Ω”¿Ω◊¿Ωÿ¿æ¿æ[¿æÑ¿æê¿æ–¿ø¿ø¿ø"¿ø#¿ø/¿øt¿øü¿ø‰¿ø¯¿¿¿¿6¿¿[¿¿æ¿¿«¿¿Œ¿¿“¿¿‘¿¿’¿¡%¿¡t¿¡å¿¡∫¿¡„¿¡ˆ¿¬¿¬&¿¬G¿¬d¿¬y¿¬z¿¬∑¿¬Ω¿√¿√Y¿√Ü¿√å¿√…¿√Î¿√˝¿ƒ¿ƒ5¿ƒQ¿ƒ_¿ƒv¿ƒ£¿ƒß¿ƒ®¿ƒ¥¿ƒÁ¿ƒ˘¿≈¿≈>¿≈B¿≈C¿≈O¿≈Ç¿≈î¿≈¶¿≈Ÿ¿≈›¿≈ﬁ¿≈Í¿∆¿∆/¿∆A¿∆t¿∆x¿∆y¿∆Ö¿∆∏¿∆ ¿∆‹¿«¿«¿«¿« ¿«c¿«u¿«à¿«ƒ¿«»¿«…¿«’¿«˚¿«¸¿»¿»>¿»R¿»u¿»{¿»´¿»Ø¿»∞¿»±¿»Ω¿»÷¿»Ï¿…¿…¿…¿…¿…1¿…E¿…g¿…t¿…ë¿…ó¿…õ¿…ú¿…®¿…¿ 3¿ 7¿ 8¿ D¿ {¿ ç¿ õ¿ Ω¿ ¡¿ ¬¿ Œ¿À¿À ¿À.¿À\¿À`¿Àa¿Àm¿À≤¿À›¿Ã"¿Ã&¿Ã'¿Ã3¿Ãe¿Ã|¿Ãû¿Ãº¿Ã‹¿ÃÛ¿ÕJ¿ÕS¿ÕZ¿Õ^¿Õ`¿Õa¿Õü¿Õ£¿ÕÓ¿Œ:¿Œã¿Œÿ¿œ ¿œ¿œ¿œ¿œ`¿œ™¿œ›¿–%¿–+¿–\¿–t¿–ä¿–•¿–¬¿–‰¿—¿—2¿—G¿—H¿—é¿—î¿—ﬂ¿“.¿“>¿“b¿“u¿“ì¿“∞¿“æ¿“÷¿“˘¿”¿”¿” ¿”Ä¿”Ü¿”∑¿”Ω¿‘¿‘A¿‘]¿‘Ñ¿‘©¿‘∑¿‘˜¿’¿’Q¿’s¿’w¿’x¿’¬¿’√¿’œ¿÷¿÷,¿÷N¿÷É¿÷á¿÷à¿÷î¿÷‘¿◊¿◊"¿◊&¿◊'¿◊3¿◊x¿◊£¿◊Í¿◊˛¿ÿ¿ÿ<¿ÿa¿ÿƒ¿ÿÕ¿ÿ‘¿ÿÿ¿ÿ⁄¿ÿ€¿Ÿ
¿Ÿ¿Ÿ_¿Ÿ∞¿Ÿ˚¿⁄ ¿⁄a¿⁄õ¿⁄°¿⁄Î¿⁄˛¿€¿€N¿€d¿€î¿€ï¿€»¿€‹¿€›¿€È¿‹.¿‹Y¿‹°¿‹•¿‹ß¿‹®¿‹Ô¿›¿›[¿›¶¿›¨¿›¿ﬁ¿ﬁ(¿ﬁG¿ﬁr¿ﬁ©¿ﬁﬁ¿ﬁ˚¿ﬂ8¿ﬂ]¿ﬂt¿ﬂó¿ﬂ–¿‡¿‡5¿‡6¿‡Ö¿‡Ø¿‡µ¿·¿·P¿·q¿·w¿·ª¿‚¿‚Z¿‚§¿‚Ô¿„¿„H¿„o¿„°¿„€¿„È¿‰¿‰$¿‰(¿‰)¿‰_¿‰ä¿‰®¿‰—¿‰Í¿‰¯¿Â$¿Â8¿Â_¿ÂÅ¿ÂÖ¿ÂÜ¿ÂŸ¿Ê¿Ê@¿Êu¿Êî¿Ê¢¿Ê‘¿ÊÓ¿Á¿Á7¿Á;¿Á<¿Á|¿Á–¿Ë¿ËG¿Ëq¿Ë¿Ëº¿Ë·¿È¿È*¿È.¿È/¿È^¿ÈÆ¿È‚¿Í!¿ÍI¿ÍW¿Íí¿Íµ¿Í‹¿Í˛¿Î¿Î¿ÎF¿Îç¿ÎÕ¿Ï¿Ï"¿Ï9¿Ï:¿ÏF¿Ïç¿Ïø¿Ï¿¿Ï˛¿Ì¿Ìd¿Ìå¿Ì∂¿ÌÌ¿Ó)¿Ó_¿Óô¿Óü¿Ó«¿Ó˚¿Ô1¿Ôg¿Ô°¿Ôß¿Ô´¿Ô¨¿Ô‹¿¿#¿$¿J¿t¿≤¿„¿Ò)¿Òj¿Òt¿Òz¿Ò~¿Ò¿Ò¶¿Ò–¿Ú¿Ú>¿ÚÑ¿Ú≈¿Úœ¿Ú’¿ÚŸ¿Ú⁄¿Ú˛¿Û&¿Ûe¿Ûî¿Û⁄¿Ù¿Ù%¿Ù+¿Ù/¿Ù0¿ÙV¿Ù~¿Ùº¿ÙÎ¿ı1¿ır¿ı|¿ıÇ¿ıÜ¿ıá¿ıì¿ıÿ¿ˆ¿ˆ/¿ˆO¿ˆ|¿ˆª¿ˆˆ¿ˆ˝¿˜¿˜5¿˜y¿˜}¿˜¿˜Ä¿˜Ω¿˜˜¿¯:¿¯@¿¯q¿¯w¿¯Œ¿¯Ì¿˘¿˘¿˘D¿˘g¿˘z¿˘ç¿˘†¿˘¥¿˘∆¿˘ÿ¿˘Ô¿˘ˇ¿˙¿˙&¿˙:¿˙O¿˙b¿˙Ü¿˙ö¿˙Ø¿˙∆¿˙‹¿˙Ó¿˙ˇ¿˚¿˚.¿˚K¿˚r¿˚ô¿˚…¿˚˘¿¸¿¸J¿¸l¿¸ã¿¸≠¿¸∆¿¸„¿˝¿˝"¿˝C¿˝a¿˝Å¿˝ü¿˝Ω¿˝◊¿˝¿˛¿˛B¿˛z¿˛¨¿˛ﬂ¿ˇ¿ˇ'¿ˇV¿ˇÖ¿ˇÀ¿ˇÌ¿ ¿ =¿ j¿ Ö¿ †¿ ª¿ ÿ¿ Ò¿
¿-¿B¿[¿z¿ó¿∂¿—¿¿+¿J¿m¿é¿Ø¿ÿ¿	¿"¿9¿X¿É¿Æ¿Î¿(¿Q¿x¿ü¿∫¿„¿˙¿¿B¿i¿ä¿Ø¿–¿Ò¿
¿!¿<¿Ö¿–¿¿P¿y¿ò¿€¿¿W¿l¿m¿¥¿˜¿	)¿	/¿	É¿	“¿	Ó¿
¿
%¿
C¿
^¿
z¿
à¿
†¿
¿¿
ƒ¿
≈¿¿U¿[¿´¿˚¿¿[¿ü¿√¿…¿˛¿N¿Ç¿∏¿‘¿˚¿¿<¿J¿k¿ã¿è¿ê¿‹¿˜¿˝¿I¿ó¿ﬂ¿¿+¿P¿k¿è¿ù¿º¿‹¿‡¿·¿2¿|¿ù¿Ø¿Ã¿Ê¿Ù¿
¿*¿.¿/¿Ä¿ ¿Î¿˝¿¿4¿B¿X¿x¿|¿}¿Õ¿‡¿¿¿4¿O¿]¿t¿î¿ò¿ô¿Á¿˙¿¿*¿F¿_¿m¿Ç¿¢¿¶¿ß¿ı¿¿'¿8¿T¿m¿{¿ê¿∞¿¥¿µ¿¿¿D¿Z¿{¿ô¿ß¿¡¿·¿Â¿Ê¿2¿E¿`¿o¿â¿†¿Æ¿¡¿·¿Â¿Ê¿4¿G¿f¿w¿ì¿¨¿∫¿œ¿Ô¿Û¿Ù¿E¿X¿}¿ë¿∞¿Ã¿⁄¿Ú¿¿¿¿g¿z¿ù¿∞¿Œ¿È¿˜¿¿.¿2¿3¿Ñ¿ó¿º¿–¿Ô¿¿¿1¿Q¿U¿V¿•¿∏¿Ÿ¿Î¿¿"¿0¿F¿f¿j¿k¿ª¿ﬁ¿!¿D¿r¿ù¿´¿“¿Ú¿ˆ¿˜¿ G¿ Z¿ }¿ ê¿ Æ¿ …¿ ◊¿ Ó¿!¿!¿!¿!a¿!n¿!ì¿!ß¿!∆¿!‚¿!¿"¿"(¿",¿"-¿"~¿"ê¿"π¿"œ¿"¿#¿#¿#6¿#V¿#Z¿#[¿#´¿#Ω¿#‰¿#˘¿$¿$7¿$E¿$^¿$~¿$Ç¿$É¿$—¿$‰¿%¿%¿%0¿%I¿%W¿%l¿%å¿%ê¿%ë¿%ﬁ¿%Ò¿&¿&¿&9¿&R¿&`¿&t¿&x¿&y¿&≈¿&‹¿'¿'¿'8¿'V¿'d¿'}¿'ù¿'°¿'¢¿'Û¿( ¿(.¿(F¿(i¿(ã¿(ô¿(∂¿(÷¿(⁄¿(€¿)*¿)=¿)s¿)è¿)∂¿)‹¿)Í¿*¿*+¿*/¿*0¿*Ö¿*í¿*≥¿*≈¿*‚¿*˝¿+¿+!¿+A¿+E¿+F¿+ü¿+•¿+ﬁ¿,¿,A¿,r¿,ï¿,£¿,¡¿,·¿,Â¿,Ê¿-?¿-E¿-~¿-ª¿-·¿.¿.5¿.C¿.a¿.Å¿.Ö¿.Ü¿.Ë¿.Ó¿/'¿/v¿/•¿/ﬂ¿0¿0¿0@¿0`¿0d¿0e¿0«¿0Õ¿1¿1U¿1Ñ¿1æ¿1Í¿1¯¿2¿2?¿2C¿2D¿2ú¿2¢¿2€¿3¿3;¿3k¿3ç¿3õ¿3∏¿3ÿ¿3‹¿3›¿44¿4s¿4ù¿4“¿4Û¿5¿5¿5=¿5A¿5B¿5í¿5ü¿5•¿5È¿6!¿6P¿6Ü¿6ß¿6”¿6Û¿7¿7¿7=¿7A¿7B¿7}¿7É¿7–¿8¿8n¿8õ¿8π¿8‚¿8¸¿9
¿9 ¿9@¿9D¿9E¿9z¿9±¿9“¿9˛¿: ¿:.¿:N¿:k¿:o¿:p¿:ù¿:£¿:Û¿;C¿;Q¿;W¿;£¿;Í¿<¿<'¿<L¿<g¿<u¿<ü¿<µ¿<‹¿<˛¿=¿=¿=4¿=:¿=y¿=¿=Ã¿>¿>9¿>f¿>Ç¿>´¿> ¿>ÿ¿?¿? ¿?G¿?i¿?m¿?n¿?°¿?ß¿?˜¿@2¿@8¿@Ñ¿@”¿@Â¿A¿A4¿A_¿AÄ¿Aé¿Aæ¿A⁄¿B¿B#¿B'¿B(¿B\¿Bb¿B±¿Bˇ¿C¿C$¿Ct¿C¿¿D¿DZ¿Dm¿D†¿Dø¿DÎ¿E¿E¿EL¿Ei¿Eê¿E≤¿E∂¿E∑¿EÏ¿EÚ¿FA¿Fè¿FÆ¿F¥¿G¿GQ¿Gû¿GÓ¿H¿H6¿HV¿HÉ¿H¶¿H¥¿HÊ¿I¿I+¿IM¿IQ¿IR¿IÑ¿Iä¿IŸ¿J'¿JD¿JJ¿Jò¿J‰¿K/¿K~¿Kë¿K¿¿K›¿L¿L'¿L5¿Ld¿L¿L¶¿L»¿LÃ¿LÕ¿M¿M¿MV¿M§¿M¡¿M«¿N¿Nc¿N∞¿O ¿O¿OF¿Oe¿Oë¿O≥¿O¡¿OÚ¿P¿P6¿PX¿P\¿P]¿Pè¿Pï¿P‚¿Q&¿Q,¿Qx¿Q»¿Q‡¿R¿R,¿RV¿Rv¿RÑ¿R≥¿RŒ¿Rı¿S¿S¿S¿SN¿ST¿S°¿SÂ¿SÎ¿T9¿Tâ¿T£¿T“¿TÔ¿U¿U9¿UG¿Uv¿Uë¿U∏¿U⁄¿Uﬁ¿Uﬂ¿V¿V¿V[¿Va¿V∞¿VŸ¿W ¿W¿W?¿W[¿Wi¿Wî¿W´¿W“¿WÙ¿W¯¿W˘¿X&¿X,¿Xu¿XÜ¿Xå¿X€¿Y¿Y)¿YA¿Yf¿YÅ¿Yè¿Yπ¿Yœ¿Yˆ¿Z¿Z¿Z¿ZL¿ZR¿Zô¿Zü¿ZÓ¿[¿[@¿[Z¿[Å¿[û¿[¨¿[ÿ¿[¿\¿\9¿\=¿\>¿\Ñ¿\ä¿\‘¿\ˇ¿]¿]S¿]y¿]’¿^¿^N¿^Ç¿^ê¿^”¿_¿_)¿_K¿_O¿_P¿_ó¿_ù¿_Á¿`¿`¿`i¿`è¿`Ì¿a$¿ah¿aù¿a´¿aÔ¿b¿bF¿bh¿bl¿bm¿bÆ¿b¥¿b˛¿c*¿c0¿cÄ¿c¶¿c¯¿d)¿dg¿dñ¿d§¿d‚¿e¿e3¿eU¿eY¿eZ¿eú¿e¢¿eÏ¿f¿f¿fn¿fî¿fË¿g¿gY¿gâ¿gó¿g÷¿h¿h(¿hJ¿hN¿hO¿hÖ¿hã¿h‹¿i&¿i,¿iw¿iπ¿i˜¿j¿jT¿jx¿jÜ¿jπ¿jÿ¿jˇ¿k!¿k%¿k&¿kW¿k]¿kÆ¿k‘¿k⁄¿l)¿lF¿lu¿lì¿læ¿l›¿lÎ¿m¿m3¿mZ¿m|¿mÄ¿mÅ¿mƒ¿m ¿n¿nV¿nû¿nË¿o¿o¿oi¿o∫¿p¿p¿p¿p$¿pt¿pù¿pÔ¿q@¿qn¿q©¿q⁄¿qË¿r(¿rT¿r{¿rù¿r°¿r¢¿rÂ¿rÎ¿s3¿ss¿sø¿t	¿t3¿t9¿tä¿t€¿u)¿u/¿u?¿uE¿uí¿u∞¿v¿vS¿vÅ¿vº¿vÌ¿v˚¿w;¿wg¿wé¿w∞¿w¥¿wµ¿w˛¿x¿xN¿xú¿xÏ¿xÚ¿y¿y¿yP¿y≥¿y¯¿zH¿zr¿zÄ¿z•¿z≈¿z…¿z ¿z÷¿{¿{0¿{>¿{l¿{p¿{q¿{}¿{ƒ¿{ˆ¿|!¿|U¿|a¿|≤¿|˙¿}¿}¿}@¿}â¿}ê¿}ë¿}™¿}Ã¿}Â¿~¿~ ¿~B¿~\¿~Å¿~ô¿~∫¿~–¿~Ì¿¿&¿C¿n¿Ü¿ß¿¬¿È¿Ä¿Ä(¿ÄC¿Äj¿ÄÉ¿Ä¶¿Ä–¿Å¿Å/¿ÅT¿Åo¿Åñ¿ÅÆ¿Åœ¿ÅÊ¿Ç¿Ç&¿ÇW¿Çx¿Ç©¿Ç”¿É¿É@¿ÉÉ¿É£¿É“¿Ñ¿Ñ:¿ÑW¿ÑÄ¿Ñú¿Ñ√¿Ñﬂ¿Ö¿Ö(¿ÖV¿Ö\¿ÖÇ¿Ö∏¿Öæ¿Ö›¿Ü	¿Ü"¿ÜB¿Üb¿Üì¿Ü‡¿á/¿áq¿áà¿á™¿á«¿áı¿à¿à:¿àX¿àà¿àß¿àŸ¿àı¿â!¿â?¿âo¿âã¿â∑¿â”¿âˇ¿ä¿ä;¿äR¿ät¿äç¿ä≥¿ä„¿ã7¿ãh¿ãæ¿ãÈ¿å3¿å_¿å´¿åÀ¿åˇ¿ç¿çD¿çq¿çø¿çÏ¿é:¿éb¿é¢¿é¶¿éß¿éæ¿é—¿é’¿é÷¿éÛ¿è¿è¿è¿è,¿èC¿èG¿èH¿èf¿èÄ¿èÑ¿èÖ¿è§¿èø¿è√¿èƒ¿è‡¿è¯¿è¸¿è˝¿ê¿ê5¿ê9¿ê:¿êV¿ên¿êr¿ês¿êè¿êß¿ê´¿ê¨¿êƒ¿êÿ¿ê‹¿ê›¿êÙ¿ë¿ë¿ë¿ë%¿ë:¿ë>¿ë?¿ëÉ¿ëæ¿ë¬¿ë√¿í¿íD¿íH¿íI¿íà¿íæ¿í¬¿í√¿ì¿ì:¿ì>¿ì?¿ìv¿ìõ¿ìü¿ì†¿ì∆¿ì·¿ìÂ¿ìÊ¿î¿î<¿î@¿îA¿în¿îó¿îõ¿îù¿îû¿îÌ¿ï	¿ï¿ï\¿ïê¿ïƒ¿ñ¿ñ ¿ñ9¿ñO¿ñi¿ñÜ¿ñõ¿ñú¿ñÈ¿ó9¿ó[¿óm¿óä¿ó•¿ó¡¿óœ¿óÊ¿ò¿ò
¿ò¿ò¿ò^¿òê¿ò”¿ò◊¿òÿ¿ò‰¿ô)¿ôT¿ôô¿ôù¿ôü¿ô†¿ô„¿ö&¿ö:¿ö>¿öÖ¿öÃ¿ö˛¿õ2¿õÄ¿õΩ¿õæ¿õ ¿ú¿úC¿úN¿úp¿ú†¿ú§¿ú¶¿úß¿úŸ¿ú›¿ù,¿ùH¿ùL¿ùì¿ùŒ¿û¿ûM¿ûh¿û~¿ûô¿û∏¿ûŒ¿ûÓ¿ûÚ¿ûÛ¿ü8¿ü\¿üo¿üç¿ü®¿ü≈¿ü”¿üÎ¿†¿†¿†¿†¿†\¿†o¿†}¿†´¿†Ø¿†∞¿†º¿°¿°,¿°s¿°w¿°y¿°z¿°∑¿°ª¿¢¿¢N¿¢Ä¿¢™¿¢Æ¿¢º¿¢¿¿£¿£9¿£â¿£§¿£∫¿£“¿£¿§¿§¿§¿§P¿§k¿§y¿§í¿§™¿§∏¿§Ã¿§Ï¿§¿§Ò¿§˝¿•D¿•v¿•ò¿•ú¿•ù¿•©¿•Ó¿¶¿¶W¿¶[¿¶]¿¶^¿¶í¿¶ñ¿¶§¿¶®¿¶Ê¿ß'¿ßX¿ßë¿ßó¿ß∫¿ß–¿ßÌ¿®¿® ¿®5¿®J¿®K¿®ô¿®∑¿®Ω¿©
¿©H¿©g¿©z¿©ò¿©≥¿©À¿©Ÿ¿©ˆ¿™	¿™0¿™^¿™d¿™z¿™~¿™¿™ã¿™∂¿™∑¿´¿´S¿´ï¿´≤¿´≥¿´ø¿´ÿ¿´Û¿¨¿¨/¿¨3¿¨4¿¨@¿¨w¿¨ê¿¨«¿¨‘¿≠¿≠#¿≠9¿≠T¿≠Z¿≠ì¿≠Æ¿≠≤¿≠≥¿≠ø¿Æ¿Æ/¿Æq¿Æu¿Æw¿Æx¿Æ∆¿Æ˘¿Æ˝¿ØI¿ØM¿Øò¿ØÈ¿Ø˝¿∞¿∞¿∞¿∞S¿∞ñ¿∞…¿±¿±
¿±D¿±\¿±y¿±õ¿±º¿±Ï¿≤¿≤4¿≤Q¿≤z¿≤ô¿≤Æ¿≤€¿≤Ù¿≥¿≥B¿≥W¿≥X¿≥û¿≥‘¿≥Û¿¥¿¥$¿¥?¿¥W¿¥e¿¥x¿¥é¿¥í¿¥ì¿¥◊¿µ¿µ¿µl¿µÆ¿µ¥¿∂¿∂T¿∂à¿∂∫¿∂‘¿∂˘¿∑¿∑8¿∑F¿∑e¿∑{¿∑¿∑Ä¿∑Õ¿∑˜¿∏¿∏)¿∏F¿∏a¿∏{¿∏â¿∏û¿∏¥¿∏∏¿∏π¿π¿π!¿π'¿πl¿π±¿∫ ¿∫B¿∫ë¿∫“¿ª¿ª=¿ªR¿ªX¿ª¿ªÆ¿ª…¿ªÔ¿º
¿º*¿º8¿ºS¿ºi¿ºm¿ºn¿º∫¿ºÙ¿º˙¿Ω<¿ΩB¿Ωi¿Ωú¿Ωπ¿Ω·¿Ω¸¿æ¿æ,¿æI¿æ_¿æc¿æd¿æp¿æÇ¿æî¿æ®¿æ¨¿æ≠¿æπ¿æ‰¿æÂ¿ø¿ø'¿ød¿øe¿øµ¿øª¿¿¿¿<¿¿ã¿¿•¿¿«¿¡¿¡¿¡¿¡¿¡\¿¡ù¿¡œ¿¡„¿¬¿¬[¿¬ô¿¬≥¿¬Î¿¬Ô¿¬¿¬¸¿√L¿√u¿√ù¿√∑¿√Û¿ƒ5¿ƒ>¿ƒE¿ƒI¿ƒJ¿ƒV¿ƒç¿ƒª¿ƒ«¿≈$¿≈y¿≈ƒ¿≈Ô¿≈ˆ¿∆2¿∆F¿∆°¿∆«¿∆‡¿∆˝¿«¿«=¿«j¿«ä¿«ì¿«†¿«¨¿«√¿«Ò¿» ¿»C¿»I¿»`¿»n¿»Å¿»î¿»¡¿…¿…@¿…a¿…z¿…ì¿…ú¿…£¿…ß¿…®¿…¥¿…ı¿ $¿ (¿ )¿ 5¿ z¿ •¿ Á¿À<¿À¿ÀŸ¿À›¿Àﬂ¿À‡¿Ã/¿Ã3¿ÃA¿ÃE¿Ãâ¿ÃŒ¿Õ¿Õ¿Õ]¿Õo¿Õu¿Õ¬¿ÕÙ¿Õ˙¿Œ)¿ŒC¿ŒY¿Œr¿Œà¿Œ¶¿Œƒ¿Œ€¿ŒÚ¿œ¿œ¿œA¿œZ¿œf¿œÅ¿œù¿œ´¿œ¬¿œÿ¿œ‹¿œ›¿–1¿–M¿–\¿–v¿–è¿–ù¿–±¿–«¿–À¿–Ã¿–ÿ¿—¿—¿—¿—H¿—¢¿—Â¿—Ú¿“¿“8¿“?¿“r¿“v¿“x    Ä•Ä∫ÄºÄ‰ÄÁ  Å  Å:  Åb  Åã  Å¥  ÅÁ  Å˙  Ç  Ç,  ÇCÇjÇÕ )Ç–ÑÅÖ…ÇÚ/// A base class for render boxes that resemble their children.
///
/// A proxy box has a single child and simply mimics all the properties of that
/// child by calling through to the child for each function in the render box
/// protocol. For example, a proxy box determines its size by asking its child
/// to layout with the same constraints and then matching the size.
///
/// A proxy box isn't useful on its own because you might as well just replace
/// the proxy box with its child. However, RenderProxyBox is a useful base class
/// for render objects that wish to mimic most, but not all, of the properties
/// of their child.
///
/// See also:
///
///  * [RenderProxySliver], a base class for render slivers that resemble their
///    children. Ü9Å ááÄÀ/// Creates a proxy render box.
///
/// Proxy render boxes are rarely created directly because they simply proxy
/// the render box protocol to [child]. Instead, consider using one of the
/// subclasses.áá+       ì´Ñ†îX/// A RenderProxyBox subclass that allows you to customize the
/// hit-testing behavior. îPÄ˝ îÕîÓv/// Initializes member variables for subclasses.
///
/// By default, the [behavior] is [HitTestBehavior.deferToChild].îı,î˚  ï'ï3  ïïïï@ïEïKïFïQ@ïâ%/// How to behave during hit testing.  ïñÅ}ïß  ïØï¡  ï ï€  ïñïóóTó(  ó4ó<  óóóoÄ⁄óÄ  óî&ó±  óoóp òMê≈ö7Å„/// Imposes additional constraints on its child.
///
/// A render constrained box proxies most functions in the render box protocol
/// to its child, except that when laying out its child, it tightens the
/// constraints provided by its parent by enforcing the [additionalConstraints]
/// as well.
///
/// For example, if you wanted [child] to have a minimum height of 50.0 logical
/// pixels, you could use `const BoxConstraints(minHeight: 50.0)` as the
/// [additionalConstraints]. ögÅü öÚõÄÑ/// Creates a render box that constrains its child.
///
/// The [additionalConstraints] argument must not be null and must be valid.õõ  õ#-õ<  õYõ_õ}õvõ`õyõáõçõ∏õéõ£õ§õ∂õ∑õŸõ¬õ€õ˘õ˛úõˇúê%úü  ú
ÄÉú]=/// Additional constraints to apply to [child] during layout.   úπÄÍúΩ  ú”ú„   ùßÅ¢ù∫  ù”ù€  ùßù®üMÅ¢ü`  üyüÅ  üMüN†ÛÅ´°  ° °(  †Û†Ù¢¢Å´¢µ  ¢œ¢◊  ¢¢¢£§QÅL§b   §Q§R•°Å•≤  •√•”  •°•¢¶≤Åt¶√  ¶“¶„  ¶Î¶Û  ¶≤¶≥®*ÄÊ®;  ®O&®l  ®*®+ ©åí´äÇo/// Constrains the child's [BoxConstraints.maxWidth] and
/// [BoxConstraints.maxHeight] if they're otherwise unconstrained.
///
/// This has the effect of giving the child a natural dimension in unbounded
/// environments. For example, by providing a [maxHeight] to a widget that
/// normally tries to be as big as possible, the widget will normally size
/// itself to fit its parent, but when placed in a vertical list, it will take
/// on the given height.
///
/// This is useful when composing widgets that normally try to match their
/// parents' size, so that they behave reasonably in lists (which are
/// unbounded). ´∂Ç ¨ù¨≠Ä‹/// Creates a render box that imposes a maximum width or maximum height on its
/// child if the child is otherwise unconstrained.
///
/// The [maxWidth] and [maxHeight] arguments not be null and must be
/// non-negative.¨¥¨¿  ¨ !¨“  ¨Ò"¨˘  $¨‹¨‚¨„≠≠
≠≠≠"≠F≠4≠,≠#≠/≠@≠7≠C≠P≠V≠|≠i≠a≠W≠d≠v≠l≠y≠ê≠Ü≠í≠Æ≠£≠∞≠¬≠«≠Õ≠»ÆLÆS  ØÑØã  ≠”vÆ3R/// The value to use for maxWidth if the incoming maxWidth constraint is infinite.   Æ`Ä£Æd  ÆmÆu   ØzØiT/// The value to use for maxHeight if the incoming maxHeight constraint is infinite.   ØôÄ¶Øù  ØßØØ   ∞CÅç∞R  ∞d∞t   ±‘ÅC±Ÿ  ±Á#≤   ≤"≤$   ≥Ä∏≥,  ≥=≥M  ≥≥≥◊Äò≥Ë   ≥◊≥ÿ¥sÅ1¥Ñ  ¥ò&¥µ  ¥s¥t µ®ñ{º*Ü{/// Attempts to size the child to a specific aspect ratio.
///
/// The render object first tries the largest width permitted by the layout
/// constraints. The height of the render object is determined by applying the
/// given aspect ratio to the width, expressed as a ratio of width to height.
///
/// For example, a 16:9 width:height aspect ratio would have a value of
/// 16.0/9.0. If the maximum width is infinite, the initial width is determined
/// by applying the aspect ratio to the maximum height.
///
/// Now consider a second example, this time with an aspect ratio of 2.0 and
/// layout constraints that require the width to be between 0.0 and 100.0 and
/// the height to be between 0.0 and 100.0. We'll select a width of 100.0 (the
/// biggest allowed) and a height of 50.0 (to match the aspect ratio).
///
/// In that same situation, if the aspect ratio is 0.5, we'll also select a
/// width of 100.0 (still the biggest allowed) and we'll attempt to use a height
/// of 200.0. Unfortunately, that violates the constraints because the child can
/// be at most 100.0 pixels tall. The render object will then take that value
/// and apply the aspect ratio again to obtain a width of 50.0. That width is
/// permitted by the constraints and the child receives a width of 50.0 and a
/// height of 100.0. If the width were not permitted, the render object would
/// continue iterating through the constraints. If the render object does not
/// find a feasible size after consulting each constraint, the render object
/// will eventually select a size for the child that meets the layout
/// constraints but fails to meet the aspect ratio constraints. ºWÅs º›ºÓ/// Creates as render object with a specific aspect ratio.
///
/// The [aspectRatio] argument must be a finite, positive value.ºıΩ  ΩΩ  Ω/Ω5ΩIΩBΩ6ΩEΩSΩYΩkΩfΩZΩhΩuΩ{ΩêΩ|ΩáΩàΩßΩöΩ©ΩΩΩ¬Ω»Ω√æøæ∆  ΩŒÄÓæ†Äæ/// The aspect ratio to attempt to use.
///
/// The aspect ratio is expressed as a ratio of width to height. For example,
/// a 16:9 width:height aspect ratio would have a value of 16.0/9.0.   æ÷Ä—æ⁄  æÊæÓ   ø´Ä÷øæ  ø◊øﬂ  ø´ø¨¿ @ÖÄ÷¿ @ò  ¿ @±¿ @π  ¿ @Ö¿ @Ü¿ A_Ä‘¿ Ar  ¿ Aå¿ Aî  ¿ A_¿ A`¿ B7Ä‘¿ BJ  ¿ Bd¿ Bl  ¿ B7¿ B8¿ CáC¿ C  ¿ C&¿ C6   ¿ JVn¿ Jg  ¿ Jx¿ Jà  ¿ JV¿ JW¿ J»Äò¿ JŸ   ¿ J»¿ J…¿ KdÄΩ¿ Ku  ¿ Kâ&¿ K¶  ¿ Kd¿ Ke ¿ L%ï6¿ RÁÜº/// Sizes its child to the child's maximum intrinsic width.
///
/// This class is useful, for example, when unlimited width is available and
/// you would like a child that would otherwise attempt to expand infinitely to
/// instead size itself to a more reasonable width.
///
/// The constraints that this object passes to its child will adhere to the
/// parent's constraints, so if the constraints are not large enough to satisfy
/// the child's maximum intrinsic width, then the child will get less width
/// than it otherwise would. Likewise, if the minimum width constraint is
/// larger than the child's maximum intrinsic width, the child will be given
/// more width than it otherwise would.
///
/// If [stepWidth] is non-null, the child's width will be snapped to a multiple
/// of the [stepWidth]. Similarly, if [stepHeight] is non-null, the child's
/// height will be snapped to a multiple of the [stepHeight].
///
/// This class is relatively expensive, because it adds a speculative layout
/// pass before the final layout phase. Avoid using it where possible. In the
/// worst case, this render object can result in a layout that is O(N¬≤) in the
/// depth of the tree.
///
/// See also:
///
///  * [Align], a widget that aligns its child within itself. This can be used
///    to loosen the constraints passed to the [RenderIntrinsicWidth],
///    allowing the [RenderIntrinsicWidth]'s child to be smaller than that of
///    its parent.
///  * [Row], which when used with [CrossAxisAlignment.stretch] can be used
///    to loosen just the width constraints that are passed to the
///    [RenderIntrinsicWidth], allowing the [RenderIntrinsicWidth]'s child's
///    width to be smaller than that of its parent. ¿ SÅ„ ¿ Sﬁ¿ SÚÄæ/// Creates a render object that sizes itself to its child's intrinsic width.
///
/// If [stepWidth] is non-null it must be > 0.0. Similarly If [stepHeight] is
/// non-null it must be > 0.0.¿ S˘¿ T  ¿ T¿ T  ¿ T(¿ T4  ¿ TA¿ TG¿ Tl¿ TZ¿ TR¿ TH¿ TU¿ Tg¿ T]¿ Ti¿ Tv¿ T|¿ T£¿ Tê¿ Tà¿ T}¿ Tã¿ Tû¿ Tì¿ T†¿ T∏¿ T≠¿ T∫¿ Tÿ¿ TÃ¿ T⁄¿ TÌ¿ TÚ¿ T¯¿ TÛ¿ Uû¿ U¶  ¿ W¿ W	  ¿ T˛Äù¿ UÉr/// If non-null, force the child's width to be a multiple of this value.
///
/// This value must be null or > 0.0.   ¿ U¥Ä¶¿ U∏  ¿ U¬¿ UÀ   ¿ V^Ä†¿ V‰s/// If non-null, force the child's height to be a multiple of this value.
///
/// This value must be null or > 0.0.   ¿ WÄ©¿ W  ¿ W'¿ W0   	¿ W≈Ä©¿ W”  ¿ Wﬁ¿ WÊ  ¿ WÏ¿ Wı   ¿ Xrm¿ XÖ  ¿ Xû¿ X¶  ¿ Xr¿ Xs¿ X„Ä—¿ Xˆ  ¿ Y¿ Y  ¿ X„¿ X‰¿ Y∏ÅB¿ YÀ  ¿ YÂ¿ YÌ  ¿ Y∏¿ Yπ¿ Z˛ÅB¿ [  ¿ [+¿ [3  ¿ Z˛¿ Zˇ¿ \DÇ¬¿ \I  ¿ \W"¿ \o  ¿ \{#¿ \î   ¿ _
Ä∏¿ _  ¿ _,¿ _<  ¿ _
¿ _¿ _∆Äò¿ _◊   ¿ _∆¿ _«¿ `bÄ˜¿ `s  ¿ `á&¿ `§  ¿ `b¿ `c ¿ a]åc¿ gJÖÁ/// Sizes its child to the child's intrinsic height.
///
/// This class is useful, for example, when unlimited height is available and
/// you would like a child that would otherwise attempt to expand infinitely to
/// instead size itself to a more reasonable height.
///
/// The constraints that this object passes to its child will adhere to the
/// parent's constraints, so if the constraints are not large enough to satisfy
/// the child's maximum intrinsic height, then the child will get less height
/// than it otherwise would. Likewise, if the minimum height constraint is
/// larger than the child's maximum intrinsic height, the child will be given
/// more height than it otherwise would.
///
/// This class is relatively expensive, because it adds a speculative layout
/// pass before the final layout phase. Avoid using it where possible. In the
/// worst case, this render object can result in a layout that is O(N¬≤) in the
/// depth of the tree.
///
/// See also:
///
///  * [Align], a widget that aligns its child within itself. This can be used
///    to loosen the constraints passed to the [RenderIntrinsicHeight],
///    allowing the [RenderIntrinsicHeight]'s child to be smaller than that of
///    its parent.
///  * [Column], which when used with [CrossAxisAlignment.stretch] can be used
///    to loosen just the height constraints that are passed to the
///    [RenderIntrinsicHeight], allowing the [RenderIntrinsicHeight]'s child's
///    height to be smaller than that of its parent. ¿ g{Äì ¿ gÃ¿ g·N/// Creates a render object that sizes itself to its child's intrinsic height.¿ gË¿ gÙ  ¿ h¿ h¿ h¿ h  ¿ hÅ¿ h%  ¿ h>¿ hF  ¿ h¿ h¿ i$Å¿ i7  ¿ iP¿ iX  ¿ i$¿ i%¿ j6m¿ jI  ¿ jc¿ jk  ¿ j6¿ j7¿ jßÅø¿ j¨  ¿ j∫"¿ j“  ¿ jﬁ#¿ j˜   ¿ ljÄ∏¿ l{  ¿ lå¿ lú  ¿ lj¿ lk¿ m&Äò¿ m7   ¿ m&¿ m' ¿ m¬çP¿ o¥ÅÎ/// Makes its child partially transparent.
///
/// This class paints its child into an intermediate buffer and then blends the
/// child back into the scene partially transparent.
///
/// For values of opacity other than 0.0 and 1.0, this class is relatively
/// expensive because it requires painting the child into an intermediate
/// buffer. For the value 0.0, the child is simply not painted at all. For the
/// value 1.0, the child is painted immediately without an intermediate buffer. ¿ o›Ç ¿ p]¿ pjy/// Creates a partially transparent render object.
///
/// The [opacity] argument must be between 0.0 and 1.0, inclusive.¿ pq¿ py  ¿ pã#¿ pë  ¿ p¥¿ p¿  ,¿ pÇ¿ p©¿ pÕ¿ p”¿ p„¿ p‹¿ p‘¿ pﬂ¿ pÌ¿ pÛ¿ q¿ q¿ p¸¿ pÙ¿ pˇ¿ q¿ q¿ q¿ q¿ q$¿ qC¿ q<¿ q%¿ q?¿ qV¿ qM¿ qX¿ qÄ¿ qh¿ qÇ¿ q®¿ q°¿ q™¿ q¨¿ q≠¿ q≤¿ q≥¿ q∆¿ qŒ¿ q«¿ qÿ¿ q›¿ q„¿ qﬁ¿ r:
¿ r>  ¿ s€¿ s‚  ¿ vÏ¿ vÒ  ¿ qÈM¿ q˛   ¿ qÈ¿ qÍ¿ rIÅè¿ sƒÅ[/// The fraction to scale the child's alpha value.
///
/// An opacity of 1.0 is fully opaque. An opacity of 0.0 is fully transparent
/// (i.e., invisible).
///
/// The opacity must not be null.
///
/// Values 1.0 and 0.0 are painted with a fast path. Other values
/// require painting the child into an intermediate buffer, which is
/// expensive.   ¿ sÓÇ¿ sÚ  ¿ s˙¿ t   ¿ vÄ‰¿ v∑Äû/// Whether child semantics are included regardless of the opacity.
///
/// If false, semantics are excluded when [opacity] is 0.0.
///
/// Defaults to false.   ¿ wÄ©¿ w  ¿ w'
¿ w-   ¿ wπÅw¿ w   ¿ w–¿ w·  ¿ wÈ¿ wÒ  ¿ wπ¿ w∫¿ y4Ä¶¿ yE  ¿ y_¿ yt  ¿ y4¿ y5¿ yﬁÅ2¿ yÔ  ¿ z&¿ z   ¿ yﬁ¿ yﬂ ¿ âTÇË¿ ä"Ä«/// Makes its child partially transparent, driven from an [Animation].
///
/// This is a variant of [RenderOpacity] that uses an [Animation<double>] rather
/// than a [double] to control the opacity. ¿ äìÅß ¿ ä˝¿ ãc/// Creates a partially transparent render object.
///
/// The [opacity] argument must not be null.¿ ã"¿ ã5  ¿ ãA#¿ ãG  ¿ ãj¿ ãv  ¿ ã_¿ ãÉ¿ ãâ¿ ãô¿ ãí¿ ãä¿ ãï¿ ã£¿ ã©¿ ã»¿ ã¡¿ ã™¿ ãƒ¿ ã“¿ ã◊¿ ã›¿ ãÿ    ¿ åˇâh¿ ç∆Ä¿/// Applies a mask generated by a [Shader] to its child.
///
/// For example, [RenderShaderMask] can be used to gradually fade out the edge
/// of a child by using a [ui.Gradient.linear] mask. ¿ çÚÅÕ ¿ éó¿ éßÄû/// Creates a render object that applies a mask generated by a [Shader] to its child.
///
/// The [shaderCallback] and [blendMode] arguments must not be null.¿ éÆ¿ é∫  ¿ éƒ&¿ é›  ¿ é(¿ é˚  ¿ è¿ è¿ è¿ è!¿ è'¿ è>¿ è7¿ è(¿ è:¿ èH¿ èN¿ è`¿ èY¿ èO¿ è\¿ èz¿ èj¿ è|¿ èû¿ èì¿ è†¿ è≤¿ è∑¿ èΩ¿ è∏¿ í¿ í  ¿ ìÍ¿ ìÙ  ¿ è√J¿ è‰   ¿ è√¿ èƒ¿ êÅ˜¿ ëÊÅ-/// Called to creates the [Shader] that generates the mask.
///
/// The shader callback is called with the current size of the child so that
/// it can customize the shader to the size and location of the child.
///
/// The rectangle will always be at the origin when called by
/// [RenderShaderMask].   ¿ í-Ä¨¿ í1  ¿ í@¿ íP   ¿ í›Å
¿ ìœÄ€/// The [BlendMode] to use when applying the shader to the child.
///
/// The default, [BlendMode.modulate], is useful for applying an alpha blend
/// to the child. Other blend modes can be used to create other effects.   ¿ îÄò¿ î  ¿ î¿ î   ¿ îû=¿ î≥   ¿ îû¿ îü¿ îﬂÅÜ¿ î  ¿ îˆ¿ ï  ¿ ï¿ ï  ¿ îﬂ¿ î‡ ¿ ñiá∞¿ ó%Äµ/// Applies a filter to the existing painted content and then paints [child].
///
/// This effect is relatively expensive, especially if the filter is non-local,
/// such as a blur. ¿ óUÅæ ¿ ò¿ ò+Ä∑/// Creates a backdrop filter.
///
/// The [filter] argument must not be null.
/// The [blendMode] argument, if provided, must not be null
/// and will default to [BlendMode.srcOver].¿ ò.¿ ò:  ¿ ò@¿ òY  ¿ ò`'¿ òk  ¿ òv¿ ò¿ òÄ¿ òë¿ òó¿ ò¶¿ òü¿ òò¿ ò¢¿ òØ¿ òµ¿ ò«¿ ò¿¿ ò∂¿ ò√¿ òÿ¿ ò–¿ ò⁄¿ òÛ¿ òË¿ òı¿ ô¿ ô¿ ô¿ ô¿ ö\¿ ök  ¿ õ›¿ õÁ  ¿ ôR¿ ô<   ¿ ô¿ ô¿ ômÄÏ¿ öGÄº/// The image filter to apply to the existing painted content before painting
/// the child.
///
/// For example, consider using [ui.ImageFilter.blur] to create a backdrop
/// blur effect.   ¿ övÄî¿ öz  ¿ öÅ¿ öë   ¿ õÄÃ¿ õ¬Äù/// The blend mode to use to apply the filtered background content onto the background
/// surface.
///
/// {@macro flutter.widgets.BackdropFilter.blendMode}   ¿ õıÄò¿ õ˘  ¿ ú¿ ú   ¿ úë=¿ ú¶   ¿ úë¿ úí¿ ú“ÅE¿ ú„  ¿ úÈ¿ ú˙  ¿ ù¿ ù
  ¿ ú“¿ ú” ¿ ûéó¿ ¢}ÑR/// An interface for providing custom clips.
///
/// This class is used by a number of clip widgets (e.g., [ClipRect] and
/// [ClipPath]).
///
/// The [getClip] method is called whenever the custom clip needs to be updated.
///
/// The [shouldReclip] method is called when a new instance of the class
/// is provided, to check if the new instance actually represents different
/// information.
///
/// The most efficient way to update the clip provided by this class is to
/// supply a `reclip` argument to the constructor of the [CustomClipper]. The
/// custom object will listen to this animation and update the clip whenever the
/// animation ticks, avoiding both the build and layout phases of the pipeline.
///
/// See also:
///
///  * [ClipRect], which can be customized with a [CustomClipper<Rect>].
///  * [ClipRRect], which can be customized with a [CustomClipper<RRect>].
///  * [ClipOval], which can be customized with a [CustomClipper<Rect>].
///  * [ClipPath], which can be customized with a [CustomClipper<Path>].
///  * [ShapeBorderClipper], for specifying a clip path using a [ShapeBorder].¿ ¢ã¿ ¢ã¿ ¢•Ä∂ ¿ £"¿ £/p/// Creates a custom clipper.
///
/// The clipper will update its clip whenever [reclip] notifies its listeners.¿ £2¿ £?  ¿ £R¿ £J¿ £T¿ £_¿ £q   ¿ £}ÅU¿ §çÄÙ/// Register a closure to be notified when it is time to reclip.
///
/// The [CustomClipper] implementation merely forwards to the same method on
/// the [Listenable] provided to the constructor in the `reclip` argument, if
/// it was not null. ¿ §ô¿ §ß  ¿ §|¿ §}¿ §÷Åô¿ ¶$Å0/// Remove a previously registered closure from the list of closures that the
/// object notifies when it is time to reclip.
///
/// The [CustomClipper] implementation merely forwards to the same method on
/// the [Listenable] provided to the constructor in the `reclip` argument, if
/// it was not null. ¿ ¶3¿ ¶A  ¿ ¶¿ ¶¿ ¶sÄÑ¿ ¶‰j/// Returns a description of the clip given that the render object being
/// clipped is of the given size. ¿ ¶Ï	¿ ¶Ú   ¿ ¶˚Ç¿ ®◊Å∆/// Returns an approximation of the clip returned by [getClip], as
/// an axis-aligned Rect. This is used by the semantics layer to
/// determine whether widgets should be excluded.
///
/// By default, this returns a rectangle that is the same size as
/// the RenderObject. If getClip returns a shape that is roughly the
/// same size as the RenderObject (e.g. it's a rounded rectangle
/// with very small arcs in the corners), then this may be adequate. ¿ ®Ó	¿ ®Ù   ¿ ©ÉO¿ ¨.Ç˜/// Called whenever a new instance of the custom clipper delegate class is
/// provided to the clip object, or any time that a new clip object is created
/// with a new instance of the custom clipper delegate class (which amounts to
/// the same thing, because the latter is implemented in terms of the former).
///
/// If the new instance represents different information than the old
/// instance, then the method should return true, otherwise it should return
/// false.
///
/// If the method returns false, then the [getClip] call might be optimized
/// away.
///
/// It's possible that the [getClip] method will get called even if
/// [shouldReclip] returns false or if the [shouldReclip] method is never
/// called at all (e.g. if the box changes size). ¿ ¨;%¿ ¨W   ¿ ¨fJ¿ ¨y   ¿ ¨f¿ ¨g ¿ ¨¥Ö≠¿ ≠F/// A [CustomClipper] that clips to the outer path of a [ShapeBorder]. ¿ ≠4Å ¿ Æ¡¿ Æ”Åv/// Creates a [ShapeBorder] clipper.
///
/// The [shape] argument must not be null.
///
/// The [textDirection] argument must be provided non-null if [shape]
/// has a text direction dependency (for example if it is expressed in terms
/// of "start" and "end" instead of "left" and "right"). It may be null if
/// the border will not need the text direction to paint itself.¿ Æ⁄¿ ÆÈ  ¿ ÆÛ¿ Æ˘  ¿ Ø¿ Ø¿ Ø"¿ Ø¿ Ø¿ Ø¿ Ø(V¿ Øy</// The shape border whose outer path this clipper clips to. ¿ ØÉÄ‚¿ ∞XÄ∑/// The text direction to use for getting the outer path for [shape].
///
/// [ShapeBorder]s can depend on the text direction (e.g having a "dent"
/// towards the start of the shape).  ¿ ∞jÄØ¿ ∞∞2/// Returns the outer path of [shape] as the clip. ¿ ∞∏	¿ ∞æ  ¿ ∞ü¿ ∞†¿ ±ÅB¿ ±.  ¿ ±;¿ ±P  ¿ ±¿ ± ¿ ≤cã¿ ≤r ¿ ≤Ñ¿ ≤Ñ¿ ≤¢ÄÍ ¿ ≤¢¿ ≤≥ ¿ ≤∫¿ ≤∆  ¿ ≤–¿ ≤„  ¿ ≤Ô"¿ ≤ı  ¿ ≥¿ ≥¿ ≥¿ ≥¿ ≥ ¿ ≥5¿ ≥.¿ ≥!¿ ≥1¿ ≥H¿ ≥?¿ ≥J¿ ≥h¿ ≥Z¿ ≥j¿ ≥¿ ≥Ñ¿ ≥ä¿ ≥Ö¿ ≥˚¿ ¥  ¿ ∑í¿ ∑ï  ¿ ∏K¿ ∏P  ¿ πÏ¿ πÛ  ¿ ∫¿ ∫  ¿ ≥êh¿ ≥‰;/// If non-null, determines which clip to use on the child.   ¿ ¥Ç¿ ¥  ¿ ¥%¿ ¥8   ¿ ∑|¿ ∑Ç    ¿ ∑ü'¿ ∑®    ¿ ∑…¿ ∑Õ  ¿ ∑⁄
¿ ∑‡   ¿ ∂6v¿ ∂G  ¿ ∂N¿ ∂]  ¿ ∂6¿ ∂7¿ ∂∞a¿ ∂¡   ¿ ∂∞¿ ∂±¿ ∑c¿ ∑    ¿ ∏bÄü¿ ∏s   ¿ ∏b¿ ∏c¿ πO¿ π
    ¿ πXÄê¿ πi  ¿ πÜ¿ πî  ¿ πX¿ πY¿ ∫ÉI¿ ∫.  ¿ ∫=¿ ∫N  ¿ ∫V¿ ∫^  ¿ ∫¿ ∫ ¿ Ωjáﬁ¿ æPÄﬂ/// Clips its child using a rectangle.
///
/// By default, [RenderClipRect] prevents its child from painting outside its
/// bounds, but the size and location of the clip rect can be customized using a
/// custom [clipper]. ¿ æÉÅﬁ ¿ øÇ¿ øêÄ/// Creates a rectangular clip.
///
/// If [clipper] is null, the clip will match the layout size and position of
/// the child.
///
/// The [clipBehavior] must not be null. If [clipBehavior] is
/// [Clip.none], no clipping will be applied.¿ øó¿ ø£  ¿ ø≠¿ ø√  ¿ øœ"¿ ø’  ¿ ø„¿ øÁ¿ øË¿ ø˙¿ ¿ ¿ ¿¿ ¿¿ ¿¿ ¿¿ ¿¿ ¿$¿ ¿_¿ ¿*¿ ¿%¿ ¿,¿ ¿:¿ ¿3¿ ¿<¿ ¿Q¿ ¿E¿ ¿S ¿ ¿e8¿ ¿z   ¿ ¿e¿ ¿f¿ ¿°Å¿ ¿≤  ¿ ¿∫¿ ¿Ã  ¿ ¿’¿ ¿Ê  ¿ ¿°¿ ¿¢¿ ¡¿Åˆ¿ ¡—  ¿ ¡◊¿ ¡Ë  ¿ ¡¿ ¡¯  ¿ ¡¿¿ ¡¡¿ √∫Åå¿ √À  ¿ √⁄¿ √Î  ¿ √Û¿ √˚  ¿ √∫¿ √ª ¿ ≈Jä„¿ ∆7ÄÊ/// Clips its child using a rounded rectangle.
///
/// By default, [RenderClipRRect] uses its own bounds as the base rectangle for
/// the clip, but the size and location of the clip can be customized using a
/// custom [clipper]. ¿ ∆lÇ’ ¿ «Õ¿ «‹ÅN/// Creates a rounded-rectangular clip.
///
/// The [borderRadius] defaults to [BorderRadius.zero], i.e. a rectangle with
/// right-angled corners.
///
/// If [clipper] is non-null, then [borderRadius] is ignored.
///
/// The [clipBehavior] argument must not be null. If [clipBehavior] is
/// [Clip.none], no clipping will be applied.¿ «„¿ «Ô  ¿ «˘-¿ »  ¿ »,¿ »C  ¿ »O"¿ »U  ¿ »¿ »!¿ »"¿ »c¿ »g¿ »h¿ »z¿ »Ä¿ »ï¿ »é¿ »Å¿ »ë¿ »≠¿ »ü¿ »Ø¿ »ƒ¿ »…¿ …¿ »œ¿ » ¿ »—¿ »ﬂ¿ »ÿ¿ »·¿ »ˆ¿ »Í¿ »¯¿  O¿  \  ¿ …EÅ¿  .ÄÀ/// The border radius of the rounded corners.
///
/// Values are clamped so that horizontal and vertical radii sums do not
/// exceed width/height.
///
/// This value is ignored if [clipper] is non-null.   ¿  mÄ§¿  q  ¿  ~¿  å   ¿ ÀP¿ À+   ¿ À¿ À¿ ÀiÅ¿ Àz  ¿ ÀÇ¿ Àî  ¿ Àù¿ ÀÆ  ¿ Ài¿ Àj¿ ÃàÇ¿ Ãô  ¿ Ãü¿ Ã∞  ¿ Ã∏¿ Ã¿  ¿ Ãà¿ Ãâ¿ Œ†Åã¿ Œ±  ¿ Œ¿¿ Œ—  ¿ ŒŸ¿ Œ·  ¿ Œ†¿ Œ° ¿ –/ä_¿ —=Å/// Clips its child using an oval.
///
/// By default, inscribes an axis-aligned oval into its layout dimensions and
/// prevents its child from painting outside that oval, but the size and
/// location of the clip oval can be customized using a custom [clipper]. ¿ —pÅÙ ¿ “Ö¿ “ìÅ/// Creates an oval-shaped clip.
///
/// If [clipper] is null, the oval will be inscribed into the layout size and
/// position of the child.
///
/// The [clipBehavior] argument must not be null. If [clipBehavior] is
/// [Clip.none], no clipping will be applied.¿ “ö¿ “¶  ¿ “∞¿ “∆  ¿ ““"¿ “ÿ  ¿ “Ê¿ “Í¿ “Î¿ “˝¿ ”¿ ”¿ ”¿ ”¿ ”¿ ”"¿ ”'¿ ”b¿ ”-¿ ”(¿ ”/¿ ”=¿ ”6¿ ”?¿ ”T¿ ”H¿ ”V¿ ”h¿ ”n  ¿ ”}¿ ”á  ¿ ‘G8¿ ‘\   ¿ ‘G¿ ‘H¿ ”óÄ¨¿ ”ú  ¿ ”©	¿ ”Ø   ¿ ‘ÉÇ;¿ ‘î  ¿ ‘ú¿ ‘Æ  ¿ ‘∑¿ ‘»  ¿ ‘É¿ ‘Ñ¿ ÷¬Ç¿ ÷”  ¿ ÷Ÿ¿ ÷Í  ¿ ÷Ú¿ ÷˙  ¿ ÷¬¿ ÷√¿ ÿ‹Å∞¿ ÿÌ  ¿ ÿ¸¿ Ÿ  ¿ Ÿ¿ Ÿ  ¿ ÿ‹¿ ÿ› ¿ ⁄êâT¿ ‹cÅÃ/// Clips its child using a path.
///
/// Takes a delegate whose primary method returns a path that should
/// be used to prevent the child from painting outside the path.
///
/// Clipping to a path is expensive. Certain shapes have more
/// optimized render objects:
///
///  * To clip to a rectangle, consider [RenderClipRect].
///  * To clip to an oval or circle, consider [RenderClipOval].
///  * To clip to a rounded rectangle, consider [RenderClipRRect]. ¿ ‹ñÇÄ ¿ ﬁ7¿ ﬁEÅé/// Creates a path clip.
///
/// If [clipper] is null, the clip will be a rectangle that matches the layout
/// size and location of the child. However, rather than use this default,
/// consider using a [RenderClipRect], which can achieve the same effect more
/// efficiently.
///
/// The [clipBehavior] argument must not be null. If [clipBehavior] is
/// [Clip.none], no clipping will be applied.¿ ﬁL¿ ﬁX  ¿ ﬁb¿ ﬁx  ¿ ﬁÑ"¿ ﬁä  ¿ ﬁò¿ ﬁú¿ ﬁù¿ ﬁØ¿ ﬁµ¿ ﬁ ¿ ﬁ√¿ ﬁ∂¿ ﬁ∆¿ ﬁ‘¿ ﬁŸ¿ ﬂ¿ ﬁﬂ¿ ﬁ⁄¿ ﬁ·¿ ﬁÔ¿ ﬁË¿ ﬁÒ¿ ﬂ¿ ﬁ˙¿ ﬂ ¿ ﬂI¿ ﬂ/   ¿ ﬂ¿ ﬂ¿ ﬂgÅ¿ ﬂx  ¿ ﬂÄ¿ ﬂí  ¿ ﬂõ¿ ﬂ¨  ¿ ﬂg¿ ﬂh¿ ‡ÜÇ¿ ‡ó  ¿ ‡ù¿ ‡Æ  ¿ ‡∂¿ ‡æ  ¿ ‡Ü¿ ‡á¿ ‚ûÅD¿ ‚Ø  ¿ ‚æ¿ ‚œ  ¿ ‚◊¿ ‚ﬂ  ¿ ‚û¿ ‚ü ¿ „Êä¿ ‰ƒÄŒ/// A physical model layer casts a shadow based on its [elevation].
///
/// The concrete implementations [RenderPhysicalModel] and [RenderPhysicalShape]
/// determine the actual shape of the physical model.¿ ‰›¿ ‰›¿ ÂÇõ ¿ Âà¿ Â†ÄÇ/// The [shape], [elevation], [color], and [shadowColor] must not be null.
/// Additionally, the [elevation] must be non-negative.¿ Âß¿ Âº  ¿ Â∆¿ Â◊  ¿ ÂÂ¿ Âı  ¿ Âˇ¿ Ê  ¿ Ê¿ Ê%  ¿ ÊB¿ ÊU  4¿ Ê3¿ Ê7¿ Ê8¿ Êd¿ Êj¿ Êê¿ Ê}¿ Êu¿ Êk¿ Êx¿ Êä¿ ÊÄ¿ Êç¿ Êö¿ Ê†¿ ÊÆ¿ Êß¿ Ê°¿ Ê™¿ Ê∏¿ Êæ¿ Ê“¿ ÊÀ¿ Êø¿ ÊŒ¿ Ê‹¿ Ê‚¿ Ê˜¿ Ê¿ Ê„¿ ÊÛ¿ Á¿ Á¿ Á¿ Á'¿ Á ¿ Á)¿ ÁD¿ Á7¿ ÁF¿ ÁZ¿ Á_¿ Áö¿ Áe¿ Á`¿ Ág¿ Áz¿ Án¿ Á|¿ Áë¿ Áä¿ Áì¿ Ëæ¿ Ë≈  ¿ ÍV¿ Í\  ¿ ÎB¿ ÎH  ¿ Á†Å¿ Ë£ÄÎ/// The z-coordinate relative to the parent at which to place this material.
///
/// The value is non-negative.
///
/// If [debugDisableShadows] is set, this value is ignored and no shadow is
/// drawn (an outline is rendered instead).   ¿ Ë”Å>¿ Ë◊  ¿ Ë·¿ ËÈ   ¿ Í>¿ Í7/// The shadow color.   ¿ ÍlÄô¿ Íp  ¿ Í|¿ ÍÉ   ¿ Î	6¿ Î//// The background color.   ¿ ÎRÄá¿ ÎV  ¿ Î\¿ Îc   ¿ Î›4¿ ÎÚ   ¿ Î›¿ Îﬁ¿ ÏÄ®¿ Ï&  ¿ ÏE¿ Ï]  ¿ Ï¿ Ï¿ Ï¡Å*¿ Ï“  ¿ ÏÊ'¿ Ì  ¿ Ï¡¿ Ï¬ ¿ ÌÔêí¿ ÓëÄõ/// Creates a physical model layer that clips its child to a rounded
/// rectangle.
///
/// A physical model layer casts a shadow based on its [elevation]. ¿ Ó—Éû ¿ ÔÕ¿ Ô‡ÄÌ/// Creates a rounded-rectangular clip.
///
/// The [color] is required.
///
/// The [shape], [elevation], [color], [clipBehavior], and [shadowColor]
/// arguments must not be null. Additionally, the [elevation] must be
/// non-negative.¿ ÔÁ¿ ÔÛ  ¿ Ô˝#¿   ¿ &¿ ,  ¿ I¿ X  ¿ i¿ q  ¿ Ö¿ ï  ¿ ü+¿ ¶  F¿ ¿ ¿ ¿ :¿ >¿ ?¿ |¿ ≥¿ π¿ æ¿ …¿ ø¿ ”¿ Ÿ¿ Á¿ ‡¿ ⁄¿ „¿ Ò¿ ˜¿ Ò¿ Ò¿ ¯¿ Ò¿ Ò¿ Ò¿ ÒB¿ Ò/¿ Ò'¿ Ò¿ Ò*¿ Ò<¿ Ò2¿ Ò?¿ ÒL¿ ÒR¿ Ò`¿ ÒY¿ ÒS¿ Ò\¿ Òj¿ Òp¿ ÒÑ¿ Ò}¿ Òq¿ ÒÄ¿ Òï¿ Òé¿ Òó¿ Ò≥¿ Ò•¿ Òµ¿ Ò ¿ Òœ¿ Úm¿ ÒÊ¿ Ò⁄¿ ÒË¿ Ú¿ Òˇ¿ Ú¿ Ú¿ Ú¿ Ú!¿ Ú:¿ Ú5¿ Ú<¿ ÚW¿ ÚL¿ ÚY¿ Ûr¿ Û{  ¿ ıs¿ ıÅ  ¿ ÚsP¿ Úó   ¿ Ús¿ Út¿ Ú«Ä®¿ Û_ÄÇ/// The shape of the layer.
///
/// Defaults to [BoxShape.rectangle]. The [borderRadius] affects the corners
/// of the rectangle.   ¿ ÛÖÄä¿ Ûâ  ¿ Ûè¿ Ûô   ¿ ÙÅ]¿ ıRÅ/// The border radius of the rounded corners.
///
/// Values are clamped so that horizontal and vertical radii sums do not
/// exceed width/height.
///
/// This property is ignored if the [shape] is not [BoxShape.rectangle].
///
/// The value null is treated like [BorderRadius.zero].   ¿ ıíÄâ¿ ıñ  ¿ ı£¿ ı≤   ¿ ˆÅv¿ ˆ5   ¿ ˆ¿ ˆ ¿ ˜ôÅ¿ ˜™  ¿ ˜≤¿ ˜ƒ  ¿ ˜Õ¿ ˜ﬁ  ¿ ˜ô¿ ˜ö¿ ¯∏Ñ™¿ ¯…  ¿ ¯œ¿ ¯‡  ¿ ¯Ë¿ ¯  ¿ ¯∏¿ ¯π¿ ˝fÅ¿ ˝w  ¿ ˝ã'¿ ˝®  ¿ ˝f¿ ˝g ¿ ˛Éãf¿ ˇàÄ˛/// Creates a physical shape layer that clips its child to a [Path].
///
/// A physical shape layer casts a shadow based on its [elevation].
///
/// See also:
///
///  * [RenderPhysicalModel], which is optimized for rounded rectangles and
///    circles. ¿ ˇ«É3 ¿ ª¿ ŒÄÁ/// Creates an arbitrary shape clip.
///
/// The [color] and [clipper] parameters are required.
///
/// The [clipper], [elevation], [color] and [shadowColor] must not be null.
/// Additionally, the [elevation] must be non-negative.¿ ’¿ ·  ¿ Î$¿	  ¿¿  ¿8¿@  ¿T¿d  ¿n+¿u  :¿)¿-¿.¿K¿Ç¿à¿ç¿ò¿é¿¢¿®¿∏¿±¿©¿¥¿¬¿»¿Ó¿€¿”¿…¿÷¿Ë¿ﬁ¿Î¿¯¿˛¿¿¿ˇ¿¿¿¿0¿)¿¿,¿:¿?¿¯¿O¿J¿Q¿j¿a¿l¿Ö¿Ä¿á¿¢¿ó¿§¿¡¿∫¿√¿·¿’¿„ ¿˛P¿"   ¿˛¿ˇ¿RI¿g   ¿R¿S¿üÅ¿∞  ¿∏¿   ¿”¿‰  ¿ü¿†¿æÑS¿œ  ¿’¿Ê  ¿Ó¿ˆ  ¿æ¿ø¿	Ä“¿	&  ¿	:'¿	W  ¿	¿	 ¿
∑íõ¿ B/// Paints a [Decoration] either before or after its child paints. ¿.ÇÊ ¿`¿rÅ#/// Creates a decorated box.
///
/// The [decoration], [position], and [configuration] arguments must not be
/// null. By default the decoration paints behind the child.
///
/// The [ImageConfiguration] will be passed to the decoration (with the size
/// filled in) to let it resolve images.¿y¿é  ¿ù;¿±  ¿ﬁ;¿Ú  ¿¿+  %¿ª¿Õ¿Œ¿¿¿¿8¿>¿Q¿J¿?¿M¿[¿a¿r¿k¿b¿n¿|¿Ç¿ò¿ë¿É¿î¿Æ¿¢¿∞¿Õ¿√¿œ¿Ô¿‡¿Ò¿¿¿¿¿¿$  ¿•¿∞  ¿¿  ¿<!¿O  ¿1q¿àA/// What decoration to paint.
///
/// Commonly a [BoxDecoration].   ¿øÄ ¿√  ¿Œ¿⁄   ¿çx¿ÔH/// Whether to paint the box decoration behind or in front of the child.   ¿(Äû¿,  ¿5¿I   ¿ Åo¿Å+/// The settings to pass to the decoration when painting, so that it can
/// resolve images appropriately. See [ImageProvider.resolve] and
/// [BoxPainter.paint].
///
/// The [ImageConfiguration.textDirection] field is also used by
/// direction-sensitive [Decoration]s for painting and hit-testing.   ¿aÄ≠¿e  ¿s¿á   ¿Åÿ¿#   ¿¿¿ÓÄè¿ˇ  ¿¿  ¿Ó¿Ô¿ÅÜ™¿í  ¿ò¿©  ¿±¿π  ¿Å¿Ç¿/Å!¿@  ¿T&¿q  ¿/¿0 ¿T¢0¿í7/// Applies a transformation before painting its child. ¿ΩÇ: ¿-¿<i/// Creates a render object that transforms its child.
///
/// The [transform] argument must not be null.¿C¿U  ¿c¿l  ¿w¿ã  ¿ô¿©  ¿ª¿¡  ¿ﬁ¿Ó  ¿ ¿  ¿‘¿¿¿1¿*¿ ¿-¿;¿@¿F¿A¿!<¿!D  ¿$º¿$œ  ¿&Ü¿&ï  ¿'¥Åv¿)ÅS/// When set to true, hit tests are performed based on the position of the
/// child as it is painted. When set to false, hit tests are performed
/// ignoring the transformation.
///
/// [applyPaintTransform], and therefore [localToGlobal] and [globalToLocal],
/// always honor the transformation, regardless of the value of this property. ¿)/¿)8  ¿,9¿,H  ¿˚Å>¿!'Å/// The origin of the coordinate system (relative to the upper left corner of
/// this render object) in which to apply the matrix.
///
/// Setting an origin is equivalent to conjugating the transform matrix by a
/// translation. This property is provided just for convenience.   ¿!OÄí¿!S  ¿!Z¿!c   ¿!ÂÇ‘¿$°Çé/// The alignment of the origin, relative to the size of the box.
///
/// This is equivalent to setting an origin based on the size of the box.
/// If it is specified at the same time as an offset, both are applied.
///
/// An [AlignmentDirectional.centerStart] value is the same as an [Alignment]
/// whose [Alignment.x] value is `-1.0` if [textDirection] is
/// [TextDirection.ltr], and `1.0` if [textDirection] is [TextDirection.rtl].
/// Similarly [AlignmentDirectional.centerEnd] is the same as an [Alignment]
/// whose [Alignment.x] value is `1.0` if [textDirection] is
/// [TextDirection.ltr], and `-1.0` if [textDirection] is [TextDirection.rtl].   ¿$›Ä¶¿$·  ¿$Î¿$ˇ   ¿%áÄ¸¿&cÄ¿/// The text direction with which to resolve [alignment].
///
/// This may be changed to null, but only after [alignment] has been changed
/// to a value that does not depend on the direction.   ¿&ßÄÆ¿&´  ¿&π¿&…   ¿'YW¿'n   ¿'Y¿'Z¿)FÇ!¿*~Å'/// The matrix to transform the child by during painting. The provided value
/// is copied on assignment.
///
/// There is no getter for [transform], because [Matrix4] is mutable, and
/// mutations outside of the control of the render object could not reliably
/// be reflected in the rendering. ¿*à¿*ë   ¿+kÄÀ¿,Äë/// The filter quality with which to apply the transform as a bitmap operation.
///
/// {@macro flutter.widgets.Transform.optional.FilterQuality}   ¿,ZÅ(¿,^  ¿,l¿,|   ¿2
ÇŒ¿2    ¿-ÜÄû¿-º./// Sets the transform to the identity matrix.   ¿.(ÄΩ¿.p@/// Concatenates a rotation about the x axis into the transform. ¿.x¿.Ä   ¿.ÈÄΩ¿/1@/// Concatenates a rotation about the y axis into the transform. ¿/9¿/A   ¿/™ÄΩ¿/Ú@/// Concatenates a rotation about the z axis into the transform. ¿/˙¿0   ¿0kÄﬁ¿0≤?/// Concatenates a translation by (x, y, z) into the transform. ¿0º¿0ƒ  ¿0»¿0–  ¿0ÿ¿0‡  ¿0”¿0„¿1MÄπ¿1Å,/// Concatenates a scale into the transform. ¿1á¿1è  ¿1ì	¿1ú  ¿1û	¿1ß   ¿4‹ÅY¿4Ì  ¿4ı¿5  ¿5¿5!  ¿4‹¿4›¿69ÅÆ¿6J  ¿6Z¿6l  ¿6u¿6Ü  ¿69¿6:¿7ÎÑ¸¿7¸  ¿8¿8  ¿8¿8#  ¿7Î¿7Ï¿<Î|¿<¸  ¿=¿=  ¿=!¿=*  ¿<Î¿<Ï¿=kÇ¿=|  ¿=ê&¿=≠  ¿=k¿=l ¿?Ü¢x¿?—D/// Scales and positions its child within itself according to [fit]. ¿?¸Ç- ¿@r¿@Åo/// Scales and positions its child within itself.
///
/// The [fit] and [alignment] arguments must not be null.¿@à¿@ê  ¿@©.¿@º  ¿@›¿@Ì  ¿@ˇ¿A  ¿A¿A  +¿@ï¿@õ¿@ú¿@«¿@–¿@—¿A)¿A-¿A.¿A;¿AA¿AM¿AF¿AB¿AI¿AW¿A]¿Ao¿Ah¿A^¿Ak¿Ay¿A¿Aî¿Aç¿AÄ¿Aê¿A£¿Aû¿A•¿Aº¿A±¿Aæ¿Aﬂ¿A–¿A·¿B¿A˜¿B¿B¿B!¿B'¿B"¿B-¿B8  ¿D∫¿D¡  ¿G®¿G∫  ¿Iá¿Iñ  ¿Sx¿S~  ¿Sî¿Sù  ¿TG¿TL ¿T\¿T`¿Ta¿DX_¿D´E/// How to inscribe the child into the space allocated during layout.   ¿D…Å-¿DÕ  ¿D—¿DŸ   ¿E˙Å´¿GçÅl/// How to align the child within its parent's bounds.
///
/// An alignment of (0.0, 0.0) aligns the child to the top-left corner of its
/// parent's bounds. An alignment of (1.0, 0.5) aligns the child to the middle
/// of the right edge of its parent's bounds.
///
/// If this is set to an [AlignmentDirectional] object, then
/// [textDirection] must not be null.   ¿G»Äº¿GÃ  ¿G÷¿GÈ   ¿HàÄ¸¿IdÄ¿/// The text direction with which to resolve [alignment].
///
/// This may be changed to null, but only after [alignment] has been changed
/// to a value that does not depend on the direction.   ¿I®Ä™¿I¨  ¿I∫¿I    ¿S¨Äò¿T&j/// {@macro flutter.material.Material.clipBehavior}
///
/// Defaults to [Clip.none], and must not be null.   ¿TiÄº¿Tm  ¿Tz
¿TÄ   ¿BOÄÇ¿BT    ¿B’U¿B⁄    ¿C.Å&¿C3  ¿CE
¿CM   ¿JòÖ≤¿J©  ¿J∫¿J   ¿Jò¿Jô¿PNÉ&¿P_   ¿PN¿PO¿U)R¿U.    ¿UÑ<¿UÑ    ¿YøÅÿ¿Yœ  ¿YË¿Y˘  ¿Z¿Z	   ¿[õÇO¿[¨  ¿[≤¿[√  ¿[À¿[”  ¿[õ¿[ú¿]ÓÅØ¿]ˇ  ¿^¿^!  ¿^*¿^;  ¿]Ó¿]Ô¿_°ÄÎ¿_≤  ¿_∆¿_—  ¿_◊¿_‡  ¿_°¿_¢¿`êÅl¿`°  ¿`µ&¿`“  ¿`ê¿`ë ¿b å≈¿cøÅ∏/// Applies a translation transformation before painting its child.
///
/// The translation is expressed as an [Offset] scaled to the child's size. For
/// example, an [Offset] with a `dx` of 0.25 will result in a horizontal
/// translation of one quarter the width of the child.
///
/// Hit tests will only be detected inside the bounds of the
/// [RenderFractionalTranslation], even if the contents are offset such that
/// they overflow. ¿cˆÅP ¿ds¿dév/// Creates a render object that translates its child's painting.
///
/// The [translation] argument must not be null.¿dï¿d¶  ¿d∂¿dº  ¿dŸ¿dÂ  ¿dœ¿dÚ¿d¯¿e¿e¿d˘¿e¿e#¿e¿e%¿e9¿e>¿eD¿e?¿fK¿fR  ¿häÅv¿iÔÅS/// When set to true, hit tests are performed based on the position of the
/// child as it is painted. When set to false, hit tests are performed
/// ignoring the transformation.
///
/// applyPaintTransform(), and therefore localToGlobal() and globalToLocal(),
/// always honor the transformation, regardless of the value of this property. ¿eJÄ˛¿f,ÄŒ/// The translation to apply to the child, scaled to the child's size.
///
/// For example, an [Offset] with a `dx` of 0.25 will result in a horizontal
/// translation of one quarter the width of the child.   ¿fbÄª¿ff  ¿fr¿fz   ¿g!Åe¿g2  ¿g:¿gL  ¿gU¿gf  ¿g!¿g"¿jÅ ¿j  ¿j&¿j8  ¿jA¿jR  ¿j¿j¿k”Å¿k‰  ¿kÍ¿k˚  ¿l¿l  ¿k”¿k‘¿lÈÄµ¿l˙  ¿m¿m  ¿m¿m(  ¿lÈ¿lÍ¿m¢Å!¿m≥  ¿m«&¿m‰  ¿m¢¿m£ ¿r~å9¿t≤Ç-/// Calls callbacks in response to common pointer events.
///
/// It responds to events that can construct gestures, such as when the
/// pointer is pointer is pressed and moved, and then released or canceled.
///
/// It does not respond to events that are exclusive to mouse, such as when the
/// mouse enters and exits a region without pressing any buttons. For
/// these events, use [RenderMouseRegion].
///
/// If it has a child, defers to the child for sizing behavior.
///
/// If it does not have a child, grows to fit the parent-provided constraints. ¿tˆÅ∆ ¿uè¿u§Äí/// Creates a render object that forwards pointer events to callbacks.
///
/// The [behavior] argument defaults to [HitTestBehavior.deferToChild].¿u´¿u±  ¿u√¿u…  ¿u€¿u·  ¿uÒ¿u˜  ¿v
¿v  ¿v$¿v*  ¿v>7¿vO  ¿v{¿vá  ¿vY¿vh¿vi¿vî¿vô¿v∫¿v¢¿vö¿v§¿v≥¿vÆ¿vµ¿v¿Ä“¿wÖÄ§/// Called when a pointer comes into contact with the screen (for touch
/// pointers), or has its button pressed (for mouse pointers) at this widget's
/// location. ¿wów¿xM/// Called when a pointer that triggered an [onPointerDown] changes position. ¿xÄê¿xòh/// Called when a pointer that triggered an [onPointerDown] is no longer in
/// contact with the screen. ¿x®w¿yK/// Called when a pointer that has not an [onPointerDown] changes position. ¿y$Ä´¿y¿{/// Called when the input from a pointer that triggered an [onPointerDown] is
/// no longer directed towards this receiver. ¿y‘g¿z,9/// Called when a pointer signal occurs over this object.  ¿z@h¿zQ  ¿zg¿zw  ¿z@¿zA¿z¨ÇD¿zΩ  ¿z…¿z◊  ¿z›¿zÎ  ¿z¨¿z≠¿|ÙÅ¡¿}  ¿}&¿}6  ¿|Ù¿|ı ¿~πî£¿ÅùÇ›/// Calls callbacks in response to pointer events that are exclusive to mice.
///
/// It responds to events that are related to hovering, i.e. when the mouse
/// enters, exits (with or without pressing buttons), or moves over a region
/// without pressing buttons.
///
/// It does not respond to common events that construct gestures, such as when
/// the pointer is pressed, moved, then released or canceled. For these events,
/// use [RenderPointerListener].
///
/// If it has a child, it defers to the child for sizing behavior.
///
/// If it does not have a child, it grows to fit the parent-provided constraints.
///
/// See also:
///
///  * [MouseRegion], a widget that listens to hover events using
///    [RenderMouseRegion]. ¿ÅˇÉ ¿É
¿ÉÅ /// Creates a render object that forwards pointer events to callbacks.
///
/// All parameters are optional. By default this method creates an opaque
/// mouse region with no callbacks and cursor being [MouseCursor.defer]. The
/// [cursor] must not be null.¿É"¿É(  ¿É4¿É:  ¿ÉF¿ÉL  ¿ÉW&¿Éd  ¿ÉÉ ¿Éâ  ¿É©¿ÉØ  ¿É¡¿ÉÕ  ¿É◊9¿ÉÈ  *¿Él¿Éw¿Éx¿Éü¿É∑¿É˙¿Ñ	¿Ñ
¿Ñ¿Ñ¿Ñ.¿Ñ'¿Ñ ¿Ñ*¿Ñ8¿Ñ>¿ÑM¿ÑF¿Ñ?¿ÑI¿Ñ_¿ÑW¿Ña¿ÑÜ¿Ñp¿Ñà¿Ñ≠¿Ñ•¿ÑØ¿Ñæ¿Ñ√¿Ö¿ÑÃ¿Ñƒ¿Ñﬁ¿ÑŒ¿Ñ·¿Ñ¿ÑÒ¿Ñ˛¿Ñ˘¿Ö ¿âS¿âX  ¿ã›.¿å ¿ã›¿ãﬁ¿åÄŒ¿å◊Ä£/// Triggered when a pointer has moved onto or within the region without
/// buttons pressed.
///
/// This callback is not triggered by the movement of the object. ¿å„,¿ç	 ¿å„¿å‰¿çE¿çQ  ¿éõ¿é†  ¿ÜtÇ‹¿â>Ç§/// Whether this object should prevent [RenderMouseRegion]s visually behind it
/// from detecting the pointer, thus affecting how their [onHover], [onEnter],
/// and [onExit] behave.
///
/// If [opaque] is true, this object will absorb the mouse pointer and
/// prevent this object's siblings (or any other objects that are not
/// ancestors or descendants of this object) from detecting the mouse
/// pointer even when the pointer is within their areas.
///
/// If [opaque] is false, this object will not affect how [RenderMouseRegion]s
/// behind it behave, which will detect the mouse pointer as long as the
/// pointer is within their areas.
///
/// This defaults to true.   ¿âcÄ∫¿âg  ¿ân
¿ât   ¿ä!Äò¿äù`/// How to behave during hit testing.
///
/// This defaults to [HitTestBehavior.opaque] if null.   ¿äºÅ¿ä¿  ¿ä–¿ä‚   ¿ç.¿ç0   ¿ç¿ç¿ç\Äı¿ç`  ¿çg¿çt   ¿éUC¿éj   ¿éU¿éV¿ÖÄñ¿Ö  ¿Ö$¿Ö6  ¿Ö?¿ÖP  ¿Ö¿Ö¿Ö•ÄÀ¿Ö∂  ¿Ö¬¿Ö–  ¿Ö÷¿Ö‰  ¿Ö•¿Ö¶¿é∫m¿éÀ  ¿é“¿é·  ¿é∫¿éª¿è+Å$¿è<   ¿è+¿è,¿êSh¿êd  ¿êz¿êä  ¿êS¿êT¿êøÇõ¿ê–  ¿ê‰&¿ë  ¿êø¿ê¿ ¿ì^†ê¿ôπÜT/// Creates a separate display list for its child.
///
/// This render object creates a separate display list for its child, which
/// can improve performance if the subtree repaints at different times than
/// the surrounding parts of the tree. Specifically, when the child does not
/// repaint but its parent does, we can re-use the display list we recorded
/// previously. Similarly, when the child repaints but the surround tree does
/// not, we can re-record its display list without re-recording the display list
/// for the surround tree.
///
/// In some cases, it is necessary to place _two_ (or more) repaint boundaries
/// to get a useful effect. Consider, for example, an e-mail application that
/// shows an unread count and a list of e-mails. Whenever a new e-mail comes in,
/// the list would update, but so would the unread count. If only one of these
/// two parts of the application was behind a repaint boundary, the entire
/// application would repaint each time. On the other hand, if both were behind
/// a repaint boundary, a new e-mail would only change those two parts of the
/// application and the rest of the application would not repaint.
///
/// To tell if a particular RenderRepaintBoundary is useful, run your
/// application in debug mode, interacting with it in typical ways, and then
/// call [debugDumpRenderTree]. Each RenderRepaintBoundary will include the
/// ratio of cases where the repaint boundary was useful vs the cases where it
/// was not. These counts can also be inspected programmatically using
/// [debugAsymmetricPaintCount] and [debugSymmetricPaintCount] respectively. ¿ôÍl ¿ö¿ö0./// Creates a repaint boundary around [child].¿ö3¿ö?  ¿öI¿öN¿öT¿öO¿¶n!¿¶r ¿¶é¿©§"¿©® ¿©≈¿öZ/¿öo   ¿öZ¿ö[¿£‡Çã¿¶5Ç6/// The number of times that this render object repainted at the same time as
/// its parent. Repaint boundaries are only useful when the parent and child
/// paint at different times. When both paint at the same time, the repaint
/// boundary is redundant, and may be actually making performance worse.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// zero.
///
/// Can be reset using [debugResetMetrics]. See [debugAsymmetricPaintCount]
/// for the corresponding count of times where only the parent or only the
/// child painted.   ¿¶îÉ¿©iÇ≤/// The number of times that either this render object repainted without the
/// parent being painted, or the parent repainted without this object being
/// painted. When a repaint boundary is used at a seam in the render tree
/// where the parent tends to repaint at entirely different times than the
/// child, it can improve performance by reducing the number of paint
/// operations that have to be recorded each frame.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// zero.
///
/// Can be reset using [debugResetMetrics]. See [debugSymmetricPaintCount] for
/// the corresponding count of times where both the parent and the child
/// painted together.   ¿öçâO¿£á¯/// Capture an image of the current state of this render object and its
/// children.
///
/// The returned [ui.Image] has uncompressed raw RGBA bytes in the dimensions
/// of the render object, multiplied by the [pixelRatio].
///
/// To use [toImage], the render object must have gone through the paint phase
/// (i.e. [debugNeedsPaint] must be false).
///
/// The [pixelRatio] describes the scale between the logical pixels and the
/// size of the output image. It is independent of the
/// [dart:ui.FlutterView.devicePixelRatio] for the device, so specifying 1.0
/// (the default) will give you a 1:1 mapping between logical pixels and the
/// output pixels in the image.
///
/// {@tool snippet}
///
/// The following is an example of how to go from a `GlobalKey` on a
/// `RepaintBoundary` to a PNG:
///
/// ```dart
/// class PngHome extends StatefulWidget {
///   const PngHome({Key? key}) : super(key: key);
///
///   @override
///   State<PngHome> createState() => _PngHomeState();
/// }
///
/// class _PngHomeState extends State<PngHome> {
///   GlobalKey globalKey = GlobalKey();
///
///   Future<void> _capturePng() async {
///     final RenderRepaintBoundary boundary = globalKey.currentContext!.findRenderObject()! as RenderRepaintBoundary;
///     final ui.Image image = await boundary.toImage();
///     final ByteData? byteData = await image.toByteData(format: ui.ImageByteFormat.png);
///     final Uint8List pngBytes = byteData!.buffer.asUint8List();
///     print(pngBytes);
///   }
///
///   @override
///   Widget build(BuildContext context) {
///     return RepaintBoundary(
///       key: globalKey,
///       child: Center(
///         child: TextButton(
///           onPressed: _capturePng,
///           child: const Text('Hello World', textDirection: TextDirection.ltr),
///         ),
///       ),
///     );
///   }
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [OffsetLayer.toImage] for a similar API at the layer level.
///  * [dart:ui.Scene.toImage] for more information about the image returned. ¿£¿£  ¿£+¿©ÀÅI¿™ÉÄ™/// Resets the [debugSymmetricPaintCount] and [debugAsymmetricPaintCount]
/// counts to zero.
///
/// Only valid when asserts are enabled. Does nothing in release builds.   ¿´Å(¿´)  ¿´M¿´S  ¿´i¿´o  ¿´¿´¿´c¿´~¿¨Dá®¿¨U  ¿¨i&¿¨Ü  ¿¨D¿¨E ¿≥å„¿∂´Ç¥/// A render object that is invisible during hit testing.
///
/// When [ignoring] is true, this render object (and its subtree) is invisible
/// to hit testing. It still consumes space during layout and paints its child
/// as usual. It just cannot be the target of located events, because its render
/// object returns false from [hitTest].
///
/// When [ignoringSemantics] is true, the subtree will be invisible to
/// the semantics layer (and thus e.g. accessibility tools). If
/// [ignoringSemantics] is null, it uses the value of [ignoring].
///
/// See also:
///
///  * [RenderAbsorbPointer], which takes the pointer events but prevents any
///    nodes in the subtree from seeing them. ¿∂⁄ÅÀ ¿∑æ¿∑—Ä€/// Creates a render object that is invisible to hit testing.
///
/// The [ignoring] argument must not be null. If [ignoringSemantics] is null,
/// this render object will be ignored for semantics if [ignoring] is true.¿∑ÿ¿∑‰  ¿∑Ó¿∑Ù  ¿∏¿∏  ¿∑˛¿∏2¿∏(¿∏4¿∏X¿∏E¿∏Z¿∏t¿∏y¿∏¿∏z¿πØ¿π¥  ¿ªΩ¿ª√  ¿∏©Å¿πñÄ€/// Whether this render object is ignored during hit testing.
///
/// Regardless of whether this render object is ignored during hit testing, it
/// will still consume space during layout and be visible during painting.   ¿π¡Äÿ¿π≈  ¿πŒ
¿π‘   ¿∫ùÅ¿ªíÄ‡/// Whether the semantics of this render object is ignored when compiling the semantics tree.
///
/// If null, defaults to value of [ignoring].
///
/// See [SemanticsNode] for additional information about the semantics tree.   ¿ªŸÅ¿ª›  ¿ªÔ¿ªˆ   ¿ºÙF¿º˝    ¿Ω>Äò¿ΩO  ¿ΩW¿Ωi  ¿Ωr¿ΩÉ  ¿Ω>¿Ω?¿æÜÄõ¿æó  ¿æ±¿æ∆  ¿æÜ¿æá¿ø%Å¨¿ø6  ¿øJ&¿øg  ¿ø%¿ø& ¿¿’åä¿¡íÄ∂/// Lays the child out as if it was in the tree, but without painting anything,
/// without making the child available for hit testing, and without taking any
/// room in the parent. ¿¡ºÄº ¿¡Â¿¡Û&/// Creates an offstage render object.¿¡˙¿¬   ¿¬¿¬   ¿¬
¿¬-¿¬3¿¬D¿¬=¿¬4¿¬@¿¬X¿¬N¿¬Z¿¬k¿¬p¿¬v¿¬q¿√Ì¿√Ú  ¿¬|Ån¿√‘Å@/// Whether the child is hidden from the rest of the tree.
///
/// If true, the child is laid out as if it was in the tree, but without
/// painting anything, without making the child available for hit testing, and
/// without taking any room in the parent.
///
/// If false, the child is included in the tree as normal.   ¿√ˇÄß¿ƒ  ¿ƒ
¿ƒ   ¿«À/¿«‡   ¿«À¿«Ã¿ƒ™Äó¿ƒΩ  ¿ƒ÷¿ƒﬁ  ¿ƒ™¿ƒ´¿≈EÄó¿≈X  ¿≈q¿≈y  ¿≈E¿≈F¿≈‡Äó¿≈Û  ¿∆¿∆  ¿≈‡¿≈·¿∆{Äó¿∆é  ¿∆®¿∆∞  ¿∆{¿∆|¿«Ä±¿«*  ¿«J¿«X  ¿«¿«¿«˛Ä∞¿»  ¿» ¿»0  ¿«˛¿«ˇ¿»≥W¿»ƒ   ¿»≥¿»¥¿…Äå¿…   ¿…¿…¿…ûÄò¿…Ø  ¿…∑¿……  ¿…“¿…„  ¿…û¿…ü¿ :ÄÜ¿ K  ¿ Q¿ b  ¿ j¿ r  ¿ :¿ ;¿ ƒÄõ¿ ’  ¿ Ô¿À  ¿ ƒ¿ ≈¿ÀcÄ¬¿Àt  ¿Àà&¿À•  ¿Àc¿Àd¿Ã)Å4¿ÃK   ¿Ã)¿Ã* ¿Õaãx¿œ∞ÇH/// A render object that absorbs pointers during hit testing.
///
/// When [absorbing] is true, this render object prevents its subtree from
/// receiving pointer events by terminating hit testing at itself. It still
/// consumes space during layout and paints its child as usual. It just prevents
/// its children from being the target of located events, because its render
/// object returns true from [hitTest].
///
/// See also:
///
///  * [RenderIgnorePointer], which has the opposite effect: removing the
///    subtree from considering entirely for the purposes of hit testing. ¿œﬂÅg ¿–^¿–qx/// Creates a render object that absorbs pointers during hit testing.
///
/// The [absorbing] argument must not be null.¿–x¿–Ñ  ¿–é¿–î  ¿–©¿–∞  ¿–ü¿–…¿–œ¿–·¿–⁄¿––¿–›¿–ˆ¿–Î¿–¯¿—¿—
¿—¿—9¿—>¿—D¿—?¿“d¿“i  ¿‘C¿‘I  ¿—JÅ¿“IÄÎ/// Whether this render object absorbs pointers during hit testing.
///
/// Regardless of whether this render object absorbs pointers during hit
/// testing, it will still consume space during layout and be visible during
/// painting.   ¿“wÄß¿“{  ¿“Ö
¿“ã   ¿”"Å¿‘Ä·/// Whether the semantics of this render object is ignored when compiling the semantics tree.
///
/// If null, defaults to value of [absorbing].
///
/// See [SemanticsNode] for additional information about the semantics tree.   ¿‘_Å¿‘c  ¿‘u¿‘|   ¿’zG¿’É    ¿’≈Ä¡¿’÷  ¿’ﬁ¿’  ¿’˘¿÷
  ¿’≈¿’∆¿÷äÄõ¿÷õ  ¿÷µ¿÷   ¿÷ä¿÷ã¿◊)ÅÆ¿◊:  ¿◊N&¿◊k  ¿◊)¿◊* ¿ÿ€ÉÀ¿⁄&ÅD/// Holds opaque meta data in the render tree.
///
/// Useful for decorating the render tree with information that will be consumed
/// later. For example, you could store information in the render tree that will
/// be used when the user interacts with the render tree but has no visual
/// impact prior to the interaction. ¿⁄cÅ0 ¿⁄Ì¿⁄˚ÄÉ/// Creates a render object that hold opaque meta data.
///
/// The [behavior] argument defaults to [HitTestBehavior.deferToChild].¿€¿€  ¿€7¿€&  ¿€R¿€^  ¿€0¿€?¿€@¿€k¿€p¿€ë¿€y¿€q¿€{¿€ä¿€Ö¿€å¿€óC¿€“0/// Opaque meta data ignored by the render tree.  ¿€ﬂÄ≈¿€  ¿‹&¿‹!  ¿€ﬂ¿€‡ ¿‹®ö÷¿›b/// Listens for the specified gestures from the semantics server (e.g.
/// an accessibility tool). ¿›]Ç◊ ¿›Ú¿ﬁÄé/// Creates a render object that listens for specific semantic gestures.
///
/// The [scrollFactor] and [behavior] arguments must not be null.¿ﬁ¿ﬁ"  ¿ﬁ,¿ﬁA  ¿ﬁK%¿ﬁf  ¿ﬁv1¿ﬁí  ¿ﬁ≠/¿ﬁ…  ¿ﬁ‚¿ﬁË  ¿ﬁˇ7¿ﬂ  ¿ﬁˆ¿ﬂ¿ﬂ)¿ﬂ*¿ﬂ?¿ﬂE¿ﬂZ¿ﬂS¿ﬂF¿ﬂV¿ﬂk¿ﬂd¿ﬂm¿ﬂà¿ﬂ{¿ﬂä¿ﬂ∂¿ﬂû¿ﬂ∏¿ﬂÌ¿ﬂ◊¿ﬂÔ¿‡¿‡¿‡2¿‡¿‡¿‡¿‡+¿‡&¿‡-¿„J#¿„`  ¿‰å¿‰†  ¿Ê&¿Ê2  ¿Á“2¿ÁÌ  ¿È∞0¿ÈÀ  ¿ÎÅ2¿Ï+Å/// The fraction of the dimension of this render box to use when
/// scrolling. For example, if this is 0.8 and the box is 200 pixels
/// wide, then when a left-scroll action is received from the
/// accessibility system, it will translate into a 160 pixel
/// leftwards drag. 
¿‡8É¿„)Çº/// If non-null, the set of actions to allow. Other actions will be omitted,
/// even if their callback is provided.
///
/// For example, if [onTap] is non-null but [validActions] does not contain
/// [SemanticsAction.tap], then the semantic description of this node will
/// not claim to support taps.
///
/// This is normally used to filter the actions made available by
/// [onHorizontalDragUpdate] and [onVerticalDragUpdate]. Normally, these make
/// both the right and left, or up and down, actions available. For example,
/// if [onHorizontalDragUpdate] is set but [validActions] only contains
/// [SemanticsAction.scrollLeft], then the [SemanticsAction.scrollRight]
/// action will be omitted.   ¿„qÄ∂¿„u  ¿„Ç¿„ô   ¿‰+^¿‰y3/// Called when the user taps on the render object.   ¿‰™Ä⁄¿‰Æ  ¿‰¥¿‰…   ¿ÂàÄç¿Â˘P/// Called when the user presses on the render object for a long period of time.   ¿ÊBÄ¯¿ÊF  ¿ÊR¿Êm   ¿Á>Äë¿Áù=/// Called when the user scrolls to the left or to the right.   ¿ËÅ%¿Ë  ¿Ë# ¿Ë?   ¿È1|¿È,/// Called when the user scrolls up or down.   ¿È‰Å¿ÈË  ¿È˝ ¿Í   ¿Ï<Én¿ÏM  ¿Ïl¿ÏÑ  ¿Ï<¿Ï=¿ÔÆt¿Ô≥  ¿Ô¬¿Ô”   ¿&ÅW¿+    ¿ÒÅÅW¿ÒÜ    ¿Ú‹ÅR¿Ú·    ¿Ù2ÅS¿Ù7    ¿ıâÅÛ¿ıö  ¿ıÆ&¿ıÀ  ¿ıâ¿ıä ¿˜Ä¿ ù¿˜√</// Add annotations to the [SemanticsNode] for this subtree. ¿˜˘êr ¿¯–¿¯ÍÄÃ/// Creates a render object that attaches a semantic annotation.
///
/// The [container] argument must not be null.
///
/// If the [attributedLabel] is not null, the [textDirection] must also not be null.9¿¯Ò¿¯˝  ¿˘¿˘  ¿˘#¿˘)  ¿˘H¿˘N  ¿˘k¿˘r  ¿˘~¿˘Ö  ¿˘ë¿˘ò  ¿˘§¿˘´  ¿˘∏¿˘ø  ¿˘ ¿˘—  ¿˘‹¿˘„  ¿˘Û
¿˘˙  ¿˙¿˙
  ¿˙¿˙  ¿˙*¿˙1  ¿˙>¿˙E  ¿˙S¿˙Z  ¿˙f¿˙m  ¿˙ä¿˙ë  ¿˙û¿˙•  ¿˙≥¿˙∫  ¿˙ ¿˙—  ¿˙‡¿˙Á  ¿˙Ú¿˙˘  ¿˚¿˚
  ¿˚¿˚  ¿˚2¿˚8  ¿˚O!¿˚b  ¿˚v!¿˚â  ¿˚ù*¿˚∞  ¿˚Õ*¿˚‡  ¿˚˝ ¿¸  ¿¸#%¿¸<  ¿¸N¿¸^  ¿¸p¿¸É  ¿¸è¿¸û  ¿¸±¿¸¿  ¿¸ ¿¸Ÿ  ¿¸Á¿¸ˆ  ¿˝¿˝  ¿˝&¿˝5  ¿˝G¿˝V  ¿˝e¿˝t  ¿˝Ö¿˝î  ¿˝£¿˝≤  ¿˝¡¿˝–  ¿˝€¿˝Í  ¿˝Ù¿˛  ¿˛1¿˛#  ¿˛F2¿˛Z  ¿˛~,¿˛í  ¿˛∞-¿˛ƒ  ¿˛„#¿˛˘  ¿ˇ¿ˇ  ¿ˇ+)¿ˇ:  ¿ˇZ)¿ˇi  ¿ˇâ@¿ˇ¥  Äµ¿˘¿˘=¿˘`¿ˇ“¿ˇÿ¿ˇÍ¿ˇ„¿ˇŸ¿ˇÊ¿ˇˇ¿ˇÙ¿ ¿ '¿ ¿ )¿ V¿ D¿ X¿ z¿ q¿ |¿ ï¿ å¿ ó¿ ∞¿ ß¿ ≤¿ Ã¿ ¬¿ Œ¿ Á¿ ﬂ¿ È¿ ¿ ¯¿¿¿¿ ¿:¿4¿<¿Q¿I¿S¿m¿b¿o¿ã¿Å¿ç¿©¿û¿´¿∆¿Ω¿»¿Ú¿ÿ¿Ù¿¿¿!¿=¿2¿?¿^¿Q¿`¿Ä¿t¿Ç¿°¿ï¿£¿∆¿∂¿»¿Û¿ﬂ¿ı¿¿¿¿0¿)¿2¿K¿@¿M¿p¿_¿r¿õ¿ä¿ù¿œ¿µ¿—¿¿Ú¿¿?¿/¿A¿g¿X¿i¿é¿¿ê¿Ø¿¶¿±¿—¿¡¿”¿Ò¿Í¿Û¿¿¿¿2¿$¿4¿X¿I¿Z¿|¿p¿~¿ü¿ë¿°¿¬¿∂¿ƒ¿„¿◊¿Â¿ ¿¯¿¿¿¿¿1¿(¿3¿c¿C¿e¿≠¿å¿Ø¿Ú¿◊¿Ù¿2¿¿4¿g¿W¿i¿ã¿Ä¿ç¿º¿ü¿æ¿ˇ¿‚¿¿=¿%¿?¿^¿c¿i¿d8¿
¿
  ¿∫¿ø  ¿¿  ¿ü¿•  ¿Ì¿Û  ¿¿  ¿¿!  ¿)¿/  ¿F¿L  ¿b¿h  ¿h¿n  ¿¿Ö  ¿ü¿•  ¿æ¿ƒ  ¿€¿·  ¿#¿)  ¿ ¿ Ö  ¿!ï¿!õ  ¿"ª¿"¡  ¿#Ê¿#Ï  ¿%¿%  ¿&¿&  ¿'¿'  ¿(0¿(5  ¿)u¿)z  ¿*µ¿*ª  ¿,"¿,/  ¿-Ω"¿-œ  ¿/x+¿/ä  ¿1W+¿1i  ¿3!¿3*  ¿4u&¿4ç  ¿6à¿6ó  ¿8ù¿8Ø  ¿9≥¿9¡  ¿<¿<  ¿>h¿>v  ¿A¿A&  ¿D¢¿D∞  ¿H8¿HF  ¿K¬¿K–  ¿OH¿OV  ¿R¿R  ¿T‘¿T‚  ¿W¿W  ¿Y+¿Y9  ¿[B¿[P  ¿]◊2¿]Í  ¿`Ô3¿a  ¿c˙-¿d  ¿fÍ.¿f˝  ¿i˘$¿j  ¿lw¿lá  ¿qB*¿qP  ¿vU*¿vc  ¿yµA¿yﬂ  p¿oÅ¢¿	˘År/// If 'container' is true, this [RenderObject] will introduce a new
/// node in the semantics tree. Otherwise, the semantics will be
/// merged with the semantics of any ancestors.
///
/// Whether descendants of this [RenderObject] can add their semantic information
/// to the [SemanticsNode] introduced by this configuration is controlled by
/// [explicitChildNodes].   ¿
'Äú¿
+  ¿
5
¿
;   ¿
«Ç¿çÇ¢/// Whether descendants of this [RenderObject] are allowed to add semantic
/// information to the [SemanticsNode] annotated by this widget.
///
/// When set to false descendants are allowed to annotate [SemanticsNode]s of
/// their parent with the semantic information they want to contribute to the
/// semantic tree.
/// When set to true the only way for descendants to contribute semantic
/// information to the semantic tree is to introduce new explicit
/// [SemanticsNode]s to the tree.
///
/// This setting is often used in combination with
/// [SemanticsConfiguration.isSemanticBoundary] to create semantic boundaries
/// that are either writable or not for children.   ¿÷Ä∏¿⁄  ¿Ì
¿Û   ¿íÅ~¿ÍÅB/// Whether descendants of this [RenderObject] should have their semantic
/// information ignored.
///
/// When this flag is set to true, all child semantics nodes are ignored.
/// This can be used as a convenience for cases where a child is wrapped in
/// an [ExcludeSemantics] widget and then another [Semantics] widget.   ¿-Ä≤¿1  ¿B
¿H   ¿„Äπ¿àÄñ/// If non-null, sets the [SemanticsFlag.hasCheckedState] semantic to true and
/// the [SemanticsConfiguration.isChecked] semantic to the given value.   ¿±|¿µ  ¿Ω¿ƒ   ¿1Äπ¿÷Äñ/// If non-null, sets the [SemanticsFlag.hasEnabledState] semantic to true and
/// the [SemanticsConfiguration.isEnabled] semantic to the given value.   ¿ˇ|¿  ¿¿   ¿ÄÉ¿Ï^/// If non-null, sets the [SemanticsConfiguration.isSelected] semantic to the
/// given value.   ¿¿  ¿%¿,   ¿õ}¿\/// If non-null, sets the [SemanticsConfiguration.isButton] semantic to the
/// given value.   ¿,y¿0  ¿7¿>   ¿©}¿\/// If non-null, sets the [SemanticsConfiguration.isSlider] semantic to the
/// given value.   ¿:y¿>  ¿E¿L   ¿∑Äå¿'a/// If non-null, sets the [SemanticsConfiguration.isKeyboardKey] semantic to the
/// given value.   ¿\Äà¿`  ¿l¿s   ¿Ëw¿QZ/// If non-null, sets the [SemanticsConfiguration.isLink] semantic to the
/// given value.   ¿qs¿u  ¿z¿Å   ¿Ë}¿S\/// If non-null, sets the [SemanticsConfiguration.isHeader] semantic to the
/// given value.   ¿yy¿}  ¿Ñ¿ã   ¿ˆÄÜ¿d_/// If non-null, sets the [SemanticsConfiguration.isTextField] semantic to the
/// given value.   ¿ìÄÇ¿ó  ¿°¿®   ¿ÄÉ¿Ü^/// If non-null, sets the [SemanticsConfiguration.isReadOnly] semantic to the
/// given value.   ¿≤¿∂  ¿ø¿∆   ¿5ÄÜ¿£_/// If non-null, sets the [SemanticsConfiguration.isFocusable] semantic to the
/// given value.   ¿“ÄÇ¿÷  ¿‡¿Á   ¿XÄÄ¿ƒ]/// If non-null, sets the [SemanticsConfiguration.isFocused] semantic to the
/// given value.   ¿Ì|¿Ò  ¿˘¿    ¿mÄ≥¿Ín/// If non-null, sets the [SemanticsConfiguration.isInMutuallyExclusiveGroup]
/// semantic to the given value.   ¿FÄØ¿J  ¿c¿j   ¿˘ÄÉ¿ f^/// If non-null, sets the [SemanticsConfiguration.isObscured] semantic to the
/// given value.   ¿ í¿ ñ  ¿ ü¿ ¶   ¿!}¿!zV/// If non-null, sets the [SemanticsNode.isMultiline] semantic to the given
/// value.   ¿!©ÄÇ¿!≠  ¿!∑¿!æ   ¿"/Äâ¿"ú^/// If non-null, sets the [SemanticsConfiguration.scopesRoute] semantic to the
/// give value.   ¿"—Äà¿"’  ¿"·¿"Ë   ¿#]ÄÜ¿#…]/// If non-null, sets the [SemanticsConfiguration.namesRoute] semantic to the
/// give value.   ¿#˚ÄÜ¿#ˇ  ¿$
¿$   ¿$Ö}¿$\/// If non-null, sets the [SemanticsConfiguration.isHidden] semantic to the
/// given value.   ¿%y¿%  ¿%!¿%(   ¿%ìz¿%˝[/// If non-null, sets the [SemanticsConfiguration.isImage] semantic to the
/// given value.   ¿& W¿&$  ¿&*¿&1   ¿&{Äá¿&Ë^/// If non-null, sets the [SemanticsConfiguration.liveRegion] semantic to
/// the given value.   ¿'ÄÜ¿'  ¿')¿'0   ¿'§Äâ¿(Y/// If non-null, sets the [SemanticsNode.maxValueLength] semantic to the given
/// value.   ¿(HÄë¿(L  ¿([
¿(a   ¿(›Äï¿)H]/// If non-null, sets the [SemanticsNode.currentValueLength] semantic to the
/// given value.   ¿)ëÄù¿)ï  ¿)®
¿)Æ   ¿*2ÄÄ¿*û]/// If non-null, sets the [SemanticsConfiguration.isToggled] semantic to the given
/// value.   ¿*«}¿*À  ¿*”¿*⁄   ¿+HÄ“¿+ˆÄë/// If non-null, sets the [SemanticsNode.attributedLabel] semantic to the given value.
///
/// The reading direction is given by [textDirection].   ¿,CÄ°¿,G  ¿,W¿,j   ¿,ËÄ“¿-ñÄë/// If non-null, sets the [SemanticsNode.attributedValue] semantic to the given value.
///
/// The reading direction is given by [textDirection].   ¿-„Ä°¿-Á  ¿-˜¿.
   ¿.àÄÌ¿/?Äö/// If non-null, sets the [SemanticsNode.attributedIncreasedValue] semantic to the given value.
///
/// The reading direction is given by [textDirection].   ¿/ßÄº¿/´  ¿/ƒ¿/◊   ¿0gÄÌ¿1Äö/// If non-null, sets the [SemanticsNode.attributedDecreasedValue] semantic to the given value.
///
/// The reading direction is given by [textDirection].   ¿1ÜÄº¿1ä  ¿1£¿1∂   ¿2FÄœ¿2ÛÄê/// If non-null, sets the [SemanticsNode.attributedHint] semantic to the given value.
///
/// The reading direction is given by [textDirection].   ¿3=Äû¿3A  ¿3P¿3c   ¿3ﬂÄì¿4RT/// If non-null, sets the [SemanticsConfiguration.hintOverrides] to the given value.   ¿4üÄ°¿4£  ¿4±¿4    ¿5DÅA¿6eÅ/// If non-null, sets the [SemanticsNode.textDirection] semantic to the given
/// value.
///
/// This must not be null if [attributedLabel], [attributedHint],
/// [attributedValue], [attributedIncreasedValue], or
/// [attributedDecreasedValue] are not null.   ¿6©Äó¿6≠  ¿6ª¿6À   ¿7DÅV¿8ÜÅ!/// Sets the [SemanticsNode.sortKey] to the given value.
///
/// This defines how this node is sorted among the sibling semantics nodes
/// to determine the order in which they are traversed by the accessibility
/// services on the platform (e.g. VoiceOver on iOS and TalkBack on Android).   ¿8ªÄà¿8ø  ¿8«¿8⁄   ¿9Gi¿9é2/// Adds a semantics tag to the semantics subtree.   ¿9‘Äö¿9ÿ  ¿9Á¿9ˆ   ¿:rÅú¿;˛Åi/// The handler for [SemanticsAction.tap].
///
/// This is the semantic equivalent of a user briefly tapping the screen with
/// the finger without moving it. For example, a button should implement this
/// action.
///
/// VoiceOver users on iOS and TalkBack users on Android can trigger this
/// action by double-tapping the screen while an element is focused.   ¿<)Äÿ¿<-  ¿<3¿<B   ¿=Å`¿>MÅ'/// The handler for [SemanticsAction.dismiss].
///
/// This is a request to dismiss the currently focused node.
///
/// TalkBack users on Android can trigger this action in the local context
/// menu, and VoiceOver users on iOS can trigger this action with a standard
/// gesture or menu option.   ¿>ÑÄË¿>à  ¿>í¿>°   ¿?pÅ•¿@˘Åf/// The handler for [SemanticsAction.longPress].
///
/// This is the semantic equivalent of a user pressing and holding the screen
/// with the finger for a few seconds without moving it.
///
/// VoiceOver users on iOS and TalkBack users on Android can trigger this
/// action by double-tapping the screen without lifting the finger after the
/// second tap.   ¿A6Ä¿A:  ¿AF¿AU   ¿B*Çu¿DÅÇ./// The handler for [SemanticsAction.scrollLeft].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from right to left. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping left with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided.   ¿D¡ÄÙ¿D≈  ¿D“¿D·   ¿EπÇ|¿HÇ3/// The handler for [SemanticsAction.scrollRight].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from left to right. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping right with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided.   ¿HXÄ¯¿H\  ¿Hj¿Hy   ¿ITÇk¿K•Ç(/// The handler for [SemanticsAction.scrollUp].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from bottom to top. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping up with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided.   ¿KﬂÄÏ¿K„  ¿KÓ¿K˝   ¿LœÇv¿O'Ç//// The handler for [SemanticsAction.scrollDown].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from top to bottom. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping down with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided.   ¿OgÄÙ¿Ok  ¿Ox¿Oá   ¿P_ÅØ¿QÙÅr/// The handler for [SemanticsAction.increase].
///
/// This is a request to increase the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// VoiceOver users on iOS can trigger this action by swiping up with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume up button.   ¿R.ÄÏ¿R2  ¿R=¿RL   ¿SÅ≥¿T∑Åv/// The handler for [SemanticsAction.decrease].
///
/// This is a request to decrease the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// VoiceOver users on iOS can trigger this action by swiping down with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume down button.   ¿TÒÄÏ¿Tı  ¿U ¿U   ¿U·Å¿VÌÄÌ/// The handler for [SemanticsAction.copy].
///
/// This is a request to copy the current selection to the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example.   ¿WÄ‹¿W  ¿W&¿W5   ¿W˚Å-¿YÄ¸/// The handler for [SemanticsAction.cut].
///
/// This is a request to cut the current selection and place it in the
/// clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example.   ¿YCÄÿ¿YG  ¿YM¿Y\   ¿ZÅ ¿[+ÄÌ/// The handler for [SemanticsAction.paste].
///
/// This is a request to paste the current content of the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example.   ¿[\Ä‡¿[`  ¿[h¿[w   ¿\@Åî¿]íÅ,/// The handler for [SemanticsAction.moveCursorForwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field forward by one character.
///
/// TalkBack users can trigger this by pressing the volume up key while the
/// input focus is in a text field.   ¿^ÅA¿^  ¿^0¿^D   ¿_RÅö¿`®Å0/// The handler for [SemanticsAction.moveCursorBackwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one character.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field.   ¿a&ÅE¿a*  ¿aJ¿a^   ¿boÅà¿cøÅ*/// The handler for [SemanticsAction.moveCursorForwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one character.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field.   ¿d+Å-¿d/  ¿dI¿d]   ¿e\Åã¿f≠Å+/// The handler for [SemanticsAction.moveCursorBackwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one character.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field.   ¿gÅ1¿g   ¿g;¿gO   ¿hQÅ•¿i‘Å[/// The handler for [SemanticsAction.setSelection].
///
/// This handler is invoked when the user either wants to change the currently
/// selected text in a text field or change the position of the cursor.
///
/// TalkBack users can trigger this handler by selecting "Move cursor to
/// beginning/end" or "Select all" from the local context menu.   ¿j!Å¿j%  ¿j4¿jJ   ¿k(ÅL¿l\Å/// The handler for [SemanticsAction.setText].
///
/// This handler is invoked when the user wants to replace the current text in
/// the text field with a new text.
///
/// Voice access users can trigger this handler by speaking "type <text>" to
/// their Android devices.   ¿lïÄÍ¿lô  ¿l£¿l¥   ¿mÉÉº¿qÉK/// The handler for [SemanticsAction.didGainAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler gains
/// the accessibility focus. The accessibility focus is the
/// green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidLoseAccessibilityFocus], which is invoked when the accessibility
///    focus is removed from the node.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus.   ¿qpÅ0¿qt  ¿qê¿qü   ¿r§ÉÆ¿vÉ=/// The handler for [SemanticsAction.didLoseAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler
/// loses the accessibility focus. The accessibility focus is
/// the green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidGainAccessibilityFocus], which is invoked when the node gains
///    accessibility focus.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus.   ¿vÉÅ0¿vá  ¿v£¿v≤   ¿w∑Å˚¿yÄÅà/// The handlers and supported [CustomSemanticsAction]s for this node.
///
/// These handlers are called whenever the user performs the associated
/// custom accessibility action from a special platform menu. Providing any
/// custom actions here also adds [SemanticsAction.customAction] to the node.
///
/// See also:
///
///  * [CustomSemanticsAction], for an explanation of custom actions.   ¿y˙ÄŒ¿y˛  ¿z/¿z@   ¿zÃÄ£¿z›  ¿z˜¿{  ¿zÃ¿zÕ¿{sì2¿{Ñ  ¿{£¿{ª  ¿{s¿{t¿é©+¿éÆ    ¿éÿ7¿é›    ¿è3¿è    ¿èJ9¿èO    ¿èá;¿èå    ¿è∆5¿èÀ    ¿èˇ9¿ê    ¿ê<5¿êA    ¿êu5¿êz    ¿êÆ-¿ê≥    ¿êﬂ+¿ê‰    ¿ë/¿ë    ¿ëAÄÄ¿ëF  ¿ëk¿ëq   ¿ë≈ÄÇ¿ë   ¿ë¿ëˆ   ¿íKv¿íP  ¿íp¿ív   ¿í≈x¿í   ¿íÎ¿íÒ   ¿ìA]¿ìF  ¿ì[¿ìj   ¿ì¢B¿ìß  ¿ì∑¿ìø   ¿ìËW¿ìÌ    ¿îCW¿îH     ¿îûÖ ¿ïñÄÒ/// Causes the semantics of all earlier render objects below the same semantic
/// boundary to be dropped.
///
/// This is useful in a stack where an opaque mask should prevent interactions
/// with the render objects painted below the mask. ¿ï∆Ä‘ ¿ñ"¿ñ6W/// Create a render object that blocks semantics for nodes below it in paint
/// order.¿ñ=¿ñI  ¿ñS¿ñY  ¿ñc¿ñz¿ñp¿ñ|¿ñç¿ñí¿ñò¿ñì¿ó]¿ób  ¿ñûÄº¿óDÄò/// Whether this render object is blocking semantics of previously painted
/// [RenderObject]s below a common semantics boundary from the semantic tree.   ¿óoÄö¿ós  ¿ó|
¿óÇ   ¿òÄ…¿ò  ¿ò=¿òU  ¿ò¿ò¿ò⁄Ä¬¿òÎ  ¿òˇ&¿ô  ¿ò⁄¿ò€ ¿ô†É¿õÅ]/// Causes the semantics of all descendants to be merged into this
/// node such that the entire subtree becomes a single leaf in the
/// semantics tree.
///
/// Useful for combining the semantics of multiple render objects that
/// form part of a single conceptual widget, e.g. a checkbox, a label,
/// and the gesture detector that goes with them. ¿õ4Äà ¿õÇ¿õñK/// Creates a render object that merges the semantics from its descendants.¿õô¿õ•  ¿õØ¿õ¥¿õ∫¿õµ  ¿õ¿Ä„¿õ—  ¿õ¿ú  ¿õ¿¿õ¡ ¿úßÑ—¿ù‘Å&/// Excludes this subtree from the semantic tree.
///
/// When [excluding] is true, this render object (and its subtree) is excluded
/// from the semantic tree.
///
/// Useful e.g. for hiding text that is redundant with other text next
/// to it (e.g. text included only for the visual effect). ¿ûÄÎ ¿ûO¿ûeF/// Creates a render object that ignores the semantics of its subtree.¿ûl¿ûx  ¿ûÇ¿ûà  ¿ûì¿û´¿û†¿û≠¿ûø¿ûƒ¿û ¿û≈¿ü^¿üc  ¿ûıf¿üCB/// Whether this render object is excluded from the semantic tree.   ¿üqÄù¿üu  ¿ü
¿üÖ   ¿†Äú¿†#  ¿†=¿†R  ¿†¿†¿†≤Äƒ¿†√  ¿†◊&¿†Ù  ¿†≤¿†≥ ¿°zÑ‚¿£	Åà/// A render objects that annotates semantics with an index.
///
/// Certain widgets will automatically provide a child index for building
/// semantics. For example, the [ScrollView] uses the index of the first
/// visible child semantics node to determine the
/// [SemanticsConfiguration.scrollIndex].
///
/// See also:
///
///  * [CustomScrollView], for an explanation of scroll semantics. ¿£;Ä‡ ¿£ã¿£°M/// Creates a render object that annotates the child semantics with an index.¿£®¿£¥  ¿£æ¿£Ã  ¿£Ÿ¿£ﬂ¿£Ì¿£Ê¿£‡¿£È¿£˛¿£˜¿§ ¿§¿§¿§¿§¿§m
¿§q  ¿§K¿§Z0/// The index used to annotated child semantics.   ¿§{t¿§  ¿§Ö	¿§ä   ¿§ÛÄ®¿•  ¿•#¿•;  ¿§Û¿§Ù¿•üÄª¿•∞  ¿•ƒ&¿•·  ¿•ü¿•† ¿¶^à¿ß-Ä»/// Provides an anchor for a [RenderFollowerLayer].
///
/// See also:
///
///  * [CompositedTransformTarget], the corresponding widget.
///  * [LeaderLayer], the layer that this render object creates. ¿ßZÄÔ ¿ßº¿ßÕ[/// Creates a render object that uses a [LeaderLayer].
///
/// The [link] must not be null.¿ß‘¿ßË  ¿ßÒ¿ß˝  ¿®
¿®¿®¿®¿®¿®¿®-¿®'¿®/¿®<¿®A¿®G¿®B¿©i¿©s  ¿´ó¿´ù  ¿®MÅ¿©XÄÚ/// The link object that connects this [RenderLeaderLayer] with one or more
/// [RenderFollowerLayer]s.
///
/// This property must not be null. The object must not be associated with
/// another [RenderLeaderLayer] that is also being painted.   ¿©|Å¿©Ä  ¿©Ö¿©ê   ¿™Å4¿™ñ   ¿™Å¿™Ç¿´µ}¿´∆   ¿´µ¿´∂¿¨6Å{¿¨G  ¿¨M¿¨^  ¿¨f¿¨n  ¿¨6¿¨7¿≠µÄø¿≠∆  ¿≠⁄&¿≠˜  ¿≠µ¿≠∂ ¿Æxùf¿∞úÇ/// Transform the child so that its origin is [offset] from the origin of the
/// [RenderLeaderLayer] with the same [LayerLink].
///
/// The [RenderLeaderLayer] in question must be earlier in the paint order.
///
/// Hit testing on descendants of this render object will only work if the
/// target position is within the box that this render object's parent considers
/// to be hittable.
///
/// See also:
///
///  * [CompositedTransformFollower], the corresponding widget.
///  * [FollowerLayer], the layer that this render object creates. ¿∞ÀÇã ¿±F¿±Yt/// Creates a render object that uses a [FollowerLayer].
///
/// The [link] and [offset] arguments must not be null.¿±`¿±t  ¿±}¿±É  ¿±ü¿±ß  ¿±¿*¿±À  ¿±,¿±˚  ¿≤"¿≤.  /¿±ï¿±Ø¿±µ¿±∂¿±Ÿ¿±‚¿±„¿≤¿≤¿≤¿≤;¿≤A¿≤N¿≤G¿≤B¿≤J¿≤X¿≤^¿≤w¿≤p¿≤_¿≤s¿≤Å¿≤á¿≤ñ¿≤è¿≤à¿≤í¿≤¶¿≤†¿≤®¿≤«¿≤µ¿≤…¿≤Í¿≤‚¿≤Ï¿≥	¿≤˚¿≥¿≥0¿≥ ¿≥2¿≥I¿≥N¿≥T¿≥O¿≥ı¿≥ˇ  ¿∂º¿∂¡  ¿∏¿∏   ¿ª∞¿ª∫  ¿Ωû¿Ω®  ¿≥ZÄò¿≥‰w/// The link object that connects this [RenderFollowerLayer] with a
/// [RenderLeaderLayer] earlier in the paint order.   ¿¥Äâ¿¥  ¿¥¿¥   ¿¥ïÇ$¿∂ìÅ‚/// Whether to show the render object's contents when there is no
/// corresponding [RenderLeaderLayer] with the same [link].
///
/// When the render object is linked, the child is positioned such that it has
/// the same global position as the linked [RenderLeaderLayer].
///
/// When the render object is not linked, then: if [showWhenUnlinked] is true,
/// the child is visible and not repositioned; if it is false, then child is
/// hidden, and its hit testing is also disabled.   ¿∂÷Ä®¿∂⁄  ¿∂Î
¿∂Ò   ¿∑ÇÄî¿∏r/// The offset to apply to the origin of the linked [RenderLeaderLayer] to
/// obtain this render object's origin.   ¿∏+Äå¿∏/  ¿∏6¿∏>   ¿∏ªÇÚ¿ªèÇ©/// The anchor point on the linked [RenderLeaderLayer] that [followerAnchor]
/// will line up with.
///
/// {@template flutter.rendering.RenderFollowerLayer.leaderAnchor}
/// For example, when [leaderAnchor] and [followerAnchor] are both
/// [Alignment.topLeft], this [RenderFollowerLayer] will be top left aligned
/// with the linked [RenderLeaderLayer]. When [leaderAnchor] is
/// [Alignment.bottomLeft] and [followerAnchor] is [Alignment.topLeft], this
/// [RenderFollowerLayer] will be left aligned with the linked
/// [RenderLeaderLayer], and its top edge will line up with the
/// [RenderLeaderLayer]'s bottom edge.
/// {@endtemplate}
///
/// Defaults to [Alignment.topLeft].   ¿ªÀÄ°¿ªœ  ¿ª‹¿ªÁ   ¿ºpÅ+¿ΩyÄÓ/// The anchor point on this [RenderFollowerLayer] that will line up with
/// [followerAnchor] on the linked [RenderLeaderLayer].
///
/// {@macro flutter.rendering.RenderFollowerLayer.leaderAnchor}
///
/// Defaults to [Alignment.topLeft].   ¿ΩªÄß¿Ωø  ¿ΩŒ¿ΩŸ   ¿æØ4¿æƒ   ¿æØ¿æ∞¿æÁ|¿ø<3/// The layer we created when we were last painted.  ¿ø¿ø¿æfE¿æw   ¿æf¿æg¿øgÅü¿¿ØÅ3/// Return the transform that was used in the last composition phase, if any.
///
/// If the [FollowerLayer] has not yet been created, was never composited, or
/// was unable to determine the transform (see
/// [FollowerLayer.getLastTransform]), this returns the identity matrix (see
/// [Matrix4.identity].   ¿¡
Å‰¿¡  ¿¡#¿¡5  ¿¡>¿¡O  ¿¡
¿¡¿¬ÚÅV¿√  ¿√¿√%  ¿√.¿√?  ¿¬Ú¿¬Û¿ƒLÖZ¿ƒ]  ¿ƒc¿ƒt  ¿ƒ|¿ƒÑ  ¿ƒL¿ƒM¿…™}¿…ª  ¿…œ¿…⁄  ¿…‡¿…È  ¿…™¿…´¿ +Å±¿ <  ¿ P&¿ m  ¿ +¿ , ¿À‡Üó¿Ã‘ÄÌ/// Render object which inserts an [AnnotatedRegionLayer] into the layer tree.
///
/// See also:
///
///  * [Layer.find], for an example of how this value is retrieved.
///  * [AnnotatedRegionLayer], the layer this render object creates.¿ÃÍ¿ÃÍ¿ÕÅÓ ¿Œ+¿Œ@Å/// Creates a new [RenderAnnotatedRegion] to insert [value] into the
/// layer tree.
///
/// If [sized] is true, the layer is provided with the size of this render
/// object to clip the results of [Layer.find].
///
/// Neither [value] nor [sized] can be null.¿ŒG¿ŒS  ¿Œ]¿Œl  ¿Œv¿ŒÇ  ¿Œè¿Œï¿Œ£¿Œú¿Œñ¿Œü¿Œ≠¿Œ≥¿Œ¡¿Œ∫¿Œ¥¿ŒΩ¿Œ“¿ŒÀ¿Œ‘¿ŒÈ¿Œ‚¿ŒÎ¿Œ˘¿Œ˛¿œ¿Œˇ¿œ\¿œ^  ¿–O¿–T  ¿–Œ4¿–Â ¿–Œ¿–œ¿–˛¿œ
O¿œI6/// A value which can be retrieved using [Layer.find].   ¿œhs¿œl  ¿œs
¿œv   ¿œﬂm¿–<Q/// Whether the render object will pass its [size] to the [AnnotatedRegionLayer].   ¿–^l¿–b  ¿–h
¿–n   ¿—Ån¿—  ¿—¿—/  ¿—7¿—?  ¿—¿—  ëyÇ0ë¢#/// How to behave during hit tests.  ë∂Äñí@ÄÖ/// Targets that defer to their children receive events within their bounds
/// only if one of their children is hit by the hit test. íQÄΩìÄ∞/// Opaque targets can be hit by hit tests, causing them to both receive
/// events within their bounds and prevent targets visually behind them from
/// also receiving events. ìÄììõÄÉ/// Translucent targets both receive events within their bounds and permit
/// targets visually behind them to also receive events.    ¿	ÎÄ ¿
$/// Where to paint a box decoration.  ¿
,>¿
`1/// Paint the box decoration behind the children. ¿
oC¿
®6/// Paint the box decoration in front of the children.        ¿ å>Äø¿ åœÄà/// Signature for a function that creates a [Shader] for a given [Rect].
///
/// Used by [RenderShaderMask] and the [ShaderMask] widget.  ¿ å¿ åˆ   ¿n«Äª¿oAq/// Signature for listening to [PointerDownEvent] events.
///
/// Used by [Listener] and [RenderPointerListener].  ¿oj¿o|   ¿oÑÄª¿o˛q/// Signature for listening to [PointerMoveEvent] events.
///
/// Used by [Listener] and [RenderPointerListener].  ¿p'¿p9   ¿pAÄµ¿pπo/// Signature for listening to [PointerUpEvent] events.
///
/// Used by [Listener] and [RenderPointerListener].  ¿p‡¿p   ¿p¯Ä¡¿qts/// Signature for listening to [PointerCancelEvent] events.
///
/// Used by [Listener] and [RenderPointerListener].  ¿qü¿q≥   ¿qªÄ¡¿r7s/// Signature for listening to [PointerSignalEvent] events.
///
/// Used by [Listener] and [RenderPointerListener].  ¿rb¿rv   áSä$à≈Ä¸/// Implementation of [RenderProxyBox].
///
/// Use this mixin in situations where the proxying behavior
/// of [RenderProxyBox] is desired but inheriting from [RenderProxyBox] is
/// impractical (e.g. because you want to mix in other classes as well).àŸàŸ   âÄ˘â/  â?âM  ââäÄôä.  äGäO  äää∏ÄôäÀ  ä‰äÏ  ä∏äπãUÄôãh  ãÇãä  ãUãVãÚÄôå  åå'  ãÚãÛåèÄﬁå£  å√å—  åèåêçqÄ¿çÇ  çìç£  çqçré5Ä’éF   é5é6èÄÍè†Äà/// Calculate the size the [RenderProxyBox] would have under the given
/// [BoxConstraints] for the case where it does not have a child. è∂è∆   è¸Äùê  êê/  ê8êI  è¸è˝êùOêÆ  ê¬ê–  ê÷êﬂ  êùêûêÄÖë  ëë  ë ë(  êêÒà≠àÆ¿ {é>¿ |UÅ:/// Implementation of [RenderAnimatedOpacity] and [RenderSliverAnimatedOpacity].
///
/// This mixin allows the logic of animating opacity to be used with different
/// layout models, e.g. the way that [RenderAnimatedOpacity] uses it for [RenderBox]
/// and [RenderSliverAnimatedOpacity] uses it for [RenderSliver].¿ |p¿ |p ¿ |≠¿ |≤  ¿ } ¿ }"  ¿ 0¿ C  ¿ Ç¿ Ç	  ¿ |Ω\¿ |“   ¿ |Ω¿ |æ¿ }AÅÏ¿ Å¨/// The animation that drives this render object's opacity.
///
/// An opacity of 1.0 is fully opaque. An opacity of 0.0 is fully transparent
/// (i.e., invisible).
///
/// To change the opacity of a child in a static manner, not animated,
/// consider [RenderOpacity] instead.
///
/// This getter cannot be read until the value has been set. It should be set
/// by the constructor of the class in which this mixin is included.   ¿ OÅ+¿ S  ¿ [¿ n   ¿ Ä~ÅÇ¿ ÅÕÅ5/// Whether child semantics are included regardless of the opacity.
///
/// If false, semantics are excluded when [opacity] is 0.0.
///
/// Defaults to false.
///
/// This getter cannot be read until the value has been set. It should be set
/// by the constructor of the class in which this mixin is included.   ¿ Ç$Ä©¿ Ç(  ¿ Ç?
¿ ÇE   ¿ Ç—Äª¿ Ç‚  ¿ ÇÈ¿ Ç¯  ¿ Ç—¿ Ç“¿ Éê_¿ É°   ¿ Éê¿ Éë¿ ÉÛÅÈ¿ É¯    ¿ Ö‡Åx¿ ÖÒ  ¿ Ö˜¿ Ü  ¿ Ü¿ Ü  ¿ Ö‡¿ Ö·¿ á\Ä¶¿ ám  ¿ áá¿ áú  ¿ á\¿ á]¿ àÅJ¿ à  ¿ à+&¿ àH  ¿ à¿ à  ïS <ÄÜÄ§Ä•ÄÊÄÁÅÅ:ÅbÅãÅ≥Å¥ÅÊÅÁÅ˙ÇÇ,ÇBÇCÇoÇÇìÇßÇπÇœÇ–ÉÉÉdÉ≤ÑÑEÑIÑòÑÈÖ8ÖLÖPÖ^ÖbÖ≤Ö√Ü7ÜYÜ_ÜÆÜ˚áá4áLáPáRáSá{ááºààPà≠àøââ(âUâ°âƒâÌääää%äXäoä°ä±äµä∂ä¬äıãã>ãNãRãSã_ãíã©ã€ãÎãÔãã¸å/åFåxåàåååçåôå‹åÛç.çjçnçoç{ç±ç ç˘çˇé.é2é3é?éXéqé©é√é–èèèèèUèôè‘èıè˘è˙êêVêñêöêõêßêÌêÓê˙ë1ëHërëvëxëyëùë¥íí>íNíOíöíÈìììì^ìôì®ì™ì´ìÍîîNîÅîáîÀîÒï#ï9ïNïOïwïìïîï†ïËññ'ññøñÙñ˙óóóó!ólómóyóæóÈòFòJòLòMò~òÇò—ôôjôwô{ôÀöö1öeöõö°öõ	õõRõÄõªõÚúúúHúéú∑úÎùù.ùWùeùâù†ù§ù•ù±ù‰û<ûjû´û«û˘ü4üFüJüKüWüäü‚††Q†m†ü†⁄†Ï††Ò†˝°0°ä°π°˚¢¢K¢à¢õ¢ü¢†¢¨¢ﬂ£9£h£™£«£˙§7§J§N§O§[§t§≠§∆••8•E•î•ö•û•ü•´•·•˙¶I¶V¶•¶´¶Ø¶∞¶º¶¸ß'ß7ßPßÇßöß«ß˛®®®#®'®(®4®y®§©©©©©M©ê©î©·™,™w™∆™ﬂ™„´.´t´Ñ´¥¨¨:¨@¨á¨õ¨∞¨∆¨Ì≠≠I≠≠ú≠ª≠–≠—Æ&ÆJÆ^Æ}Æ®ÆƒÆ“ÆÈØ ØØØ\ØÇØóØ∑Ø‚Øˇ∞∞%∞<∞@∞A∞Ç∞ù∞√±.±V±∆±Õ±—±“≤4≤M≤ü≤Œ≤‘≥≥≥≥%≥[≥t≥î≥…≥–≥‘≥’≥·≥˙¥¥3¥e¥l¥p¥q¥}¥¬¥ÌµFµ°µ•µßµ®µ„µÁ∂3∂Ç∂–∂‘∑∑l∑§∑®∑ı∏C∏í∏Ÿ∏›π)πzπÀ∫∫g∫µªªQªûª‰º$ºUºíºòº€ºÒΩΩ(ΩLΩnΩìΩ∂ΩÀΩÃΩˆΩ¸æLæìæΩæ‘æˆøø*øFøeøsøçø§ø®ø©øµøË¿ @¿ @%¿ @<¿ @n¿ @~¿ @Ç¿ @É¿ @è¿ @¬¿ @€¿ @ˇ¿ A¿ AH¿ AX¿ A\¿ A]¿ Ai¿ Aú¿ A¥¿ A◊¿ AÓ¿ B ¿ B0¿ B4¿ B5¿ BA¿ Bt¿ Bå¿ BØ¿ B∆¿ B¯¿ C¿ C¿ C¿ CD¿ Cr¿ CÇ¿ CÕ¿ CÈ¿ D¿ Dv¿ D«¿ E¿ E7¿ EB¿ EJ¿ E]¿ Eg¿ Eh¿ EÖ¿ E®¿ E©¿ E“¿ EÂ¿ EÊ¿ F3¿ F¿ Fñ¿ F∞¿ F’¿ F‚¿ G¿ G-¿ G3¿ G4¿ GÇ¿ GÃ¿ H¿ H/¿ H0¿ HX¿ H|¿ H°¿ Hß¿ H®¿ H“¿ H¯¿ I¿ I#¿ I$¿ IL¿ Ip¿ Iï¿ Iõ¿ Iú¿ I∆¿ IÏ¿ J¿ J¿ J¿ JO¿ JS¿ JT¿ J`¿ Jñ¿ J¡¿ J≈¿ J∆¿ J“¿ JÎ¿ K¿ K,¿ K]¿ Ka¿ Kb¿ Kn¿ K≥¿ Kﬁ¿ L¿ L"¿ L$¿ L%¿ La¿ Le¿ L≤¿ M¿ M6¿ M:¿ MÜ¿ M÷¿ N"¿ Nl¿ Nπ¿ N·¿ NÂ¿ O5¿ OÅ¿ Oø¿ O√¿ P¿ P^¿ P≠¿ Pƒ¿ P»¿ P÷¿ P⁄¿ Q)¿ Qp¿ Qæ¿ Q—¿ R¿ R`¿ R≠¿ R·¿ S¿ Se¿ Sk¿ Sª¿ S‹¿ Sı¿ T¿ T$¿ T:¿ To¿ T¶¿ T≈¿ TÊ¿ T˚¿ T¸¿ UG¿ UM¿ Uu¿ Uú¿ U≤¿ U”¿ U˝¿ V¿ V(¿ V@¿ VW¿ V[¿ V\¿ V®¿ VÆ¿ V÷¿ Vˇ¿ W¿ W8¿ Wb¿ WÄ¿ Wé¿ Wß¿ Wæ¿ W¬¿ W√¿ W¸¿ X¿ X.¿ XB¿ Xk¿ Xo¿ Xp¿ X|¿ XØ¿ X‹¿ X‡¿ X·¿ XÌ¿ Y ¿ Y7¿ YI¿ Yá¿ Y±¿ Yµ¿ Y∂¿ Y¬¿ Yı¿ Z¿ Z¿ Z7¿ Zp¿ Zå¿ ZÀ¿ Z˜¿ Z˚¿ Z¸¿ [¿ [;¿ [R¿ [d¿ [}¿ [∂¿ [“¿ \¿ \=¿ \A¿ \B¿ \£¿ \º¿ \‰¿ ]5¿ ]U¿ ]¶¿ ]Æ¿ ]œ¿ ^!¿ ^B¿ ^ñ¿ ^û¿ ^Õ¿ ^⁄¿ ^˝¿ _¿ _¿ _¿ _¿ _J¿ _c¿ _ò¿ _∏¿ _ø¿ _√¿ _ƒ¿ _–¿ _È¿ `¿ `4¿ `T¿ `[¿ `_¿ ``¿ `l¿ `±¿ `‹¿ a¿ aV¿ aZ¿ a\¿ a]¿ aí¿ añ¿ a‰¿ b4¿ bi¿ bm¿ bπ¿ c	¿ cW¿ c¢¿ c¿ d¿ d¿ dj¿ d∏¿ e¿ e¿ e"¿ e0¿ e4¿ eÉ¿ eÀ¿ f¿ f-¿ f|¿ f¿¿ g¿ gD¿ gy¿ g ¿ g‰¿ g˙¿ h¿ h¿ h¿ hO¿ hf¿ hx¿ hí¿ h–¿ hÌ¿ i¿ i!¿ i"¿ i.¿ ia¿ ix¿ iä¿ i§¿ i‚¿ iˇ¿ j/¿ j3¿ j4¿ j@¿ js¿ j†¿ j§¿ j•¿ k¿ k¿ kH¿ kö¿ kª¿ kˆ¿ k˛¿ l-¿ l:¿ l]¿ lc¿ lg¿ lh¿ lt¿ l™¿ l√¿ l¯¿ m¿ m¿ m#¿ m$¿ m0¿ mI¿ mb¿ mî¿ m¥¿ mª¿ mø¿ m¡¿ m¬¿ mÌ¿ mÒ¿ nA¿ nv¿ nz¿ n≈¿ o¿ o^¿ oÆ¿ o€¿ p¿ p¿ p[¿ pm¿ pá¿ p∞¿ p∆¿ pÊ¿ q¿ qF¿ qa¿ qö¿ q—¿ qÊ¿ qÁ¿ qÛ¿ r7¿ r8¿ rF¿ rG¿ r|¿ rÇ¿ r“¿ rÎ¿ rÒ¿ s¿ s¿ s_¿ s¶¿ s∑¿ sŸ¿ sÏ¿ t
¿ t%¿ tO¿ tj¿ tx¿ t¥¿ t›¿ tÛ¿ u(¿ u^¿ uÜ¿ uú¿ u‹¿ u˛¿ v¿ v¿ vI¿ vO¿ vç¿ vì¿ v¨¿ vÍ¿ w
¿ w5¿ w_¿ wm¿ wí¿ w≤¿ w∂¿ w∑¿ w√¿ w˙¿ x¿ x,¿ xw¿ xç¿ xù¿ x•¿ x≈¿ y'¿ y-¿ y1¿ y2¿ y>¿ y~¿ y¿¿ y◊¿ y€¿ y‹¿ yË¿ z-¿ zX¿ zê¿ {¿ {¿ {¿ {¿ {e¿ {i¿ {∏¿ |¿ |O¿ |´¿ |∫¿ |ª¿ |«¿ }¿ }>¿ }?¿ }}¿ }É¿ }”¿ }Ï¿ }Ú¿ ~;¿ ~c¿ ~i¿ ~π¿  ¿ .¿ M¿ v¿ ë¿ ¨¿ ∫¿ ‡¿ Ä¿ Ä$¿ Ä6¿ Äa¿ Äw¿ Ä{¿ Ä|¿ Ä¬¿ Ä»¿ Å¿ Å¿ Å%¿ Å+¿ Å{¿ Å¬¿ Ç¿ Ç"¿ ÇM¿ Çw¿ ÇÖ¿ Ç™¿ Ç ¿ ÇŒ¿ Çœ¿ Ç€¿ É ¿ É¿ ÉB¿ Éâ¿ Éç¿ Éé¿ Éö¿ É¨¿ Éÿ¿ ÉÏ¿ É¿ ÉÒ¿ Ñ¿ Ñ-¿ Ñg¿ ÑÖ¿ Ñ»¿ Ñ¯¿ ÖE¿ Öo¿ Öá¿ ÖØ¿ Ö”¿ ÖŸ¿ Ö›¿ Öﬁ¿ ÖÍ¿ Ü!¿ Ü:¿ ÜS¿ Üû¿ Ü¥¿ Üƒ¿ ÜÃ¿ ÜÏ¿ áO¿ áU¿ áY¿ áZ¿ áf¿ á¶¿ áË¿ áˇ¿ à¿ à¿ à¿ àU¿ àÄ¿ à–¿ âM¿ âQ¿ âS¿ âT¿ âõ¿ âü¿ â¿ ä¿ äë¿ ä∆¿ äÃ¿ ä˚¿ ã¿ ã=¿ ãf¿ ã|¿ ãú¿ ãÀ¿ ã·¿ ã˝¿ å7¿ å;¿ å=¿ å>¿ åá¿ åã¿ å«¿ å˛¿ åˇ¿ ç8¿ ç<¿ çã¿ ç¿¿ ç¿ éH¿ éN¿ éï¿ é™¿ é¿¿ éÏ¿ è¿ èA¿ èc¿ èå¿ è´¿ è¿¿ è¡¿ èÕ¿ ê¿ ê¿ êM¿ êS¿ ê¢¿ êÎ¿ êÒ¿ ë1¿ ëK¿ ëô¿ ë—¿ í	¿ í+¿ íX¿ ís¿ íï¿ í£¿ í¿¿ í÷¿ í⁄¿ í€¿ ì¿ ì%¿ ìt¿ ìø¿ ìË¿ î ¿ î#¿ î>¿ î[¿ îi¿ îÅ¿ îó¿ îõ¿ îú¿ î®¿ î‹¿ î›¿ îÈ¿ ï ¿ ï9¿ ïY¿ ï|¿ ïâ¿ ï¿¿ ï„¿ ñ¿ ñ;¿ ñH¿ ñ\¿ ñb¿ ñf¿ ñh¿ ñi¿ ñ∑¿ ñª¿ ó¿ ó¿ óS¿ ót¿ óz¿ ó®¿ óÊ¿ ò¿ òã¿ ò©¿ ò ¿ ò‚¿ ô ¿ ô¿ ô¿ ô!¿ ôj¿ ôk¿ ôª¿ ôÃ¿ ô“¿ ö¿ ö2¿ öZ¿ öt¿ öô¿ ö¥¿ öŒ¿ ö‹¿ öÒ¿ õ¿ õ¿ õ¿ õe¿ õt¿ õz¿ õ≤¿ õ€¿ õÛ¿ ú¿ ú1¿ úN¿ ú\¿ út¿ úä¿ úé¿ úè¿ úõ¿ úœ¿ ú–¿ ú‹¿ ù¿ ù,¿ ùL¿ ùs¿ ùí¿ ù∑¿ ùÌ¿ ù˙¿ û¿ û¿ û¿ û¿ û¿ ûH¿ ûL¿ ûï¿ û¶¿ û™¿ û˚¿ ûˇ¿ üH¿ üî¿ ü•¿ ü©¿ üÙ¿ †B¿ †ì¿ †„¿ †Á¿ †ı¿ †˘¿ °B¿ °ç¿ °÷¿ ¢¿ ¢n¿ ¢£¿ ¢√¿ ¢…¿ £¿ £\¿ £]¿ £z¿ £{¿ £æ¿ £ƒ¿ §¿ §c¿ §z¿ §Ü¿ §”¿ §‘¿ •$¿ •U¿ •[¿ •™¿ •˙¿ ¶¿ ¶¿ ¶p¿ ¶q¿ ¶º¿ ¶‡¿ ¶¯¿ ¶˘¿ ß>¿ ßÅ¿ ßµ¿ ßª¿ ßˇ¿ ®F¿ ®â¿ ®–¿ ©¿ ©¿ ©^¿ ©Ø¿ ™ ¿ ™Q¿ ™W¿ ™ü¿ ™Ó¿ ™˚¿ ´¿ ´O¿ ´[¿ ´a¿ ´ß¿ ´Û¿ ¨'¿ ¨c¿ ¨d¿ ¨p¿ ¨±¿ ¨≥¿ ¨¥¿ ¨˚¿ ≠2¿ ≠Y¿ ≠_¿ ≠å¿ ≠í¿ ≠⁄¿ Æ)¿ Æv¿ Æπ¿ Æ÷¿ ÆÔ¿ Ø¿ Ø%¿ Ø&¿ Øe¿ ØÄ¿ ØÅ¿ Ø…¿ Øœ¿ ∞¿ ∞A¿ ∞g¿ ∞h¿ ∞ù¿ ∞©¿ ∞≈¿ ±¿ ±¿ ±¿ ±'¿ ±]¿ ±ì¿ ±¶¿ ±˜¿ ≤!¿ ≤\¿ ≤`¿ ≤b¿ ≤c¿ ≤†¿ ≤∂¿ ≤Ã¿ ≤Î¿ ≥¿ ≥8¿ ≥S¿ ≥x¿ ≥ç¿ ≥é¿ ≥Ã¿ ≥˘¿ ¥¿ ¥E¿ ¥e¿ ¥s¿ ¥¶¿ ¥¡¿ ¥˜¿ µ+¿ µg¿ µñ¿ µÆ¿ µ¥¿ µ»¿ µ˙¿ ∂)¿ ∂/¿ ∂3¿ ∂4¿ ∂@¿ ∂e¿ ∂~¿ ∂©¿ ∂≠¿ ∂Æ¿ ∂∫¿ ∂Ã¿ ∂˙¿ ∑¿ ∑¿ ∑¿ ∑-¿ ∑?¿ ∑U¿ ∑u¿ ∑y¿ ∑z¿ ∑ê¿ ∑ú¿ ∑ù¿ ∑«¿ ∑Ë¿ ∏
¿ ∏'¿ ∏?¿ ∏E¿ ∏I¿ ∏_¿ ∏`¿ ∏l¿ ∏Ö¿ ∏∂¿ ∏—¿ ∏Í¿ ∏˛¿ π¿ π¿ π¿ πQ¿ πU¿ πV¿ πb¿ πú¿ πÂ¿ πÈ¿ πÍ¿ ∫ ¿ ∫¿ ∫'¿ ∫g¿ ∫w¿ ∫ï¿ ∫º¿ ∫”¿ ∫˜¿ ªn¿ ªö¿ ª∑¿ ª¡¿ ª›¿ º¿ º'¿ ºE¿ ºZ¿ ºv¿ ºú¿ º∫¿ º…¿ º÷¿ Ω(¿ Ω2¿ ΩF¿ ΩY¿ Ωc¿ Ωg¿ Ωi¿ Ωj¿ Ωë¿ Ωï¿ Ω„¿ æ4¿ æJ¿ æÅ¿ æ£¿ æ©¿ æ˘¿ ø
¿ ø¿ øP¿ øÄ¿ øì¿ ø©¿ øÀ¿ øÛ¿ ¿¿ ¿b¿ ¿c¿ ¿o¿ ¿û¿ ¿ü¿ ¿´¿ ¿Û¿ ¡¿ ¡$¿ ¡A¿ ¡g¿ ¡}¿ ¡É¿ ¡π¿ ¡Ω¿ ¡æ¿ ¡ ¿ ¬¿ ¬¿ ¬A¿ ¬X¿ ¬~¿ ¬ö¿ ¬¨¿ ¬æ¿ ¬’¿ ¬˚¿ √(¿ √3¿ √B¿ √n¿ √Ñ¿ √å¿ √ô¿ √≠¿ √≥¿ √∑¿ √∏¿ √ƒ¿ ƒ¿ ƒ¿ ƒ/¿ ƒ^¿ ƒ£¿ ≈¿ ≈&¿ ≈9¿ ≈C¿ ≈G¿ ≈I¿ ≈J¿ ≈y¿ ≈}¿ ≈Õ¿ ∆¿ ∆1¿ ∆j¿ ∆î¿ ∆ö¿ ∆Í¿ «¿ «¿ «L¿ «R¿ «õ¿ «À¿ «ﬂ¿ «ı¿ »(¿ »K¿ »s¿ »ò¿ »Ω¿ …¿ …>¿ …B¿ …C¿ …s¿ …y¿ …ƒ¿ …ﬂ¿ …Â¿  ¿  M¿  k¿  î¿  Ø¿  œ¿  ›¿  ¯¿ À¿ À¿ À¿ À¿ Àf¿ Àg¿ Às¿ Àª¿ À◊¿ ÀÏ¿ Ã	¿ Ã/¿ ÃE¿ ÃK¿ ÃÅ¿ ÃÖ¿ ÃÜ¿ Ãí¿ Ã…¿ Ã‚¿ Õ	¿ Õ ¿ ÕG¿ Õc¿ Õu¿ Õë¿ Õ£¿ Õ∫¿ Õ‡¿ Œ¿ Œ¿ Œ(¿ ŒT¿ Œj¿ Œr¿ Œ¿ Œì¿ Œô¿ Œù¿ Œû¿ Œ™¿ ŒÍ¿ Œ˙¿ œ¿ œD¿ œä¿ –¿ –¿ –¿ –(¿ –,¿ –.¿ –/¿ –R¿ –V¿ –§¿ –Ì¿ —7¿ —n¿ —ë¿ —ó¿ —Á¿ “¿ “
¿ “S¿ “É¿ “ñ¿ “¨¿ “Œ¿ “ˆ¿ ”¿ ”e¿ ”f¿ ”{¿ ”î¿ ”ï¿ ”∂¿ ”’¿ ”Ô¿ ‘"¿ ‘(¿ ‘@¿ ‘D¿ ‘E¿ ‘Q¿ ‘Ä¿ ‘Å¿ ‘ç¿ ‘’¿ ‘Ë¿ ’¿ ’,¿ ’x¿ ’ö¿ ’ ¿ ’˚¿ ÷¿ ÷7¿ ÷q¿ ÷Ö¿ ÷ª¿ ÷ø¿ ÷¿¿ ÷Ã¿ ◊¿ ◊¿ ◊C¿ ◊Z¿ ◊Ä¿ ◊ú¿ ◊Æ¿ ◊¿¿ ◊‡¿ ◊˜¿ ÿ¿ ÿJ¿ ÿU¿ ÿd¿ ÿê¿ ÿ¶¿ ÿÆ¿ ÿª¿ ÿœ¿ ÿ’¿ ÿŸ¿ ÿ⁄¿ ÿÊ¿ Ÿ&¿ Ÿ6¿ ŸQ¿ ŸÄ¿ Ÿ”¿ ⁄d¿ ⁄l¿ ⁄¿ ⁄â¿ ⁄ç¿ ⁄è¿ ⁄ê¿ ⁄≤¿ ⁄∂¿ ⁄˚¿ €<¿ €@¿ €~¿ €ú¿ €†¿ €⁄¿ ‹¿ ‹]¿ ‹î¿ ‹Ø¿ ‹µ¿ ›¿ ›S¿ ›£¿ ›∂¿ ›º¿ ﬁ¿ ﬁ5¿ ﬁH¿ ﬁ^¿ ﬁÄ¿ ﬁ®¿ ﬁÕ¿ ﬂ¿ ﬂ¿ ﬂ$¿ ﬂd¿ ﬂe¿ ﬂq¿ ﬂπ¿ ﬂ’¿ ﬂÍ¿ ‡¿ ‡-¿ ‡C¿ ‡I¿ ‡¿ ‡É¿ ‡Ñ¿ ‡ê¿ ‡«¿ ‡‡¿ ·¿ ·¿ ·D¿ ·`¿ ·r¿ ·ê¿ ·¢¿ ·π¿ ·ﬂ¿ ‚¿ ‚¿ ‚&¿ ‚R¿ ‚h¿ ‚p¿ ‚}¿ ‚ë¿ ‚ó¿ ‚õ¿ ‚ú¿ ‚®¿ ‚Ë¿ ‚¯¿ „¿ „B¿ „á¿ „∫¿ „¬¿ „’¿ „ﬂ¿ „„¿ „Â¿ „Ê¿ ‰*¿ ‰.¿ ‰¿ ‰µ¿ ‰ˇ¿ ÂL¿ ÂÜ¿ Â£¿ Â¬¿ Â·¿ Â˚¿ Ê¿ Ê>¿ Ê]¿ Êì¿ Ê±¿ Ê’¿ Ê˙¿ Á¿ Á0¿ ÁS¿ Áù¿ Áû¿ ÁÌ¿ ÁÛ¿ Ë¿ Ë¿ Ëh¿ Ëñ¿ Ëº¿ Ë—¿ ËÒ¿ È¿ È8¿ ÈF¿ ÈÇ¿ Èö¿ È–¿ È¯¿ Í¿ Í¿ Í¿ Í+¿ ÍT¿ Íj¿ Íã¿ Í¶¿ Íƒ¿ Í“¿ ÍÏ¿ Î¿ Î¿ Î¿ Î#¿ Î@¿ ÎP¿ Îk¿ ÎÜ¿ Îû¿ Î¨¿ Î¿¿ Î÷¿ Î⁄¿ Î€¿ ÎÁ¿ Ï¿ Ï¿ Ï¿ Ïf¿ Ïò¿ Ï∫¿ Ïæ¿ Ïø¿ ÏÀ¿ Ì¿ Ì=¿ Ìz¿ ÌÆ¿ ÌË¿ ÌÏ¿ ÌÓ¿ ÌÔ¿ Ó4¿ ÓC¿ ÓG¿ Óã¿ Óœ¿ Ó˘¿ Óˇ¿ Ô¿ Ô$¿ Ôo¿ Ô∑¿ ÔÀ¿ Ô„¿ Ô˘¿ "¿ E¿ e¿ Å¿ õ¿ Ã¿ Í¿ Ò¿ ÒE¿ Òc¿ Òá¿ Òû¿ Ò√¿ Ò—¿ Òˆ¿ Ú¿ Ú,¿ ÚC¿ Úf¿ Úp¿ Úq¿ Ú}¿ Úƒ¿ Ú≈¿ Ú„¿ ÚÈ¿ Û8¿ ÛP¿ Ûp¿ ÛÉ¿ Û°¿ Ûº¿ Û‘¿ Û‚¿ Ûˆ¿ Ù¿ Ù¿ Ù¿ ÙA¿ ÙG¿ Ùí¿ Ù≠¿ Ù≥¿ Ù˛¿ ı¿ ı>¿ ıq¿ ıê¿ ı∫¿ ıŸ¿ ıÁ¿ ˆ¿ ˆ¿ ˆ¿ ˆ¿ ˆ)¿ ˆD¿ ˆY¿ ˆu¿ ˆã¿ ˆ™¿ ˆ˙¿ ˜¿ ˜D¿ ˜å¿ ˜í¿ ˜ñ¿ ˜ó¿ ˜£¿ ˜Î¿ ¯¿ ¯¿ ¯9¿ ¯_¿ ¯u¿ ¯{¿ ¯±¿ ¯µ¿ ¯∂¿ ¯¬¿ ¯˘¿ ˘¿ ˘'¿ ˘]¿ ˘î¿ ˘ÿ¿ ˘¯¿ ˙
¿ ˙-¿ ˙N¿ ˙t¿ ˙è¿ ˙•¿ ˙À¿ ˙˙¿ ˚+¿ ˚:¿ ˚F¿ ˚f¿ ˚p¿ ˚Ö¿ ˚ë¿ ˚∑¿ ˚ƒ¿ ˚Î¿ ¸¿ ¸F¿ ¸^¿ ¸É¿ ¸Ÿ¿ ¸Î¿ ˝¿ ˝,¿ ˝8¿ ˝E¿ ˝Y¿ ˝_¿ ˝c¿ ˝d¿ ˝p¿ ˝∂¿ ˝‚¿ ˛&¿ ˛|¿ ˛Ä¿ ˛Ç¿ ˛É¿ ˛»¿ ˛Ã¿ ˇ¿ ˇ¿ ˇ"¿ ˇ&¿ ˇr¿ ˇÇ¿ ˇ≈¿ ˇÏ¿ ˇÚ¿ +¿ 1¿ ¿ π¿ —¿ Á¿¿4¿P¿j¿õ¿ª¿Ò¿¿3¿A¿X¿w¿é¿±¿Ã¿Ò¿˚¿¸¿¿O¿P¿\¿ú¿ù¿©¿Ò¿¿"¿?¿e¿{¿Å¿∑¿ª¿º¿»¿ˇ¿¿-¿\¿ê¿∞¿¬¿Â¿¿+¿E¿[¿Å¿∞¿·¿¿¸¿¿&¿;¿G¿m¿z¿ö¿¿¿ı¿¿2¿à¿ö¿∆¿€¿Á¿Ù¿	¿	¿	¿	¿	¿	e¿	ë¿	‰¿	Ë¿	Í¿	Î¿
¿
*¿
^¿
l¿
m¿
¶¿
¥¿
∂¿
∑¿
˙¿,¿K¿Q¿ü¿ﬁ¿‰¿3¿^¿u¿ô¿⁄¿¿1¿T¿u¿õ¿º¿Ÿ¿ ¿¿¿.¿/¿O¿U¿w¿£¿Ω¿‚¿˝¿¿)¿B¿W¿p¿Ü¿ä¿ã¿÷¿¿&¿Q¿l¿à¿ñ¿≠¿√¿«¿»¿¿W¿q¿w¿∫¿ ¿:¿_¿è¿™¿À¿Ÿ¿ı¿¿¿¿¿.¿G¿\¿p¿µ¿˛¿J¿ñ¿—¿Á¿Î¿Ï¿¯¿¿z¿~¿¿ã¿¬¿‚¿¿B¿ô¿Œ¿È¿˚¿3¿H¿T¿ò¿™¿È¿#¿ã¿©¿¿e¿¬¿—¿K¿¿¿Œ¿ÿ¿Ì¿˘¿¿=¿C¿e¿ö¿ﬁ¿˛¿"¿(¿,¿-¿9¿~¿©¿¿M¿Q¿S¿T¿å¿ª¿Ù¿˙¿+¿?¿_¿s¿ï¿∑¿⁄¿¸¿¿4¿J¿j¿ä¿≤¿⁄¿Ù¿¯¿˘¿ I¿ Å¿ á¿ ÷¿!¿!:¿!M¿!k¿!Ö¿!ì¿!®¿!æ¿!ﬁ¿!‚¿!„¿"'¿"-¿"y¿"√¿"…¿#¿#Y¿#©¿#¯¿$7¿$à¿$∫¿$€¿%¿%$¿%2¿%J¿%`¿%Ä¿%Ñ¿%Ö¿%¡¿%«¿&¿&N¿&Ñ¿&•¿&—¿&Ú¿' ¿'¿'2¿'R¿'V¿'W¿'c¿'±¿'≤¿'ˇ¿(H¿(k¿(q¿(¡¿)¿),¿)-¿)D¿)ì¿)≤¿)∏¿*¿*S¿*x¿*¬¿*›¿*˙¿+¿+.¿+D¿+d¿+h¿+i¿+ª¿+¡¿,¿,7¿,X¿,Ñ¿,•¿,≥¿,Ô¿-¿-A¿-i¿-¿-É¿-Ñ¿-µ¿-Ã¿-Î¿.¿.!¿.%¿.&¿.i¿.ä¿.¨¿.¬¿.‚¿.Ê¿.Á¿/*¿/K¿/m¿/É¿/£¿/ß¿/®¿/Î¿0¿0.¿0D¿0d¿0h¿0i¿0´¿0Ï¿1¿1&¿1F¿1J¿1K¿1z¿1≠¿1Õ¿1„¿2¿2¿2¿2-¿2y¿2Ø¿2»¿2˜¿3¿3B¿3[¿3Ä¿3∑¿3Ô¿3ı¿4¿4:¿4u¿4é¿4¬¿4’¿4Ÿ¿4⁄¿4Ê¿5.¿5e¿5¢¿5‡¿5˙¿62¿66¿67¿6C¿6ì¿6“¿6˚¿7<¿7V¿7í¿7‘¿7›¿7‰¿7Ë¿7È¿7ı¿8,¿8E¿8{¿8û¿8Î¿9¿97¿9U¿9i¿9Ä¿9ô¿9Í¿9˜¿:¿:>¿:V¿:`¿:o¿:œ¿;¿;P¿;v¿;ü¿;™¿;”¿<¿<J¿<[¿<î¿<û¿<÷¿<ﬁ¿<‰¿<Ë¿<È¿<ı¿=6¿=d¿=h¿=i¿=u¿=∫¿=Â¿>,¿>o¿>√¿?(¿?¿?É¿?Ö¿?Ü¿?À¿?˙¿@.¿@4¿@p¿@Ñ¿@•¿@Ÿ¿@˚¿A¿A4¿AP¿Ar¿Aó¿A™¿A…¿A¿B¿B*¿B+¿BL¿BM¿Ba¿BÖ¿Bì¿BŒ¿B“¿B”¿BÚ¿C¿C'¿C+¿C,¿CS¿Cf¿CÉ¿Cò¿C≥¿CÃ¿C‰¿D¿D¿D5¿DK¿DQ¿DU¿DV¿Dû¿D∏¿D«¿D·¿D¸¿E¿E!¿EB¿ET¿Eñ¿EØ¿Eº¿E’¿EÌ¿EÛ¿E˜¿E¯¿F1¿F7¿Fá¿Fÿ¿G¿G¿GM¿Gu¿G¶¿G∆¿GÒ¿H¿H)¿H7¿HO¿Hf¿HÅ¿HÖ¿HÜ¿H¬¿H»¿I¿IO¿IÖ¿I¶¿I“¿IÛ¿J¿J¿J4¿JO¿JS¿JT¿Jï¿Jñ¿J¢¿Jÿ¿JÒ¿K;¿K<¿Kà¿K÷¿L"¿LC¿Lh¿Lz¿L€¿L˛¿M¿M¿M)¿MG¿Ms¿M≥¿Mø¿MŸ¿M·¿M‚¿M˜¿N¿N]¿Nœ¿O
¿O'¿OB¿O\¿O{¿Oô¿O≥¿P	¿P¿P¿PA¿PG¿PK¿PL¿PX¿Pq¿Pä¿PÕ¿P‚¿Q¿QH¿Qº¿Q˜¿R¿R%¿R@¿RZ¿Ry¿Ró¿R±¿S	¿S¿S"¿S;¿SH¿Sk¿Sq¿Su¿Sv¿Sí¿S©¿S™¿S‡¿SÊ¿T¿TE¿Tg¿Tà¿T£¿T≈¿T‚¿T˙¿U¿U"¿U&¿U'¿UB¿Ua¿Ux¿U|¿U}¿Uô¿Uµ¿U√¿Uƒ¿U›¿Uˇ¿V&¿V3¿VE¿Vo¿V≥¿V˝¿WI¿W¨¿X¿X{¿X≠¿Y
¿Y/¿Yg¿Y≤¿Y∏¿Yº¿YΩ¿Z¿Z]¿Zz¿Zû¿Z∏¿Z»¿Z›¿ZÚ¿[?¿[H¿[Q¿[É¿[î¿[ò¿[ô¿[•¿[‹¿\¿\(¿\@¿\[¿\ó¿\ª¿\’¿\Â¿]¿]#¿]n¿]í¿]õ¿]®¿]·¿]Á¿]Î¿]Ï¿]¯¿^H¿^Ä¿^î¿^¨¿^’¿^Ú¿_¿_H¿_ä¿_ì¿_ö¿_û¿_ü¿_´¿_Ï¿`¿`5¿`B¿`\¿`É¿`â¿`ç¿`é¿`ö¿`ﬂ¿a
¿a@¿aî¿a˘¿a˝¿aˇ¿b ¿bD¿bH¿bò¿b·¿c¿c¿cY¿c¶¿cπ¿cÙ¿d8¿d>¿dq¿dë¿d≤¿d’¿dÎ¿e¿e2¿eG¿eH¿eë¿eó¿eÊ¿f¿fI¿f`¿fÇ¿fù¿fº¿f ¿f‰¿f˙¿g¿g¿g¿g+¿gs¿g∂¿gÛ¿h1¿hK¿hÉ¿há¿hà¿h’¿i¿iA¿iG¿ió¿iË¿j¿j¿j¿j_¿j~¿j§¿jƒ¿k¿k$¿k>¿kz¿kº¿k≈¿kÃ¿k–¿k—¿k›¿l¿l3¿lL¿lo¿l†¿l“¿l‹¿l‚¿lÊ¿lÁ¿lÛ¿m4¿mM¿mp¿mî¿mõ¿mü¿m†¿m¨¿mÒ¿n¿ni¿n¿¿nƒ¿n∆¿n«¿o¿o¿o9¿oÉ¿oÑ¿oæ¿o¬¿oˆ¿p@¿pA¿py¿p}¿p±¿p˜¿p¯¿q4¿q8¿ql¿q∫¿qª¿q˜¿q˚¿r/¿r}¿r~¿r∏¿rº¿s¿sP¿sT¿s§¿sÍ¿t¿t¿tY¿t]¿t¨¿tÙ¿u=¿uC¿uç¿uß¿uø¿u◊¿uÌ¿v¿v ¿v:¿vw¿vç¿vΩ¿væ¿w¿wY¿wi¿wî¿wï¿wÂ¿x¿x¿x_¿x~¿x•¿x¶¿xÙ¿y!¿y"¿yr¿y¢¿y—¿y“¿z¿z=¿z>¿zJ¿zÖ¿z•¿z©¿z™¿z∂¿zÛ¿{¿{B¿{k¿{é¿{∑¿{ÿ¿{ˇ¿|#¿|M¿|r¿|ù¿|¬¿|Ì¿|Ò¿|Ú¿|˛¿}C¿}n¿}ö¿}≠¿}»¿}Á¿~¿~!¿~B¿~e¿~à¿~ë¿~™¿~≤¿~∂¿~∏¿~π¿¿¿W¿§¿¬¿∆¿Ä¿Äe¿ÄÜ¿Ää¿ÄÕ¿Ä—¿Å#¿Å'¿Å5¿Å9¿Å{¿Åó¿Å˝¿ÇF¿ÇL¿Çò¿ÇÁ¿É¿É¿É0¿ÉB¿ÉS¿É¿É•¿ÉΩ¿É”¿Ñ¿Ñ1¿ÑP¿Ñi¿Ñû¿Ñ∑¿Ö¿Ö	¿Ö¿Ö]¿Öû¿Ö¢¿Ö£¿ÖØ¿ÖÏ¿Ü¿ÜO¿Üm¿Üq¿Ür¿Ü√¿á¿á/¿á5¿á~¿á∆¿à¿àI¿àO¿à†¿àÎ¿â¿â¿â3¿âQ¿âa¿â|¿âò¿âØ¿â¸¿ä¿ä¿ä¿ä¿äG¿äM¿äÜ¿ä∫¿äÍ¿ã0¿ãP¿ãk¿ã∏¿ã–¿ã÷¿ã⁄¿ã€¿ãÁ¿å¿å¿åY¿åp¿åv¿å∫¿å‡¿å·¿åÌ¿ç¿ç¿ç¿çC¿çZ¿ç|¿çò¿çØ¿çÛ¿é0¿éH¿éN¿éR¿éS¿é_¿éô¿é∑¿é∏¿éƒ¿éÈ¿è¿è$¿è(¿è)¿è5¿èG¿èí¿èÌ¿ê¿ê8¿êL¿êP¿êQ¿ê]¿êò¿ê∏¿êº¿êΩ¿ê…¿ë¿ë9¿ëe¿ëx¿ëì¿ë≠¿ë«¿ëﬂ¿ëË¿í¿í	¿ír¿í«¿ìW¿ì[¿ì]¿ì^¿ìë¿ìï¿ì·¿î-¿îz¿î∆¿ï¿ïe¿ïÄ¿ïÑ¿ï”¿ñ!¿ñr¿ñ¡¿ó¿ó\¿ó™¿óÌ¿óÒ¿ò7¿òÑ¿ò–¿ô¿ôf¿ô≥¿ôË¿ö¿öW¿öX¿öd¿öä¿öã¿ö’¿öÂ¿öÎ¿õ;¿õw¿õ}¿õŒ¿õ¸¿ú¿úP¿úâ¿úÿ¿ù'¿ùI¿ùO¿ùe¿ùk¿ù≤¿ù‘¿ù⁄¿ùË¿û¿ûJ¿ûP¿ûb¿ûõ¿û£¿û©¿û‹¿ü¿ü¿ü8¿ü±¿üÏ¿†I¿†é¿†©¿†≥¿†π¿†À¿†¯¿°¿°6¿°Q¿°r¿°ö¿°Ó¿°ˇ¿¢¿¢¿¢%¿¢-¿¢7¿¢I¿¢O¿¢_¿¢e¿¢™¿¢˙¿£4¿£R¿£ç¿£Ÿ¿£›¿£ﬁ¿§.¿§}¿§À¿•¿•¿•i¿•u¿•{¿•…¿¶¿¶+¿¶l¿¶ë¿¶í¿¶·¿ß/¿ß{¿ß»¿®¿®F¿®L¿®ô¿®•¿®´¿®¸¿©G¿©_¿©¢¿©»¿©…¿™¿™+¿™1¿™|¿™ô¿™©¿™Œ¿™Ù¿´¿´¿´¿´¿´"¿´â¿´ô¿´ƒ¿´Ï¿´˜¿¨ ¿¨3¿¨=¿¨A¿¨B¿¨N¿¨ì¿¨æ¿¨›¿¨Ì¿≠
¿≠Q¿≠∫¿≠…¿Æ=¿Æ]¿Æ•¿Æ˝¿Ø"¿Øä¿ØØ¿Ø˝¿∞#¿∞¿¿∞Â¿±O¿±Ñ¿±Â¿±ˆ¿≤Z¿≤d¿≤ˇ¿≥@¿≥H¿≥[¿≥e¿≥|¿≥È¿≥Ì¿≥Ô¿≥¿¥*¿¥.¿¥}¿¥Ã¿µ¿µF¿µJ¿µë¿µ—¿∂¿∂¿∂%¿∂)¿∂w¿∂•¿∂ÿ¿∑¿∑¿∑n¿∑º¿∑‘¿∑Í¿∏¿∏!¿∏>¿∏m¿∏É¿∏¢¿∏¶¿∏ß¿∏Á¿∏Ì¿π>¿πã¿π≠¿πø¿π‹¿π˜¿∫¿∫!¿∫8¿∫t¿∫ñ¿∫ö¿∫õ¿∫˚¿ª¿ª1¿ª7¿ªÜ¿ªª¿ª◊¿ª˛¿º#¿º1¿ºq¿ºë¿ºÀ¿ºÌ¿ºÒ¿ºÚ¿Ω;¿Ω<¿ΩH¿Ωê¿Ω”¿Ω◊¿Ωÿ¿æ¿æ[¿æÑ¿æê¿æ–¿ø¿ø¿ø"¿ø#¿ø/¿øt¿øü¿ø‰¿ø¯¿¿¿¿6¿¿[¿¿æ¿¿«¿¿Œ¿¿“¿¿‘¿¿’¿¡%¿¡t¿¡å¿¡∫¿¡„¿¡ˆ¿¬¿¬&¿¬G¿¬d¿¬y¿¬z¿¬∑¿¬Ω¿√¿√Y¿√Ü¿√å¿√…¿√Î¿√˝¿ƒ¿ƒ5¿ƒQ¿ƒ_¿ƒv¿ƒ£¿ƒß¿ƒ®¿ƒ¥¿ƒÁ¿ƒ˘¿≈¿≈>¿≈B¿≈C¿≈O¿≈Ç¿≈î¿≈¶¿≈Ÿ¿≈›¿≈ﬁ¿≈Í¿∆¿∆/¿∆A¿∆t¿∆x¿∆y¿∆Ö¿∆∏¿∆ ¿∆‹¿«¿«¿«¿« ¿«c¿«u¿«à¿«ƒ¿«»¿«…¿«’¿«˚¿«¸¿»¿»>¿»R¿»u¿»{¿»´¿»Ø¿»∞¿»±¿»Ω¿»÷¿»Ï¿…¿…¿…¿…¿…1¿…E¿…g¿…t¿…ë¿…ó¿…õ¿…ú¿…®¿…¿ 3¿ 7¿ 8¿ D¿ {¿ ç¿ õ¿ Ω¿ ¡¿ ¬¿ Œ¿À¿À ¿À.¿À\¿À`¿Àa¿Àm¿À≤¿À›¿Ã"¿Ã&¿Ã'¿Ã3¿Ãe¿Ã|¿Ãû¿Ãº¿Ã‹¿ÃÛ¿ÕJ¿ÕS¿ÕZ¿Õ^¿Õ`¿Õa¿Õü¿Õ£¿ÕÓ¿Œ:¿Œã¿Œÿ¿œ ¿œ¿œ¿œ¿œ`¿œ™¿œ›¿–%¿–+¿–\¿–t¿–ä¿–•¿–¬¿–‰¿—¿—2¿—G¿—H¿—é¿—î¿—ﬂ¿“.¿“>¿“b¿“u¿“ì¿“∞¿“æ¿“÷¿“˘¿”¿”¿” ¿”Ä¿”Ü¿”∑¿”Ω¿‘¿‘A¿‘]¿‘Ñ¿‘©¿‘∑¿‘˜¿’¿’Q¿’s¿’w¿’x¿’¬¿’√¿’œ¿÷¿÷,¿÷N¿÷É¿÷á¿÷à¿÷î¿÷‘¿◊¿◊"¿◊&¿◊'¿◊3¿◊x¿◊£¿◊Í¿◊˛¿ÿ¿ÿ<¿ÿa¿ÿƒ¿ÿÕ¿ÿ‘¿ÿÿ¿ÿ⁄¿ÿ€¿Ÿ
¿Ÿ¿Ÿ_¿Ÿ∞¿Ÿ˚¿⁄ ¿⁄a¿⁄õ¿⁄°¿⁄Î¿⁄˛¿€¿€N¿€d¿€î¿€ï¿€»¿€‹¿€›¿€È¿‹.¿‹Y¿‹°¿‹•¿‹ß¿‹®¿‹Ô¿›¿›[¿›¶¿›¨¿›¿ﬁ¿ﬁ(¿ﬁG¿ﬁr¿ﬁ©¿ﬁﬁ¿ﬁ˚¿ﬂ8¿ﬂ]¿ﬂt¿ﬂó¿ﬂ–¿‡¿‡5¿‡6¿‡Ö¿‡Ø¿‡µ¿·¿·P¿·q¿·w¿·ª¿‚¿‚Z¿‚§¿‚Ô¿„¿„H¿„o¿„°¿„€¿„È¿‰¿‰$¿‰(¿‰)¿‰_¿‰ä¿‰®¿‰—¿‰Í¿‰¯¿Â$¿Â8¿Â_¿ÂÅ¿ÂÖ¿ÂÜ¿ÂŸ¿Ê¿Ê@¿Êu¿Êî¿Ê¢¿Ê‘¿ÊÓ¿Á¿Á7¿Á;¿Á<¿Á|¿Á–¿Ë¿ËG¿Ëq¿Ë¿Ëº¿Ë·¿È¿È*¿È.¿È/¿È^¿ÈÆ¿È‚¿Í!¿ÍI¿ÍW¿Íí¿Íµ¿Í‹¿Í˛¿Î¿Î¿ÎF¿Îç¿ÎÕ¿Ï¿Ï"¿Ï9¿Ï:¿ÏF¿Ïç¿Ïø¿Ï¿¿Ï˛¿Ì¿Ìd¿Ìå¿Ì∂¿ÌÌ¿Ó)¿Ó_¿Óô¿Óü¿Ó«¿Ó˚¿Ô1¿Ôg¿Ô°¿Ôß¿Ô´¿Ô¨¿Ô‹¿¿#¿$¿J¿t¿≤¿„¿Ò)¿Òj¿Òt¿Òz¿Ò~¿Ò¿Ò¶¿Ò–¿Ú¿Ú>¿ÚÑ¿Ú≈¿Úœ¿Ú’¿ÚŸ¿Ú⁄¿Ú˛¿Û&¿Ûe¿Ûî¿Û⁄¿Ù¿Ù%¿Ù+¿Ù/¿Ù0¿ÙV¿Ù~¿Ùº¿ÙÎ¿ı1¿ır¿ı|¿ıÇ¿ıÜ¿ıá¿ıì¿ıÿ¿ˆ¿ˆ/¿ˆO¿ˆ|¿ˆª¿ˆˆ¿ˆ˝¿˜¿˜5¿˜y¿˜}¿˜¿˜Ä¿˜Ω¿˜˜¿¯:¿¯@¿¯q¿¯w¿¯Œ¿¯Ì¿˘¿˘¿˘D¿˘g¿˘z¿˘ç¿˘†¿˘¥¿˘∆¿˘ÿ¿˘Ô¿˘ˇ¿˙¿˙&¿˙:¿˙O¿˙b¿˙Ü¿˙ö¿˙Ø¿˙∆¿˙‹¿˙Ó¿˙ˇ¿˚¿˚.¿˚K¿˚r¿˚ô¿˚…¿˚˘¿¸¿¸J¿¸l¿¸ã¿¸≠¿¸∆¿¸„¿˝¿˝"¿˝C¿˝a¿˝Å¿˝ü¿˝Ω¿˝◊¿˝¿˛¿˛B¿˛z¿˛¨¿˛ﬂ¿ˇ¿ˇ'¿ˇV¿ˇÖ¿ˇÀ¿ˇÌ¿ ¿ =¿ j¿ Ö¿ †¿ ª¿ ÿ¿ Ò¿
¿-¿B¿[¿z¿ó¿∂¿—¿¿+¿J¿m¿é¿Ø¿ÿ¿	¿"¿9¿X¿É¿Æ¿Î¿(¿Q¿x¿ü¿∫¿„¿˙¿¿B¿i¿ä¿Ø¿–¿Ò¿
¿!¿<¿Ö¿–¿¿P¿y¿ò¿€¿¿W¿l¿m¿¥¿˜¿	)¿	/¿	É¿	“¿	Ó¿
¿
%¿
C¿
^¿
z¿
à¿
†¿
¿¿
ƒ¿
≈¿¿U¿[¿´¿˚¿¿[¿ü¿√¿…¿˛¿N¿Ç¿∏¿‘¿˚¿¿<¿J¿k¿ã¿è¿ê¿‹¿˜¿˝¿I¿ó¿ﬂ¿¿+¿P¿k¿è¿ù¿º¿‹¿‡¿·¿2¿|¿ù¿Ø¿Ã¿Ê¿Ù¿
¿*¿.¿/¿Ä¿ ¿Î¿˝¿¿4¿B¿X¿x¿|¿}¿Õ¿‡¿¿¿4¿O¿]¿t¿î¿ò¿ô¿Á¿˙¿¿*¿F¿_¿m¿Ç¿¢¿¶¿ß¿ı¿¿'¿8¿T¿m¿{¿ê¿∞¿¥¿µ¿¿¿D¿Z¿{¿ô¿ß¿¡¿·¿Â¿Ê¿2¿E¿`¿o¿â¿†¿Æ¿¡¿·¿Â¿Ê¿4¿G¿f¿w¿ì¿¨¿∫¿œ¿Ô¿Û¿Ù¿E¿X¿}¿ë¿∞¿Ã¿⁄¿Ú¿¿¿¿g¿z¿ù¿∞¿Œ¿È¿˜¿¿.¿2¿3¿Ñ¿ó¿º¿–¿Ô¿¿¿1¿Q¿U¿V¿•¿∏¿Ÿ¿Î¿¿"¿0¿F¿f¿j¿k¿ª¿ﬁ¿!¿D¿r¿ù¿´¿“¿Ú¿ˆ¿˜¿ G¿ Z¿ }¿ ê¿ Æ¿ …¿ ◊¿ Ó¿!¿!¿!¿!a¿!n¿!ì¿!ß¿!∆¿!‚¿!¿"¿"(¿",¿"-¿"~¿"ê¿"π¿"œ¿"¿#¿#¿#6¿#V¿#Z¿#[¿#´¿#Ω¿#‰¿#˘¿$¿$7¿$E¿$^¿$~¿$Ç¿$É¿$—¿$‰¿%¿%¿%0¿%I¿%W¿%l¿%å¿%ê¿%ë¿%ﬁ¿%Ò¿&¿&¿&9¿&R¿&`¿&t¿&x¿&y¿&≈¿&‹¿'¿'¿'8¿'V¿'d¿'}¿'ù¿'°¿'¢¿'Û¿( ¿(.¿(F¿(i¿(ã¿(ô¿(∂¿(÷¿(⁄¿(€¿)*¿)=¿)s¿)è¿)∂¿)‹¿)Í¿*¿*+¿*/¿*0¿*Ö¿*í¿*≥¿*≈¿*‚¿*˝¿+¿+!¿+A¿+E¿+F¿+ü¿+•¿+ﬁ¿,¿,A¿,r¿,ï¿,£¿,¡¿,·¿,Â¿,Ê¿-?¿-E¿-~¿-ª¿-·¿.¿.5¿.C¿.a¿.Å¿.Ö¿.Ü¿.Ë¿.Ó¿/'¿/v¿/•¿/ﬂ¿0¿0¿0@¿0`¿0d¿0e¿0«¿0Õ¿1¿1U¿1Ñ¿1æ¿1Í¿1¯¿2¿2?¿2C¿2D¿2ú¿2¢¿2€¿3¿3;¿3k¿3ç¿3õ¿3∏¿3ÿ¿3‹¿3›¿44¿4s¿4ù¿4“¿4Û¿5¿5¿5=¿5A¿5B¿5í¿5ü¿5•¿5È¿6!¿6P¿6Ü¿6ß¿6”¿6Û¿7¿7¿7=¿7A¿7B¿7}¿7É¿7–¿8¿8n¿8õ¿8π¿8‚¿8¸¿9
¿9 ¿9@¿9D¿9E¿9z¿9±¿9“¿9˛¿: ¿:.¿:N¿:k¿:o¿:p¿:ù¿:£¿:Û¿;C¿;Q¿;W¿;£¿;Í¿<¿<'¿<L¿<g¿<u¿<ü¿<µ¿<‹¿<˛¿=¿=¿=4¿=:¿=y¿=¿=Ã¿>¿>9¿>f¿>Ç¿>´¿> ¿>ÿ¿?¿? ¿?G¿?i¿?m¿?n¿?°¿?ß¿?˜¿@2¿@8¿@Ñ¿@”¿@Â¿A¿A4¿A_¿AÄ¿Aé¿Aæ¿A⁄¿B¿B#¿B'¿B(¿B\¿Bb¿B±¿Bˇ¿C¿C$¿Ct¿C¿¿D¿DZ¿Dm¿D†¿Dø¿DÎ¿E¿E¿EL¿Ei¿Eê¿E≤¿E∂¿E∑¿EÏ¿EÚ¿FA¿Fè¿FÆ¿F¥¿G¿GQ¿Gû¿GÓ¿H¿H6¿HV¿HÉ¿H¶¿H¥¿HÊ¿I¿I+¿IM¿IQ¿IR¿IÑ¿Iä¿IŸ¿J'¿JD¿JJ¿Jò¿J‰¿K/¿K~¿Kë¿K¿¿K›¿L¿L'¿L5¿Ld¿L¿L¶¿L»¿LÃ¿LÕ¿M¿M¿MV¿M§¿M¡¿M«¿N¿Nc¿N∞¿O ¿O¿OF¿Oe¿Oë¿O≥¿O¡¿OÚ¿P¿P6¿PX¿P\¿P]¿Pè¿Pï¿P‚¿Q&¿Q,¿Qx¿Q»¿Q‡¿R¿R,¿RV¿Rv¿RÑ¿R≥¿RŒ¿Rı¿S¿S¿S¿SN¿ST¿S°¿SÂ¿SÎ¿T9¿Tâ¿T£¿T“¿TÔ¿U¿U9¿UG¿Uv¿Uë¿U∏¿U⁄¿Uﬁ¿Uﬂ¿V¿V¿V[¿Va¿V∞¿VŸ¿W ¿W¿W?¿W[¿Wi¿Wî¿W´¿W“¿WÙ¿W¯¿W˘¿X&¿X,¿Xu¿XÜ¿Xå¿X€¿Y¿Y)¿YA¿Yf¿YÅ¿Yè¿Yπ¿Yœ¿Yˆ¿Z¿Z¿Z¿ZL¿ZR¿Zô¿Zü¿ZÓ¿[¿[@¿[Z¿[Å¿[û¿[¨¿[ÿ¿[¿\¿\9¿\=¿\>¿\Ñ¿\ä¿\‘¿\ˇ¿]¿]S¿]y¿]’¿^¿^N¿^Ç¿^ê¿^”¿_¿_)¿_K¿_O¿_P¿_ó¿_ù¿_Á¿`¿`¿`i¿`è¿`Ì¿a$¿ah¿aù¿a´¿aÔ¿b¿bF¿bh¿bl¿bm¿bÆ¿b¥¿b˛¿c*¿c0¿cÄ¿c¶¿c¯¿d)¿dg¿dñ¿d§¿d‚¿e¿e3¿eU¿eY¿eZ¿eú¿e¢¿eÏ¿f¿f¿fn¿fî¿fË¿g¿gY¿gâ¿gó¿g÷¿h¿h(¿hJ¿hN¿hO¿hÖ¿hã¿h‹¿i&¿i,¿iw¿iπ¿i˜¿j¿jT¿jx¿jÜ¿jπ¿jÿ¿jˇ¿k!¿k%¿k&¿kW¿k]¿kÆ¿k‘¿k⁄¿l)¿lF¿lu¿lì¿læ¿l›¿lÎ¿m¿m3¿mZ¿m|¿mÄ¿mÅ¿mƒ¿m ¿n¿nV¿nû¿nË¿o¿o¿oi¿o∫¿p¿p¿p¿p$¿pt¿pù¿pÔ¿q@¿qn¿q©¿q⁄¿qË¿r(¿rT¿r{¿rù¿r°¿r¢¿rÂ¿rÎ¿s3¿ss¿sø¿t	¿t3¿t9¿tä¿t€¿u)¿u/¿u?¿uE¿uí¿u∞¿v¿vS¿vÅ¿vº¿vÌ¿v˚¿w;¿wg¿wé¿w∞¿w¥¿wµ¿w˛¿x¿xN¿xú¿xÏ¿xÚ¿y¿y¿yP¿y≥¿y¯¿zH¿zr¿zÄ¿z•¿z≈¿z…¿z ¿z÷¿{¿{0¿{>¿{l¿{p¿{q¿{}¿{ƒ¿{ˆ¿|!¿|U¿|a¿|≤¿|˙¿}¿}¿}@¿}â¿}ê¿}ë¿}™¿}Ã¿}Â¿~¿~ ¿~B¿~\¿~Å¿~ô¿~∫¿~–¿~Ì¿¿&¿C¿n¿Ü¿ß¿¬¿È¿Ä¿Ä(¿ÄC¿Äj¿ÄÉ¿Ä¶¿Ä–¿Å¿Å/¿ÅT¿Åo¿Åñ¿ÅÆ¿Åœ¿ÅÊ¿Ç¿Ç&¿ÇW¿Çx¿Ç©¿Ç”¿É¿É@¿ÉÉ¿É£¿É“¿Ñ¿Ñ:¿ÑW¿ÑÄ¿Ñú¿Ñ√¿Ñﬂ¿Ö¿Ö(¿ÖV¿Ö\¿ÖÇ¿Ö∏¿Öæ¿Ö›¿Ü	¿Ü"¿ÜB¿Üb¿Üì¿Ü‡¿á/¿áq¿áà¿á™¿á«¿áı¿à¿à:¿àX¿àà¿àß¿àŸ¿àı¿â!¿â?¿âo¿âã¿â∑¿â”¿âˇ¿ä¿ä;¿äR¿ät¿äç¿ä≥¿ä„¿ã7¿ãh¿ãæ¿ãÈ¿å3¿å_¿å´¿åÀ¿åˇ¿ç¿çD¿çq¿çø¿çÏ¿é:¿éb¿é¢¿é¶¿éß¿éæ¿é—¿é’¿é÷¿éÛ¿è¿è¿è¿è,¿èC¿èG¿èH¿èf¿èÄ¿èÑ¿èÖ¿è§¿èø¿è√¿èƒ¿è‡¿è¯¿è¸¿è˝¿ê¿ê5¿ê9¿ê:¿êV¿ên¿êr¿ês¿êè¿êß¿ê´¿ê¨¿êƒ¿êÿ¿ê‹¿ê›¿êÙ¿ë¿ë¿ë¿ë%¿ë:¿ë>¿ë?¿ëÉ¿ëæ¿ë¬¿ë√¿í¿íD¿íH¿íI¿íà¿íæ¿í¬¿í√¿ì¿ì:¿ì>¿ì?¿ìv¿ìõ¿ìü¿ì†¿ì∆¿ì·¿ìÂ¿ìÊ¿î¿î<¿î@¿îA¿în¿îó¿îõ¿îù¿îû¿îÌ¿ï	¿ï¿ï\¿ïê¿ïƒ¿ñ¿ñ ¿ñ9¿ñO¿ñi¿ñÜ¿ñõ¿ñú¿ñÈ¿ó9¿ó[¿óm¿óä¿ó•¿ó¡¿óœ¿óÊ¿ò¿ò
¿ò¿ò¿ò^¿òê¿ò”¿ò◊¿òÿ¿ò‰¿ô)¿ôT¿ôô¿ôù¿ôü¿ô†¿ô„¿ö&¿ö:¿ö>¿öÖ¿öÃ¿ö˛¿õ2¿õÄ¿õΩ¿õæ¿õ ¿ú¿úC¿úN¿úp¿ú†¿ú§¿ú¶¿úß¿úŸ¿ú›¿ù,¿ùH¿ùL¿ùì¿ùŒ¿û¿ûM¿ûh¿û~¿ûô¿û∏¿ûŒ¿ûÓ¿ûÚ¿ûÛ¿ü8¿ü\¿üo¿üç¿ü®¿ü≈¿ü”¿üÎ¿†¿†¿†¿†¿†\¿†o¿†}¿†´¿†Ø¿†∞¿†º¿°¿°,¿°s¿°w¿°y¿°z¿°∑¿°ª¿¢¿¢N¿¢Ä¿¢™¿¢Æ¿¢º¿¢¿¿£¿£9¿£â¿£§¿£∫¿£“¿£¿§¿§¿§¿§P¿§k¿§y¿§í¿§™¿§∏¿§Ã¿§Ï¿§¿§Ò¿§˝¿•D¿•v¿•ò¿•ú¿•ù¿•©¿•Ó¿¶¿¶W¿¶[¿¶]¿¶^¿¶í¿¶ñ¿¶§¿¶®¿¶Ê¿ß'¿ßX¿ßë¿ßó¿ß∫¿ß–¿ßÌ¿®¿® ¿®5¿®J¿®K¿®ô¿®∑¿®Ω¿©
¿©H¿©g¿©z¿©ò¿©≥¿©À¿©Ÿ¿©ˆ¿™	¿™0¿™^¿™d¿™z¿™~¿™¿™ã¿™∂¿™∑¿´¿´S¿´ï¿´≤¿´≥¿´ø¿´ÿ¿´Û¿¨¿¨/¿¨3¿¨4¿¨@¿¨w¿¨ê¿¨«¿¨‘¿≠¿≠#¿≠9¿≠T¿≠Z¿≠ì¿≠Æ¿≠≤¿≠≥¿≠ø¿Æ¿Æ/¿Æq¿Æu¿Æw¿Æx¿Æ∆¿Æ˘¿Æ˝¿ØI¿ØM¿Øò¿ØÈ¿Ø˝¿∞¿∞¿∞¿∞S¿∞ñ¿∞…¿±¿±
¿±D¿±\¿±y¿±õ¿±º¿±Ï¿≤¿≤4¿≤Q¿≤z¿≤ô¿≤Æ¿≤€¿≤Ù¿≥¿≥B¿≥W¿≥X¿≥û¿≥‘¿≥Û¿¥¿¥$¿¥?¿¥W¿¥e¿¥x¿¥é¿¥í¿¥ì¿¥◊¿µ¿µ¿µl¿µÆ¿µ¥¿∂¿∂T¿∂à¿∂∫¿∂‘¿∂˘¿∑¿∑8¿∑F¿∑e¿∑{¿∑¿∑Ä¿∑Õ¿∑˜¿∏¿∏)¿∏F¿∏a¿∏{¿∏â¿∏û¿∏¥¿∏∏¿∏π¿π¿π!¿π'¿πl¿π±¿∫ ¿∫B¿∫ë¿∫“¿ª¿ª=¿ªR¿ªX¿ª¿ªÆ¿ª…¿ªÔ¿º
¿º*¿º8¿ºS¿ºi¿ºm¿ºn¿º∫¿ºÙ¿º˙¿Ω<¿ΩB¿Ωi¿Ωú¿Ωπ¿Ω·¿Ω¸¿æ¿æ,¿æI¿æ_¿æc¿æd¿æp¿æÇ¿æî¿æ®¿æ¨¿æ≠¿æπ¿æ‰¿æÂ¿ø¿ø'¿ød¿øe¿øµ¿øª¿¿¿¿<¿¿ã¿¿•¿¿«¿¡¿¡¿¡¿¡¿¡\¿¡ù¿¡œ¿¡„¿¬¿¬[¿¬ô¿¬≥¿¬Î¿¬Ô¿¬¿¬¸¿√L¿√u¿√ù¿√∑¿√Û¿ƒ5¿ƒ>¿ƒE¿ƒI¿ƒJ¿ƒV¿ƒç¿ƒª¿ƒ«¿≈$¿≈y¿≈ƒ¿≈Ô¿≈ˆ¿∆2¿∆F¿∆°¿∆«¿∆‡¿∆˝¿«¿«=¿«j¿«ä¿«ì¿«†¿«¨¿«√¿«Ò¿» ¿»C¿»I¿»`¿»n¿»Å¿»î¿»¡¿…¿…@¿…a¿…z¿…ì¿…ú¿…£¿…ß¿…®¿…¥¿…ı¿ $¿ (¿ )¿ 5¿ z¿ •¿ Á¿À<¿À¿ÀŸ¿À›¿Àﬂ¿À‡¿Ã/¿Ã3¿ÃA¿ÃE¿Ãâ¿ÃŒ¿Õ¿Õ¿Õ]¿Õo¿Õu¿Õ¬¿ÕÙ¿Õ˙¿Œ)¿ŒC¿ŒY¿Œr¿Œà¿Œ¶¿Œƒ¿Œ€¿ŒÚ¿œ¿œ¿œA¿œZ¿œf¿œÅ¿œù¿œ´¿œ¬¿œÿ¿œ‹¿œ›¿–1¿–M¿–\¿–v¿–è¿–ù¿–±¿–«¿–À¿–Ã¿–ÿ¿—¿—¿—¿—H¿—¢¿—Â¿—Ú¿“¿“8¿“?¿“r¿“v¿“x     ¡