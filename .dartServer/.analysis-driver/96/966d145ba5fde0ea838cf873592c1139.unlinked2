ÄÀvalue==hashCodetoString_currentElementcurrentContextcurrentWidgetcurrentState_debugLabelkeycreateElementtoStringShortdebugFillProperties	canUpdate_debugConcreteSubtypebuildcreateStatecreatedinitializedreadydefunctwidget_widget_debugLifecycleState_debugTypesAreRightcontext_elementmounted	initStatedidUpdateWidget
reassemblesetState
deactivateactivatedisposedidChangeDependencieschilddebugIsValidRenderObjectdebugTypicalAncestorWidgetClass%_debugDescribeIncorrectParentDataTypeapplyParentDatadebugCanApplyOutOfTurnupdateShouldNotifycreateRenderObjectupdateRenderObjectdidUnmountRenderObjectchildreninitialactiveinactive_locked	_elements_unmount_unmountAll_deactivateRecursivelyaddremovedebugContainsownerdebugDoingBuildfindRenderObjectsizedependOnInheritedElement"dependOnInheritedWidgetOfExactType'getElementForInheritedWidgetOfExactTypefindAncestorWidgetOfExactTypefindAncestorStateOfTypefindRootAncestorStateOfTypefindAncestorRenderObjectOfTypevisitAncestorElementsvisitChildElementsdispatchNotificationdescribeElementdescribeWidgetdescribeMissingAncestordescribeOwnershipChainonBuildScheduled_inactiveElements_dirtyElements_scheduledFlushDirtyElements_dirtyElementsNeedsResorting_debugIsInBuildScopefocusManagerscheduleBuildFor_debugStateLockLevel_debugStateLockeddebugBuilding_debugBuilding_debugCurrentBuildTarget	lockState
buildScope>_debugElementsThatWillNeedToBeRebuiltDueToGlobalKeyShenanigansB_debugTrackElementThatWillNeedToBeRebuiltDueToGlobalKeyShenanigans_debugElementWasRebuilt_globalKeyRegistry_debugIllFatedElements_debugGlobalKeyReservationsglobalKeyCount#_debugRemoveGlobalKeyReservationFor_registerGlobalKey_unregisterGlobalKey_debugReserveGlobalKeyFor _debugVerifyGlobalKeyReservation_debugVerifyIllFatedPopulationfinalizeTreeonNotificationattachNotificationTreecurrentparent_parent_debugReassembleConfig_notificationTreeslot_slotdepth_depth_sortdebugIsDefunct_owner_debugIsInScoperenderObjectdescribeElements_lifecycleStatevisitChildrendebugVisitOnstageChildrenupdateChildmount _debugRemoveGlobalKeyReservationupdateupdateSlotForChild_updateSlot_updateDepthdetachRenderObjectattachRenderObject_retakeInactiveElementinflateWidget_debugCheckForCyclesdeactivateChild$_debugForgottenChildrenWithGlobalKeyforgetChild_activateWithParent_activateRecursivelydebugDeactivatedunmount_inheritedWidgets_dependencies_hadUnsatisfiedDependencies)_debugCheckStateIsActiveForAncestorLookup_updateInheritance!_debugCheckOwnerBuildTargetExistsdebugGetCreatorChaindebugGetDiagnosticChaintoDiagnosticsNodedebugDescribeChildrendirty_dirty_inDirtyList_debugBuiltOnce'_debugAllowIgnoredCallsToMarkNeedsBuild*_debugSetAllowIgnoredCallsToMarkNeedsBuildmarkNeedsBuildrebuildperformRebuildstateful	toJsonMapbuilder_defaultErrorWidgetBuilder
_stringifymessage_flutterError_child_debugDoingBuild_firstBuildstate_state_didChangeDependenciesupdatednotifyClients_applyParentDataapplyWidgetOutOfTurn_dependentsgetDependenciessetDependenciesupdateDependenciesnotifyDependent_renderObject_ancestorRenderObjectElement _findAncestorRenderObjectElement_findAncestorParentDataElement_debugUpdateRenderObjectOwner_performRebuildupdateChildren_updateParentDatainsertRenderObjectChildmoveRenderObjectChildremoveRenderObjectChildassignOwner	_children_forgottenChildren$_debugCheckHasAssociatedRenderObjectelementindexinstance3
_DebugOnly
_debugOnly	ObjectKey	GlobalKeyLabeledGlobalKeyGlobalObjectKeyWidgetStatelessWidgetStatefulWidget_StateLifecycleStateSetterStateProxyWidgetParentDataWidgetInheritedWidgetRenderObjectWidgetLeafRenderObjectWidgetSingleChildRenderObjectWidgetMultiChildRenderObjectWidget_ElementLifecycle_InactiveElementsElementVisitorBuildContext
BuildOwnerNotifiableElementMixin_NotificationNodeElement_ElementDiagnosticableTreeNodeErrorWidgetBuilderErrorWidgetWidgetBuilderIndexedWidgetBuilderNullableIndexedWidgetBuilderTransitionBuilderComponentElementStatelessElementStatefulElementProxyElementParentDataElementInheritedElementRenderObjectElementRootRenderObjectElementLeafRenderObjectElementSingleChildRenderObjectElementMultiChildRenderObjectElementDebugCreator_debugReportExceptionIndexedSlot_NullElement_NullWidget_debugShouldReassembleÅofactory	immutablemustCallSuperoptionalTypeArgs	protectedrequiredvisibleForTestingFlutterErrorErrorSummaryErrorDescription	ErrorHint
debugPrintdebugPrintStackVoidCallbackValueChangedValueGetterValueSetterDiagnosticsNodeDiagnosticLevelKeyLocalKeyValueKeyRenderObject	RenderBoxdebugDumpRenderTreedebugDumpLayerTreekey	identicalObjectoverrideboolruntimeTypevalueinthashidentityHashCodeStringdescribeIdentityobjectRuntimeType
deactivate	UniqueKeyGestureDetector	initState
debugLabelemptyWidgetsBindinginstance
buildOwner_globalKeyRegistrywidgetstateconstructor	shortHashendsWith	substringlengthcreateStateupdateDiagnosticableTreevoidDiagnosticPropertiesBuilderdebugFillPropertiesdefaultDiagnosticsTreeStyleDiagnosticsTreeStyledense
nonVirtualhashCode	canUpdate"dependOnInheritedWidgetOfExactTypesetStateStreamChangeNotifierdisposedidChangeDependenciesDiagnosticablecreated
reassembleBindingBasereassembleApplicationImagedefunct	fromPartsdynamicFuturemarkNeedsBuildactivatereadyAnimatedWidgetaddEnumPropertydefaultValueObjectFlagPropertyifNullRowColumnStack
ParentData
PositionedSize
parentDatachildTypeIterableparentDataCreatorownershipChainmarkNeedsLayoutmarkNeedsPaintapplyWidgetOutOfTurnColorThemeof	ThemeDataBuilderInheritedNotifierInheritedModel(SlottedMultiChildRenderObjectWidgetMixinmountRenderObjectWithChildMixinContainerRenderObjectMixinRenderBoxContainerDefaultsMixinRenderStackindexListSetHashSet_lifecycleStateinactive$debugPrintGlobalKeyedWidgetLifecyclevisitChildren_parentunmounttoListsort_sortclearreversedforEachisEmptyactivedebugDeactivatedcontainsremovevisitChildElementsbuildcontext
showDialogbuilderScaffoldStateshowBottomSheetScaffoldmounted	drawFrame
RenderViewaspectMaterialInkWellNotificationListenerNotificationdescribeElementserrorPropertydebugCheckHasMaterialassignOwnerOffstageFocusManagerregisterGlobalHandlers
FocusScopeFocusScopeNodenewowner debugPrintScheduleBuildForStackslabeldirtydescribeElement_inDirtyListdebugPrintBuildScopepragmacallbackkReleaseModeMap(timelineArgumentsIndicatingLandmarkEventdebugProfileBuildsEnabledTimeline	startSync	arguments*_debugSetAllowIgnoredCallsToMarkNeedsBuild_debugIsInScopeDiagnosticsPropertystyletoDiagnosticsNodetoTimelineArgumentsrebuildestackinformationCollector
kDebugModeDiagnosticsDebugCreator
finishSyncanyelementHashMapputIfAbsentcontainsKeyparentrenderObjectattached
childToKeytoStringcurrentChildforgetChildLinkedHashSetkeys_unmountAll
isNotEmptyaddAllmapcountjoinDebugReassembleConfig_debugReassembleConfig_notificationTreeonNotificationdispatchNotificationcreateElementinitialdepthTimer	AnimationexpectedAncestorTypeDiagnosticsBlocknamechildrenallowTruncateStringPropertyOverlayFindervisitChildrenForSemantics_debugStateLocked_debugConcreteSubtypeslot_debugElementWasRebuilt_debugReserveGlobalKeyForinsertRenderObjectChildmoveRenderObjectChildremoveRenderObjectChild_registerGlobalKey#_debugRemoveGlobalKeyReservationFor_updateSlot_updateDepthdetachRenderObjectattachRenderObject_currentElementB_debugTrackElementThatWillNeedToBeRebuiltDueToGlobalKeyShenanigansdeactivateChild_inactiveElements_activateWithParentscheduleBuildFor
dependency_dependents_unregisterGlobalKey_debugBuildingErrorSpacerRenderSliverdescribeForErrorhasSizedebugNeedsLayoutsizeupdateDependencies_inheritedWidgetsupdateShouldNotify_debugCurrentBuildTargettoStringShortshowNamelevelhiddenFlagPropertyifTruesparsedescribeWidgetdebugOnRebuildDirtyWidgetcalldebugPrintRebuildDirtyWidgetsDiagnosticableTreeNode DiagnosticsSerializationDelegate	toJsonMapdebugIsDefunctreportErrorFlutterErrorDetailsonErrorerrorRenderErrorBox	exceptionwithDetailsmessagequoted
whitespaceOverlayEntryValueWidgetBuilderListViewSliverChildBuilderDelegate
childCountAnimatedBuilder
WidgetsAppMaterialAppdebugWidgetBuilderValue_dirtyupdateChild_debugTypesAreRight_element_widget_debugLifecycleStateinitialized_firstBuildperformRebuilddidUpdateWidgetdependOnInheritedElementstateful_updateParentDataapplyParentDatadebugCanApplyOutOfTurnAutomaticKeepAlive	KeepAliveupdated!_debugCheckOwnerBuildTargetExists	dependent_dependenciesupdateSlotForChildPageStorageperformLayoutinvokeLayoutCallback
buildScopedebugDumpAppinsertdebugTypicalAncestorWidgetClassdebugGetCreatorChain
stackTracecreateRenderObjectdebugDisposed_slotdebugCreatorupdateRenderObjectslotsforgottenChildrenfilledvaluesoldChildeverydidUnmountRenderObjectdebugIsValidRenderObject%_debugDescribeIncorrectParentDataTypeshallowrunApp_ownerdebugDescribeChildrendebugValidateChildupdateChildrendebugChildrenHaveDuplicateKeysContainerParentDataMixinwhereaftermoveinflateWidgeti
StackTraceInformationCollectorlibraryUnimplementedError
widgetNameLocalKeyKey	GlobalKeyDiagnosticableTreeWidgetDiagnosticableProxyWidgetRenderObjectWidgetElementBuildContextDiagnosticableTreeNodeLeafRenderObjectWidgetComponentElementProxyElementRenderObjectElementlëm/d]@(∑]ET#ª‘m package:flutter/foundation.dart package:flutter/foundation.dart package:flutter/foundation.dart package:flutter/foundation.dart package:flutter/foundation.dart package:flutter/rendering.dart   
dart:async dart:collection dart:developer package:flutter/foundation.dart package:flutter/rendering.dart binding.dart 
debug.dart focus_manager.dart inherited_model.dart notification_listener.dart 	dart:core¿´‰ ¿%ô: <ÄÜÄ§Ä•Ä∫Ä‘ÄÌÄÓÅÅAÅBÅYÅnÅãÅ™ÅœÅ–Å˛Ç	ÇÇ'Ç;ÇHÇTÇiÇÌÉQÉ°ÉËÑWÑXÑpÑéÑ¥ÑÌÖSÖûÖüÖÓÜ9ÜåÜµÜ∏Ü√Ü“áááá á6á8á9áeáfánáoá¥á∏àà à$à2à6àaà≤àøà‚â-âLâMâëâ®â©âµâÿäää4ä^äbäcäoä∏äπä≈ä€ä˝ã*ã}ãÅãÉãÑã¥ã∏ååUåúå†åÓç=çåç›çÎçÔé;éäé÷é˛èèRèáèãè◊êêê'ê+êzêπêΩë
ëYë¢ëÚíBíUíYí¶íÒíıìììXìeìwìøîî!î'îwîâîŸî⁄ïïïZïmïûïüïˇñ ñBñHñôñ∞ñÁñËó)ó/óóñóŒóœò ò&òqò¬ò˚ôôAôgôûôœôÂô˚ööööööBöFöìöªöÕõõOõUõâõﬂúúú9ú:úFú\ú°ú úˇù/ù3ù5ù6ùÇùÜù‘ùÓùÚûCûÖû÷ü"ü7ü;üGürü£ü©ü±üµüˇ†L†W†[†ú†Æ†¸°N°â°ä°Œ°‰°Â°Ò¢¢>¢R¢y¢£¢ß¢®¢¥¢„¢‰¢££H£Æ§§(§]§Ç§À§—••
•••?•C•í•ﬁ¶#¶'¶v¶¡¶˚ßIßißmßæ®®Y®ß®ª®ø©©X©ß©˜™E™ñ™†™§™≤™∂´´,´x´û´Î¨¨)¨\¨Ñ¨¢¨£¨Ê¨Ï≠3≠Ñ≠÷Æ&ÆyÆÖÆãÆ€Ø,ØzØ≈∞∞7∞=∞é∞•∞´∞ª∞¡∞Ù±±±A±G±ö±Ï≤9≤â≤ü≤¨≤∑≤“≤”≥≥≥-≥h≥ñ≥ö≥õ≥ß≥Ï¥¥`¥d¥e¥q¥¥≥¥¥¥¿¥Œ¥Ù¥ıµEµuµ{µÃ∂∂`∂f∂∑∑∑∑T∑é∑π∑Ω∑æ∏∏]∏±π
π>πhπìπ°π•πßπ®π⁄πﬁ∫.∫}∫«ªª`ªdªßª´ª˜º?ºèº⁄Ω(ΩMΩQΩsΩwΩ∆ææbæzæ~æœø øjøÖøâø–øÛø˜¿ @H¿ @ò¿ @Á¿ A8¿ Aá¿ A”¿ B
¿ B¿ B_¿ Bù¿ B°¿ BÒ¿ CA¿ Cí¿ C©¿ C≠¿ C¯¿ DB¿ Dí¿ D„¿ E1¿ EÇ¿ E—¿ EÁ¿ F2¿ F}¿ FŒ¿ G¿ Gl¿ G∏¿ H	¿ HF¿ HY¿ H]¿ HØ¿ HÊ¿ HÍ¿ I-¿ I1¿ IE¿ II¿ Iú¿ I†¿ IÒ¿ J¿ J¿ J¿ JJ¿ JÅ¿ JÖ¿ Jï¿ J¿¿ J˙¿ K¿ K¿ K¿ K ¿ K$¿ K8¿ K<¿ Kä¿ K£¿ Kß¿ K≥¿ K‹¿ KÔ¿ L¿ L/¿ LC¿ L_¿ Lc¿ L|¿ Ló¿ Lõ¿ L´¿ L÷¿ M¿ M¿ M¿ M"¿ M2¿ M6¿ M¿ MŒ¿ MÒ¿ Mı¿ N¿ N¿ NS¿ N}¿ N…¿ NÔ¿ O¿ OG¿ OÄ¿ OÅ¿ O“¿ Oÿ¿ P¿ P!¿ P_¿ P`¿ P´¿ P±¿ Q¿ QR¿ Qù¿ Q¿ R¿ R¿ Ri¿ R∂¿ S¿ SP¿ Så¿ Sí¿ S‚¿ T0¿ TU¿ T[¿ T©¿ TÚ¿ U?¿ Uà¿ U”¿ V¿ V¿ VY¿ V_¿ V≠¿ Vπ¿ Vı¿ W0¿ W6¿ W~¿ Wû¿ W§¿ W¥¿ W∫¿ X¿ X ¿ XF¿ XH¿ XI¿ Xn¿ Xr¿ X¡¿ Y¿ YX¿ Yü¿ Y£¿ YÚ¿ ZA¿ Zã¿ Z”¿ [$¿ [(¿ [t¿ [∫¿ \¿ \Y¿ \ú¿ \≥¿ \∑¿ \˙¿ \˛¿ ]N¿ ]ì¿ ]·¿ ^2¿ ^f¿ ^j¿ ^ß¿ ^¿ _?¿ _â¿ _⁄¿ `*¿ `P¿ `T¿ `û¿ `Ï¿ a6¿ aÅ¿ aÕ¿ b¿ bj¿ bπ¿ c	¿ cZ¿ c®¿ c¯¿ dD¿ dH¿ dj¿ dn¿ d©¿ d≠¿ d˛¿ eN¿ eù¿ eÌ¿ f=¿ fâ¿ f⁄¿ fˆ¿ f˙¿ gD¿ gè¿ g‡¿ h)¿ hz¿ hï¿ hô¿ h‡¿ i¿ i¿ iS¿ iö¿ iÍ¿ j¿ j¿ jm¿ jª¿ k¿ kQ¿ kÑ¿ kà¿ k”¿ l$¿ lv¿ l»¿ m¿ mk¿ mì¿ mó¿ m„¿ n¿ n¿ nW¿ n®¿ n˜¿ oD¿ oê¿ o›¿ p(¿ pv¿ põ¿ pü¿ pÍ¿ q6¿ qz¿ q…¿ q˜¿ q˚¿ rC¿ rG¿ rô¿ r–¿ r‘¿ s¿ s¿ s/¿ s3¿ s}¿ sÅ¿ s…¿ t¿ t`¿ td¿ tp¿ tû¿ t÷¿ t⁄¿ tÍ¿ u'¿ u-¿ u1¿ uh¿ ux¿ u£¿ u›¿ uÂ¿ uÎ¿ uÛ¿ v¿ v¿ v¿ vf¿ v≤¿ v“¿ v÷¿ v‚¿ w
¿ w¿ w/¿ w]¿ wq¿ wç¿ wë¿ w™¿ w≈¿ w…¿ wŸ¿ x
¿ x¿ x¿ x?¿ xY¿ x]¿ xq¿ xô¿ x°¿ x•¿ xµ¿ x‡¿ x˙¿ y¿ yZ¿ yy¿ yÑ¿ yå¿ yí¿ yö¿ y™¿ yÆ¿ y˜¿ zF¿ zi¿ zm¿ z{¿ z¿ zƒ¿ {¿ {D¿ {ê¿ {∂¿ {Â¿ |¿ |E¿ |F¿ |ñ¿ |ú¿ |Ÿ¿ |Â¿ }!¿ }"¿ }s¿ }y¿ }¿¿ }ı¿ }˚¿ ~	¿ ~¿ ~R¿ ~\¿ ~b¿ ~Ø¿ ~˛¿ O¿ û¿ Ó¿ Ä9¿ ÄP¿ Ä]¿ Äh¿ ÄΩ¿ Äø¿ Ä¿¿ Å¿ Å¿ Ål¿ Åx¿ ÅÉ¿ ÅÑ¿ Å—¿ Ç%¿ Ç4¿ Ç5¿ ÇÖ¿ Çì¿ Çú¿ Çù¿ ÇË¿ É¿ É¿ É¿ É¿ ÉF¿ É|¿ É}¿ É∂¿ É∫¿ Ñ	¿ ÑU¿ Ñ†¿ ÑÁ¿ ÑÎ¿ Ö+¿ Öx¿ Ö∆¿ Ü¿ Ü_¿ Ü¶¿ Üˆ¿ áF¿ áê¿ áî¿ á∆¿ á ¿ à¿ à(¿ àu¿ àƒ¿ â¿ â_¿ â|¿ â ¿ ä¿ äb¿ ä´¿ ä∫¿ ã¿ ãW¿ ã™¿ ã¯¿ åI¿ åô¿ åﬁ¿ ç-¿ çu¿ ç¡¿ é
¿ é¿ ég¿ é∞¿ é˝¿ èN¿ èü¿ èÔ¿ ê<¿ êâ¿ ê»¿ ë¿ ë_¿ ë•¿ ëÔ¿ í<¿ íã¿ í‹¿ ì)¿ ìv¿ ìØ¿ ì¸¿ îH¿ îï¿ î‚¿ ï3¿ ï|¿ ï∆¿ ï’¿ ñ&¿ ñv¿ ñƒ¿ ó¿ ó3¿ óÄ¿ óÕ¿ ò¿ òb¿ òf¿ òt¿ òx¿ ò…¿ ô¿ ôR¿ ôÖ¿ ô—¿ ô˜¿ ö/¿ öA¿ öÜ¿ öß¿ ö≠¿ ö˙¿ õG¿ õì¿ õ‹¿ ú-¿ ú|¿ úè¿ ú´¿ úπ¿ ú∫¿ ú˙¿ ù ¿ ùM¿ ùú¿ ùﬁ¿ ùﬂ¿ û*¿ ûV¿ ûê¿ ûë¿ û ¿ û–¿ ü¿ üd¿ ü≥¿ †¿ †¿ †!¿ †j¿ †î¿ †±¿ †¡¿ †ﬂ¿ †˚¿ °s¿ °˝¿ ¢¿ ¢¿ ¢#¿ ¢-¿ ¢C¿ ¢G¿ ¢d¿ ¢e¿ ¢ü¿ ¢•¿ ¢Ô¿ £4¿ £Å¿ £“¿ £Ò¿ £˜¿ §9¿ §a¿ §b¿ §õ¿ §°¿ §¿ •¿ •¿ •Q¿ •¢¿ •È¿ •Ô¿ ¶!¿ ¶j¿ ¶≤¿ ¶ˇ¿ ßC¿ ßk¿ ßq¿ ß£¿ ßÔ¿ ®4¿ ®S¿ ®á¿ ®ç¿ ®¢¿ ®®¿ ®˘¿ ©C¿ ©ö¿ ©Ø¿ ©µ¿ ™¿ ™-¿ ™:¿ ™K¿ ™`¿ ™ù¿ ™°¿ ™¢¿ ™⁄¿ ™‡¿ ´/¿ ´t¿ ´¿¿ ¨
¿ ¨9¿ ¨?¿ ¨è¿ ¨´¿ ¨±¿ ≠¿ ≠I¿ ≠O¿ ≠~¿ ≠Ñ¿ ≠”¿ Æ¿ Æ¿ Æ)¿ Æ[¿ Æ\¿ Æé¿ Æî¿ Æﬁ¿ Ø'¿ Øv¿ Ø|¿ Øå¿ Øí¿ Ø∞¿ Ø›¿ ∞¿ ∞¿ ∞/¿ ∞G¿ ∞H¿ ∞ó¿ ∞ù¿ ∞Ë¿ ± ¿ ±&¿ ±4¿ ±a¿ ±k¿ ±q¿ ±æ¿ ≤¿ ≤B¿ ≤H¿ ≤ò¿ ≤Á¿ ≥8¿ ≥F¿ ≥L¿ ≥ò¿ ≥Â¿ ¥"¿ ¥(¿ ¥u¿ ¥√¿ µ¿ µc¿ µï¿ µõ¿ µ©¿ µÿ¿ µÓ¿ ∂¿ ∂¿ ∂X¿ ∂á¿ ∂ ¿ ∂“¿ ∂‹¿ ∂‚¿ ∑0¿ ∑|¿ ∑™¿ ∑∑¿ ∑⁄¿ ∑Ú¿ ∏¿ ∏?¿ ∏w¿ ∏ª¿ ∏◊¿ π4¿ πç¿ π‰¿ ∫%¿ ∫2¿ ∫G¿ ∫p¿ ∫«¿ ª¿ ªq¿ ªÜ¿ ªì¿ ª®¿ ª˝¿ ºQ¿ º†¿ º¿ º˝¿ Ω	¿ Ω¿ ΩZ¿ Ωí¿ Ω’¿ ΩÍ¿ æC¿ æù¿ æ˙¿ ø'¿ ø4¿ ø@¿ øH¿ ø[¿ øe¿ øë¿ ø°¿ øø¿ ø˜¿ ¿B¿ ¿^¿ ¿µ¿ ¿ˆ¿ ¡¿ ¡¿ ¡r¿ ¡Œ¿ ¬¿ ¬¿ ¬$¿ ¬,¿ ¬|¿ ¬û¿ ¬±¿ ¬ª¿ ¬€¿ ¬ﬂ¿ ¬‡¿ √¿ √¿ √l¿ √∏¿ ƒ	¿ ƒY¿ ƒ£¿ ƒÛ¿ ≈B¿ ≈ë¿ ≈·¿ ∆/¿ ∆¿ ∆≠¿ ∆≥¿ ∆˛¿ «M¿ «é¿ «î¿ «·¿ »¿ »¿ »!¿ »'¿ »w¿ »õ¿ »®¿ »π¿ »—¿ »“¿ …¿ …>¿ …D¿ …í¿ …›¿  ¿  ¿  i¿  ∂¿ À¿ ÀP¿ À†¿ ÀÌ¿ Ã5¿ ÃÅ¿ Ã—¿ Õ¿ Õj¿ Õp¿ Õæ¿ Œ¿ Œ!¿ Œ'¿ Œv¿ Œû¿ Œ§¿ Œ¥¿ Œ∫¿ œ ¿ œJ¿ œW¿ œh¿ œ~¿ œ¿ œ√¿ œ…¿ –¿ –a¿ –∞¿ —¿ —K¿ —Q¿ —†¿ —Ÿ¿ —ﬂ¿ “¿ “¿ “a¿ “à¿ “é¿ “û¿ “§¿ “ﬂ¿ “Ï¿ “˝¿ ”¿ ”K¿ ”[¿ ”ë¿ ”§¿ ”Æ¿ ”≤¿ ”≥¿ ”˛¿ ‘¿ ‘S¿ ‘b¿ ‘h¿ ‘å¿ ‘∂¿ ‘Â¿ ’*¿ ’r¿ ’√¿ ’Í¿ ’¿ ÷?¿ ÷p¿ ÷v¿ ÷¡¿ ◊¿ ◊_¿ ◊®¿ ◊‰¿ ◊Í¿ ÿ:¿ ÿâ¿ ÿ‘¿ ÿ⁄¿ Ÿ(¿ Ÿq¿ Ÿ¿¿ ⁄¿ ⁄Z¿ ⁄©¿ ⁄Ë¿ ⁄Ó¿ €	¿ €¿ €Y¿ €_¿ €≠¿ €˚¿ ‹H¿ ‹`¿ ‹f¿ ‹±¿ ›¿ ›R¿ ›¢¿ ›Ó¿ ﬁ(¿ ﬁ.¿ ﬁ¿ ﬁ…¿ ﬂ¿ ﬂ¿ ﬂo¿ ﬂΩ¿ ﬂˇ¿ ‡N¿ ‡ü¿ ‡∏¿ ‡æ¿ ‡Ã¿ ‡˙¿ ·¿ ·!¿ ·'¿ ·9¿ ·{¿ ·¨¿ ·∂¿ ·æ¿ ·»¿ ·Œ¿ ‚¿ ‚j¿ ‚∫¿ „¿ „T¿ „a¿ „g¿ „¥¿ ‰¿ ‰¿ ‰%¿ ‰3¿ ‰g¿ ‰s¿ ‰Ö¿ ‰≤¿ ‰Ï¿ ‰ˆ¿ ‰˛¿ Â¿ Â¿ Â_¿ ÂØ¿ Â¸¿ ÊI¿ Êj¿ Êp¿ ÊÄ¿ ÊÜ¿ Êﬁ¿ ÊÎ¿ Á¿ Á¿ ÁQ¿ ÁW¿ Áò¿ Á‚¿ Ë¿ Ë¿ Ëk¿ Ë∫¿ Ë¿¿ È
¿ ÈV¿ È£¿ ÈÌ¿ Í¿ Í!¿ Í2¿ ÍU¿ ÍV¿ Íb¿ Íß¿ Í“¿ Í‚¿ Îe¿ Îx¿ ÎÇ¿ Î÷¿ Ï<¿ Ï@¿ ÏB¿ ÏC¿ Ïí¿ Ïû¿ Ï¢¿ ÏÓ¿ Ì¿ Ì
¿ Ì¿ Ì¿ Ìh¿ Ìé¿ Ì«¿ Ó¿ Ó=¿ Óâ¿ Ó≥¿ Ô ¿ Ô3¿ Ôk¿ Ôó¿ Ô—¿ ¿ ¿ L¿ R¿ Ü¿ ÿ¿ Ò+¿ Òt¿ Òâ¿ Òü¿ Ò°¿ Ò¢¿ ÒÔ¿ Ú
¿ Ú¿ ÚJ¿ Úò¿ Úÿ¿ Ú‹¿ Û,¿ Û^¿ Ûb¿ Ûv¿ Ûz¿ Û…¿ Ù¿ Ù¿ Ù¿ Ù_¿ Ùv¿ Ùà¿ Ù§¿ Ù√¿ ÙÌ¿ ÙÒ¿ ı¿ ı¿ ı¿ ıT¿ ı∞¿ ı◊¿ ı˘¿ ˆM¿ ˆw¿ ˆÅ¿ ˆâ¿ ˆç¿ ˆù¿ ˆÿ¿ ˆﬁ¿ ˆÊ¿ ˆˆ¿ ˆ˙¿ ˜¿ ˜¿ ˜I¿ ˜ê¿ ˜◊¿ ¯¿ ¯G¿ ¯ï¿ ¯·¿ ˘¿ ˘W¿ ˘®¿ ˘¿ ˙.¿ ˙S¿ ˙T¿ ˙`¿ ˙¶¿ ˙ß¿ ˙Ì¿ ˚¿ ˚	¿ ˚O¿ ˚ü¿ ˚À¿ ˚—¿ ¸¿ ¸K¿ ¸à¿ ¸¢¿ ¸ø¿ ¸Ë¿ ¸Ï¿ ¸Ì¿ ˝>¿ ˝j¿ ˝p¿ ˝æ¿ ˝·¿ ˛¿ ˛¿ ˛R¿ ˛w¿ ˛¢¿ ˛«¿ ˛Œ¿ ˛Ë¿ ˇ¿ ˇ:¿ ˇ;¿ ˇØ¿ ˇÕ¿ ˇÎ¿ ¿ U¿ _¿ j¿ Ñ¿ ˙¿¿¿}¿Ì¿ˆ¿¿.¿ú¿ß¿…¿„¿\¿g¿n¿r¿s¿≈¿À¿¿N¿û¿Ì¿¿¿h¿≤¿¿T¿£¿©¿ı¿.¿{¿ô¿¶¿Ÿ¿⁄¿'¿?¿E¿ë¿‹¿‚¿Ú¿¯¿	H¿	W¿	d¿	é¿	ê¿	ë¿	‚¿	Ê¿
7¿
É¿
á¿
÷¿¿¿Y¿]¿q¿u¿¿¿ƒ¿–¿˛¿¿(¿E¿d¿é¿í¿´¿Ø¿·¿<¿}¿ï¿ù¿°¿±¿ı¿˚¿¿¿¿;¿?¿é¿·¿+¿s¿∑¿ª¿¿T¿s¿w¿≈¿¿b¿±¿¿-¿1¿P¿T¿û¿Ì¿˜¿˚¿¿¿c¿ó¿õ¿ß¿“¿¿¿¿C¿\¿w¿ò¿¥¿È¿¿&¿s¿Ü¿ó¿¶¿≥¿æ¿∆¿Ã¿‘¿‰¿Ë¿¸¿ ¿P¿ñ¿ö¿¶¿÷¿¿¿!¿L¿e¿Ä¿°¿∫¿÷¿¿)¿6¿A¿I¿O¿W¿g¿™¿Æ¿º¿¿¿¿6¿É¿∂¿Ó¿3¿|¿ò¿Ê¿¿H¿ô¿·¿¿C¿D¿P¿é¿è¿‡¿Ê¿7¿à¿◊¿ ¿3¿9¿â¿Ÿ¿%¿3¿@¿Ä¿Ç¿É¿—¿ ¿ ,¿ 0¿ >¿ B¿ ê¿ ≤¿ ¯¿!D¿!w¿!»¿"¿"L¿"M¿"õ¿"ß¿"≤¿"Ÿ¿"⁄¿#¿#k¿#á¿#ç¿#ﬁ¿$ ¿$j¿$ö¿$»¿$’¿$‡¿%¿%¿%g¿%∂¿%€¿%·¿&/¿&y¿&ƒ¿&Ù¿'#¿'0¿'â¿'ä¿'ÿ¿("¿(X¿(e¿(¨¿(Æ¿(Ø¿(ˇ¿)¿)]¿)Æ¿)ˆ¿*6¿*7¿*C¿*è¿*ë¿*í¿*Ê¿+4¿+y¿+}¿+«¿,¿,[¿,ù¿,Á¿-8¿-Ä¿-”¿-‘¿.¿.
¿.;¿.R¿.S¿._¿.π¿.ª¿.º¿/¿/\¿/¶¿/≤¿/∂¿/¿0@¿0â¿0◊¿1¿1B¿1F¿1T¿1X¿1ì¿1‡¿1Ô¿25¿2Ü¿2™¿2Û¿3¿3"¿3o¿3~¿3Õ¿3Ì¿4¿4¿4S¿4ú¿4√¿4·¿5*¿5d¿5q¿5{¿5É¿5ñ¿5—¿5’¿5÷¿6¿6¿6]¿6¢¿6¿6ˇ¿7¿7O¿7†¿7Ò¿88¿8>¿8L¿8Ñ¿8§¿8™¿8≈¿8ﬂ¿8È¿8Ô¿9¿9$¿9F¿9T¿9^¿9d¿9Ä¿9√¿9Ó¿9¯¿: ¿:
¿:¿:O¿:U¿:c¿:õ¿:ª¿:¡¿:‹¿:ˆ¿; ¿;¿;#¿;;¿;Ö¿;ƒ¿;ˆ¿<¿<¿<¿<0¿<|¿<∞¿<∫¿<¬¿<Ã¿<Î¿<Ï¿<¯¿=P¿=R¿=S¿=T¿=`¿=a¿=z¿=Ö¿=è¿=õ¿=¶¿=®¿=©¿=√¿=€¿>¿>¿>4¿>w¿>á¿>π¿>Ê¿?0¿?8¿?K¿?U¿?Å¿?©¿?¿¿?»¿?ﬂ¿@!¿@%¿@&¿@=¿@Q¿@ù¿@¥¿@æ¿@È¿@˘¿A¿A1¿A7¿A;¿A<¿At¿Aµ¿Aœ¿B¿BE¿BU¿Bw¿Bä¿Bî¿Bò¿Bô¿B∑¿BÕ¿B˜¿C¿CY¿CÄ¿Cú¿C†¿C°¿C¬¿Cÿ¿D¿D&¿DE¿DÜ¿Dä¿Dã¿D≥¿D…¿DŸ¿E¿E¿E"¿E5¿E9¿E;¿E<¿EÅ¿EÖ¿E≤¿E∂¿E˝¿F¿FI¿FJ¿Fá¿Fã¿F ¿G¿G¿Gc¿G¥¿H¿HR¿HÜ¿Hä¿H÷¿I$¿Io¿Is¿I¬¿J¿J`¿J∞¿K¿KQ¿Kü¿KÓ¿L:¿LÑ¿L∑¿Lª¿M
¿MU¿Mû¿MÓ¿N7¿N;¿NG¿NU¿N~¿NØ¿N∆¿N˘¿O¿O<¿O[¿OÜ¿O§¿O‡¿P¿P1¿Pd¿Pá¿P≤¿P◊¿P˛¿Q8¿Qf¿Qù¿Q…¿R¿R=¿Ru¿Rñ¿R¥¿R—¿RÏ¿S¿S¿S1¿SD¿SU¿Sd¿Sq¿S{¿SÑ¿Sä¿Sí¿Sñ¿SÊ¿T5¿TÇ¿T£¿Tß¿TÍ¿TÓ¿U<¿Uä¿U®¿Uˆ¿V¿V¿VV¿Vé¿Vß¿V®¿VÙ¿V˙¿WE¿Wy¿W ¿WÏ¿X<¿XV¿X\¿X≠¿XÓ¿Y¿Y ¿YX¿Yt¿Yu¿Yπ¿Z¿ZT¿Zp¿Zv¿Z¡¿[¿[R¿[°¿[Œ¿[‘¿\$¿\t¿\√¿]
¿]¿]"¿]n¿]ê¿]ñ¿]„¿^/¿^¿^•¿^…¿^ ¿_¿_¿_^¿_™¿_Û¿`¿`"¿`n¿`ê¿`ñ¿`Á¿a7¿aÑ¿a—¿a◊¿b$¿bp¿b¿¿bÊ¿b¯¿b˘¿c;¿c|¿cÇ¿c£¿c©¿cÛ¿dE¿dx¿d~¿d“¿e ¿eZ¿e[¿eØ¿f ¿fN¿fò¿fŸ¿fﬂ¿g*¿g<¿gB¿gä¿g÷¿h#¿hs¿h≈¿hÔ¿hı¿iE¿iî¿iÂ¿j2¿jf¿jl¿j∫¿k
¿k<¿kB¿kì¿kæ¿kƒ¿l¿l`¿l±¿l¸¿m!¿m'¿m`¿mß¿mÎ¿n¿ni¿nj¿nø¿o¿o¿o<¿oB¿oÇ¿oà¿o◊¿p¿p¿pc¿p≤¿pÏ¿q?¿qè¿q∫¿r¿r¿rh¿rî¿rö¿rÁ¿s8¿sÇ¿s“¿t¿tl¿tΩ¿u¿uY¿u_¿u´¿uˆ¿v/¿v5¿vá¿v”¿w!¿wt¿wz¿w∆¿wÁ¿x¿x ¿xq¿x¢¿x®¿x˘¿yJ¿yû¿yÒ¿z=¿zâ¿z≠¿z≥¿{ ¿{O¿{†¿{“¿{ÿ¿|$¿|o¿|®¿|Æ¿} ¿}L¿}ö¿}Á¿}Ì¿~¿~	¿~¿~o¿~y¿~ã¿~º¿~Ω¿¿@¿F¿û¿Í¿Ä¿Ä¿Äk¿Ä|¿Ä±¿Ä≤¿Å¿Å?¿ÅE¿Åñ¿ÅÁ¿Ç;¿Çä¿Ç⁄¿É'¿É^¿Éd¿É∞¿É˚¿Ñ4¿Ñ:¿Ñå¿Ñÿ¿Ö&¿Öz¿Öπ¿Ö∫¿Ü¿ÜZ¿Üß¿Üı¿á%¿á+¿á`¿áf¿áπ¿áø¿à¿à^¿à¨¿à˜¿â=¿â>¿âg¿âm¿â∏¿ä¿äV¿äÜ¿äå¿ä⁄¿ã&¿ã4¿ã:¿ãÖ¿ã—¿ã◊¿å(¿år¿å√¿ç¿ç-¿ç`¿ça¿ç§¿ç™¿ç˘¿éD¿éZ¿éí¿éì¿éÎ¿éÒ¿è?¿èE¿èU¿è[¿è≤¿ê%¿ê&¿ê}¿êÉ¿ê–¿ëB¿ëC¿ëí¿ë∑¿ëΩ¿í¿íe¿íf¿í∞¿íÀ¿í—¿ì¿ìT¿ìV¿ìW¿ìÑ¿ìà¿ì’¿î&¿îs¿îô¿îù¿îÈ¿ï)¿ïJ¿ïN¿ïö¿ïû¿ïÕ¿ñ¿ñ*¿ñ.¿ñB¿ñê¿ñ⁄¿ó¿ó"¿ón¿ó~¿óë¿óø¿ó≈¿ò¿ò]¿òß¿òı¿ô¿ôW¿ô®¿ô©¿ôÙ¿ö¿ö#¿ö$¿ög¿öh¿öú¿ö…¿ö ¿õ¿õE¿õK¿õö¿õ†¿õÌ¿ú¿ú*¿ú+¿ún¿út¿úº¿ù¿ù¿ù4¿ù:¿ùà¿ùø¿ù≈¿ù¿ùˆ¿û@¿ûè¿ûﬂ¿ü/¿üB¿ü_¿ü`¿ü¨¿üÊ¿†¿†.¿†Q¿†a¿†ç¿°¿°2¿°j¿°…¿¢¿¢;¿¢û¿¢…¿¢÷¿¢Î¿£I¿£ï¿£Ê¿£Û¿£ˇ¿§¿§¿§$¿§D¿§V¿§Ñ¿•9¿•^¿•ò¿•Î¿¶¿¶\¿¶©¿¶∏¿¶∆¿¶–¿¶Â¿¶Ò¿ß¿ß*¿ß0¿ßu¿ß†¿ßª¿ß¡¿ß‚¿®¿®¿®?¿®|¿®è¿®ô¿®ù¿®û¿®æ¿®¯¿®˘¿©/¿©5¿©`¿©å¿©´¿©–¿©—¿™!¿™C¿™I¿™ô¿™∫¿™‰¿´¿´)¿´9¿´Z¿´m¿´w¿´Å¿´ì¿´£¿´µ¿´ÿ¿´Ì¿´˘¿´ˇ¿¨&¿¨*¿¨+¿¨w¿¨√¿¨˘¿¨ˇ¿≠M¿≠ç¿≠ì¿≠‡¿Æ,¿Æ|¿Ææ¿ÆË¿ÆÓ¿Ø<¿Øã¿Øº¿Ø¬¿Ø˜¿Ø˝¿∞7¿∞=¿∞Ñ¿∞—¿±¿±,¿±Y¿±ö¿±Œ¿±‹¿±˘¿≤ ¿≤=¿≤M¿≤m¿≤Ã¿≤Ì¿≥
¿≥¿≥'¿≥@¿≥ù¿≥Ø¿≥ÿ¿¥¿¥4¿¥k¿¥ò¿¥À¿¥Ù¿µ¿µ¿µ ¿µ,¿µF¿µW¿µÅ¿µä¿µê¿µö¿µ≈¿µ„¿∂¿∂1¿∂E¿∂â¿∂»¿∂ˆ¿∑¿∑¿∑I¿∑W¿∑m¿∑Å¿∑ó¿∑ﬁ¿∏¿∏X¿∏Ü¿∏ü¿∏Ø¿∏π¿∏¡¿∏Î¿π¿πE¿πZ¿π}¿π¥¿π’¿π˚¿∫¿∫y¿∫µ¿ª
¿ª*¿ªè¿ªÈ¿ª˙¿º¿ºz¿º·¿ΩF¿Ωö¿Ω´¿Ω◊¿æ
¿æ#¿æ^¿æo¿æõ¿ø¿ø+¿øf¿øw¿øá¿øì¿ø™¿ø∏¿øÚ¿¿S¿¿i¿¿»¿¿·¿¿Ò¿¡¿¡<¿¡k¿¡x¿¡Ç¿¡ê¿¡≠¿¡ ¿¡Î¿¬,¿¬;¿¬N¿¬â¿¬»¿√¿√9¿√™¿√Ω¿ƒô¿ƒ®¿ƒµ¿ƒø¿ƒ˜¿≈¿≈,¿≈¿≈≠¿≈›¿∆¿∆L¿∆Ø¿«¿«k¿«Œ¿».¿»ä¿»≈¿»›¿»È¿»Û¿»˚¿…¿…ä¿…ƒ¿ ¿ u¿ Ô¿ ˝¿À¿À¿À(¿À8¿Àn¿Àî¿À∫¿À¬¿À‡¿Ã¿Ã7¿ÃR¿Ãq¿Ãy¿Ãó¿Ã©¿Ã…¿ÃÏ¿Õ¿Õ;¿ÕP¿Õ\¿Õb¿Õâ¿Õç¿Õé¿ÕÓ¿ÕÔ¿ŒX¿Œ√¿œ#¿œY¿œl¿œp¿œq¿œ†¿œÚ¿œˆ¿œ˜¿–D¿–E¿–ù¿–◊¿–Â¿—<¿—=¿—å¿—Æ¿—˛¿“¿“ ¿“x¿“≤¿“¿¿”G¿”H¿”ï¿”–¿‘¿‘¿‘T¿‘d¿‘Ç¿‘ü¿‘⁄¿‘Ì¿‘˜¿‘˚¿‘¸¿’8¿’H¿’y¿’°¿’ﬁ¿÷	¿÷V¿÷á¿÷è¿÷¢¿÷¨¿÷”¿÷◊¿÷ÿ¿◊¿◊&¿◊}¿◊•¿◊‚¿ÿ¿ÿZ¿ÿb¿ÿu¿ÿ¿ÿ´¿ÿ—¿ÿ’¿ÿ÷¿Ÿ'¿Ÿ7¿ŸU¿Ÿr¿Ÿπ¿ŸÛ¿⁄¿⁄¿⁄¿⁄¿⁄A¿⁄Q¿⁄õ¿⁄˝¿€9¿€§¿€∂¿€Ú¿‹>¿‹å¿‹ü¿‹ƒ¿‹ÿ¿›$¿›p¿›±¿›‡¿ﬁ-¿ﬁy¿ﬁ¬¿ﬁ˜¿ﬂ!¿ﬂG¿ﬂ¿ﬂø¿‡
¿‡,¿‡ê¿‡º¿‡Ë¿·K¿·^¿·p¿·Ö¿·≈¿‚¿‚2¿‚î¿‚Â¿„¿„u¿„à¿„ö¿„®¿„ı¿‰C¿‰ë¿‰∑¿‰·¿Â¿ÂG¿Âs¿ÂÖ¿Âì¿ÂΩ¿Â¯¿Ê#¿ÊO¿Êa¿Êo¿Êà¿Êõ¿Ê¬¿ÊŒ¿Ê⁄¿Ê‰¿Á¿Á#¿Á-¿Á1¿Á2¿Á\¿Ál¿Áú¿ÁÔ¿Ë3¿ËV¿ËÄ¿ËÆ¿Ë¿È'¿È]¿È†¿Í¿Í&¿ÍX¿Íb¿Íj¿Íë¿Í±¿Í¯¿ÎL¿ÎÉ¿ÎΩ¿Ï¿Ï\¿Ï´¿Ï¸¿Ì5¿Ì´¿Ìµ¿Ó1¿Ód¿Ól¿Ó¿Óâ¿Óç¿Óé¿Ó€¿Ó¿Óˆ¿Ô*¿Ô0¿ÔÅ¿Ôû¿Ô§¿ÔÙ¿!¿N¿f¿¿ﬂ¿Â¿Ô¿ÒB¿ÒT¿Òb¿Òê¿Òº¿Ú¿Úp¿ÚÆ¿Û ¿Ûh¿Û–¿Ûﬁ¿Ù¿ÙO¿Ù≠¿Ù‰¿ı,¿ıE¿ıp¿ıÇ¿ıí¿ıÀ¿ˆ
¿ˆ,¿ˆR¿ˆk¿ˆ÷¿ˆË¿ˆ˙¿˜q¿˜√¿¯/¿¯n¿¯æ¿¯◊¿˘
¿˘¿˘,¿˘i¿˘∞¿˘“¿˙ ¿˙¿˙ê¿˙¢¿˙¥¿˙‡¿˚!¿˚]¿˚¢¿˚È¿¸A¿¸â¿¸œ¿˝!¿˝n¿˝¡¿˛¿˛x¿˛∂¿ˇ¿ˇX¿ˇ¿ˇ°¿ ¿ à¿ „¿¿ä¿¿à¿¯¿k¿§¿ÿ¿=¿P¿b¿p¿|¿ê¿„¿Ì¿¿¿'¿u¿¿¿‡¿9¿I¿d¿É¿ã¿ë¿ï¿ñ¿‚¿1¿Ç¿°¿ß¿Û¿>¿W¿ì¿ô¿£¿«¿È¿	¿	8¿	H¿	c¿	Ç¿	ä¿	ê¿	î¿	ñ¿	ó¿	‰¿	¯¿	¸¿

¿
\¿
Ü¿
œ¿
Î¿
Ò¿8¿à¿∫¿ª¿«¿È¿6¿:¿<¿=¿W¿á¿à¿´¿»¿…¿¿;¿I¿O¿¿É¿Ö¿Ü¿œ¿”¿#¿t¿≈¿¿`¿w¿{¿…¿¿¿D¿H¿ô¿·¿1¿Å¿»¿¿b¿q¿º¿¿Z¿´¿˘¿I¿á¿‘¿$¿t¿¡¿¿?¿é¿◊¿"¿h¿π¿¿S¿°¿Ú¿¿d¿±¿¡¿¿<¿à¿“¿ÿ¿¿2¿P¿h¿i¿}¿Æ¿÷¿◊¿ˇ¿¿O¿ö¿”¿Ÿ¿(¿v¿ƒ¿¿¿f¿µ¿¿K¿Q¿õ¿›¿Î¿˜¿ C¿ ¿ Ä¿ –¿ ‚¿ Ë¿!9¿!â¿!°¿!æ¿!œ¿!–¿"¿"i¿"{¿"ã¿"≈¿#¿##¿#6¿#@¿#S¿#W¿#j¿#k¿#ñ¿#±¿#¬¿#›¿#Ì¿$
¿$¿$8¿$H¿$V¿$Z¿$[¿$¶¿$˚¿%P¿%ß¿%›¿&	¿&6¿&D¿&H¿&I¿&s¿&y¿&√¿'¿'^¿'™¿'˙¿(0¿(<¿(]¿(p¿(q¿(ü¿(•¿(Î¿);¿)W¿)s¿)É¿)√¿)÷¿)‡¿)ˆ¿)˙¿)˚¿*8¿*D¿*g¿*}¿*~¿*≥¿*˛¿+¿+%¿+t¿+¿¿+‡¿+Ê¿,5¿,Ö¿,ö¿,†¿,Ò¿-B¿-ç¿-›¿.&¿.s¿.ƒ¿.ˇ¿/¿/¿/*¿/0¿/L¿/y¿/≠¿/æ¿/À¿/·¿0$¿0<¿0a¿0g¿0ã¿0»¿0‚¿0Í¿1¿1¿1¿1;¿1X¿1v¿1ì¿1®¿1…¿1œ¿1·¿1Â¿1Ê¿2'¿2-¿2~¿2Œ¿2¸¿3¿39¿3[¿3¶¿3Ë¿3¯¿4+¿4R¿4a¿4á¿4è¿4ï¿4¶¿4π¿4Ω¿4æ¿4 ¿5$¿5g¿5ò¿5∆¿5‰¿5˜¿5ˇ¿6 ¿62¿6à¿6î¿6≈¿6Õ¿6Œ¿6Ó¿7G¿7T¿7|¿7π¿7˝¿8¿8¿8%¿8)¿8*¿8Å¿8÷¿8Û¿9¿9}¿9ò¿9ü¿9£¿9§¿9∞¿:$¿:g¿:k¿:l¿:x¿:Î¿;.¿;2¿;3¿;?¿;w¿;¬¿<¿< ¿<[¿<_¿<`¿<©¿<ø¿= ¿=¿=P¿=o¿=u¿=∆¿=Ô¿=ı¿>A¿>í¿>„¿?+¿?\¿?]¿?ô¿?ü¿?Ó¿?˛¿@¿@R¿@ü¿@Ï¿A!¿A'¿Aw¿Aï¿Aõ¿A´¿A±¿AÂ¿B¿Bn¿Bæ¿BÕ¿C!¿C"¿C[¿Cg¿Cõ¿C´¿C·¿Cˆ¿D,¿Do¿Dâ¿D⁄¿E*¿E~¿E™¿Eµ¿Eø¿E…¿EÂ¿EÈ¿EÍ¿F)¿F/¿F~¿FÕ¿F”¿G#¿G)¿G{¿GŒ¿G‘¿H#¿H]¿Hc¿H¥¿I¿IV¿I°¿I ¿I–¿J!¿J3¿J9¿Jà¿J÷¿K¿K¿KH¿KN¿Kü¿K¿LA¿L«¿LÕ¿M¿Mk¿MØ¿M˘¿NG¿Nå¿Ní¿N„¿N¿O¿O[¿Ox¿Oë¿O±¿Oƒ¿O ¿OÀ¿OÁ¿P ¿P%¿Pv¿P∆¿Q¿Qq¿Qæ¿Q«¿R¿Rw¿RÀ¿R·¿RÍ¿S9¿SÖ¿S÷¿T¿T1¿T{¿T«¿U¿U¿U'¿Uc¿U¨¿U˜¿V)¿VL¿Vz¿Vî¿VÁ¿W
¿W8¿Wr¿W”¿WÈ¿XC¿X\¿Xl¿Xä¿X≤¿X·¿XÓ¿X¯¿Y¿YQ¿Yr¿Yù¿Y±¿YË¿Yˇ¿Z¿Z'¿Z6¿ZV¿Z}¿Z«¿[¿[J¿[Ä¿[à¿[ï¿[›¿\+¿\\¿\ê¿\ñ¿\ó¿\ß¿\¿¿\Ò¿]¿]5¿]T¿]ì¿]õ¿]Æ¿]∏¿]π¿]Œ¿]“¿]”¿^¿^#¿^t¿^¿¿_¿_C¿_I¿_ô¿_Ω¿_√¿`¿`b¿`ô¿`Œ¿`‘¿a#¿aW¿ah¿aô¿a”¿aÔ¿b¿b^¿bx¿bé¿b£¿b”¿c
¿c$¿cp¿c∑¿cÎ¿d¿d¿d)¿dJ¿df¿dí¿dò¿d≤¿d–¿d‘¿d’¿e¿e)¿ef¿ej¿ek¿e£¿e©¿eÒ¿f@¿fx¿f~¿f∆¿f◊¿g¿g<¿gv¿gÇ¿g¥¿gŒ¿gÎ¿h
¿h#¿hS¿hZ¿h´¿h¸¿iM¿iò¿i¡¿i—¿j(¿j]¿jp¿jz¿jì¿jó¿jò¿j€¿j·¿k2¿kÉ¿k≤¿kø¿k˚¿l4¿lO¿lr¿lî¿l∏¿l„¿m	¿m¿m!¿m%¿m&¿mL¿mÖ¿m°¿mæ¿n ¿n¿n0¿n4¿n5¿n\¿nã¿n≠¿nÀ¿nÒ¿o¿o&¿o,¿o0¿o1¿oc¿oi¿o®¿o‚¿p2¿pf¿pl¿pó¿pµ¿pŸ¿p˚¿q¿q¿q¿q¿qn¿qt¿q≥¿qÌ¿r=¿rm¿rs¿r√¿r¿s¿s/¿sX¿s`¿su¿sy¿sz¿sø¿t¿th¿t∂¿u¿uT¿u™¿u‹¿uı¿v¿v>¿vQ¿va¿vë¿w	¿w¿w&¿wS¿wm¿w¿wù¿w◊¿x8¿xà¿x€¿y<¿y⁄¿zI¿zW¿za¿zª¿zÕ¿z‹¿zÁ¿z¸¿{¿{+¿{R¿{X¿{}¿{´¿{ø¿{√¿{ƒ¿|¿|0¿|6¿|¿| ¿|⁄¿|‡¿}.¿}}¿}Œ¿~¿~%¿~u¿~{¿~ ¿~˘¿¿$¿a¿Ä¿Å¿∑¿Ä¿Ä&¿Ä|¿Äë¿Äù¿Ä∑¿Ä€¿Å¿Å¿Å¿Å¿Å:¿ÅV¿Åû¿Åº¿ÅÊ¿Å˙¿Ç$¿Ç;¿ÇI¿Ç~¿Çœ¿Ç˘¿É¿É¿É%¿É]¿Ém¿Éì¿É¶¿É∞¿É”¿Ñ¿Ñ¿ÑJ¿Ñg¿Ñh¿Ñ}¿ÑÅ¿ÑÇ¿Ñ≤¿Ñÿ¿ÑË¿Ö¿Ö&¿ÖD¿Öê¿Ö£¿Ö≠¿Ö±¿Ö≤¿Öˇ¿Ü)¿Ü/¿Ü¿Ü–¿Üı¿Ü˚¿á;¿áA¿áé¿á‹¿à-¿à|¿à√¿à–¿à¯¿â¿â6¿âP¿âp¿â≈¿â’¿ä¿ä2¿äu¿ä}¿äê¿äö¿äû¿äü¿äÔ¿ã:¿ã?¿ãó¿ã—¿ãﬂ¿åD¿åE¿åî¿å–¿å÷¿ç#¿çB¿çH¿çñ¿çÊ¿é3¿éF¿éL¿éö¿éª¿é»¿éŸ¿é˝¿èI¿èì¿è·¿ê,¿ê{¿ê©¿êπ¿ê‚¿ë¿ë/¿ë9¿ë=¿ë>¿ë|¿ë∑¿ëÕ¿ë›¿í¿íP¿íc¿ím¿íè¿íØ¿í–¿ì	¿ì¿ì¿ìD¿ìá¿ìü¿ì‡¿î¿î¿î¿î\¿îb¿î≤¿ï¿ïL¿ïú¿ï¢¿ïÚ¿ï¯¿ñG¿ño¿ñÄ¿ñî¿ñœ¿ñÎ¿ó¿ó!¿óó¿ó«¿ò¿ò[¿òw¿ò†¿ò∫¿òÿ¿òË¿ô¿ô&¿ôE¿ôI¿ôJ¿ôê¿ôñ¿ôÊ¿ö7¿öÖ¿ö–¿õ!¿õ<¿õB¿õz¿õÄ¿õ–¿õ÷¿ú#¿úM¿ú^¿út¿ú≠¿ù¿ù)¿ùg¿ùß¿ù‘¿û%¿ûs¿û√¿ü¿ü`¿ü|¿üÇ¿ü†¿ü“¿ü÷¿ü◊¿†-¿†3¿†f¿†w¿†ì¿†Œ¿†“¿†”¿°¿° ¿°o¿°Ω¿¢¿¢V¿¢\¿¢´¿¢¡¿¢«¿£¿£b¿£ñ¿£ú¿£Ï¿£Ú¿§?¿§f¿§w¿§ä¿§≈¿•&¿•A¿•\¿•§¿•«¿•„¿¶¿¶¿¶a¿¶ï¿¶©¿¶√¿¶Ù¿¶¯¿¶˘¿ß¿ß*¿ß:¿ßs¿ß´¿ßÛ¿®¿®_¿®õ¿®„¿©3¿©Y¿©f¿©«¿©”¿©€¿©Ó¿©¯¿™¿™¿™¿™"¿™5¿™E¿™~¿™Œ¿™˝¿´5¿´u¿´ë¿´‚¿¨¿¨e¿¨r¿¨≈¿¨—¿¨Ÿ¿¨¸¿≠4¿≠m¿≠â¿≠€¿Æ+¿Æ|¿Æ…¿Ø¿Ø¿Ø3¿ØH¿Øò¿ØÍ¿∞>¿∞ê¿∞±¿∞æ¿∞◊¿±*¿±6¿±>¿±Q¿±[¿±ñ¿±¶¿±»¿≤ ¿≤D¿≤Y¿≤¨¿≥¿≥U¿≥®¿≥ﬁ¿≥Î¿¥>¿¥J¿¥R¿¥|¿¥¥¿¥Ù¿µ	¿µL¿µú¿µÈ¿∂/¿∂{¿∂ú¿∂©¿∂¸¿∑I¿∑U¿∑]¿∑Ö¿∑Ω¿∏¿∏+¿∏Ä¿∏”¿π$¿πU¿πb¿πµ¿∫¿∫¿∫¿∫@¿∫Z¿∫í¿∫Ù¿ª	¿ª[¿ªÆ¿ª˝¿ºO¿ºô¿º¶¿º˘¿ΩY¿Ωe¿Ωm¿Ωè¿Ω«¿æ.¿æC¿æù¿æ˙¿øT¿ø´¿ø—¿øﬁ¿¿1¿¿ë¿¿¶¿¡ ¿¡H¿¡U¿¡a¿¡i¿¡|¿¡Ü¿¡©¿¡…¿¡⁄¿¡ﬁ¿¡ﬂ¿¬¿¬9¿¬e¿¬f¿¬õ¿¬´¿¬‰¿√¿√m¿√â¿√⁄¿√Ò¿√˛¿ƒ¿ƒb¿ƒ¬¿≈¿≈¿≈¿≈"¿≈5¿≈?¿≈P¿≈T¿≈U¿≈a¿≈Ω¿≈€¿∆¿∆0¿∆_¿∆é¿∆í¿∆ì¿∆ü¿∆ˆ¿«/¿«ê¿«¨¿«Ú¿«¯¿» ¿»1¿»5¿»6¿»B¿»ù¿»÷¿…7¿…L¿…P¿…Q¿…§¿…¡¿…«¿ ¿ r¿ Ñ¿ ä¿ ö¿ Ì¿ ˙¿À¿ÀP¿ÀT¿ÀU¿Às¿À¨¿À‡¿À‰¿ÀÂ¿ÀÒ¿Ã*¿Ãc¿ÃÑ¿Ã≈¿ÃË¿Õ¿Õ¿Õ¿Õ¿Õ^¿Õó¿Õ∏¿Õ◊¿Œ¿Œ$¿ŒG¿ŒM¿Œô¿Œ√¿Œ«¿Œ»¿Œ‘¿œ¿œS¿œt¿œõ¿œ∫¿œ¯¿–¿–@¿–F¿–p¿–t¿–u¿–Å¿–¡¿–˙¿—¿—:¿—É¿—Æ¿——¿—◊¿—Ë¿—Ï¿—Ì¿—˘¿“@¿“y¿“ö¿“Ã¿“Ô¿“Û¿“Ù¿”,¿”2¿”à¿”Ÿ¿‘*¿‘W¿‘¶¿‘‡¿‘Ò¿’¿’r¿’∫¿’–¿’‘¿’’¿÷¿÷#¿÷X¿÷ê¿÷®¿÷Ó¿◊¿◊¿◊v¿◊ã¿◊ﬁ¿◊ˆ¿ÿ¿ÿ=¿ÿV¿ÿ™¿ÿ∑¿ÿ√¿ÿÀ¿ÿﬁ¿ÿË¿ÿ˘¿ÿ˝¿ÿ˛¿ŸE¿ŸK¿ŸÄ¿Ÿ´¿Ÿ÷¿Ÿ¿⁄#¿⁄J¿⁄e¿⁄k¿⁄Å¿⁄ú¿⁄ø¿⁄√¿⁄ƒ¿€¿€¿€j¿€ò¿€ƒ¿€ı¿‹¿‹-¿‹D¿‹_¿‹e¿‹w¿‹{¿‹|¿‹à¿‹¡¿‹¸¿› ¿›¿›5¿›A¿›ü¿›†¿›¨¿ﬁ¿ﬁ,¿ﬁ>¿ﬁQ¿ﬁe¿ﬁl¿ﬁp¿ﬁq¿ﬁ}¿ﬁ¬¿ﬁÌ¿ﬂ5¿ﬂm¿ﬂ¿¿ﬂ∆¿‡¿‡•¿‡”¿·¿·[¿·¶¿‚¿‚*¿‚ï¿‚õ¿‚ü¿‚†¿‚¨¿‚ﬁ¿„¿„B¿„q¿„y¿„é¿„í¿„ì¿„‹¿„¯¿‰¿‰¿‰]¿‰©¿‰∆¿‰«¿Â¿Â"¿Â#¿Âq¿Â¡¿Ê¿ÊM¿ÊÖ¿Ê≈¿Á¿Á9¿ÁJ¿ÁN¿ÁO¿Áù¿Áæ¿Áƒ¿Ë
¿ËQ¿Ëü¿Ë∑¿Ë—¿È¿È@¿ÈN¿Èi¿È¢¿È≤¿È’¿Í¿Í8¿Íw¿Íé¿Í∆¿Î¿Î^¿Î|¿ÎÍ¿ÏD¿Ïù¿Ïı¿ÌL¿Ì°¿Ì“¿Ì·¿ÓC¿ÓP¿Óá¿Ô(¿Ô]¿Ôg¿¿8¿r¿™¿Ò¿Ò$¿Òz¿Ò™¿Ò∑¿Ú¿Ú#¿Ú+¿Ú>¿ÚH¿ÚW¿Úe¿Úx¿Úõ¿Úü¿Ú†¿ÚÓ¿Û ¿Û¿ÛS¿Û°¿Û€¿Û˘¿Ù¿ÙF¿ÙÜ¿Ùî¿Ù§¿Ù‚¿ı¿ı-¿ıU¿ıw¿ıà¿ı≤¿ıº¿ıƒ¿ı◊¿ı·¿ˆ¿ˆ@¿ˆg¿ˆw¿ˆπ¿ˆÁ¿ˆ˙¿˜¿˜¿˜*¿˜a¿˜£¿˜∂¿˜¿¿˜’¿˜Ÿ¿˜⁄¿¯¿¯	¿¯P¿¯]¿¯v¿¯x¿¯y¿¯ø¿¯‚¿¯Ù¿˘¿˘:¿˘U¿˘c¿˘s¿˘Ö¿˘ó¿˘ú¿˘ù¿˘¥¿˘µ¿˘¡¿˙¿˙P¿˙~¿˙°¿˙Í¿˙¿˚¿˚"¿˚&¿˚(¿˚)¿˚u¿˚å¿˚ê¿˚ÿ¿˚‹¿˚Í¿˚Ó¿¸5¿¸S¿¸û¿¸Ì¿˝¿˝M¿˝N¿˝Ä¿˝Ñ¿˝–¿˛!¿˛m¿˛®¿˛¨¿˛ÿ¿˛‹¿˛¿ˇD¿ˇv¿ˇz¿ˇ∏¿ˇº¿ 	¿ ¿ ¿ +¿ /¿ z¿ ¿¿¿+¿^¿ò¿û¿Î¿8¿U¿[¿´¿˙¿#¿C¿j¿Æ¿Õ¿Œ¿¿¿`¿å¿“¿Ô¿¿¿A¿G¿ê¿◊¿¯¿˛¿O¿ú¿Ë¿9¿Ö¿ã¿Ÿ¿¿a¿∞¿˜¿˝¿	J¿	ç¿	ì¿	£¿	©¿	Ú¿
A¿
é¿
°¿
Ú¿¿R¿S¿ù¿∂¿∆¿-¿@¿J¿z¿Â¿È¿Í¿¿$¿G¿]¿∑¿¿]¿c¿w¿{¿|¿ö¿≤¿◊¿ÿ¿‰¿5¿6¿B¿á¿≤¿—¿¿#¿É¿á¿â¿ä¿€¿Ò¿ı¿1¿5¿C¿G¿ê¿’¿"¿a¿b¿≥¿Ω¿¡¿¿¿$¿(¿r¿∑¿¿U¿V¿ß¿∆¿ ¿¿S¿f¿j¿∏¿¿S¿û¿Á¿3¿7¿E¿I¿ì¿ÿ¿¿t¿u¿ß¿´¿Ô¿Û¿>¿Y¿]¿k¿o¿π¿¿O¿°¿¢¿”¿◊¿(¿e¿i¿í¿ƒ¿¿A¿B¿U¿V¿w¿É¿≥¿¥¿¿¿Ò¿¿/¿h¿{¿ó¿õ¿ú¿≥¿¿;¿?¿@¿è¿ﬂ¿¿$¿r¿£¿Ø¿‹¿ˆ¿ 4¿ G¿ Q¿ c¿ Ñ¿ ô¿ •¿ º¿ Œ¿ ¿!¿!¿!?¿!X¿!x¿!õ¿!∫¿!Ë¿!ı¿"¿"?¿"[¿"ñ¿"£¿"Æ¿"∑¿"«¿#¿#`¿#v¿#∑¿#Ω¿#«¿#¯¿$¿$/¿$R¿$q¿$ü¿$¨¿$Ω¿$ˆ¿%¿%M¿%Z¿%e¿%n¿%ù¿%£¿%ß¿%®¿%¯¿&D¿&X¿&e¿&w¿&x¿&Ñ¿&≥¿&À¿&„¿&Á¿&Ë¿&Ù¿'¿'5¿'H¿'f¿'j¿'l¿'m¿'≤¿'‰¿(.¿(j¿(k¿(w¿(¥¿(µ¿(¡¿(Ï¿)	¿)*¿)=¿)L¿)P¿)R¿)S¿)ó¿)»¿*¿*;¿*b¿*z¿*ä¿*∫¿*Ú¿+^¿+z¿+Õ¿,¿,i¿,v¿,Ç¿,ä¿,ù¿,ß¿,À¿,Ê¿,Ú¿-¿-^¿-≠¿-«¿-Œ¿-Í¿.-¿.1¿.2¿.>¿.e¿.f¿.¨¿.≤¿.˚¿/K¿/r¿/†¿/¡¿/¬¿/Œ¿/‰¿0'¿0A¿0G¿0_¿0c¿0d¿0p¿0á¿0 ¿0‘¿1¿1\¿1n¿1£¿1›¿2.¿2ì¿2™¿3¿3P¿3_¿3m¿3w¿3å¿3ò¿3®¿3·¿3Á¿3˜¿47¿4J¿4T¿4w¿4á¿4¡¿4‘¿4ﬁ¿4˜¿4˚¿4¸¿5¿5"¿5D¿5i¿5è¿5ï¿5±¿5µ¿5∂¿5¬¿5Ï¿6	¿6*¿6_¿6£¿6Û¿7¿7¿7D¿7N¿7Ü¿7Â¿7˜¿8,¿8f¿8Ω¿9)¿9@¿9ü¿9Ï¿9˚¿:	¿:¿:(¿:4¿:D¿:}¿:É¿:í¿:ñ¿:ó¿:£¿:∑¿:Õ¿:„¿;4¿;Ç¿;π¿<¿</¿<3¿<4¿<@¿<V¿<n¿<Ü¿<ä¿<ã¿<ó¿<™¿<ø¿<‘¿<‰¿=%¿=:¿=p¿=ƒ¿=ﬁ¿>C¿>é¿>ô¿>£¿>≠¿>»¿?¿?F¿?Y¿?]¿?^¿?j¿?Ω¿?€¿?Î¿@&¿@i¿@°¿AJ¿Af¿A«¿B ¿Br¿B«¿BË¿Bı¿C
¿Cz¿CÏ¿DF¿DS¿D_¿Dg¿D™¿D‚¿Eo¿Eã¿EÂ¿F8¿Fá¿F√¿G¿G+¿G@¿Gñ¿GÎ¿H+¿HÑ¿Hô¿H¶¿Hª¿Hı¿IP¿Iü¿IÚ¿J,¿J9¿JE¿JM¿J`¿Jj¿J√¿J«¿J»¿K¿Kf¿Kµ¿KÓ¿KÙ¿LC¿L|¿LÃ¿L˝¿M$¿M%¿M1¿MR¿Mu¿Mò¿Mú¿Mù¿M©¿M˛¿N)¿N;¿NN¿Nb¿Nx¿N¿NÉ¿NÑ¿Nê¿N’¿O ¿Oe¿Oi¿Ok¿Ol¿O≠¿O‰¿P¿PA¿PB¿PN¿PÅ¿PÇ¿Pé¿Pµ¿PÓ¿Q
¿Q+¿QH¿Qi¿QÅ¿Qî¿Q£¿Qß¿Q®¿Q·¿QÁ¿R7¿RÇ¿R°¿RÆ¿R‡¿R˛¿S¿S¿SO¿S^¿Sd¿S´¿SÚ¿Sˇ¿T6¿T8¿T9¿T¿Tƒ¿U¿UO¿UP¿UÜ¿U∑¿U·¿V
¿V¿VR¿Vá¿Vè¿Vï¿V¿¿Vƒ¿V≈¿W¿WZ¿Wq¿Ww¿Wƒ¿X¿X@¿XF¿Xö¿X‰¿Y4¿YJ¿YP¿Y°¿YÎ¿Z8¿Z>¿Zã¿Z⁄¿Z‡¿[¿[]¿[c¿[®¿[Æ¿[˛¿\N¿\û¿\Ì¿]=¿]â¿]ª¿]¯¿^¿^G¿^ç¿^Æ¿^≤¿^≥¿^ø¿^ı¿_*¿_.¿_0¿_1¿_w¿_•¿_Ô¿`+¿`,¿`u¿`v¿`Ç¿`†¿`Ÿ¿a.¿aO¿aû¿aß¿a‰¿b¿b¿b¿b(¿bD¿bT¿bw¿bä¿bî¿b≤¿b∂¿b∑¿bı¿c¿c¿cY¿cê¿c◊¿d¿d¿dV¿dè¿d®¿dÆ¿dˇ¿e¿e¿e¿ed¿e†¿eÍ¿e¸¿fE¿fë¿f·¿g¿g¿gC¿gf¿gj¿gk¿gµ¿gª¿g˚¿h2¿h¿hÕ¿h”¿i¿ib¿ih¿iπ¿iø¿iœ¿i’¿j¿jZ¿j¶¿j∏¿k¿kR¿k¢¿k»¿k’¿l¿l4¿l8¿l9¿lè¿lï¿lﬁ¿m-¿mF¿mL¿mô¿m‚¿mı¿m˚¿nB¿nÅ¿ná¿nó¿nù¿nÈ¿n˚¿oE¿oé¿o⁄¿p*¿pP¿p]¿pú¿p¬¿p∆¿p«¿p˚¿q¿q=¿qC¿qÅ¿q»¿qŒ¿qﬁ¿q‰¿r-¿ri¿rµ¿r«¿s¿sa¿sá¿sî¿sÂ¿t¿t¿t¿t[¿tî¿tö¿t“¿tÿ¿u¿u'¿uS¿uñ¿u∂¿u∫¿uª¿v¿v;¿vA¿vå¿v€¿w%¿w+¿w;¿wA¿wè¿w–¿w‹¿x¿xN¿xÜ¿xò¿x ¿x˘¿y.¿yU¿yv¿yÇ¿yÆ¿yÂ¿z¿z¿z¿z¿z¿zg¿zk¿zπ¿{¿{ ¿{$¿{J¿{N¿{ü¿{£¿{—¿{’¿|¿|¿|p¿|â¿|ç¿|€¿|Á¿|Î¿}6¿}O¿}S¿}§¿}Ù¿~:¿~ã¿~¿¿~ƒ¿¿]¿¿É¿§¿®¿Ì¿Ä7¿Ä~¿Äƒ¿ÄÛ¿Ä˜¿Å¿Å6¿Å:¿ÅJ¿Åè¿Åì¿Åß¿ÅŒ¿Å÷¿Å„¿ÅÈ¿ÅÒ¿Åı¿Ç¿Ç¿ÇP¿Çâ¿Çç¿ÇŸ¿É'¿Ét¿É¬¿É˙¿É˛¿ÑQ¿Ñ†¿ÑÎ¿Ö;¿Öâ¿Ö¡¿Ö≈¿Ü¿ÜZ¿Üt¿Üx¿Üí¿Üñ¿Ü‡¿á-¿áz¿áò¿áú¿áÎ¿à;¿àã¿à€¿â¿â"¿âr¿âø¿ä¿ä`¿ä®¿ä¯¿ã!¿ã%¿ãq¿ãø¿å¿å[¿å_¿å§¿å®¿åÛ¿çC¿çd¿çh¿ç§¿ç®¿ç˜¿éH¿éñ¿é»¿è
¿èZ¿èó¿èõ¿è·¿ê/¿êx¿ê|¿ê…¿ë¿ëV¿ëZ¿ëÅ¿ëÖ¿ë‘¿í"¿íq¿íø¿í—¿í’¿í¿íÙ¿ì?¿ìÑ¿ìœ¿î¿îf¿îµ¿î¬¿î∆¿ï¿ïa¿ïî¿ïò¿ïÊ¿ñ6¿ñÖ¿ñ¬¿ñÁ¿ñÎ¿ó¿ó¿óW¿ó§¿óÛ¿ò¿ò¿òd¿ò¥¿ò‘¿òÿ¿òı¿ò˘¿ôD¿ôï¿ô‚¿ö&¿ö[¿ö•¿öÁ¿öË¿õ¿õ$¿õh¿õt¿õñ¿õ”¿õÓ¿õÚ¿ú¿ú¿ú3¿ú?¿úo¿úp¿ú•¿ú¶¿ú‚¿ù¿ùD¿ùg¿ùî¿ùò¿ùô¿ù›¿ù˛¿û)¿ûl¿û£¿ûæ¿ûÕ¿û’¿û¯¿û˛¿ü¿ü>¿üS¿ü[¿üß¿†	¿†-¿†r¿†´¿†Û¿†˝¿°#¿°+¿°P¿°x¿°Ü¿°’¿¢"¿¢R¿¢å¿¢Ã¿£A¿£ê¿§I¿§¬¿•r¿•˛¿¶¿¶2¿¶î¿¶û¿¶¶¿¶π¿¶√¿¶÷¿¶⁄¿¶€¿¶Á¿ß¿ß:¿ßJ¿ßi¿ß|¿ßÜ¿ß”¿ßˇ¿®¿®/¿®B¿®L¿®\¿®É¿®ñ¿®†¿®æ¿®ﬂ¿®Û¿®˜¿®¯¿©¿©<¿©Y¿©z¿©ä¿©±¿©ƒ¿©Œ¿™
¿™¿™¿™8¿™H¿™~¿™ë¿™õ¿™ü¿™†¿™¨¿™∆¿´¿´¿´¿´%¿´@¿´P¿´o¿´Ç¿´å¿´◊¿´Á¿¨¿¨¿¨$¿¨8¿¨<¿¨=¿¨|¿¨Ç¿¨À¿≠¿≠G¿≠M¿≠ú¿≠È¿Æ:¿ÆÖ¿Æ–¿Ø!¿ØV¿Ø\¿Ø≠¿Ø˛¿∞O¿∞ù¿∞Ì¿±>¿±ç¿±—¿≤"¿≤Q¿≤W¿≤ê¿≤›¿≥+¿≥w¿≥æ¿¥¿¥<¿¥B¿¥ï¿¥‡¿µ,¿µ{¿µΩ¿∂¿∂Y¿∂§¿∂ı¿∑2¿∑~¿∑Ã¿∏¿∏5¿∏B¿∏“¿∏Û¿π¿πS¿πT¿πç¿πÈ¿πÔ¿π¿∫1¿∫L¿∫k¿∫™¿∫∞¿∫±¿∫Û¿ªB¿ªè¿ª”¿ª‘¿º¿º#¿ºE¿ºä¿ºØ¿ºÚ¿Ω9¿Ω:¿Ωå¿Ω€¿Ωı¿æC¿æè¿æ‹¿æ˝¿øA¿øi¿ø≠¿ø‡¿¿¿¿G¿¿ì¿¿”¿¡¿¡,¿¡-¿¡I¿¡e¿¡ò¿¡Ã¿¡Õ¿¬¿¬s¿¬t¿¬ê¿¬ë¿¬¥¿√¿√j¿√•¿√˝¿ƒJ¿ƒY¿ƒ√¿≈¿≈5¿≈U¿≈p¿≈ã¿≈ë¿≈í¿≈∂¿∆¿∆o¿∆≠¿«¿«R¿«a¿«¿«ù¿«£¿«§¿«‹¿»"¿»K¿»f¿»ë¿»≈¿… ¿…z¿…ö¿…≈¿ ¿ ¿ :¿ D¿ a¿ i¿ o¿ p¿ ñ¿ »¿ ·¿À¿À9¿Àa¿À|¿À©¿ÀÀ¿Ã¿Ã.¿Ã{¿Ãß¿Ãº¿Õ¿Õ!¿Õ/¿Õ;¿ÕE¿ÕM¿Õù¿Œ¿ŒK¿Œª¿ŒÈ¿œ	¿œ$¿œ*¿œ+¿œP¿œÖ¿œ∫¿–¿–@¿–p¿–q¿–ó¿–Ù¿—0¿—l¿—∞¿—Î¿“'¿“ë¿“’¿”E¿”s¿”ì¿”Æ¿”…¿”œ¿”–¿‘¿‘P¿‘ê¿‘‡¿’¿’¿’¿’a¿’y¿’}¿’~¿’ä¿’†¿’∏¿’ƒ¿’‚¿÷/¿÷[¿÷b¿÷f¿÷g¿÷s¿÷Ü¿÷í¿÷∂¿◊¿◊¿◊&¿◊m¿◊Ç¿◊é¿◊¨¿◊ˆ¿ÿ"¿ÿ)¿ÿ]¿ÿ{¿ÿï¿ÿô¿ÿö¿ÿ‰¿Ÿ¿Ÿ¿Ÿ!¿Ÿi¿Ÿå¿Ÿ∆¿⁄¿⁄M¿⁄Ä¿⁄›¿€'¿€6¿€D¿€N¿€r¿€¬¿‹¿‹b¿‹©¿›¿›¿›!¿›+¿›D¿›z¿›~¿›¿›ã¿›±¿›”¿›Û¿ﬁ¿ﬁ0¿ﬁÜ¿ﬁä¿ﬁã¿ﬁó¿ﬁƒ¿ﬁˆ¿ﬂ¿ﬂR¿ﬂ§¿‡¿‡&¿‡y¿‡}¿‡~¿‡ä¿‡®¿‡ÿ¿·)¿·T¿·Z¿·l¿·p¿·q¿·µ¿·ª¿‚	¿‚W¿‚¶¿‚˜¿„/¿„D¿„Q¿„®¿„∏¿„Ó¿‰D¿‰_¿‰ß¿‰÷¿‰·¿‰˚¿ÂB¿Âû¿Â∏¿Â√¿Â÷¿Ê¿Ês¿Ê…¿Á¿ÁR¿Áz¿ÁÖ¿Áè¿Áô¿Áù¿Áû¿ÁË¿ÁÓ¿Ë8¿Ë>¿Ëâ¿Ëè¿Ëﬁ¿È-¿ÈÅ¿È”¿Í%¿Íx¿Í…¿Î¿Î¿ÎÅ¿Îë¿Î«¿Ï¿Ï6¿ÏÇ¿Ï±¿Ïº¿Ï÷¿Ì¿Ìu¿Ìè¿Ìö¿Ì≠¿ÌÒ¿ÓF¿Óö¿Óﬁ¿Ô#¿ÔK¿ÔV¿Ô`¿Ôj¿Ôn¿Ôo¿Ô°¿Ôß¿Ôı¿"¿/¿Ü¿ñ¿Ã¿Ò"¿Ò=¿Òã¿Ò∫¿Ò≈¿Òﬂ¿Ú&¿ÚÇ¿Úú¿Úß¿Ú∫¿Û ¿ÛW¿Û≠¿ÛÒ¿Ù6¿Ù^¿Ùi¿Ùs¿Ù}¿ÙÅ¿ÙÇ¿Ùé¿Ù”¿Ù˛¿ıh¿ıl¿ın¿ıo¿ıò¿ıú¿ı‚¿ˆ¿ˆ[¿ˆÑ¿ˆ ¿ˆÀ¿˜¿˜:¿˜@¿˜q¿˜w¿˜∞¿¯¿¯Q¿¯ï¿¯∑¿˘¿˘/¿˘C¿˘G¿˘H¿˘T¿˘Ö¿˘µ¿˘—¿˘Ó¿˙¿˙¿˙¿˙¿˙c¿˙ü¿˙È¿˚3¿˚4¿˚@¿˚d¿˚w¿˚ï¿˚ô¿˚ö¿˚¶¿˚È¿˚¸¿¸ ¿¸¿¸¿¸b¿¸u¿¸y¿¸z¿¸Ü¿¸…¿¸‹¿¸‡¿¸·¿¸Ì¿˝¿˝J¿˝N¿˝P¿˝Q¿˝§¿˝®¿˝√¿˝«¿˛¿˛Z¿˛ò¿˛€¿ˇ%¿ˇ}¿ˇ~¿ˇë¿ˇí¿ˇû¿ˇÕ¿ˇÂ¿ˇ˝¿ ¿ ¿ ¿ 2¿ O¿ b¿ Ä¿ Ñ¿ Ö¿ ë¿ ¬¿ ‰¿=¿A¿B¿N¿á¿§¿≈¿¿"¿#¿/¿r¿Û¿¿A¿a¿ê¿î¿ï¿°¿ˆ¿	¿¿¿¿]¿ﬁ¿¯¿!¿@¿o¿s¿u¿v¿»¿Ã¿¿`¿∞¿Ò¿ı¿¿¿S¿z¿»¿ı¿7¿Å¿∆¿	¿	#¿	$¿	0¿	ñ¿
	¿
¿
¿
B¿
H¿
ï¿
´¿
∏¿
Õ¿:¿;¿[¿´¿œ¿¿¿¿k¿Ë¿¿]¿å¿ê¿ë¿ù¿¿ã¿µ¿˜¿&¿*¿+¿7¿z¿˜¿!¿A¿p¿t¿u¿Å¿∞¿›¿¿$¿*¿.¿/¿;¿_¿Ü¿∑¿⁄¿¯¿¸¿˝¿=¿M¿x¿ö¿π¿˙¿t¿ç¿‰¿"¿3¿û¿›¿Ì¿˙¿¿¿ ¿*¿;¿?¿@¿L¿â¿œ¿¿ ¿$¿%¿1¿b¿Ñ¿Ú¿p¿å¿ø¿@¿^¿~¿Ñ¿û¿¢¿£¿Ø¿Á¿¿r¿ì¿Ô¿h¿à¿å¿é¿è¿ﬁ¿‚¿2¿F¿[¿ò¿∂¿∑¿‡¿˘¿˙¿¿?¿A¿B¿m¿à¿ú¿≥¿·¿Ê¿!¿;¿M¿m¿É¿≥¿∏¿›¿Ô¿Ò¿Ú¿&¿L¿P¿ò¿ﬁ¿-¿t¿ç¿ë¿ü¿£¿Ú¿ D¿ O¿ w¿ ¬¿ Ô¿ ¿!<¿!W¿!h¿!i¿!¢¿!µ¿!∂¿!¬¿!Â¿"¿"#¿"C¿"c¿"Ñ¿"à¿"â¿"ï¿"∆¿"»¿"…¿#¿#3¿#X¿#á¿#à¿#π¿#∫¿#∆¿$ ¿$¿$¿$D¿$F¿$G¿$j¿$Å¿$Ç¿$é¿$«¿$…¿$ ¿%#¿%4¿%Å¿%Ó¿%    
Ä•  Ä∫  Ä‘  ÄÓ  Å  ÅB  ÅY  Ån  Åã  Å™  Å–Å˘ÇgÇiÇíÇÎÇÌÉÉOÉQÉzÉüÉ°É ÉÊÉËÑÑU &á*á  á" á(á2       áoÑà≈ÅO/// A key that takes its identity from the object used as its value.
///
/// Used to tie the identity of a widget to the identity of an object used to
/// generate that widget.
///
/// See also:
///
///  * [Key], the base class for all keys.
///  * The discussion at [Widget.key] for more information about how widgets use
///    keys. à‰g â5â>H/// Creates a key that uses [identical] on [value] for its [operator==].â?
âE   âOWâ°A/// The object whose identity is used by this key's [operator==]. äeRäy   äeäfâ´Ä∂â≈  â»â–  â´â¨äªÄ≈äŒ   äªäº ãÑéììÜá‡/// A key that is unique across the entire app.
///
/// Global keys uniquely identify elements. Global keys provide access to other
/// objects that are associated with those elements, such as [BuildContext].
/// For [StatefulWidget]s, global keys also provide access to [State].
///
/// Widgets that have global keys reparent their subtrees when they are moved
/// from one location in the tree to another location in the tree. In order to
/// reparent its subtree, a widget must arrive at its new location in the tree
/// in the same animation frame in which it was removed from its old location in
/// the tree.
///
/// Reparenting an [Element] using a global key is relatively expensive, as
/// this operation will trigger a call to [State.deactivate] on the associated
/// [State] and all of its descendants; then force all widgets that depends
/// on an [InheritedWidget] to rebuild.
///
/// If you don't need any of the features listed above, consider using a [Key],
/// [ValueKey], [ObjectKey], or [UniqueKey] instead.
///
/// You cannot simultaneously include two widgets in the tree with the same
/// global key. Attempting to do so will assert at runtime.
///
/// ## Pitfalls
///
/// GlobalKeys should not be re-created on every build. They should usually be
/// long-lived objects owned by a [State] object, for example.
///
/// Creating a new GlobalKey on every build will throw away the state of the
/// subtree associated with the old key and create a new fresh subtree for the
/// new key. Besides harming performance, this can also cause unexpected
/// behavior in widgets in the subtree. For example, a [GestureDetector] in the
/// subtree will be unable to track ongoing gestures since it will be recreated
/// on each build.
///
/// Instead, a good practice is to let a State object own the GlobalKey, and
/// instantiate it outside the build method, such as in [State.initState].
///
/// See also:
///
///  * The discussion at [Widget.key] for more information about how widgets use
///    keys.ìêìêì¡Å îìîúÄø/// Creates a [LabeledGlobalKey], which is a [GlobalKey] with a label used for
/// debugging.
///
/// The label is purely for debugging and not used for comparing the identity
/// of the key.îüî®   î‹Ä¡ï~ïïäÄä/// Creates a global key without a label.
///
/// Used by subclasses because the factory constructor shadows the implicit
/// constructor. ïèïîïïïöïõ ï°]ïÆ    ñÄ‰ñƒÄß/// The build context in which the widget with this key builds.
///
/// The current context is null if there is no widget in the tree that matches
/// this global key.   ñÍÄ„ó§Ä•/// The widget in the tree that currently has this global key.
///
/// The current widget is null if there is no widget in the tree that matches
/// this global key.   ó—ÇDôÅ!/// The [State] for the widget in the tree that currently has this global key.
///
/// The current state is null if (1) there is no widget in the tree that
/// matches this global key, (2) that widget is not a [StatefulWidget], or the
/// associated [State] object is not a subtype of `T`.    ìeìföÉö”Ä°/// A global key with a debugging label.
///
/// The debug label is useful for documentation and for debugging. The label
/// does not affect the key's identity.ö‰ö‰õÄ¸ õ·õÒf/// Creates a global key with a debugging label.
///
/// The label does not affect the key's identity.õÚõ¯  úúúúúúú,   ú<ÄˆúO   ú<ú=öªöºù6á’†¥Ée/// A global key that takes its identity from the object used as its value.
///
/// Used to tie the identity of a widget to the identity of an object used to
/// generate that widget.
///
/// If the object is not private, then it is possible that collisions will occur
/// where independent widgets will reuse the same object as their
/// [GlobalObjectKey] value in a different part of the tree, leading to a global
/// key conflict. To avoid this problem, create a private [GlobalObjectKey]
/// subclass, as in:
///
/// ```dart
/// class _MyKey extends GlobalObjectKey {
///   const _MyKey(Object value) : super(value);
/// }
/// ```
///
/// Since the [runtimeType] of the key is part of its identity, this will
/// prevent clashes with other [GlobalObjectKey]s even if they have the same
/// value.
///
/// Any [GlobalObjectKey] created for the same value will match.†ƒ†ƒ†˛Ää °V°eO/// Creates a global key that uses [identical] on [value] for its [operator==].°f
°l  °t°y°z°Ö°Ü°åV°›A/// The object whose identity is used by this key's [operator==]. ¢™8¢æ   ¢™¢´°ÁÄø¢  ¢¢  °Á°Ë¢ÊÇ#¢˘   ¢Ê¢Á†ú†ù•îô¨8á/// Describes the configuration for an [Element].
///
/// Widgets are the central class hierarchy in the Flutter framework. A widget
/// is an immutable description of part of a user interface. Widgets can be
/// inflated into elements, which manage the underlying render tree.
///
/// Widgets themselves have no mutable state (all their fields must be final).
/// If you wish to associate mutable state with a widget, consider using a
/// [StatefulWidget], which creates a [State] object (via
/// [StatefulWidget.createState]) whenever it is inflated into an element and
/// incorporated into the tree.
///
/// A given widget can be included in the tree zero or more times. In particular
/// a given widget can be placed in the tree multiple times. Each time a widget
/// is placed in the tree, it is inflated into an [Element], which means a
/// widget that is incorporated into the tree multiple times will be inflated
/// multiple times.
///
/// The [key] property controls how one widget replaces another widget in the
/// tree. If the [runtimeType] and [key] properties of the two widgets are
/// [operator==], respectively, then the new widget replaces the old widget by
/// updating the underlying element (i.e., by calling [Element.update] with the
/// new widget). Otherwise, the old element is removed from the tree, the new
/// widget is inflated into an element, and the new element is inserted into the
/// tree.
///
/// See also:
///
///  * [StatefulWidget] and [State], for widgets that can build differently
///    several times over their lifetime.
///  * [InheritedWidget], for widgets that introduce ambient state that can
///    be read by descendant widgets.
///  * [StatelessWidget], for widgets that always build the same way given a
///    particular configuration and ambient state. ¨^C ¨å¨í%/// Initializes [key] for subclasses.¨ï¨õ   ¨•Ñ_±Ñ$/// Controls how one widget replaces another widget in the tree.
///
/// If the [runtimeType] and [key] properties of the two widgets are
/// [operator==], respectively, then the new widget replaces the old widget by
/// updating the underlying element (i.e., by calling [Element.update] with the
/// new widget). Otherwise, the old element is removed from the tree, the new
/// widget is inflated into an element, and the new element is inserted into the
/// tree.
///
/// In addition, using a [GlobalKey] as the widget's [key] allows the element
/// to be moved around the tree (changing parent) without losing state. When a
/// new widget is found (its key and type do not match a previous widget in
/// the same location), but there was a widget with that same global key
/// elsewhere in the tree in the previous frame, then that widget's element is
/// moved to the new location.
///
/// Generally, a widget that is the only child of another widget does not need
/// an explicit key.
///
/// See also:
///
///  * The discussions at [Key] and [GlobalKey]. ¥∂=¥ÿ   ¥∂¥∑¥¬¥√±	Å»≤¡Åâ/// Inflates this configuration to a concrete instance.
///
/// A given widget can be included in the tree zero or more times. In particular
/// a given widget can be placed in the tree multiple times. Each time a widget
/// is placed in the tree, it is inflated into an [Element], which means a
/// widget that is incorporated into the tree multiple times will be inflated
/// multiple times.  ≤°≤¢≤Æ≤Ø≤’Äƒ≥0/// A short, textual description of this widget.  ≥≥	≥ùÄ∆≥Æ  ≥¬&≥ﬂ  ≥ù≥û¥gK¥è  ¥í¥ö  ¥g¥h¥s¥t¥˜Ç≈∑$Ç/// Whether the `newWidget` can be used to update an [Element] that currently
/// has the `oldWidget` as its configuration.
///
/// An element that uses a given widget as its configuration can be updated to
/// use another widget as its configuration if, and only if, the two widgets
/// have [runtimeType] and [key] properties that are [operator==].
///
/// If the widgets have no key (their key is null), then they are considered a
/// match if they have the same type, even if their children are completely
/// different. ∑.∑6  ∑@∑H   πÄòπ  π-π5   ¨¨π®ûü¿ N˛ïF/// A widget that does not require mutable state.
///
/// A stateless widget is a widget that describes part of the user interface by
/// building a constellation of other widgets that describe the user interface
/// more concretely. The building process continues recursively until the
/// description of the user interface is fully concrete (e.g., consists
/// entirely of [RenderObjectWidget]s, which describe concrete [RenderObject]s).
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=wE7khGHVkYY}
///
/// Stateless widget are useful when the part of the user interface you are
/// describing does not depend on anything other than the configuration
/// information in the object itself and the [BuildContext] in which the widget
/// is inflated. For compositions that can change dynamically, e.g. due to
/// having an internal clock-driven state, or depending on some system state,
/// consider using [StatefulWidget].
///
/// ## Performance considerations
///
/// The [build] method of a stateless widget is typically only called in three
/// situations: the first time the widget is inserted in the tree, when the
/// widget's parent changes its configuration, and when an [InheritedWidget] it
/// depends on changes.
///
/// If a widget's parent will regularly change the widget's configuration, or if
/// it depends on inherited widgets that frequently change, then it is important
/// to optimize the performance of the [build] method to maintain a fluid
/// rendering performance.
///
/// There are several techniques one can use to minimize the impact of
/// rebuilding a stateless widget:
///
///  * Minimize the number of nodes transitively created by the build method and
///    any widgets it creates. For example, instead of an elaborate arrangement
///    of [Row]s, [Column]s, [Padding]s, and [SizedBox]es to position a single
///    child in a particularly fancy manner, consider using just an [Align] or a
///    [CustomSingleChildLayout]. Instead of an intricate layering of multiple
///    [Container]s and with [Decoration]s to draw just the right graphical
///    effect, consider a single [CustomPaint] widget.
///
///  * Use `const` widgets where possible, and provide a `const` constructor for
///    the widget so that users of the widget can also do so.
///
///  * Consider refactoring the stateless widget into a stateful widget so that
///    it can use some of the techniques described at [StatefulWidget], such as
///    caching common parts of subtrees and using [GlobalKey]s when changing the
///    tree structure.
///
///  * If the widget is likely to get rebuilt frequently due to the use of
///    [InheritedWidget]s, consider refactoring the stateless widget into
///    multiple widgets, with the parts of the tree that change being pushed to
///    the leaves. For example instead of building a tree with four widgets, the
///    inner-most widget depending on the [Theme], consider factoring out the
///    part of the build function that builds the inner-most widget into its own
///    widget, so that only the inner-most widget needs to be rebuilt when the
///    theme changes.
/// {@template flutter.flutter.widgets.framework.prefer_const_over_helper}
///  * When trying to create a reusable piece of UI, prefer using a widget
///    rather than a helper method. For example, if there was a function used to
///    build a widget, a [State.setState] call would require Flutter to entirely
///    rebuild the returned wrapping widget. If a [Widget] was used instead,
///    Flutter would be able to efficiently re-render only those parts that
///    really need to be updated. Even better, if the created widget is `const`,
///    Flutter would short-circuit most of the rebuild work.
/// {@endtemplate}
///
/// This video gives more explainations on why `const` constructors are important
/// and why a [Widget] is better than a helper method.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=IOyq-eTRhvo}
///
/// {@tool snippet}
///
/// The following is a skeleton of a stateless widget subclass called `GreenFrog`.
///
/// Normally, widgets have more constructor arguments, each of which corresponds
/// to a `final` property.
///
/// ```dart
/// class GreenFrog extends StatelessWidget {
///   const GreenFrog({ Key? key }) : super(key: key);
///
///   @override
///   Widget build(BuildContext context) {
///     return Container(color: const Color(0xFF2DBD3A));
///   }
/// }
/// ```
/// {@end-tool}
///
/// {@tool snippet}
///
/// This next example shows the more generic widget `Frog` which can be given
/// a color and a child:
///
/// ```dart
/// class Frog extends StatelessWidget {
///   const Frog({
///     Key? key,
///     this.color = const Color(0xFF2DBD3A),
///     this.child,
///   }) : super(key: key);
///
///   final Color color;
///   final Widget? child;
///
///   @override
///   Widget build(BuildContext context) {
///     return Container(color: color, child: child);
///   }
/// }
/// ```
/// {@end-tool}
///
/// By convention, widget constructors only use named arguments. Also by
/// convention, the first argument is [key], and the last argument is `child`,
/// `children`, or the equivalent.
///
/// See also:
///
///  * [StatefulWidget] and [State], for widgets that can build differently
///    several times over their lifetime.
///  * [InheritedWidget], for widgets that introduce ambient state that can
///    be read by descendant widgets. ¿ O!^ ¿ OO¿ O^%/// Initializes [key] for subclasses.¿ Oa¿ Og  ¿ Oo¿ Ot¿ O}¿ Ox¿ Ou¿ Oz  ¿ OÉÄ€¿ P4Äç/// Creates a [StatelessElement] to manage this widget's location in the tree.
///
/// It is uncommon for subclasses to override this method.  ¿ P¿ P¿ Pbá„¿ X)áf/// Describes the part of the user interface represented by this widget.
///
/// The framework calls this method when this widget is inserted into the tree
/// in a given [BuildContext] and when the dependencies of this widget change
/// (e.g., an [InheritedWidget] referenced by this widget changes). This
/// method can potentially be called in every frame and should not have any side
/// effects beyond building a widget.
///
/// The framework replaces the subtree below this widget with the widget
/// returned by this method, either by updating the existing subtree or by
/// removing the subtree and inflating a new subtree, depending on whether the
/// widget returned by this method can update the root of the existing
/// subtree, as determined by calling [Widget.canUpdate].
///
/// Typically implementations return a newly created constellation of widgets
/// that are configured with information from this widget's constructor and
/// from the given [BuildContext].
///
/// The given [BuildContext] contains information about the location in the
/// tree at which this widget is being built. For example, the context
/// provides the set of inherited widgets for this location in the tree. A
/// given widget might be built with multiple different [BuildContext]
/// arguments over time if the widget is moved around the tree or if the
/// widget is inserted into the tree in multiple places at once.
///
/// The implementation of this method must only depend on:
///
/// * the fields of the widget, which themselves must not change over time,
///   and
/// * any ambient state obtained from the `context` using
///   [BuildContext.dependOnInheritedWidgetOfExactType].
///
/// If a widget's [build] method is to depend on anything else, use a
/// [StatefulWidget] instead.
///
/// See also:
///
///  * [StatelessWidget], which contains the discussion on performance considerations. ¿ X/¿ X=  ¿ X¿ X ¿ XI®u¿ {≈£l/// A widget that has mutable state.
///
/// State is information that (1) can be read synchronously when the widget is
/// built and (2) might change during the lifetime of the widget. It is the
/// responsibility of the widget implementer to ensure that the [State] is
/// promptly notified when such state changes, using [State.setState].
///
/// A stateful widget is a widget that describes part of the user interface by
/// building a constellation of other widgets that describe the user interface
/// more concretely. The building process continues recursively until the
/// description of the user interface is fully concrete (e.g., consists
/// entirely of [RenderObjectWidget]s, which describe concrete [RenderObject]s).
///
/// Stateful widgets are useful when the part of the user interface you are
/// describing can change dynamically, e.g. due to having an internal
/// clock-driven state, or depending on some system state. For compositions that
/// depend only on the configuration information in the object itself and the
/// [BuildContext] in which the widget is inflated, consider using
/// [StatelessWidget].
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=AqCMFXEmf3w}
///
/// [StatefulWidget] instances themselves are immutable and store their mutable
/// state either in separate [State] objects that are created by the
/// [createState] method, or in objects to which that [State] subscribes, for
/// example [Stream] or [ChangeNotifier] objects, to which references are stored
/// in final fields on the [StatefulWidget] itself.
///
/// The framework calls [createState] whenever it inflates a
/// [StatefulWidget], which means that multiple [State] objects might be
/// associated with the same [StatefulWidget] if that widget has been inserted
/// into the tree in multiple places. Similarly, if a [StatefulWidget] is
/// removed from the tree and later inserted in to the tree again, the framework
/// will call [createState] again to create a fresh [State] object, simplifying
/// the lifecycle of [State] objects.
///
/// A [StatefulWidget] keeps the same [State] object when moving from one
/// location in the tree to another if its creator used a [GlobalKey] for its
/// [key]. Because a widget with a [GlobalKey] can be used in at most one
/// location in the tree, a widget that uses a [GlobalKey] has at most one
/// associated element. The framework takes advantage of this property when
/// moving a widget with a global key from one location in the tree to another
/// by grafting the (unique) subtree associated with that widget from the old
/// location to the new location (instead of recreating the subtree at the new
/// location). The [State] objects associated with [StatefulWidget] are grafted
/// along with the rest of the subtree, which means the [State] object is reused
/// (instead of being recreated) in the new location. However, in order to be
/// eligible for grafting, the widget must be inserted into the new location in
/// the same animation frame in which it was removed from the old location.
///
/// ## Performance considerations
///
/// There are two primary categories of [StatefulWidget]s.
///
/// The first is one which allocates resources in [State.initState] and disposes
/// of them in [State.dispose], but which does not depend on [InheritedWidget]s
/// or call [State.setState]. Such widgets are commonly used at the root of an
/// application or page, and communicate with subwidgets via [ChangeNotifier]s,
/// [Stream]s, or other such objects. Stateful widgets following such a pattern
/// are relatively cheap (in terms of CPU and GPU cycles), because they are
/// built once then never update. They can, therefore, have somewhat complicated
/// and deep build methods.
///
/// The second category is widgets that use [State.setState] or depend on
/// [InheritedWidget]s. These will typically rebuild many times during the
/// application's lifetime, and it is therefore important to minimize the impact
/// of rebuilding such a widget. (They may also use [State.initState] or
/// [State.didChangeDependencies] and allocate resources, but the important part
/// is that they rebuild.)
///
/// There are several techniques one can use to minimize the impact of
/// rebuilding a stateful widget:
///
///  * Push the state to the leaves. For example, if your page has a ticking
///    clock, rather than putting the state at the top of the page and
///    rebuilding the entire page each time the clock ticks, create a dedicated
///    clock widget that only updates itself.
///
///  * Minimize the number of nodes transitively created by the build method and
///    any widgets it creates. Ideally, a stateful widget would only create a
///    single widget, and that widget would be a [RenderObjectWidget].
///    (Obviously this isn't always practical, but the closer a widget gets to
///    this ideal, the more efficient it will be.)
///
///  * If a subtree does not change, cache the widget that represents that
///    subtree and re-use it each time it can be used. To do this, simply assign
///    a widget to a `final` state variable and re-use it in the build method. It
///    is massively more efficient for a widget to be re-used than for a new (but
///    identically-configured) widget to be created. Another caching stragegy
///    consists in extracting the mutable part of the widget into a [StatefulWidget]
///    which accepts a child parameter.
///
///  * Use `const` widgets where possible. (This is equivalent to caching a
///    widget and re-using it.)
///
///  * Avoid changing the depth of any created subtrees or changing the type of
///    any widgets in the subtree. For example, rather than returning either the
///    child or the child wrapped in an [IgnorePointer], always wrap the child
///    widget in an [IgnorePointer] and control the [IgnorePointer.ignoring]
///    property. This is because changing the depth of the subtree requires
///    rebuilding, laying out, and painting the entire subtree, whereas just
///    changing the property will require the least possible change to the
///    render tree (in the case of [IgnorePointer], for example, no layout or
///    repaint is necessary at all).
///
///  * If the depth must be changed for some reason, consider wrapping the
///    common parts of the subtrees in widgets that have a [GlobalKey] that
///    remains consistent for the life of the stateful widget. (The
///    [KeyedSubtree] widget may be useful for this purpose if no other widget
///    can conveniently be assigned the key.)
///
/// {@macro flutter.flutter.widgets.framework.prefer_const_over_helper}
///
/// This video gives more explainations on why `const` constructors are important
/// and why a [Widget] is better than a helper method.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=IOyq-eTRhvo}
///
/// {@tool snippet}
///
/// This is a skeleton of a stateful widget subclass called `YellowBird`.
///
/// In this example, the [State] has no actual state. State is normally
/// represented as private member fields. Also, normally widgets have more
/// constructor arguments, each of which corresponds to a `final` property.
///
/// ```dart
/// class YellowBird extends StatefulWidget {
///   const YellowBird({ Key? key }) : super(key: key);
///
///   @override
///   State<YellowBird> createState() => _YellowBirdState();
/// }
///
/// class _YellowBirdState extends State<YellowBird> {
///   @override
///   Widget build(BuildContext context) {
///     return Container(color: const Color(0xFFFFE306));
///   }
/// }
/// ```
/// {@end-tool}
/// {@tool snippet}
///
/// This example shows the more generic widget `Bird` which can be given a
/// color and a child, and which has some internal state with a method that
/// can be called to mutate it:
///
/// ```dart
/// class Bird extends StatefulWidget {
///   const Bird({
///     Key? key,
///     this.color = const Color(0xFFFFE306),
///     this.child,
///   }) : super(key: key);
///
///   final Color color;
///   final Widget? child;
///
///   @override
///   State<Bird> createState() => _BirdState();
/// }
///
/// class _BirdState extends State<Bird> {
///   double _size = 1.0;
///
///   void grow() {
///     setState(() { _size += 0.1; });
///   }
///
///   @override
///   Widget build(BuildContext context) {
///     return Container(
///       color: widget.color,
///       transform: Matrix4.diagonal3Values(_size, _size, 1.0),
///       child: widget.child,
///     );
///   }
/// }
/// ```
/// {@end-tool}
///
/// By convention, widget constructors only use named arguments. Also by
/// convention, the first argument is [key], and the last argument is `child`,
/// `children`, or the equivalent.
///
/// See also:
///
///  * [State], where the logic behind a [StatefulWidget] is hosted.
///  * [StatelessWidget], for widgets that always build the same way given a
///    particular configuration and ambient state.
///  * [InheritedWidget], for widgets that introduce ambient state that can
///    be read by descendant widgets. ¿ {Á] ¿ |¿ |#%/// Initializes [key] for subclasses.¿ |&¿ |,  ¿ |4¿ |9¿ |B¿ |=¿ |:¿ |?  ¿ |HÄÿ¿ |˜Äå/// Creates a [StatefulElement] to manage this widget's location in the tree.
///
/// It is uncommon for subclasses to override this method.  ¿ |€¿ |‹¿ }$ÉZ¿ ÄpÉ/// Creates the mutable state for this widget at a given location in the tree.
///
/// Subclasses should override this method to return a newly created
/// instance of their associated [State] subclass:
///
/// ```dart
/// @override
/// State<MyWidget> createState() => _MyWidgetState();
/// ```
///
/// The framework can call this method multiple times over the lifetime of
/// a [StatefulWidget]. For example, if the widget is inserted into the tree
/// in multiple locations, the framework will create a separate [State] object
/// for each location. Similarly, if the widget is removed from the tree and
/// later inserted into the tree again, the framework will call [createState]
/// again to create a fresh [State] object, simplifying the lifecycle of
/// [State] objects.  ¿ ÄR¿ ÄS¿ Ä_¿ Ä` ¿ É}¿ hƒ¿ öPñ±/// The logic and internal state for a [StatefulWidget].
///
/// State is information that (1) can be read synchronously when the widget is
/// built and (2) might change during the lifetime of the widget. It is the
/// responsibility of the widget implementer to ensure that the [State] is
/// promptly notified when such state changes, using [State.setState].
///
/// [State] objects are created by the framework by calling the
/// [StatefulWidget.createState] method when inflating a [StatefulWidget] to
/// insert it into the tree. Because a given [StatefulWidget] instance can be
/// inflated multiple times (e.g., the widget is incorporated into the tree in
/// multiple places at once), there might be more than one [State] object
/// associated with a given [StatefulWidget] instance. Similarly, if a
/// [StatefulWidget] is removed from the tree and later inserted in to the tree
/// again, the framework will call [StatefulWidget.createState] again to create
/// a fresh [State] object, simplifying the lifecycle of [State] objects.
///
/// [State] objects have the following lifecycle:
///
///  * The framework creates a [State] object by calling
///    [StatefulWidget.createState].
///  * The newly created [State] object is associated with a [BuildContext].
///    This association is permanent: the [State] object will never change its
///    [BuildContext]. However, the [BuildContext] itself can be moved around
///    the tree along with its subtree. At this point, the [State] object is
///    considered [mounted].
///  * The framework calls [initState]. Subclasses of [State] should override
///    [initState] to perform one-time initialization that depends on the
///    [BuildContext] or the widget, which are available as the [context] and
///    [widget] properties, respectively, when the [initState] method is
///    called.
///  * The framework calls [didChangeDependencies]. Subclasses of [State] should
///    override [didChangeDependencies] to perform initialization involving
///    [InheritedWidget]s. If [BuildContext.dependOnInheritedWidgetOfExactType] is
///    called, the [didChangeDependencies] method will be called again if the
///    inherited widgets subsequently change or if the widget moves in the tree.
///  * At this point, the [State] object is fully initialized and the framework
///    might call its [build] method any number of times to obtain a
///    description of the user interface for this subtree. [State] objects can
///    spontaneously request to rebuild their subtree by callings their
///    [setState] method, which indicates that some of their internal state
///    has changed in a way that might impact the user interface in this
///    subtree.
///  * During this time, a parent widget might rebuild and request that this
///    location in the tree update to display a new widget with the same
///    [runtimeType] and [Widget.key]. When this happens, the framework will
///    update the [widget] property to refer to the new widget and then call the
///    [didUpdateWidget] method with the previous widget as an argument. [State]
///    objects should override [didUpdateWidget] to respond to changes in their
///    associated widget (e.g., to start implicit animations). The framework
///    always calls [build] after calling [didUpdateWidget], which means any
///    calls to [setState] in [didUpdateWidget] are redundant.
///  * During development, if a hot reload occurs (whether initiated from the
///    command line `flutter` tool by pressing `r`, or from an IDE), the
///    [reassemble] method is called. This provides an opportunity to
///    reinitialize any data that was prepared in the [initState] method.
///  * If the subtree containing the [State] object is removed from the tree
///    (e.g., because the parent built a widget with a different [runtimeType]
///    or [Widget.key]), the framework calls the [deactivate] method. Subclasses
///    should override this method to clean up any links between this object
///    and other elements in the tree (e.g. if you have provided an ancestor
///    with a pointer to a descendant's [RenderObject]).
///  * At this point, the framework might reinsert this subtree into another
///    part of the tree. If that happens, the framework will ensure that it
///    calls [build] to give the [State] object a chance to adapt to its new
///    location in the tree. If the framework does reinsert this subtree, it
///    will do so before the end of the animation frame in which the subtree was
///    removed from the tree. For this reason, [State] objects can defer
///    releasing most resources until the framework calls their [dispose]
///    method.
///  * If the framework does not reinsert this subtree by the end of the current
///    animation frame, the framework will call [dispose], which indicates that
///    this [State] object will never build again. Subclasses should override
///    this method to release any resources retained by this object (e.g.,
///    stop any active animations).
///  * After the framework calls [dispose], the [State] object is considered
///    unmounted and the [mounted] property is false. It is an error to call
///    [setState] at this point. This stage of the lifecycle is terminal: there
///    is no way to remount a [State] object that has been disposed.
///
/// See also:
///
///  * [StatefulWidget], where the current configuration of a [State] is hosted,
///    and whose documentation has sample code for [State].
///  * [StatelessWidget], for widgets that always build the same way given a
///    particular configuration and ambient state.
///  * [InheritedWidget], for widgets that introduce ambient state that can
///    be read by descendant widgets.
///  * [Widget], for an overview of widgets in general.¿ öV¿ öV ¿ ú≠
¿ ú∞  ¿ úºÅ ¿ ùÆÄŸ/// The current stage in the lifecycle for this state object.
///
/// This field is used by the framework when asserts are enabled to verify
/// that [State] objects move through their lifecycle in an orderly fashion.¿ ù≈¿ ù‘¿ ù’¿ ¢I¿ ¢Z  ¿ öàÇ"¿ úóÅˆ/// The current configuration.
///
/// A [State] object's configuration is the corresponding [StatefulWidget]
/// instance. This property is initialized by the framework before calling
/// [initState]. If the parent updates this location in the tree to a new
/// widget with the same [runtimeType] and [Widget.key] as the current
/// configuration, the framework will update this property to refer to the new
/// widget and then call [didUpdateWidget], passing the old configuration as
/// an argument.   ¿ ûìÉ≥¿ †ßÅÓ/// The location in the tree where this widget builds.
///
/// The framework associates [State] objects with a [BuildContext] after
/// creating them with [StatefulWidget.createState] and before calling
/// [initState]. The association is permanent: the [State] object will never
/// change its [BuildContext]. However, the [BuildContext] itself can be moved
/// around the tree.
///
/// After calling [dispose], the framework severs the [State] object's
/// connection with the [BuildContext].   ¿ ¢gÅ˘¿ §DÅ¡/// Whether this [State] object is currently in a tree.
///
/// After creating a [State] object and before calling [initState], the
/// framework "mounts" the [State] object by associating it with a
/// [BuildContext]. The [State] object remains mounted until the framework
/// calls [dispose], after which time the framework will never ask the [State]
/// object to [build] again.
///
/// It is an error to call [setState] unless [mounted] is true.   ¿ ù·ÄÆ¿ û]r/// Verifies that the [State] that was created is one that expects to be
/// created for that particular [Widget]. ¿ ûq¿ ûy   ¿ §dÜ<¿ ™RÖå/// Called when this object is inserted into the tree.
///
/// The framework will call this method exactly once for each [State] object
/// it creates.
///
/// Override this method to perform initialization that depends on the
/// location at which this object was inserted into the tree (i.e., [context])
/// or on the widget used to configure this object (i.e., [widget]).
///
/// {@template flutter.widgets.State.initState}
/// If a [State]'s [build] method depends on an object that can itself
/// change state, for example a [ChangeNotifier] or [Stream], or some
/// other object to which one can subscribe to receive notifications, then
/// be sure to subscribe and unsubscribe properly in [initState],
/// [didUpdateWidget], and [dispose]:
///
///  * In [initState], subscribe to the object.
///  * In [didUpdateWidget] unsubscribe from the old object and subscribe
///    to the new one if the updated widget configuration requires
///    replacing the object.
///  * In [dispose], unsubscribe from the object.
///
/// {@endtemplate}
///
/// You cannot use [BuildContext.dependOnInheritedWidgetOfExactType] from this
/// method. However, [didChangeDependencies] will be called immediately
/// following this method, and [BuildContext.dependOnInheritedWidgetOfExactType] can
/// be used there.
///
/// Implementations of this method should start with a call to the inherited
/// method, as in `super.initState()`.  ¿ ™/¿ ™0¿ ™<¿ ™=¿ ™§É∂¿ Æ0ÉD/// Called whenever the widget configuration changes.
///
/// If the parent widget rebuilds and request that this location in the tree
/// update to display a new widget with the same [runtimeType] and
/// [Widget.key], the framework will update the [widget] property of this
/// [State] object to refer to the new widget and then call this method
/// with the previous widget as an argument.
///
/// Override this method to respond when the [widget] changes (e.g., to start
/// implicit animations).
///
/// The framework always calls [build] after calling [didUpdateWidget], which
/// means any calls to [setState] in [didUpdateWidget] are redundant.
///
/// {@macro flutter.widgets.State.initState}
///
/// Implementations of this method should start with a call to the inherited
/// method, as in `super.didUpdateWidget(oldWidget)`. ¿ Æ@¿ ÆM  ¿ Æ¿ Æ¿ Æ¿ Æ¿ Æ^ÅË¿ ∞6Åû/// {@macro flutter.widgets.Element.reassemble}
///
/// In addition to this method being invoked, it is guaranteed that the
/// [build] method will be invoked when a reassemble is signaled. Most
/// widgets therefore do not need to do anything in the [reassemble] method.
///
/// See also:
///
///  * [Element.reassemble]
///  * [BindingBase.reassembleApplication]
///  * [Image], which uses this to reload images.  ¿ ∞¿ ∞¿ ∞ ¿ ∞!¿ ∞Jíî¿ ∑æá/// Notify the framework that the internal state of this object has changed.
///
/// Whenever you change the internal state of a [State] object, make the
/// change in a function that you pass to [setState]:
///
/// ```dart
/// setState(() { _myState = newValue; });
/// ```
///
/// The provided callback is immediately called synchronously. It must not
/// return a future (the callback cannot be `async`), since then it would be
/// unclear when the state was actually being set.
///
/// Calling [setState] notifies the framework that the internal state of this
/// object has changed in a way that might impact the user interface in this
/// subtree, which causes the framework to schedule a [build] for this [State]
/// object.
///
/// If you just change the state directly without calling [setState], the
/// framework might not schedule a [build] and the user interface for this
/// subtree might not be updated to reflect the new state.
///
/// Generally it is recommended that the `setState` method only be used to
/// wrap the actual changes to the state, not any computation that might be
/// associated with the change. For example, here a value used by the [build]
/// function is incremented, and then the change is written to disk, but only
/// the increment is wrapped in the `setState`:
///
/// ```dart
/// Future<void> _incrementCounter() async {
///   setState(() {
///     _counter++;
///   });
///   Directory directory = await getApplicationDocumentsDirectory();
///   final String dirName = directory.path;
///   await File('$dir/counter.txt').writeAsString('$_counter');
/// }
/// ```
///
/// It is an error to call this method after the framework calls [dispose].
/// You can determine whether it is legal to call this method by checking
/// whether the [mounted] property is true. ¿ ∑«¿ ∑’  ¿ ∑¨¿ ∑≠¿ ¬‚ÖÓ¿ »¿ÖÜ/// Called when this object is removed from the tree.
///
/// The framework calls this method whenever it removes this [State] object
/// from the tree. In some cases, the framework will reinsert the [State]
/// object into another part of the tree (e.g., if the subtree containing this
/// [State] object is grafted from one location in the tree to another due to
/// the use of a [GlobalKey]). If that happens, the framework will call
/// [activate] to give the [State] object a chance to reacquire any resources
/// that it released in [deactivate]. It will then also call [build] to give
/// the [State] object a chance to adapt to its new location in the tree. If
/// the framework does reinsert this subtree, it will do so before the end of
/// the animation frame in which the subtree was removed from the tree. For
/// this reason, [State] objects can defer releasing most resources until the
/// framework calls their [dispose] method.
///
/// Subclasses should override this method to clean up any links between
/// this object and other elements in the tree (e.g. if you have provided an
/// ancestor with a pointer to a descendant's [RenderObject]).
///
/// Implementations of this method should end with a call to the inherited
/// method, as in `super.deactivate()`.
///
/// See also:
///
///  * [dispose], which is called after [deactivate] if the widget is removed
///    from the tree permanently.  ¿ »ù¿ »û¿ »™¿ »´¿ »‘Ü©¿ œoÜ;/// Called when this object is reinserted into the tree after having been
/// removed via [deactivate].
///
/// In most cases, after a [State] object has been deactivated, it is _not_
/// reinserted into the tree, and its [dispose] method will be called to
/// signal that it is ready to be garbage collected.
///
/// In some cases, however, after a [State] object has been deactivated, the
/// framework will reinsert it into another part of the tree (e.g., if the
/// subtree containing this [State] object is grafted from one location in
/// the tree to another due to the use of a [GlobalKey]). If that happens,
/// the framework will call [activate] to give the [State] object a chance to
/// reacquire any resources that it released in [deactivate]. It will then
/// also call [build] to give the object a chance to adapt to its new
/// location in the tree. If the framework does reinsert this subtree, it
/// will do so before the end of the animation frame in which the subtree was
/// removed from the tree. For this reason, [State] objects can defer
/// releasing most resources until the framework calls their [dispose] method.
///
/// The framework does not call this method the first time a [State] object
/// is inserted into the tree. Instead, the framework calls [initState] in
/// that situation.
///
/// Implementations of this method should start with a call to the inherited
/// method, as in `super.activate()`.
///
/// See also:
///
///  * [Element.activate], the corresponding method when an element
///    transitions from the "inactive" to the "active" lifecycle state.  ¿ œL¿ œM¿ œY¿ œZ¿ œÅÑ0¿ ”É9/// Called when this object is removed from the tree permanently.
///
/// The framework calls this method when this [State] object will never
/// build again. After the framework calls [dispose], the [State] object is
/// considered unmounted and the [mounted] property is false. It is an error
/// to call [setState] at this point. This stage of the lifecycle is terminal:
/// there is no way to remount a [State] object that has been disposed.
///
/// Subclasses should override this method to release any resources retained
/// by this object (e.g., stop any active animations).
///
/// {@macro flutter.widgets.State.initState}
///
/// Implementations of this method should end with a call to the inherited
/// method, as in `super.dispose()`.
///
/// See also:
///
///  * [deactivate], which is called prior to [dispose].  ¿ “·¿ “‚¿ “Ó¿ “Ô¿ ”µì[¿ ÊÙí\/// Describes the part of the user interface represented by this widget.
///
/// The framework calls this method in a number of different situations. For
/// example:
///
///  * After calling [initState].
///  * After calling [didUpdateWidget].
///  * After receiving a call to [setState].
///  * After a dependency of this [State] object changes (e.g., an
///    [InheritedWidget] referenced by the previous [build] changes).
///  * After calling [deactivate] and then reinserting the [State] object into
///    the tree at another location.
///
/// This method can potentially be called in every frame and should not have
/// any side effects beyond building a widget.
///
/// The framework replaces the subtree below this widget with the widget
/// returned by this method, either by updating the existing subtree or by
/// removing the subtree and inflating a new subtree, depending on whether the
/// widget returned by this method can update the root of the existing
/// subtree, as determined by calling [Widget.canUpdate].
///
/// Typically implementations return a newly created constellation of widgets
/// that are configured with information from this widget's constructor, the
/// given [BuildContext], and the internal state of this [State] object.
///
/// The given [BuildContext] contains information about the location in the
/// tree at which this widget is being built. For example, the context
/// provides the set of inherited widgets for this location in the tree. The
/// [BuildContext] argument is always the same as the [context] property of
/// this [State] object and will remain the same for the lifetime of this
/// object. The [BuildContext] argument is provided redundantly here so that
/// this method matches the signature for a [WidgetBuilder].
///
/// ## Design discussion
///
/// ### Why is the [build] method on [State], and not [StatefulWidget]?
///
/// Putting a `Widget build(BuildContext context)` method on [State] rather
/// than putting a `Widget build(BuildContext context, State state)` method
/// on [StatefulWidget] gives developers more flexibility when subclassing
/// [StatefulWidget].
///
/// For example, [AnimatedWidget] is a subclass of [StatefulWidget] that
/// introduces an abstract `Widget build(BuildContext context)` method for its
/// subclasses to implement. If [StatefulWidget] already had a [build] method
/// that took a [State] argument, [AnimatedWidget] would be forced to provide
/// its [State] object to subclasses even though its [State] object is an
/// internal implementation detail of [AnimatedWidget].
///
/// Conceptually, [StatelessWidget] could also be implemented as a subclass of
/// [StatefulWidget] in a similar manner. If the [build] method were on
/// [StatefulWidget] rather than [State], that would not be possible anymore.
///
/// Putting the [build] function on [State] rather than [StatefulWidget] also
/// helps avoid a category of bugs related to closures implicitly capturing
/// `this`. If you defined a closure in a [build] function on a
/// [StatefulWidget], that closure would implicitly capture `this`, which is
/// the current widget instance, and would have the (immutable) fields of that
/// instance in scope:
///
/// ```dart
/// class MyButton extends StatefulWidget {
///   ...
///   final Color color;
///
///   @override
///   Widget build(BuildContext context, MyButtonState state) {
///     ... () { print("color: $color"); } ...
///   }
/// }
/// ```
///
/// For example, suppose the parent builds `MyButton` with `color` being blue,
/// the `$color` in the print function refers to blue, as expected. Now,
/// suppose the parent rebuilds `MyButton` with green. The closure created by
/// the first build still implicitly refers to the original widget and the
/// `$color` still prints blue even through the widget has been updated to
/// green.
///
/// In contrast, with the [build] function on the [State] object, closures
/// created during [build] implicitly capture the [State] instance instead of
/// the widget instance:
///
/// ```dart
/// class MyButtonState extends State<MyButton> {
///   ...
///   @override
///   Widget build(BuildContext context) {
///     ... () { print("color: ${widget.color}"); } ...
///   }
/// }
/// ```
///
/// Now when the parent rebuilds `MyButton` with green, the closure created by
/// the first build still refers to [State] object, which is preserved across
/// rebuilds, but the framework has updated that [State] object's [widget]
/// property to refer to the new `MyButton` instance and `${widget.color}`
/// prints green, as expected.
///
/// See also:
///
///  * [StatefulWidget], which contains the discussion on performance considerations. ¿ Ê˙¿ Á  ¿ Ê‡¿ Ê·¿ ÁÉ@¿ Í9ÇÂ/// Called when a dependency of this [State] object changes.
///
/// For example, if the previous call to [build] referenced an
/// [InheritedWidget] that later changed, the framework would call this
/// method to notify this object about the change.
///
/// This method is also called immediately after [initState]. It is safe to
/// call [BuildContext.dependOnInheritedWidgetOfExactType] from this method.
///
/// Subclasses rarely override this method because the framework always
/// calls [build] after a dependency changes. Some subclasses do override
/// this method because they need to do some expensive work (e.g., network
/// fetches) when their dependencies change, and that work would be too
/// expensive to do for every build.  ¿ Í¿ Í¿ Í#¿ Í$¿ ÍXÅÁ¿ Íi  ¿ Í}&¿ Íö  ¿ ÍX¿ ÍY¿ ö/¿ ö0¿ ÏCÖ]¿ ÔzÉ'/// A widget that has a child widget provided to it, instead of building a new
/// widget.
///
/// Useful as a base class for other widgets, such as [InheritedWidget] and
/// [ParentDataWidget].
///
/// See also:
///
///  * [InheritedWidget], for widgets that introduce ambient state that can
///    be read by descendant widgets.
///  * [ParentDataWidget], for widgets that populate the
///    [RenderObject.parentData] slot of their child's [RenderObject] to
///    configure the parent widget's layout.
///  * [StatefulWidget] and [State], for widgets that can build differently
///    several times over their lifetime.
///  * [StatelessWidget], for widgets that always build the same way given a
///    particular configuration and ambient state.
///  * [Widget], for an overview of widgets in general. ¿ ÔôÄÅ ¿ ÔŸ¿ Ô‰7/// Creates a widget that has exactly one child widget.¿ ÔÁ¿ ÔÌ  ¿ ÔÒ¿    ¿ 
¿ ¿ ¿ ¿ ¿ ¿ Å¿ ÒòÅ^/// The widget below this widget in the tree.
///
/// {@template flutter.widgets.ProxyWidget.child}
/// This widget can only have one child. To lay out multiple children, let this
/// widget's child be a widget such as [Row], [Column], or [Stack], which have a
/// `children` property, and then provide the children to that widget.
/// {@endtemplate}    ¿ Ò¢óÌ¿ ˘áh/// Base class for widgets that hook [ParentData] information to children of
/// [RenderObjectWidget]s.
///
/// This can be used to provide per-child configuration for
/// [RenderObjectWidget]s with more than one child. For example, [Stack] uses
/// the [Positioned] parent data widget to position each child.
///
/// A [ParentDataWidget] is specific to a particular kind of [ParentData]. That
/// class is `T`, the [ParentData] type argument.
///
/// {@tool snippet}
///
/// This example shows how you would build a [ParentDataWidget] to configure a
/// `FrogJar` widget's children by specifying a [Size] for each one.
///
/// ```dart
/// class FrogSize extends ParentDataWidget<FrogJarParentData> {
///   const FrogSize({
///     Key? key,
///     required this.size,
///     required Widget child,
///   }) : super(key: key, child: child);
///
///   final Size size;
///
///   @override
///   void applyParentData(RenderObject renderObject) {
///     final FrogJarParentData parentData = renderObject.parentData! as FrogJarParentData;
///     if (parentData.size != size) {
///       parentData.size = size;
///       final RenderFrogJar targetParent = renderObject.parent! as RenderFrogJar;
///       targetParent.markNeedsLayout();
///     }
///   }
///
///   @override
///   Type get debugTypicalAncestorWidgetClass => FrogJar;
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [RenderObject], the superclass for layout algorithms.
///  * [RenderObject.parentData], the slot that this class configures.
///  * [ParentData], the superclass of the data that will be placed in
///    [RenderObject.parentData] slots. The `T` type parameter for
///    [ParentDataWidget] is a [ParentData].
///  * [RenderObjectWidget], the class for widgets that wrap [RenderObject]s.
///  * [StatefulWidget] and [State], for widgets that can build differently
///    several times over their lifetime.¿ ˘+¿ ˘+¿ ˘YÄ˘ ¿ ˘¯¿ ˙Äî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.¿ ˙¿ ˙  ¿ ˙¿ ˙&  	¿ ˙4¿ ˙9¿ ˙P¿ ˙=¿ ˙:¿ ˙?¿ ˙I¿ ˙D¿ ˙K ¿ ¸ÔÅ¿ ˝ÏÄÈ/// The [RenderObjectWidget] that is typically used to set up the [ParentData]
/// that [applyParentData] will write to.
///
/// This is only used in error messages to tell users what widget typically
/// wraps this ParentDataWidget.   ¿ ˙VO¿ ˙w   ¿ ˙V¿ ˙W¿ ˙©ÇB¿ ¸RÅë/// Checks if this widget can apply its parent data to the provided
/// `renderObject`.
///
/// The [RenderObject.parentData] of the provided `renderObject` is
/// typically set up by an ancestor [RenderObjectWidget] of the type returned
/// by [debugTypicalAncestorWidgetClass].
///
/// This is called just before [applyParentData] is invoked with the same
/// [RenderObject] provided to that method. ¿ ¸k¿ ¸y   ¿ ˛Öa¿ ˛*  ¿ ˛V¿ ˛l  ¿ ˛{%¿ ˛ê  ¿ ˛¶¿ ˛∏   ¿uÑc¿≠Ñ/// Write the data from this widget into the given render object's parent data.
///
/// The framework calls this function whenever it detects that the
/// [RenderObject] associated with the [child] has outdated
/// [RenderObject.parentData]. For example, if the render object was recently
/// inserted into the render tree, the render object's parent data might not
/// match the data in this widget.
///
/// Subclasses are expected to override this function to copy data from their
/// fields into the [RenderObject.parentData] field of the given render
/// object. The render object's parent is guaranteed to have been created by a
/// widget of type `T`, which usually means that this function can assume that
/// the render object's parent data object inherits from a particular class.
///
/// If this function modifies data that can change the parent's layout or
/// painting, this function is responsible for calling
/// [RenderObject.markNeedsLayout] or [RenderObject.markNeedsPaint] on the
/// parent, as appropriate. ¿Ω¿À  ¿õ¿ú¿‹Å±¿	kÅh/// Whether the [ParentDataElement.applyWidgetOutOfTurn] method is allowed
/// with this widget.
///
/// This should only return true if this widget represents a [ParentData]
/// configuration that will have no impact on the layout or paint phase.
///
/// See also:
///
///  * [ParentDataElement.applyWidgetOutOfTurn], which verifies this in debug
///    mode.  ¿	Y¿	Z ¿	ëï¿"ëÅ/// Base class for widgets that efficiently propagate information down the tree.
///
/// To obtain the nearest instance of a particular type of inherited widget from
/// a build context, use [BuildContext.dependOnInheritedWidgetOfExactType].
///
/// Inherited widgets, when referenced in this way, will cause the consumer to
/// rebuild when the inherited widget itself changes state.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=Zbm3hjPjQMk}
///
/// {@tool snippet}
///
/// The following is a skeleton of an inherited widget called `FrogColor`:
///
/// ```dart
/// class FrogColor extends InheritedWidget {
///   const FrogColor({
///     Key? key,
///     required this.color,
///     required Widget child,
///   }) : super(key: key, child: child);
///
///   final Color color;
///
///   static FrogColor of(BuildContext context) {
///     final FrogColor? result = context.dependOnInheritedWidgetOfExactType<FrogColor>();
///     assert(result != null, 'No FrogColor found in context');
///     return result!;
///   }
///
///   @override
///   bool updateShouldNotify(FrogColor old) => color != old.color;
/// }
/// ```
/// {@end-tool}
///
/// ## Implementing the `of` method
///
/// The convention is to provide a static method `of` on the [InheritedWidget]
/// which does the call to [BuildContext.dependOnInheritedWidgetOfExactType]. This
/// allows the class to define its own fallback logic in case there isn't
/// a widget in scope. In the example above, the value returned will be
/// null in that case, but it could also have defaulted to a value.
///
/// Sometimes, the `of` method returns the data rather than the inherited
/// widget; for example, in this case it could have returned a [Color] instead
/// of the `FrogColor` widget.
///
/// Occasionally, the inherited widget is an implementation detail of another
/// class, and is therefore private. The `of` method in that case is typically
/// put on the public class instead. For example, [Theme] is implemented as a
/// [StatelessWidget] that builds a private inherited widget; [Theme.of] looks
/// for that inherited widget using [BuildContext.dependOnInheritedWidgetOfExactType]
/// and then returns the [ThemeData].
///
/// ## Calling the `of` method
///
/// When using the `of` method, the `context` must be a descendant of the
/// [InheritedWidget], meaning it must be "below" the [InheritedWidget] in the
/// tree.
///
/// {@tool snippet}
///
/// In this example, the `context` used is the one from the [Builder], which is
/// a child of the FrogColor widget, so this works.
///
/// ```dart
/// class MyPage extends StatelessWidget {
///   const MyPage({Key? key}) : super(key: key);
///
///   @override
///   Widget build(BuildContext context) {
///     return Scaffold(
///       body: FrogColor(
///         color: Colors.green,
///         child: Builder(
///           builder: (BuildContext innerContext) {
///             return Text(
///               'Hello Frog',
///               style: TextStyle(color: FrogColor.of(innerContext).color),
///             );
///           },
///         ),
///       ),
///     );
///   }
/// }
/// ```
/// {@end-tool}
///
/// {@tool snippet}
///
/// In this example, the `context` used is the one from the MyOtherPage widget,
/// which is a parent of the FrogColor widget, so this does not work.
///
/// ```dart
/// class MyOtherPage extends StatelessWidget {
///   const MyOtherPage({Key? key}) : super(key: key);
///
///   @override
///   Widget build(BuildContext context) {
///     return Scaffold(
///       body: FrogColor(
///         color: Colors.green,
///         child: Text(
///           'Hello Frog',
///           style: TextStyle(color: FrogColor.of(context).color),
///         ),
///       ),
///     );
///   }
/// }
/// ```
/// {@end-tool}
/// {@youtube 560 315 https://www.youtube.com/watch?v=1t-8rBCGBYw}
///
/// See also:
///
///  * [StatefulWidget] and [State], for widgets that can build differently
///    several times over their lifetime.
///  * [StatelessWidget], for widgets that always build the same way given a
///    particular configuration and ambient state.
///  * [Widget], for an overview of widgets in general.
///  * [InheritedNotifier], an inherited widget whose value can be a
///    [Listenable], and which will notify dependents whenever the value
///    sends notifications.
///  * [InheritedModel], an inherited widget that allows clients to subscribe
///    to changes for subparts of the value. ¿JÄ¯ ¿È¿¯Äî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.¿˚¿  ¿¿  	¿$¿)¿@¿-¿*¿/¿9¿4¿;  ¿FG¿c   ¿F¿G¿ëÇÓ¿GÇã/// Whether the framework should notify widgets that inherit from this widget.
///
/// When this widget is rebuilt, sometimes we need to rebuild the widgets that
/// inherit from this widget but sometimes we do not. For example, if the data
/// held by this widget is the same as the data held by `oldWidget`, then we
/// do not need to rebuild the widgets that inherited the data held by
/// `oldWidget`.
///
/// The framework distinguishes these cases by calling this function with the
/// widget that previously occupied this location in the tree as an argument.
/// The given widget is guaranteed to have the same [runtimeType] as this
/// object. ¿Z#¿u  ¿5¿6 ¿Éâ*¿!SÅ¿/// RenderObjectWidgets provide the configuration for [RenderObjectElement]s,
/// which wrap [RenderObject]s, which provide the actual rendering of the
/// application.
///
/// See also:
///
///  * [MultiChildRenderObjectWidget], which configures a [RenderObject] with
///    a single list of children.
///  * [SlottedMultiChildRenderObjectWidgetMixin], which configures a
///    [RenderObject] that organizes its children in different named slots. ¿!yÄ“ ¿"¿"*Äî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.¿"-¿"3  ¿";¿"@¿"I¿"D¿"A¿"F  ¿"OÄâ¿"»K/// RenderObjectWidgets always inflate to a [RenderObjectElement] subclass.  ¿"ù¿"û¿"©¿"™¿"‹Ç<¿$ÔÅ€/// Creates an instance of the [RenderObject] class that this
/// [RenderObjectWidget] represents, using the configuration described by this
/// [RenderObjectWidget].
///
/// This method should not do anything with the children of the render object.
/// That should instead be handled by the method that overrides
/// [RenderObjectElement.mount] in the object rendered by this object's
/// [createElement] method. See, for example,
/// [SingleChildRenderObjectElement.mount]. ¿%¿%  ¿$ ¿$À¿$◊¿$ÿ¿%Çl¿'7Åˆ/// Copies the configuration described by this [RenderObjectWidget] to the
/// given [RenderObject], which will be of the same type as returned by this
/// object's [createRenderObject].
///
/// This method should not do anything to update the children of the render
/// object. That should instead be handled by the method that overrides
/// [RenderObjectElement.update] in the object rendered by this object's
/// [createElement] method. See, for example,
/// [SingleChildRenderObjectElement.update]. ¿'J¿'X  ¿'`#¿'x  ¿'%¿'&¿'åÅ¿(lÄ«/// A render object previously associated with this widget has been removed
/// from the tree. The given [RenderObject] will be of the same type as
/// returned by this object's [createRenderObject]. ¿(É#¿(õ  ¿(Z¿([ ¿(ØÅ·¿))j/// A superclass for RenderObjectWidgets that configure RenderObject subclasses
/// that have no children. ¿)_Ä÷ ¿)˛¿*Äî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.¿*¿*  ¿*%¿**¿*3¿*.¿*+¿*0  ¿*9U¿*]   ¿*9¿*: ¿*íÑ(¿,¨Ç
/// A superclass for [RenderObjectWidget]s that configure [RenderObject] subclasses
/// that have a single child slot. (This superclass only provides the storage
/// for that child, it doesn't actually provide the updating logic.)
///
/// Typically, the render object assigned to this widget will make use of
/// [RenderObjectWithChildMixin] to implement a single-child model. The mixin
/// exposes a [RenderObjectWithChildMixin.child] property that allows
/// retrieving the render object belonging to the [child] widget. ¿,ÈÄÈ ¿-à¿-•Äî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.¿-®¿-Æ  ¿-≤
¿-∏  ¿-¬¿-«¿-–¿-À¿-»¿-Õ¿-÷z¿.K`/// The widget below this widget in the tree.
///
/// {@macro flutter.widgets.ProxyWidget.child}  ¿.Uc¿.Ä   ¿.U¿.V ¿.ºéï¿2πÉÌ/// A superclass for [RenderObjectWidget]s that configure [RenderObject] subclasses
/// that have a single list of children. (This superclass only provides the
/// storage for that child list, it doesn't actually provide the updating
/// logic.)
///
/// Subclasses must return a [RenderObject] that mixes in
/// [ContainerRenderObjectMixin], which provides the necessary functionality to
/// visit the children of the container render object (the render object
/// belonging to the [children] widgets). Typically, subclasses will return a
/// [RenderBox] that mixes in both [ContainerRenderObjectMixin] and
/// [RenderBoxContainerDefaultsMixin].
///
/// See also:
///
///  * [Stack], which uses [MultiChildRenderObjectWidget].
///  * [RenderStack], for an example implementation of the associated render
///    object.
///  * [SlottedMultiChildRenderObjectWidgetMixin], which configures a
///    [RenderObject] that instead of having a single list of children organizes
///    its children in named slots. ¿2ıÇﬂ ¿3Ä¿3úÄÇ/// Initializes fields for subclasses.
///
/// The [children] argument must not be null and must not contain any null
/// objects.¿3ü¿3•  ¿3© ¿3Ø  ¿3π¿3«¿3»¿3ø¿3∆¿3¿¿3”¿3Ÿ¿3Í¿3„¿3⁄¿3Ê¿3Û¿3¯¿4¿3¸¿3˘¿3˛¿5ÿá¿<·ÜÉ/// The widgets below this widget in the tree.
///
/// If this list is going to be mutated, it is usually wise to put a [Key] on
/// each of the child widgets, so that the framework can match old
/// configurations to new configurations and maintain the underlying render
/// objects.
///
/// Also, a [Widget] in Flutter is immutable, so directly modifying the
/// [children] such as `someMultiChildRenderObjectWidget.children.add(...)` or
/// as the example code below will result in incorrect behaviors. Whenever the
/// children list is modified, a new list object should be provided.
///
/// ```dart
/// class SomeWidgetState extends State<SomeWidget> {
///   List<Widget> _children;
///
///   void initState() {
///     _children = [];
///   }
///
///   void someHandler() {
///     setState(() {
///         _children.add(...);
///     });
///   }
///
///   Widget build(...) {
///     // Reusing `List<Widget> _children` here is problematic.
///     return Row(children: _children);
///   }
/// }
/// ```
///
/// The following code corrects the problem mentioned above.
///
/// ```dart
/// class SomeWidgetState extends State<SomeWidget> {
///   List<Widget> _children;
///
///   void initState() {
///     _children = [];
///   }
///
///   void someHandler() {
///     setState(() {
///       // The key here allows Flutter to reuse the underlying render
///       // objects even if the children list is recreated.
///       _children.add(ChildWidget(key: ...));
///     });
///   }
///
///   Widget build(...) {
///     // Always create a new list of children as a Widget is immutable.
///     return Row(children: List.of(_children));
///   }
/// }
/// ```  ¿<Óa¿=   ¿<Ó¿<Ô ¿=©áë¿=Ø   ¿=≈¿=  ¿=‘¿=›1¿= ¿=¸¿>¿>¿>¿>¿> ¿>Ç¿>  ¿>!¿>*   ¿@(Å¿@-    ¿A>ÅY¿AJ  ¿Aa¿Aj   ¿BõÅ¿B†  ¿B§¿B≠   ¿C£ÄÊ¿C®  ¿CØ¿C∏   ¿DçÄ´¿Dí  ¿D†¿D©    ¿FJ¿ M¿Uôè?/// A handle to the location of a widget in the widget tree.
///
/// This class presents a set of methods that can be used from
/// [StatelessWidget.build] methods and from methods on [State] objects.
///
/// [BuildContext] objects are passed to [WidgetBuilder] functions (such as
/// [StatelessWidget.build]), and are available from the [State.context] member.
/// Some static functions (e.g. [showDialog], [Theme.of], and so forth) also
/// take build contexts so that they can act on behalf of the calling widget, or
/// obtain data specifically for the given context.
///
/// Each widget has its own [BuildContext], which becomes the parent of the
/// widget returned by the [StatelessWidget.build] or [State.build] function.
/// (And similarly, the parent of any children for [RenderObjectWidget]s.)
///
/// In particular, this means that within a build method, the build context of
/// the widget of the build method is not the same as the build context of the
/// widgets returned by that build method. This can lead to some tricky cases.
/// For example, [Theme.of(context)] looks for the nearest enclosing [Theme] of
/// the given build context. If a build method for a widget Q includes a [Theme]
/// within its returned widget tree, and attempts to use [Theme.of] passing its
/// own context, the build method for Q will not find that [Theme] object. It
/// will instead find whatever [Theme] was an ancestor to the widget Q. If the
/// build context for a subpart of the returned tree is needed, a [Builder]
/// widget can be used: the build context passed to the [Builder.builder]
/// callback will be that of the [Builder] itself.
///
/// For example, in the following snippet, the [ScaffoldState.showBottomSheet]
/// method is called on the [Scaffold] widget that the build method itself
/// creates. If a [Builder] had not been used, and instead the `context`
/// argument of the build method itself had been used, no [Scaffold] would have
/// been found, and the [Scaffold.of] function would have returned null.
///
/// ```dart
/// @override
/// Widget build(BuildContext context) {
///   // here, Scaffold.of(context) returns null
///   return Scaffold(
///     appBar: const AppBar(title: Text('Demo')),
///     body: Builder(
///       builder: (BuildContext context) {
///         return TextButton(
///           child: const Text('BUTTON'),
///           onPressed: () {
///             Scaffold.of(context).showBottomSheet<void>(
///               (BuildContext context) {
///                 return Container(
///                   alignment: Alignment.center,
///                   height: 200,
///                   color: Colors.amber,
///                   child: Center(
///                     child: Column(
///                       mainAxisSize: MainAxisSize.min,
///                       children: <Widget>[
///                         const Text('BottomSheet'),
///                         ElevatedButton(
///                           child: const Text('Close BottomSheet'),
///                           onPressed: () {
///                             Navigator.pop(context),
///                           },
///                         )
///                       ],
///                     ),
///                   ),
///                 );
///               },
///             );
///           },
///         );
///       },
///     )
///   );
/// }
/// ```
///
/// The [BuildContext] for a particular widget can change location over time as
/// the widget is moved around the tree. Because of this, values returned from
/// the methods on this class should not be cached beyond the execution of a
/// single synchronous function.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=rIaaH87z1-g}
///
/// [BuildContext] objects are actually [Element] objects. The [BuildContext]
/// interface is used to discourage direct manipulation of [Element] objects.   ¿U™`¿VK/// The current configuration of the [Element] that is this [BuildContext].   ¿VÄò¿V†}/// The [BuildOwner] for this context. The [BuildOwner] is in charge of
/// managing the rendering pipeline for this context.   ¿V™Ç…¿YcÇì/// Whether the [widget] is currently updating the widget or render tree.
///
/// For [StatefulWidget]s and [StatelessWidget]s this flag is true while
/// their respective build methods are executing.
/// [RenderObjectWidget]s set this to true while creating or configuring their
/// associated [RenderObject]s.
/// Other [Widget] types may set this to true for conceptually similar phases
/// of their lifecycle.
///
/// When this is true, it is safe for [widget] to establish a dependency to an
/// [InheritedWidget] by calling [dependOnInheritedElement] or
/// [dependOnInheritedWidgetOfExactType].
///
/// Accessing this flag in release mode is not valid.   ¿^ÃÑ+¿bÚÉı/// The size of the [RenderBox] returned by [findRenderObject].
///
/// This getter will only return a valid result after the layout phase is
/// complete. It is therefore not valid to call this from a build method.
/// It should only be called from paint callbacks or interaction event
/// handlers (e.g. gesture callbacks).
///
/// For details on the different phases of a frame, see the discussion at
/// [WidgetsBinding.drawFrame].
///
/// This getter will only return a valid result if [findRenderObject] actually
/// returns a [RenderBox]. If [findRenderObject] returns a render object that
/// is not a subtype of [RenderBox] (e.g., [RenderView]), this getter will
/// throw an exception in debug mode and will return null in release mode.
///
/// Calling this getter is theoretically relatively expensive (O(N) in the
/// depth of the tree), but in practice is usually cheap because the tree
/// usually has many render objects and therefore the distance to the nearest
/// render object is usually short.   ¿YwÖQ¿^µÑˇ/// The current [RenderObject] for the widget. If the widget is a
/// [RenderObjectWidget], this is the render object that the widget created
/// for itself. Otherwise, it is the render object of the first descendant
/// [RenderObjectWidget].
///
/// This method will only return a valid result after the build phase is
/// complete. It is therefore not valid to call this from a build method.
/// It should only be called from interaction event handlers (e.g.
/// gesture callbacks) or layout or paint callbacks. It is also not valid to
/// call if [State.mounted] returns false.
///
/// If the render object is a [RenderBox], which is the common case, then the
/// size of the render object can be obtained from the [size] getter. This is
/// only valid after the layout phase, and should therefore only be examined
/// from paint callbacks or interaction event handlers (e.g. gesture
/// callbacks).
///
/// For details on the different phases of a frame, see the discussion at
/// [WidgetsBinding.drawFrame].
///
/// Calling this method is theoretically relatively expensive (O(N) in the
/// depth of the tree), but in practice is usually cheap because the tree
/// usually has many render objects and therefore the distance to the nearest
/// render object is usually short.   ¿b˚Ç^¿eÅ/// Registers this build context with [ancestor] such that when
/// [ancestor]'s widget changes this build context is rebuilt.
///
/// Returns `ancestor.widget`.
///
/// This method is rarely called directly. Most applications should use
/// [dependOnInheritedWidgetOfExactType], which calls this method after finding
/// the appropriate [InheritedElement] ancestor.
///
/// All of the qualifications about when [dependOnInheritedWidgetOfExactType] can
/// be called apply to this method as well. ¿e+¿e=  ¿eH¿eP   ¿e]â¿nàg/// Obtains the nearest widget of the given type `T`, which must be the type of a
/// concrete [InheritedWidget] subclass, and registers this build context with
/// that widget such that when that widget changes (or a new widget of that
/// type is introduced, or the widget goes away), this build context is
/// rebuilt so that it can obtain new values from that widget.
///
/// This is typically called implicitly from `of()` static methods, e.g.
/// [Theme.of].
///
/// This method should not be called from widget constructors or from
/// [State.initState] methods, because those methods would not get called
/// again if the inherited value were to change. To ensure that the widget
/// correctly updates itself when the inherited value changes, only call this
/// (directly or indirectly) from build methods, layout and paint callbacks, or
/// from [State.didChangeDependencies].
///
/// This method should not be called from [State.dispose] because the element
/// tree is no longer stable at that time. To refer to an ancestor from that
/// method, save a reference to the ancestor in [State.didChangeDependencies].
/// It is safe to use this method from [State.deactivate], which is called
/// whenever the widget is removed from the tree.
///
/// It is also possible to call this method from interaction event handlers
/// (e.g. gesture callbacks) or timers, to obtain a value once, if that value
/// is not going to be cached and reused later.
///
/// Calling this method is O(1) with a small constant factor, but will lead to
/// the widget being rebuilt more often.
///
/// Once a widget registers a dependency on a particular type by calling this
/// method, it will be rebuilt, and [State.didChangeDependencies] will be
/// called, whenever changes occur relating to that widget until the next time
/// the widget or one of its ancestors is moved (for example, because an
/// ancestor is added or removed).
///
/// The [aspect] parameter is only used when `T` is an
/// [InheritedWidget] subclasses that supports partial updates, like
/// [InheritedModel]. It specifies what "aspect" of the inherited
/// widget this context depends on.¿n9¿n9¿nV¿n_   ¿nlÉß¿qŒÉ//// Obtains the element corresponding to the nearest widget of the given type `T`,
/// which must be the type of a concrete [InheritedWidget] subclass.
///
/// Returns null if no such element is found.
///
/// Calling this method is O(1) with a small constant factor.
///
/// This method does not establish a relationship with the target in the way
/// that [dependOnInheritedWidgetOfExactType] does.
///
/// This method should not be called from [State.dispose] because the element
/// tree is no longer stable at that time. To refer to an ancestor from that
/// method, save a reference to the ancestor by calling
/// [dependOnInheritedWidgetOfExactType] in [State.didChangeDependencies]. It is
/// safe to use this method from [State.deactivate], which is called whenever
/// the widget is removed from the tree.¿qˆ¿qˆ  ¿rÜ¿wÏÖ°/// Returns the nearest ancestor widget of the given type `T`, which must be the
/// type of a concrete [Widget] subclass.
///
/// In general, [dependOnInheritedWidgetOfExactType] is more useful, since
/// inherited widgets will trigger consumers to rebuild when they change. This
/// method is appropriate when used in interaction event handlers (e.g.
/// gesture callbacks) or for performing one-off tasks such as asserting that
/// you have or don't have a widget of a specific type as an ancestor. The
/// return value of a Widget's build method should not depend on the value
/// returned by this method, because the build context will not rebuild if the
/// return value of this method changes. This could lead to a situation where
/// data used in the build method changes, but the widget is not rebuilt.
///
/// Calling this method is relatively expensive (O(N) in the depth of the
/// tree). Only call this method if the distance from this widget to the
/// desired ancestor is known to be small and bounded.
///
/// This method should not be called from [State.deactivate] or [State.dispose]
/// because the widget tree is no longer stable at that time. To refer to
/// an ancestor from one of those methods, save a reference to the ancestor
/// by calling [findAncestorWidgetOfExactType] in [State.didChangeDependencies].
///
/// Returns null if a widget of the requested type does not appear in the
/// ancestors of this context.¿x
¿x
  ¿x"Üô¿~êÜ,/// Returns the [State] object of the nearest ancestor [StatefulWidget] widget
/// that is an instance of the given type `T`.
///
/// This should not be used from build methods, because the build context will
/// not be rebuilt if the value that would be returned by this method changes.
/// In general, [dependOnInheritedWidgetOfExactType] is more appropriate for such
/// cases. This method is useful for changing the state of an ancestor widget in
/// a one-off manner, for example, to cause an ancestor scrolling list to
/// scroll this build context's widget into view, or to move the focus in
/// response to user interaction.
///
/// In general, though, consider using a callback that triggers a stateful
/// change in the ancestor rather than using the imperative style implied by
/// this method. This will usually lead to more maintainable and reusable code
/// since it decouples widgets from each other.
///
/// Calling this method is relatively expensive (O(N) in the depth of the
/// tree). Only call this method if the distance from this widget to the
/// desired ancestor is known to be small and bounded.
///
/// This method should not be called from [State.deactivate] or [State.dispose]
/// because the widget tree is no longer stable at that time. To refer to
/// an ancestor from one of those methods, save a reference to the ancestor
/// by calling [findAncestorStateOfType] in [State.didChangeDependencies].
///
/// {@tool snippet}
///
/// ```dart
/// ScrollableState? scrollable = context.findAncestorStateOfType<ScrollableState>();
/// ```
/// {@end-tool}¿~®¿~®  ¿~øÅÒ¿ÄÅÅ¨/// Returns the [State] object of the furthest ancestor [StatefulWidget] widget
/// that is an instance of the given type `T`.
///
/// Functions the same way as [findAncestorStateOfType] but keeps visiting subsequent
/// ancestors until there are none of the type instance of `T` remaining.
/// Then returns the last one found.
///
/// This operation is O(N) as well though N is the entire widget tree rather than
/// a subtree.¿Äù¿Äù  ¿Ä¥Ö¿ÖÑ°/// Returns the [RenderObject] object of the nearest ancestor [RenderObjectWidget] widget
/// that is an instance of the given type `T`.
///
/// This should not be used from build methods, because the build context will
/// not be rebuilt if the value that would be returned by this method changes.
/// In general, [dependOnInheritedWidgetOfExactType] is more appropriate for such
/// cases. This method is useful only in esoteric cases where a widget needs
/// to cause an ancestor to change its layout or paint behavior. For example,
/// it is used by [Material] so that [InkWell] widgets can trigger the ink
/// splash on the [Material]'s actual render object.
///
/// Calling this method is relatively expensive (O(N) in the depth of the
/// tree). Only call this method if the distance from this widget to the
/// desired ancestor is known to be small and bounded.
///
/// This method should not be called from [State.deactivate] or [State.dispose]
/// because the widget tree is no longer stable at that time. To refer to
/// an ancestor from one of those methods, save a reference to the ancestor
/// by calling [findAncestorRenderObjectOfType] in [State.didChangeDependencies].¿Öû¿Öû  ¿ÖºÉÄ¿à˛É /// Walks the ancestor chain, starting with the parent of this build context's
/// widget, invoking the argument for each ancestor. The callback is given a
/// reference to the ancestor widget's corresponding [Element] object. The
/// walk stops when it reaches the root widget or when the callback returns
/// false. The callback must not return null.
///
/// This is useful for inspecting the widget tree.
///
/// Calling this method is relatively expensive (O(N) in the depth of the tree).
///
/// This method should not be called from [State.deactivate] or [State.dispose]
/// because the element tree is no longer stable at that time. To refer to
/// an ancestor from one of those methods, save a reference to the ancestor
/// by calling [visitAncestorElements] in [State.didChangeDependencies]. ¿â&¿â4   ¿â@Ñ¿ç4É»/// Walks the children of this widget.
///
/// This is useful for applying changes to children after they are built
/// without waiting for the next frame, especially if the children are known,
/// and especially if there is exactly one child (as is always the case for
/// [StatefulWidget]s or [StatelessWidget]s).
///
/// Calling this method is very cheap for build contexts that correspond to
/// [StatefulWidget]s or [StatelessWidget]s (O(1), since there's only one
/// child).
///
/// Calling this method is potentially expensive for build contexts that
/// correspond to [RenderObjectWidget]s (O(N) in the number of children).
///
/// Calling this method recursively is extremely expensive (O(N) in the number
/// of descendants), and should be avoided if possible. Generally it is
/// significantly cheaper to use an [InheritedWidget] and have the descendants
/// pull data down, than it is to use [visitChildElements] recursively to push
/// data down to them. ¿çG¿çW   ¿çcÅ.¿éaÄÓ/// Start bubbling this notification at the given build context.
///
/// The notification will be delivered to any [NotificationListener] widgets
/// with the appropriate type parameters that are ancestors of the given
/// [BuildContext]. ¿év¿éÑ   ¿éïÅè¿èƒÅ/// Returns a description of the [Element] associated with the current build context.
///
/// The `name` is typically something like "The element being rebuilt was".
///
/// See also:
///
///  * [Element.describeElements], which can be used to describe a list of elements. ¿è‘¿è‹  ¿è‚?¿è¯  ¿èˇ¿ê¿ê¿ê(Å¿ê‚Ä£/// Returns a description of the [Widget] associated with the current build context.
///
/// The `name` is typically something like "The widget being rebuilt was". ¿êÒ¿ê˘  ¿êˇ?¿ë  ¿ë¿ë0¿ë1¿ëEÅ¿í$Ä¿/// Adds a description of a specific type of widget missing from the current
/// build context's ancestry tree.
///
/// You can find an example of using this method in [debugCheckHasMaterial]. ¿í>"¿íM   ¿íhÄÎ¿ì/ÄÆ/// Adds a description of the ownership chain from a specific [Element]
/// to the error report.
///
/// The ownership chain is useful for debugging the source of an element. ¿ìF¿ìN    ¿ìW¿ v>¿óÑÑ&/// Manager class for the widgets framework.
///
/// This class tracks which widgets need rebuilding, and handles other tasks
/// that apply to widget trees as a whole, such as managing the inactive element
/// list for the tree and triggering the "reassemble" command when necessary
/// during hot reload when debugging.
///
/// The main build owner is typically owned by the [WidgetsBinding], and is
/// driven from the operating system along with the rest of the
/// build/layout/paint pipeline.
///
/// Additional build owners can be built to manage off-screen widget trees.
///
/// To assign a build owner to a tree, use the
/// [RootRenderObjectElement.assignOwner] method on the root element of the
/// widget tree.
///
/// {@tool dartpad}
/// This example shows how to build an off-screen widget tree used to measure
/// the layout size of the rendered tree. For some use cases, the simpler
/// [Offstage] widget may be a better alternative to this approach.
///
/// ** See code in examples/api/lib/widgets/framework/build_owner.0.dart **
/// {@end-tool} ¿óìÇ ¿ô¿ôÅq/// Creates an object that manages widgets.
///
/// If the `focusManager` argument is not specified or is null, this will
/// construct a new [FocusManager] and register its global input handlers
/// via [FocusManager.registerGlobalHandlers], which will modify static
/// state. Callers wishing to avoid altering this state can explicitly pass
/// a focus manager here.¿ô ¿ô&  ¿ô7¿ôF  ¿ôj¿ô]¿ôy¿ôl¿ô|¿ô•¿ô}¿ôâ¿ôä¿ôã¿ôç¿ô£¿ô§¿ô´v¿öS/// Called on each build pass when the first buildable element is marked
/// dirty. ¿ö&?¿ö> ¿öR¿öc¿öd¿öj0¿ö~ ¿öò¿öô¿öè¿öó¿öê¿öû)¿ö£ ¿ö¬¿öÃÅ\¿úÅ+/// Whether [_dirtyElements] need to be sorted again as a result of more
/// elements becoming dirty during the build.
///
/// This is necessary to preserve the sort order defined by [Element._sort].
///
/// This field is set to null when [buildScope] is not actively rebuilding
/// the widget tree. ¿ùÇU¿üQÇ#/// The object in charge of the focus tree.
///
/// Rarely used directly. Instead, consider using [FocusScope.of] to obtain
/// the [FocusScopeNode] for a given [BuildContext].
///
/// See [FocusManager] for more details.
///
/// This field will default to a [FocusManager] that has registered its
/// global input handlers via [FocusManager.registerGlobalHandlers]. Callers
/// wishing to avoid registering those handlers (and modifying the associated
/// static state) can explicitly pass a focus manager to the [BuildOwner.new]
/// constructor. ¿®†¿®§ ¿®ª¿©é¿©ì ¿©§¿©≠!¿©∂  ¿Õê\¿ÕÆ  ¿œ˘I¿– ¿–@¿–A¿–,¿–?¿–-¿–8¿–Ÿa¿–˚ ¿–Ÿ¿–⁄¿—¿—4¿—¿—!¿—(¿—0¿—)¿—1¿—2¿—6¿“¥Äë¿“Ô ¿“¥¿“µ¿”¿”?¿”¿”<¿”=¿”¿”;¿”¿”$¿”'¿”:¿”(¿”1¿”A¿ú-Ä◊¿ú«Ää/// Whether [buildScope] is actively rebuilding the widget tree.
///
/// [scheduleBuildFor] should only be called when this value is true.   ¿®¿7¿®…    ¿®˚Äê¿©k`/// Whether this widget tree is in the build phase.
///
/// Only valid when asserts are enabled.   ¿”JÄº¿”⁄ÄÉ/// The number of [GlobalKey] instances that are currently associated with
/// [Element]s that have been built by this build owner.   ¿übâ:¿üÌÄÅ/// Adds an element to the dirty elements list so that it will be rebuilt
/// when [WidgetsBinding.drawFrame] calls [buildScope]. ¿ü˛¿†   ¿©”ÇV¿™¡Äﬁ/// Establishes a scope in which calls to [State.setState] are forbidden, and
/// calls the given `callback`.
///
/// This mechanism is used to ensure that, for instance, [State.dispose] does
/// not call [State.setState]. ¿™À¿™Ÿ   ¿¨-°_¿±`ÑŒ/// Establishes a scope for updating the widget tree, and calls the given
/// `callback`, if any. Then, builds all the elements that were marked as
/// dirty using [scheduleBuildFor], in depth order.
///
/// This mechanism prevents build methods from transitively requiring other
/// build methods to run, potentially causing infinite loops.
///
/// The dirty list is processed after `callback` returns, building all the
/// elements that were marked as dirty using [scheduleBuildFor], in depth
/// order. If elements are marked as dirty while this method is running, they
/// must be deeper than the `context` node, and deeper than any
/// previously-built node in this pass.
///
/// To flush the current dirty list without performing any other work, this
/// function can be called with no callback. This is what the framework does
/// each frame, in [WidgetsBinding.drawFrame].
///
/// Only one [buildScope] can be active at a time.
///
/// A [buildScope] implies a [lockState] scope as well.
///
/// To print a console message every time this method is called, set
/// [debugPrintBuildScope] to true. This is useful when debugging problems
/// involving widgets not getting marked dirty, or getting marked dirty too
/// often. ¿±k¿±t  ¿±~¿±ç  ¿±.¿±/¿±5¿±W¿±6¿ÕÒÅ~¿Õˆ  ¿Œ9¿ŒB  ¿ŒG¿ŒR   ¿œsÄÇ¿œx  ¿œê¿œô   ¿‘
Ä¿‘  ¿‘3¿‘<  ¿‘C¿‘L   ¿‘˛Åÿ¿’  ¿’¿’!  ¿’%¿’.   ¿÷⁄Å˙¿÷ﬂ  ¿÷Ù¿÷ˇ  ¿◊¿◊   ¿ÿÿÅ;¿ÿ›  ¿ÿ˜¿Ÿ   ¿Ÿ¿Ÿ  ¿Ÿ¿Ÿ!   ¿⁄ç¿⁄    ¿Á4áX¿Á9    ¿Óêò¿UÅ~/// Complete the element build pass by unmounting any elements that are no
/// longer active.
///
/// This is called by [WidgetsBinding.drawFrame].
///
/// In debug mode, this also runs some sanity checks, for example checking for
/// duplicate global keys.
///
/// After the current call stack unwinds, a microtask that notifies listeners
/// about changes to global keys will run.  ¿#¿$¿*¿L¿+¿òÇ˚¿˙ÅP/// Cause the entire subtree rooted at the given [Element] to be entirely
/// rebuilt. This is used by development tools when the application code has
/// changed and is being hot-reloaded, to cause the widget tree to pick up any
/// changed implementations.
///
/// This is expensive and should not be called except during development. ¿¿  ¿'¿+    ¿=ÅG¿C  ¿Y- ¿Y¿j ¿k¿q  ¿x¿~   ¿ä¿¢  ¿≠¿¿   ¿ÀÄ∑¿–  ¿Â¿Û    ¿Ü¿ ÍÒ¿Kåµ/// An instantiation of a [Widget] at a particular location in the tree.
///
/// Widgets describe how to configure a subtree but the same widget can be used
/// to configure multiple subtrees simultaneously because widgets are immutable.
/// An [Element] represents the use of a widget to configure a specific location
/// in the tree. Over time, the widget associated with a given element can
/// change, for example, if the parent widget rebuilds and creates a new widget
/// for this location.
///
/// Elements form a tree. Most elements have a unique child, but some widgets
/// (e.g., subclasses of [RenderObjectElement]) can have multiple children.
///
/// Elements have the following lifecycle:
///
///  * The framework creates an element by calling [Widget.createElement] on the
///    widget that will be used as the element's initial configuration.
///  * The framework calls [mount] to add the newly created element to the tree
///    at a given slot in a given parent. The [mount] method is responsible for
///    inflating any child widgets and calling [attachRenderObject] as
///    necessary to attach any associated render objects to the render tree.
///  * At this point, the element is considered "active" and might appear on
///    screen.
///  * At some point, the parent might decide to change the widget used to
///    configure this element, for example because the parent rebuilt with new
///    state. When this happens, the framework will call [update] with the new
///    widget. The new widget will always have the same [runtimeType] and key as
///    old widget. If the parent wishes to change the [runtimeType] or key of
///    the widget at this location in the tree, it can do so by unmounting this
///    element and inflating the new widget at this location.
///  * At some point, an ancestor might decide to remove this element (or an
///    intermediate ancestor) from the tree, which the ancestor does by calling
///    [deactivateChild] on itself. Deactivating the intermediate ancestor will
///    remove that element's render object from the render tree and add this
///    element to the [owner]'s list of inactive elements, causing the framework
///    to call [deactivate] on this element.
///  * At this point, the element is considered "inactive" and will not appear
///    on screen. An element can remain in the inactive state only until
///    the end of the current animation frame. At the end of the animation
///    frame, any elements that are still inactive will be unmounted.
///  * If the element gets reincorporated into the tree (e.g., because it or one
///    of its ancestors has a global key that is reused), the framework will
///    remove the element from the [owner]'s list of inactive elements, call
///    [activate] on the element, and reattach the element's render object to
///    the render tree. (At this point, the element is again considered "active"
///    and might appear on screen.)
///  * If the element does not get reincorporated into the tree by the end of
///    the current animation frame, the framework will call [unmount] on the
///    element.
///  * At this point, the element is considered "defunct" and will not be
///    incorporated into the tree in the future. ¿äÄ› ¿¿"Ää/// Creates an element that uses the given widget as its configuration.
///
/// Typically called by an override of [Widget.createElement].¿#¿+  	¿8¿>¿M¿F¿?¿I¿^¿V¿`¿k¿t  ¿-¿ñ  ¿∞$¿√  ¿!¿¿!»  ¿#Y¿#b  ¿(_¿(g  ¿*i¿*u  ¿<¡=¿<” ¿<Â¿<ˆ¿<˜¿ã”o¿ãı ¿ã”¿ã‘¿å'¿å<¿å¿å)¿å0¿å8¿å1¿å9¿å:¿å>¿¡·.¿¡˛  ¿¬$¿¬*  ¿¬;(¿¬@ ¿¬^¿„˙¿„ˇ ¿‰¿‰´¿‰∞ ¿‰ø¿Â¿Â	 ¿Â¿ÊO4¿ÊT ¿Ê~¿ ÇÅ;¿!ØÅ/// Information set by parent to define where this child fits in its parent's
/// child list.
///
/// A child widget's slot is determined when the parent's [updateChild] method
/// is called to inflate the child widget. See [RenderObjectElement] for more
/// details on slots.   ¿!“ÅÑ¿"sÄî/// An integer that is guaranteed to be greater than the parent's, if any.
/// The element at the root of the tree must have a depth greater than 0.   ¿&KÇ¿(IÅ÷/// The configuration for this element.
///
/// Avoid overriding this field on [Element] subtypes to provide a more
/// specific widget type (i.e. [StatelessElement] and [StatelessWidget]).
/// Instead, cast at any callsites where the more specific type is required.
/// This avoids significant cast overhead on the getter which is accessed
/// throughout the framework internals during the build phase - and for which
/// the more specific type information is not used.  ¿(2¿(3¿(sÅÜ¿)FÄ¡/// Returns true if the Element is defunct.
///
/// This getter always returns false in profile and release builds.
/// See the lifecycle documentation for [Element] for additional information.   ¿)˝i¿*V:/// The object that manages the lifecycle of this element.  ¿*:¿*;¿1ËÇ‘¿3Å/// The render object at (or below) this location in the tree.
///
/// If this object is a [RenderObjectElement], the render object is the one at
/// this location in the tree. Otherwise, this getter will walk down the tree
/// until it finds a [RenderObjectElement].   ¿™ó≈¿™.   ¿™¿™¿„ïb¿„ÁF/// Returns true if the element has been marked as needing rebuilding.   :¿ŸÑ•¿ SÉ‚/// Compare two widgets for equality.
///
/// When a widget is rebuilt with another that compares equal according
/// to `operator ==`, it is assumed that the update is redundant and the
/// work to update that branch of the tree is skipped.
///
/// It is generally discouraged to override `operator ==` on any widget that
/// has children, since a correct implementation would have to defer to the
/// children's equality operator also, and that is an O(N¬≤) operation: each
/// child would need to itself walk all its children, each step of the tree.
///
/// It is sometimes reasonable for a leaf widget (one with no children) to
/// implement this method, if rebuilding the widget is known to be much more
/// expensive than checking the widgets' parameters for equality and if the
/// widget is expected to often be rebuilt with identical parameters.
///
/// In general, however, it is more efficient to cache the widgets used
/// in a build method if it is known that they will not change. ¿ V¿ ^  ¿ﬂ¿‡¿Ì¿Ó¿#mÄÏ¿#x  ¿#~	¿#á  ¿#â	¿#í   ¿%©Äû¿%¥  ¿% ¿%”   ¿*ÄÜê¿/“Ñ¯/// {@template flutter.widgets.Element.reassemble}
/// Called whenever the application is reassembled during debugging, for
/// example during hot reload.
///
/// This method should rerun any initialization logic that depends on global
/// state, for example, image loading from asset bundles (since the asset
/// bundle may have changed).
///
/// This function will only be called during development. In release builds,
/// the `ext.flutter.reassemble` hook is not available, and so this code will
/// never execute.
///
/// Implementers should not rely on any ordering for hot reload source update,
/// reassemble, and build methods after a hot reload has been initiated. It is
/// possible that a [Timer] (e.g. an [Animation]) or a debugging session
/// attached to the isolate could trigger a build with reloaded code _before_
/// reassemble is called. Code that expects preconditions to be set by
/// reassemble after a hot reload must be resilient to being called out of
/// order, e.g. by fizzling instead of throwing. That said, once reassemble is
/// called, build will be called after it at least once.
/// {@endtemplate}
///
/// See also:
///
///  * [State.reassemble]
///  * [BindingBase.reassembleApplication]
///  * [Image], which uses this to reload images.  ¿/Ø¿/∞¿/¿¿/¡¿1Ä–¿1  ¿1)¿12   ¿4¿Éh¿4‚  ¿4¸"¿5  ¿4¿¿4¡¿8,Åv¿8öT/// Returns a list of [Element]s from the current build context to the error report. ¿8´¿8≥  ¿8∏¿8À   ¿9¶Äƒ¿9¬  ¿9“¿9⁄  ¿9‡?¿9ˆ  ¿9¶¿9ß¿9˝¿:¿:¿:nÄ√¿:ä  ¿:ô¿:°  ¿:ß?¿:Ω  ¿:n¿:o¿:ƒ¿:ÿ¿:Ÿ¿;5Å)¿;Q  ¿;h¿;p  ¿;5¿;6¿=ÇX¿?2Ç/// Calls the argument for each child. Must be overridden by subclasses that
/// support having children.
///
/// There is no guaranteed order in which the children will be visited, though
/// it should be consistent over time.
///
/// Calling this during build is dangerous: the child list might still be
/// being updated at that point, so the children might not be constructed yet,
/// or might be old children that are going to be replaced. This method should
/// only be called if it is provable that the children are available. ¿?@¿?P   ¿?_É¡¿B‘ÉG/// Calls the argument for each child considered onstage.
///
/// Classes like [Offstage] and [Overlay] override this method to hide their
/// children.
///
/// Being onstage affects the element's discoverability during testing when
/// you use Flutter's [Finder] objects. For example, when you instruct the
/// test framework to tap on a widget, by default the finder will look for
/// onstage elements and ignore the offstage ones.
///
/// The default implementation defers to [visitChildren] and therefore treats
/// the element as onstage.
///
/// See also:
///
///  * [Offstage] widget that hides its children.
///  * [Finder] that skips offstage widgets by default.
///  * [RenderObject.visitChildrenForSemantics], in contrast to this method,
///    designed specifically for excluding parts of the UI from the semantics
///    tree. ¿BÓ¿B˛   ¿C$Çƒ¿Cn6/// Wrapper around [visitChildren] for [BuildContext]. ¿CÅ¿Cë  ¿C]¿C^¿EÏóÂ¿Oà¶/// Update the given child with the given new configuration.
///
/// This method is the core of the widgets system. It is called each time we
/// are to add, update, or remove a child based on an updated configuration.
///
/// The `newSlot` argument specifies the new value for this element's [slot].
///
/// If the `child` is null, and the `newWidget` is not null, then we have a new
/// child for which we need to create an [Element], configured with `newWidget`.
///
/// If the `newWidget` is null, and the `child` is not null, then we need to
/// remove it because it no longer has a configuration.
///
/// If neither are null, then we need to update the `child`'s configuration to
/// be the new configuration given by `newWidget`. If `newWidget` can be given
/// to the existing child (as determined by [Widget.canUpdate]), then it is so
/// given. Otherwise, the old child needs to be disposed and a new child
/// created for the new configuration.
///
/// If both are null, then we don't have a child and won't have a child, so we
/// do nothing.
///
/// The [updateChild] method returns the new child, if it had to create one,
/// or the child that was passed in, if it just had to update the child, or
/// null, if it removed the child and did not replace it.
///
/// The following table summarizes the above:
///
/// |                     | **newWidget == null**  | **newWidget != null**   |
/// | :-----------------: | :--------------------- | :---------------------- |
/// |  **child == null**  |  Returns null.         |  Returns new [Element]. |
/// |  **child != null**  |  Old child is removed, returns null. | Old child updated if possible, returns child or new [Element]. |
///
/// The `newSlot` argument is used only if `newWidget` is not null. If `child`
/// is null (or if the old child cannot be updated), then the `newSlot` is
/// given to the new [Element] that is created for the child, via
/// [inflateWidget]. If `child` is not null (and the old child _can_ be
/// updated), then the `newSlot` is given to [updateSlotForChild] to update
/// its slot, in case it has moved around since it was last built.
///
/// See the [RenderObjectElement] documentation for more information on slots. ¿O%¿O/  ¿O5¿O>  ¿OH¿OQ  ¿NÂ¿NÊ¿NÚ¿NÛ¿N˘¿O¿N˙¿]’Ü˛¿aoÉa/// Add this element to the tree in the given slot of the given parent.
///
/// The framework calls this function when a newly created element is added to
/// the tree for the first time. Use this method to initialize state that
/// depends on having a parent. State that is independent of the parent can
/// more easily be initialized in the constructor.
///
/// This method transitions the element from the "initial" lifecycle state to
/// the "active" lifecycle state.
///
/// Subclasses that override this method are likely to want to also override
/// [update], [visitChildren], [RenderObjectElement.insertRenderObjectChild],
/// [RenderObjectElement.moveRenderObjectChild], and
/// [RenderObjectElement.removeRenderObjectChild].
///
/// Implementations of this method should start with a call to the inherited
/// method, as in `super.mount(parent, newSlot)`. ¿au¿a  ¿aÜ¿aè  ¿aY¿aZ¿d◊Äí¿d‹  ¿d˝¿e   ¿emÖ)¿fﬁÅL/// Change the widget used to configure this element.
///
/// The framework calls this function when the parent wishes to use a
/// different widget to configure this element. The new widget is guaranteed
/// to have the same [runtimeType] as the old widget.
///
/// This function is called only during the "active" lifecycle state. ¿fÂ¿f˜  ¿f»¿f…¿jöÇä¿k∆Å/// Change the slot that the given child occupies in its parent.
///
/// Called by [MultiChildRenderObjectElement], and other [RenderObjectElement]
/// subclasses that have multiple children, when child moves from one position
/// to another in this element's child list. ¿kŸ¿k‚  ¿kË¿kÒ  ¿k¥¿kµ¿m(Å¿m-  ¿m9¿mB   ¿n7Ä¯¿n<  ¿nI¿nN   ¿o3ÅÂ¿pûÅU/// Remove [renderObject] from the render tree.
///
/// The default implementation of this function simply calls
/// [detachRenderObject] recursively on each child. The
/// [RenderObjectElement.detachRenderObject] override does the actual work of
/// removing [renderObject] from the render tree.
///
/// This is called by [deactivateChild].   ¿qÇ\¿r Åò/// Add [renderObject] to the render tree at the location specified by `newSlot`.
///
/// The default implementation of this function simply calls
/// [attachRenderObject] recursively on each child. The
/// [RenderObjectElement.attachRenderObject] override does the actual work of
/// adding [renderObject] to the render tree.
///
/// The `newSlot` argument specifies the new value for this element's [slot]. ¿r›¿rÊ   ¿s|àF¿sÖ  ¿sú¿sß  ¿s´¿s≥   ¿{∆à∫¿.É/// Create an element for the given widget and add it as a child of this
/// element in the given slot.
///
/// This method is typically called by [updateChild] but can be called
/// directly by subclasses that need finer-grained control over creating
/// elements.
///
/// If the given widget has a global key and an element already exists that
/// has a widget with that global key, this function will reuse that element
/// (potentially grafting it from another location in the tree or reactivating
/// it from the list of inactive elements) rather than creating a new element.
///
/// The `newSlot` argument specifies the new value for this element's [slot].
///
/// The element returned by this function will already have been mounted and
/// will be in the "active" lifecycle state. ¿<¿D  ¿N¿W  ¿~˚¿~¸¿¿	¿¿"¿¿ÑÑÅ,¿Ñâ  ¿Ñû¿Ñß   ¿Ö¥ÑÈ¿à◊ÇÙ/// Move the given element to the list of inactive elements and detach its
/// render object from the render tree.
///
/// This method stops the given element from being a child of this element by
/// detaching its render object from the render tree and moving the element to
/// the list of inactive elements.
///
/// This method (indirectly) calls [deactivate] on the child.
///
/// The caller is responsible for removing the child from its child model.
/// Typically [deactivateChild] is called by the element itself while it is
/// updating its child model; however, during [GlobalKey] reparenting, the new
/// parent proactively calls the old parent's [deactivateChild], first using
/// [forgetChild] to cause the old parent to update its child model. ¿àÁ¿à  ¿à≈¿à∆¿åGÑı¿é‡Ç[/// Remove the given child from the element's child list, in preparation for
/// the child being reused elsewhere in the element tree.
///
/// This updates the child model such that, e.g., [visitChildren] does not
/// walk that child anymore.
///
/// The element will still have a valid parent when this is called, and the
/// child's [Element.slot] value will be valid in the context of that parent.
/// After this is called, [deactivateChild] is called to sever the link to
/// this object.
///
/// The [update] is responsible for updating or creating the new child that
/// will replace this [child]. ¿éÏ¿éı  ¿éΩ¿éæ¿é ¿éÀ¿ë@ÅÃ¿ëE  ¿ëY¿ëb  ¿ëi¿ër   ¿ìÅ¿ì  ¿ì1¿ì:   ¿îÖ0¿ñáÇB/// Transition from the "inactive" to the "active" lifecycle state.
///
/// The framework calls this method when a previously deactivated element has
/// been reincorporated into the tree. The framework does not call this method
/// the first time an element becomes active (i.e., from the "initial"
/// lifecycle state). Instead, the framework calls [mount] in that situation.
///
/// See the lifecycle documentation for [Element] for additional information.
///
/// Implementations of this method should start with a call to the inherited
/// method, as in `super.activate()`.  ¿ñq¿ñr¿ôLÜâ¿úeÇ‰/// Transition from the "active" to the "inactive" lifecycle state.
///
/// The framework calls this method when a previously active element is moved
/// to the list of inactive elements. While in the inactive state, the element
/// will not appear on screen. The element can remain in the inactive state
/// only until the end of the current animation frame. At the end of the
/// animation frame, if the element has not be reactivated, the framework will
/// unmount the element.
///
/// This is (indirectly) called by [deactivateChild].
///
/// See the lifecycle documentation for [Element] for additional information.
///
/// Implementations of this method should end with a call to the inherited
/// method, as in `super.deactivate()`.  ¿úO¿úP¿üŸÄ¯¿†~Äà/// Called, in debug mode, after children have been deactivated (see [deactivate]).
///
/// This method is not called in release builds.  ¿†h¿†i¿†’Ü"¿§~Én/// Transition from the "inactive" to the "defunct" lifecycle state.
///
/// Called when the framework determines that an inactive element will never
/// be reactivated. At the end of each animation frame, the framework calls
/// [unmount] on any remaining inactive elements, preventing inactive elements
/// from remaining inactive for longer than a single animation frame.
///
/// After this function is called, the element will not be incorporated into
/// the tree again.
///
/// Any resources this element holds should be released at this point. For
/// example, [RenderObjectElement.unmount] calls [RenderObject.dispose] and
/// nulls out its reference to the render object.
///
/// See the lifecycle documentation for [Element] for additional information.
///
/// Implementations of this method should end with a call to the inherited
/// method, as in `super.unmount()`.  ¿§h¿§i¿¶˚É¿ß   ¿¶˚¿¶¸¿¬hÇÎ¿¬m    ¿≈WÅ:¿≈s  ¿≈å¿≈û  ¿≈©¿≈≤  ¿≈W¿≈X¿∆ïÅü¿∆§ ¿∆«¿∆«¿∆„¿∆Ï  ¿∆ï¿∆ñ¿»8Å¿»V ¿»~¿»~ ¿»8¿»9¿…SÇ ¿ÀÅâ/// Called in [Element.mount] and [Element.activate] to register this element in
/// the notification tree.
///
/// This method is only exposed so that [NotifiableElementMixin] can be implemented.
/// Subclasses of [Element] that wish to respond to notifications should mix that
/// in instead.
///
/// See also:
///   * [NotificationListener], a widget that allows listening to notifications.  ¿ Ô¿ ¿ÀWÄå¿À\    ¿ÀÁÅ'¿Àˆ ¿Ã¿Ã ¿ÀÁ¿ÀË¿ÕÅ¥¿Õ! ¿Õ9¿Õ9 ¿Õ¿Õ¿Œ Å©¿ŒŸ ¿Œı¿Œı ¿Œ ¿ŒÀ¿–wÅt¿–Ü ¿–•¿–• ¿–w¿–x¿—ÔÅ¿“   ¿“&¿“6  ¿—Ô¿—¿“ˆÇ›¿‘¯Å€/// Called when a dependency of this element changes.
///
/// The [dependOnInheritedWidgetOfExactType] registers this element as depending on
/// inherited information of the given type. When the information of that type
/// changes at this location in the tree (e.g., because the [InheritedElement]
/// updated to a new [InheritedWidget] and
/// [InheritedWidget.updateShouldNotify] returned true), the framework calls
/// this function to notify this element of the change.  ¿‘‚¿‘„¿’◊É%¿’‹  ¿’˛¿÷   ¿Ÿ Å¬¿Ÿâ{/// Returns a description of what caused this element to be created.
///
/// Useful for debugging the source of an element. ¿Ÿû	¿Ÿ£   ¿⁄∆Å¥¿€®ÄÀ/// Returns the parent chain from this element back to the root of the tree.
///
/// Useful for debug display of a tree of Elements with only nodes in the path
/// from the root to this Element expanded.   ¿‹~ÄÅ¿‹è  ¿‹§¿‹≤  ¿‹~¿‹¿›Äõ¿›J1/// A short, textual description of this element.  ¿›7¿›8¿›¢ÄÕ¿›æ  ¿›“¿›€  ¿›‡¿›˜  ¿›¢¿›£¿ﬁsÑ+¿ﬁÑ  ¿ﬁò&¿ﬁµ  ¿ﬁs¿ﬁt¿‚¢ÄÔ¿‚ƒ   ¿‚¢¿‚£¿ÊáÄ∆¿Êå  ¿Ê∑
¿ÊΩ   ¿ÁQãM¿ËæÅY/// Marks the element as dirty and adds it to the global list of widgets to
/// rebuild in the next frame.
///
/// Since it is inefficient to build an element twice in one frame,
/// applications and widgets should be structured so as to only mark
/// widgets dirty during event handlers before the frame begins, not during
/// the build itself.   ¿Ú¢Ö6¿Ù Å./// Cause the widget to update itself. In debug builds, also verify various
/// invariants.
///
/// Called by the [BuildOwner] when [BuildOwner.scheduleBuildFor] has been
/// called to mark this element dirty, by [mount] when the element is first
/// built, and by [update] when the widget has changed.  ¿Û›¿Ûﬁ¿Û‰¿Û˜¿ÛÂ¿˜‹Äô¿¯do/// Cause the widget to update itself.
///
/// Called by [rebuild] after the appropriate checks have been made.  ¿¯R¿¯S ¿¯yÇÆ¿¯  ¿¯¡Ä⁄ ¿¯¡¿¯ﬂ ¿¯Ê¿¯Ô  ¿¯¯¿˘
  ¿˘$¿˘4  ¿˘>¿˘D  ¿˘N¿˘\¿˘a¿˘ô¿˘k¿˘g¿˘m¿˘|¿˘w¿˘~¿˘é¿˘â¿˘ê¿˘ü¿˘™   ¿˘∑Ån¿˘ÿ  ¿˘‚)¿˙  ¿˘∑¿˘∏ ¿˝Nì:¿1É‹/// A widget that renders an exception's message.
///
/// This widget is used when a build method fails, to help with determining
/// where the problem lies. Exceptions are also logged to the console, which you
/// can read using `flutter logs`. The console will also include additional
/// information such as the stack trace for the exception.
///
/// It is possible to override this widget.
///
/// {@tool dartpad}
/// This example shows how to override the standard error widget builder in release
/// mode, but use the standard one in debug mode.
///
/// The error occurs when you click the "Error Prone" button.
///
/// ** See code in examples/api/lib/widgets/framework/error_widget.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [FlutterError.onError], which can be set to a method that exits the
///    application if that is preferable to showing an error message.
///  * <https://flutter.dev/docs/testing/errors>, more information about error
///    handling in Flutter. ¿`Çl ¿%¿0Å≤/// Creates a widget that displays the given exception.
///
/// The message will be the stringification of the given exception, unless
/// computing that value itself throws an exception, in which case it will
/// be the string "Error".
///
/// If this object is inspected from an IDE or the devtools, and the original
/// exception is a [FlutterError] object, the original exception itself will
/// be shown in the inspection output.¿1¿9  ¿Q¿I¿S¿]¿g¿^¿~¿p¿ö¿¶¿ä¿Ä¿ç¿ú¿®¿¥¿π¿ ¿Ω¿∫¿ø¿»¿…¿–Å=¿ô¿ö¿•Äµ/// Creates a widget that displays the given error message.
///
/// An explicit [FlutterError] can be provided to be reported to inspection
/// tools. It need not match the message.¿®¿Æ  ¿ª¿   ¿∑¿Ê¿ÿ¿Ë¿ı¿˙¿¿˛¿˚¿ ¿	¿
¿Ü?¿,Ö∆/// The configurable factory for [ErrorWidget].
///
/// When an error occurs while building a widget, the broken widget is
/// replaced by the widget returned by this function. By default, an
/// [ErrorWidget] is returned.
///
/// The system is typically in an unstable state when this function is called.
/// An exception has just been thrown in the middle of build (and possibly
/// layout), so surrounding widgets and render objects may be in a rather
/// fragile state. The framework itself (especially the [BuildOwner]) may also
/// be confused, and additional exceptions are quite likely to be thrown.
///
/// Because of this, it is highly recommended that the widget returned from
/// this function perform the least amount of work possible. A
/// [LeafRenderObjectWidget] is the best choice, especially one that
/// corresponds to a [RenderBox] that can handle the most absurd of incoming
/// constraints. The default constructor maps to a [RenderErrorBox].
///
/// The default behavior is to show the exception's message in debug mode,
/// and to show nothing but a gray background in release builds.
///
/// See also:
///
///  * [FlutterError.onError], which is typically called with the same
///    [FlutterErrorDetails] object immediately prior to this callback being
///    invoked, and which can also be configured to control how errors are
///    reported.
///  * <https://flutter.dev/docs/testing/errors>, more information about error
///    handling in Flutter.¿6¿~2¿©/// The message to display. ¿¥!¿»   ¿UÅì¿c  ¿~¿ì   ¿ÏÅé¿˙  ¿¿   ¿⁄Z¿  ¿¿  ¿⁄¿€¿8ÅN¿I  ¿]&¿z  ¿8¿9 ¿¢å…¿°ÄÔ/// An [Element] that composes other [Element]s.
///
/// Rather than creating a [RenderObject] directly, a [ComponentElement] creates
/// [RenderObject]s indirectly by creating other [Element]s.
///
/// Contrast with [RenderObjectElement]. ¿∆z ¿¿ G/// Creates an element that uses the given widget as its configuration.¿!¿)  ¿2¿7¿>¿8¿D¿M  ¿X¿] ¿p¿y9¿é   ¿y¿z¿∂Ä‰¿«  ¿Õ¿◊  ¿ﬁ¿Á  ¿∂¿∑¿ûÄ†¿£    ¿Bád¿„ÅV/// Calls the [StatelessWidget.build] method of the [StatelessWidget] object
/// (for stateless widgets) or the [State.build] method of the [State] object
/// (for stateful widgets) and then updates the widget tree.
///
/// Called automatically during [mount] to generate the first build, and by
/// [rebuild] when the element needs updating.  ¿•¿¶¿±¿≤¿∏¿⁄¿π¿%™ÄÃ¿&nÄ©/// Subclasses should override this function to actually call the appropriate
/// `build` function (e.g., [StatelessWidget.build] or [State.build]) for
/// their widget.  ¿&Z¿&[¿&zl¿&ã  ¿&ô¿&©  ¿&z¿&{¿&Í¿&˚  ¿'¿'  ¿&Í¿&Î ¿'mÅ‰¿'∏D/// An [Element] that uses a [StatelessWidget] as its configuration. ¿'ÊÄÉ ¿(0¿(@G/// Creates an element that uses the given widget as its configuration.¿(A¿(R  ¿([¿(`¿(g¿(a  ¿(mF¿(Ä   ¿(m¿(n¿(∑Äò¿(»  ¿(œ¿(‡  ¿(∑¿(∏ ¿)S¶¿)ùC/// An [Element] that uses a [StatefulWidget] as its configuration. ¿) Ñf ¿*¿*#G/// Creates an element that uses the given widget as its configuration.¿*$¿*4  ¿*J¿*C¿*L¿*R¿*S¿*^¿*_¿*j¿*o¿*v¿*p¿/¢¿/π  ¿J ÇX¿MÇ"/// This controls whether we should call [State.didChangeDependencies] from
/// the start of [build], to avoid calls when the [State] will not get built.
/// This can happen when the widget has dropped out of the tree, but depends
/// on an [InheritedWidget] that is still in the tree.
///
/// It is set initially to false, since [_firstBuild] makes the initial call
/// on the [state]. When it is true, [build] will call
/// `state.didChangeDependencies` and then sets it to false. Subsequent calls
/// to [didChangeDependencies] set it to true.¿M¿.hÅ7¿/éÅ/// The [State] instance associated with this location in the tree.
///
/// There is a one-to-one relationship between [State] objects and the
/// [StatefulElement] objects that hold them. The [State] objects are created
/// by [StatefulElement] in [mount].   ¿.40¿.G   ¿.4¿.5¿/ƒÄû¿/’   ¿/ƒ¿/≈¿0fÑî¿0w   ¿0f¿0g¿4˛Ä∂¿5   ¿4˛¿4ˇ¿5∏Ñ›¿5…  ¿5–¿5‡  ¿5∏¿5π¿:ôÅô¿:™   ¿:ô¿:ö¿<6S¿<G   ¿<6¿<7¿<çÇœ¿<û   ¿<ç¿<é¿?`ãf¿?|  ¿?ï¿?û  ¿?©¿?≤  ¿?`¿?a¿M't¿M8   ¿M'¿M(¿MüÄ„¿Mª  ¿Mœ¿Mÿ  ¿M›¿MÙ  ¿Mü¿M†¿NÜÄ‚¿Nó  ¿N´&¿N»  ¿NÜ¿Ná ¿OlÑÀ¿Oº@/// An [Element] that uses a [ProxyWidget] as its configuration. ¿OÊZ ¿P¿P&/// Initializes fields for subclasses.¿P¿P)  ¿P2¿P7¿P>¿P8  ¿PD<¿PW   ¿PD¿PE¿PÑÅ"¿Pï  ¿Pú¿P©  ¿PÑ¿PÖ¿Q™ÅW¿RµÄÓ/// Called during build when the [widget] has changed.
///
/// By default, calls [notifyClients]. Subclasses may override this method to
/// avoid calling [notifyClients] unnecessarily (e.g. if the old and new
/// widgets are equivalent). ¿RΩ¿R‘  ¿R£¿R§¿SÅ0¿TÄ‰/// Notify other objects that the widget associated with this element has
/// changed.
///
/// Called during [update] (via [updated]) after changing the widget
/// associated with this element but before rebuilding this element. ¿T¿T+  ¿SÙ¿Sı ¿T9äˆ¿TÖE/// An [Element] that uses a [ParentDataWidget] as its configuration.¿Tó¿Tó¿T∆Äà ¿U¿U!G/// Creates an element that uses the given widget as its configuration.¿U"¿U7  ¿U@¿UE¿UL¿UF  ¿URÅq¿UW  ¿Uh¿U}   ¿V«áÍ¿]¬Üµ/// Calls [ParentDataWidget.applyParentData] on the given widget, passing it
/// the [RenderObject] whose parent data this element is ultimately
/// responsible for.
///
/// This allows a render object's [RenderObject.parentData] to be modified
/// without triggering a build. This is generally ill-advised, but makes sense
/// in situations such as the following:
///
///  * Build and layout are currently under way, but the [ParentData] in question
///    does not affect layout, and the value to be applied could not be
///    determined before build and layout (e.g. it depends on the layout of a
///    descendant).
///
///  * Paint is currently under way, but the [ParentData] in question does not
///    affect layout or paint, and the value to be applied could not be
///    determined before paint (e.g. it depends on the compositing phase).
///
/// In either case, the next build is expected to cause this element to be
/// configured with the given new widget (or a widget with equivalent data).
///
/// Only [ParentDataWidget]s that return true for
/// [ParentDataWidget.debugCanApplyOutOfTurn] can be applied this way.
///
/// The new widget must have the same child as the current widget.
///
/// An example of when this is used is the [AutomaticKeepAlive] widget. If it
/// receives a notification during the build of one of its descendants saying
/// that its child must be kept alive, it will apply a [KeepAlive] widget out
/// of turn. This is safe, because by definition the child is already alive,
/// and therefore this will not change the behavior of the parent this frame.
/// It is more efficient than requesting an additional frame just for the
/// purpose of updating the [KeepAlive] widget. ¿]◊¿]Ï   ¿^µx¿^∆  ¿^‘¿^È  ¿^µ¿^∂ ¿_1öÏ¿_}E/// An [Element] that uses an [InheritedWidget] as its configuration. ¿_ßÄÉ ¿_Ò¿`G/// Creates an element that uses the given widget as its configuration.¿`¿`  ¿`¿`!¿`(¿`"¿`.E¿`J ¿`X¿`_¿`p¿``¿`o¿`i¿`q¿`r ¿`xÅ¢¿`â   ¿`x¿`y¿bÄó¿b/   ¿b¿b¿bπÑ∞¿gÑ/// Returns the dependencies value recorded for [dependent]
/// with [setDependencies].
///
/// Each dependent element is mapped to a single object value
/// which represents how the element depends on this
/// [InheritedElement]. This value is null by default and by default
/// dependent elements are rebuilt unconditionally.
///
/// Subclasses can manage these values with [updateDependencies]
/// so that they can selectively rebuild dependents in
/// [notifyDependent].
///
/// This method is typically only called in overrides of [updateDependencies].
///
/// See also:
///
///  * [updateDependencies], which is called each time a dependency is
///    created with [dependOnInheritedWidgetOfExactType].
///  * [setDependencies], which sets dependencies value for a dependent
///    element.
///  * [notifyDependent], which can be overridden to use a dependent's
///    dependencies value to decide if the dependent needs to be rebuilt.
///  * [InheritedModel], which is an example of a class that uses this method
///    to manage dependency values. ¿g.¿g7  ¿g	¿g
¿gmÑ ¿k‹Ñ0/// Sets the value returned by [getDependencies] value for [dependent].
///
/// Each dependent element is mapped to a single object value
/// which represents how the element depends on this
/// [InheritedElement]. The [updateDependencies] method sets this value to
/// null by default so that dependent elements are rebuilt unconditionally.
///
/// Subclasses can manage these values with [updateDependencies]
/// so that they can selectively rebuild dependents in [notifyDependent].
///
/// This method is typically only called in overrides of [updateDependencies].
///
/// See also:
///
///  * [updateDependencies], which is called each time a dependency is
///    created with [dependOnInheritedWidgetOfExactType].
///  * [getDependencies], which returns the current value for a dependent
///    element.
///  * [notifyDependent], which can be overridden to use a dependent's
///    [getDependencies] value to decide if the dependent needs to be rebuilt.
///  * [InheritedModel], which is an example of a class that uses this method
///    to manage dependency values. ¿kÏ¿kı  ¿kˇ¿l  ¿k ¿kÀ¿l;Ñä¿pdÉÍ/// Called by [dependOnInheritedWidgetOfExactType] when a new [dependent] is added.
///
/// Each dependent element can be mapped to a single object value with
/// [setDependencies]. This method can lookup the existing dependencies with
/// [getDependencies].
///
/// By default this method sets the inherited dependencies for [dependent]
/// to null. This only serves to record an unconditional dependency on
/// [dependent].
///
/// Subclasses can manage their own dependencies values so that they
/// can selectively rebuild dependents in [notifyDependent].
///
/// See also:
///
///  * [getDependencies], which returns the current value for a dependent
///    element.
///  * [setDependencies], which sets the value for a dependent element.
///  * [notifyDependent], which can be overridden to use a dependent's
///    dependencies value to decide if the dependent needs to be rebuilt.
///  * [InheritedModel], which is an example of a class that uses this method
///    to manage dependency values. ¿pw¿pÄ  ¿pä¿pì  ¿pR¿pS¿p…ÉF¿sõÇü/// Called by [notifyClients] for each dependent.
///
/// Calls `dependent.didChangeDependencies()` by default.
///
/// Subclasses can override this method to selectively call
/// [didChangeDependencies] based on the value of [getDependencies].
///
/// See also:
///
///  * [updateDependencies], which is called each time a dependency is
///    created with [dependOnInheritedWidgetOfExactType].
///  * [getDependencies], which returns the current value for a dependent
///    element.
///  * [setDependencies], which sets the value for a dependent element.
///  * [InheritedModel], which is an example of a class that uses this method
///    to manage dependency values. ¿s´#¿s∆  ¿s–¿sŸ  ¿sâ¿sä¿tÅ¶¿u.Ä˝/// Calls [Element.didChangeDependencies] of all dependent elements, if
/// [InheritedWidget.updateShouldNotify] returns true.
///
/// Called by [update], immediately prior to [build].
///
/// Calls [notifyClients] to actually trigger the notifications. ¿u6¿uG  ¿u¿u¿uΩÑ^¿w„Å˛/// Notifies all dependent elements that this inherited widget has changed, by
/// calling [Element.didChangeDependencies].
///
/// This method must only be called during the build phase. Usually this
/// method is called automatically when an inherited widget is rebuilt, e.g.
/// as a result of calling [State.setState] above the inherited widget.
///
/// See also:
///
///  * [InheritedNotifier], a subclass of [InheritedWidget] that also calls
///    this method when its [Listenable] sends a notification. ¿wÒ¿x  ¿w“¿w” ¿z¿ {N¿ö5†/// An [Element] that uses a [RenderObjectWidget] as its configuration.
///
/// [RenderObjectElement] objects have an associated [RenderObject] widget in
/// the render tree, which handles concrete operations like laying out,
/// painting, and hit testing.
///
/// Contrast with [ComponentElement].
///
/// For details on the lifecycle of an element, see the discussion at [Element].
///
/// ## Writing a RenderObjectElement subclass
///
/// There are three common child models used by most [RenderObject]s:
///
/// * Leaf render objects, with no children: The [LeafRenderObjectElement] class
///   handles this case.
///
/// * A single child: The [SingleChildRenderObjectElement] class handles this
///   case.
///
/// * A linked list of children: The [MultiChildRenderObjectElement] class
///   handles this case.
///
/// Sometimes, however, a render object's child model is more complicated. Maybe
/// it has a two-dimensional array of children. Maybe it constructs children on
/// demand. Maybe it features multiple lists. In such situations, the
/// corresponding [Element] for the [Widget] that configures that [RenderObject]
/// will be a new subclass of [RenderObjectElement].
///
/// Such a subclass is responsible for managing children, specifically the
/// [Element] children of this object, and the [RenderObject] children of its
/// corresponding [RenderObject].
///
/// ### Specializing the getters
///
/// [RenderObjectElement] objects spend much of their time acting as
/// intermediaries between their [widget] and their [renderObject]. It is
/// generally recommended against specializing the [widget] getter and
/// instead casting at the various callsites to avoid adding overhead
/// outside of this particular implementation.
///
/// ```dart
/// class FooElement extends RenderObjectElement {
///
///   @override
///   RenderFoo get renderObject => super.renderObject as RenderFoo;
///
///   void _foo() {
///     final Foo foo = widget as Foo;
///   }
///   // ...
/// }
/// ```
///
/// ### Slots
///
/// Each child [Element] corresponds to a [RenderObject] which should be
/// attached to this element's render object as a child.
///
/// However, the immediate children of the element may not be the ones that
/// eventually produce the actual [RenderObject] that they correspond to. For
/// example a [StatelessElement] (the element of a [StatelessWidget]) simply
/// corresponds to whatever [RenderObject] its child (the element returned by
/// its [StatelessWidget.build] method) corresponds to.
///
/// Each child is therefore assigned a _[slot]_ token. This is an identifier whose
/// meaning is private to this [RenderObjectElement] node. When the descendant
/// that finally produces the [RenderObject] is ready to attach it to this
/// node's render object, it passes that slot token back to this node, and that
/// allows this node to cheaply identify where to put the child render object
/// relative to the others in the parent render object.
///
/// A child's [slot] is determined when the parent calls [updateChild] to
/// inflate the child (see the next section). It can be updated by calling
/// [updateSlotForChild].
///
/// ### Updating children
///
/// Early in the lifecycle of an element, the framework calls the [mount]
/// method. This method should call [updateChild] for each child, passing in
/// the widget for that child, and the slot for that child, thus obtaining a
/// list of child [Element]s.
///
/// Subsequently, the framework will call the [update] method. In this method,
/// the [RenderObjectElement] should call [updateChild] for each child, passing
/// in the [Element] that was obtained during [mount] or the last time [update]
/// was run (whichever happened most recently), the new [Widget], and the slot.
/// This provides the object with a new list of [Element] objects.
///
/// Where possible, the [update] method should attempt to map the elements from
/// the last pass to the widgets in the new pass. For example, if one of the
/// elements from the last pass was configured with a particular [Key], and one
/// of the widgets in this new pass has that same key, they should be paired up,
/// and the old element should be updated with the widget (and the slot
/// corresponding to the new widget's new position, also). The [updateChildren]
/// method may be useful in this regard.
///
/// [updateChild] should be called for children in their logical order. The
/// order can matter; for example, if two of the children use [PageStorage]'s
/// `writeState` feature in their build method (and neither has a [Widget.key]),
/// then the state written by the first will be overwritten by the second.
///
/// #### Dynamically determining the children during the build phase
///
/// The child widgets need not necessarily come from this element's widget
/// verbatim. They could be generated dynamically from a callback, or generated
/// in other more creative ways.
///
/// #### Dynamically determining the children during layout
///
/// If the widgets are to be generated at layout time, then generating them in
/// the [mount] and [update] methods won't work: layout of this element's render
/// object hasn't started yet at that point. Instead, the [update] method can
/// mark the render object as needing layout (see
/// [RenderObject.markNeedsLayout]), and then the render object's
/// [RenderObject.performLayout] method can call back to the element to have it
/// generate the widgets and call [updateChild] accordingly.
///
/// For a render object to call an element during layout, it must use
/// [RenderObject.invokeLayoutCallback]. For an element to call [updateChild]
/// outside of its [update] method, it must use [BuildOwner.buildScope].
///
/// The framework provides many more checks in normal operation than it does
/// when doing a build during layout. For this reason, creating widgets with
/// layout-time build semantics should be done with great care.
///
/// #### Handling errors when building
///
/// If an element calls a builder function to obtain widgets for its children,
/// it may find that the build throws an exception. Such exceptions should be
/// caught and reported using [FlutterError.reportError]. If a child is needed
/// but a builder has failed in this way, an instance of [ErrorWidget] can be
/// used instead.
///
/// ### Detaching children
///
/// It is possible, when using [GlobalKey]s, for a child to be proactively
/// removed by another element before this element has been updated.
/// (Specifically, this happens when the subtree rooted at a widget with a
/// particular [GlobalKey] is being moved from this element to an element
/// processed earlier in the build phase.) When this happens, this element's
/// [forgetChild] method will be called with a reference to the affected child
/// element.
///
/// The [forgetChild] method of a [RenderObjectElement] subclass must remove the
/// child element from its child list, so that when it next [update]s its
/// children, the removed child is not considered.
///
/// For performance reasons, if there are many elements, it may be quicker to
/// track which elements were forgotten by storing them in a [Set], rather than
/// proactively mutating the local record of the child list and the identities
/// of all the slots. For example, see the implementation of
/// [MultiChildRenderObjectElement].
///
/// ### Maintaining the render object tree
///
/// Once a descendant produces a render object, it will call
/// [insertRenderObjectChild]. If the descendant's slot changes identity, it
/// will call [moveRenderObjectChild]. If a descendant goes away, it will call
/// [removeRenderObjectChild].
///
/// These three methods should update the render tree accordingly, attaching,
/// moving, and detaching the given child render object from this element's own
/// render object respectively.
///
/// ### Walking the children
///
/// If a [RenderObjectElement] object has any children [Element]s, it must
/// expose them in its implementation of the [visitChildren] method. This method
/// is used by many of the framework's internal mechanisms, and so should be
/// fast. It is also used by the test framework and [debugDumpApp]. ¿ö]Äâ ¿öß¿ö∫G/// Creates an element that uses the given widget as its configuration.¿öª¿öœ  ¿öÿ¿ö›¿ö‰¿öﬁ¿õÙ¿ú  ¿ú¿ú ¿ú,¿úr1¿úá  ¿öÍÅ¿õáy/// The underlying [RenderObject] for this element.
///
/// If this element has been [unmount]ed, this getter will throw.  ¿õj¿õk¿ú59¿úJ   ¿ú5¿ú6¿ú®ÄÔ¿úΩ    ¿ùõâ>¿ù∫    ¿¶›Ç¿¶Ó  ¿¶Ù¿¶˛  ¿ß¿ß  ¿¶›¿¶ﬁ¿®˙Å¿©  ¿©&¿©0  ¿®˙¿®˚¿™Äç¿™    ¿™¢c¿™≥   ¿™¢¿™£¿´	Å2¿´,   ¿´	¿´
¿´¿´#¿´¿¨?©=¿∏Rãô/// Updates the children of this element to use new widgets.
///
/// Attempts to update the given old children list using the given new
/// widgets, removing obsolete elements and introducing new ones as necessary,
/// and then returns the new child list.
///
/// During this function the `oldChildren` list must not be modified. If the
/// caller wishes to remove elements from `oldChildren` re-entrantly while
/// this function is on the stack, the caller can supply a `forgottenChildren`
/// argument, which can be modified while this function is on the stack.
/// Whenever this function reads from `oldChildren`, this function first
/// checks whether the child is in `forgottenChildren`. If it is, the function
/// acts as if the child was not in `oldChildren`.
///
/// This function is a convenience wrapper around [updateChild], which updates
/// each individual child. If `slots` is non-null, the value for the `newSlot`
/// argument of [updateChild] is retrieved from that list using the index that
/// the currently processed `child` corresponds to in the `newWidgets` list
/// (`newWidgets` and `slots` must have the same length). If `slots` is null,
/// an [IndexedSlot<Element>] is used as the value for the `newSlot` argument.
/// In that case, [IndexedSlot.index] is set to the index that the currently
/// processed `child` corresponds to in the `newWidgets` list and
/// [IndexedSlot.value] is set to the [Element] of the previous widget in that
/// list (or null if it is the first child).
///
/// When the [slot] value of an [Element] changes, its
/// associated [renderObject] needs to move to a new position in the child
/// list of its parents. If that [RenderObject] organizes its children in a
/// linked list (as is done by the [ContainerRenderObjectMixin]) this can
/// be implemented by re-inserting the child [RenderObject] into the
/// list after the [RenderObject] associated with the [Element] provided as
/// [IndexedSlot.value] in the [slot] object.
///
/// Simply using the previous sibling as a [slot] is not enough, though, because
/// child [RenderObject]s are only moved around when the [slot] of their
/// associated [RenderObjectElement]s is updated. When the order of child
/// [Element]s is changed, some elements in the list may move to a new index
/// but still have the same previous sibling. For example, when
/// `[e1, e2, e3, e4]` is changed to `[e1, e3, e4, e2]` the element e4
/// continues to have e3 as a previous sibling even though its index in the list
/// has changed and its [RenderObject] needs to move to come before e2's
/// [RenderObject]. In order to trigger this move, a new [slot] value needs to
/// be assigned to its [Element] whenever its index in its
/// parent's child list changes. Using an [IndexedSlot<Element>] achieves
/// exactly that and also ensures that the underlying parent [RenderObject]
/// knows where a child needs to move to in a linked list by providing its new
/// previous sibling. ¿∏a¿∏p  ¿∏|¿∏ä  ¿∏ó¿∏¶  ¿∏∏¿∏»  ¿∏7¿∏8¿’ÄÄÂ¿’ë   ¿’Ä¿’Å¿÷iÇ/¿÷z   ¿÷i¿÷j¿ÿúÑ·¿ÿ°  ¿ÿ≥-¿ÿ—   ¿›ÅÅ¿›í  ¿›û¿›ß  ¿›Å¿›Ç¿ﬁçÅÔ¿ﬁû  ¿ﬁ±¿ﬁ∫  ¿ﬁç¿ﬁé¿‡ÄÄÔ¿‡ë   ¿‡Ä¿‡Å¿·sÜ)¿„XÅ¬/// Insert the given child into [renderObject] at the given slot.
///
/// {@template flutter.widgets.RenderObjectElement.insertRenderObjectChild}
/// The semantics of `slot` are determined by this element. For example, if
/// this element has a single child, the slot should always be null. If this
/// element has a list of children, the previous sibling element wrapped in an
/// [IndexedSlot] is a convenient value for the slot.
/// {@endtemplate} ¿„p¿„à  ¿„é¿„°  ¿„F¿„G¿Á†áÕ¿ÎÉF/// Move the given child from the given old slot to the given new slot.
///
/// The given child is guaranteed to have [renderObject] as its parent.
///
/// {@macro flutter.widgets.RenderObjectElement.insertRenderObjectChild}
///
/// This method is only ever called if [updateChild] can end up being called
/// with an existing [Element] child and a `slot` that differs from the slot
/// that element was previously given. [MultiChildRenderObjectElement] does this,
/// for example. [SingleChildRenderObjectElement] does not (since the `slot` is
/// always null). An [Element] that has a specific set of slots with each child
/// always having the same slot (and where children in different slots are never
/// compared against each other for the purposes of updating one slot with the
/// element from another slot) would never call this. ¿Î+¿ÎC  ¿ÎI¿Î\  ¿Îd¿Îw  ¿Î¿Î¿ÔqÖ¿6Ä™/// Remove the given child from [renderObject].
///
/// The given child is guaranteed to have been inserted at the given `slot`
/// and have [renderObject] as its parent. ¿N¿f  ¿l¿  ¿$¿%¿ÙÑÄÁ¿Ùï  ¿Ù©&¿Ù∆  ¿ÙÑ¿ÙÖ ¿ıoÑ¶¿ˆ%Ä¶/// The element at the root of the tree.
///
/// Only root elements may have their owner set explicitly. All other
/// elements inherit their owner from their parent. ¿ˆ]l ¿ˆÜ¿ˆù&/// Initializes fields for subclasses.¿ˆû¿ˆ≤  ¿ˆª¿ˆ¿¿ˆ«¿ˆ¡  ¿ˆÕÇy¿˘Å◊/// Set the owner of the element. The owner will be propagated to all the
/// descendants of this element.
///
/// The owner manages the dirty elements list.
///
/// The [WidgetsBinding] introduces the primary owner,
/// [WidgetsBinding.buildOwner], and assigns it to the widget tree in the call
/// to [runApp]. The binding is responsible for driving the build pipeline by
/// calling the build owner's [BuildOwner.buildScope] method. See
/// [WidgetsBinding.drawFrame]. ¿˘¿˘'   ¿˘JÄ…¿˘[  ¿˘a¿˘k  ¿˘r¿˘{  ¿˘J¿˘K ¿˙É8¿˙iK/// An [Element] that uses a [LeafRenderObjectWidget] as its configuration. ¿˙°Äë ¿˙Î¿˚G/// Creates an element that uses the given widget as its configuration.¿˚¿˚  ¿˚$¿˚)¿˚0¿˚*  ¿˚6b¿˚G  ¿˚S¿˚\  ¿˚6¿˚7¿˚úc¿˚≠  ¿˚≈¿˚”  ¿˚Ÿ¿˚‚  ¿˚ú¿˚ù¿¸u¿¸  ¿¸*¿¸8  ¿¸>¿¸G  ¿¸O¿¸X  ¿¸¿¸¿¸|c¿¸ç  ¿¸•¿¸≥  ¿¸π¿¸¬  ¿¸|¿¸}¿¸„j¿˝   ¿¸„¿¸‰ ¿˝Qà#¿˛ûÅF/// An [Element] that uses a [SingleChildRenderObjectWidget] as its configuration.
///
/// The child is optional.
///
/// This element subclass can be used for RenderObjectWidgets whose
/// RenderObjects use the [RenderObjectWithChildMixin] mixin. Such widgets are
/// expected to inherit from [SingleChildRenderObjectWidget]. ¿˛›Äü ¿ˇ'¿ˇEG/// Creates an element that uses the given widget as its configuration.¿ˇF$¿ˇe  ¿ˇn¿ˇs¿ˇz¿ˇt¿ˇÄ¿ˇâ   ¿ˇîl¿ˇ•  ¿ˇ≥¿ˇ√  ¿ˇî¿ˇï¿ ¿   ¿ !¿ *  ¿ ¿ ¿ áÄπ¿ ò  ¿ û¿ ®  ¿ Ø¿ ∏  ¿ á¿ à¿DÄ›¿U  ¿\'¿{  ¿D¿E¿%Ån¿6  ¿N¿\  ¿b¿k  ¿%¿&¿óu¿®  ¿æ¿Ã  ¿“¿€  ¿„¿Ï  ¿ó¿ò¿Åb¿!  ¿9¿G  ¿M¿V  ¿¿ ¿vï¿˚Ç~/// An [Element] that uses a [MultiChildRenderObjectWidget] as its configuration.
///
/// This element subclass can be used for RenderObjectWidgets whose
/// RenderObjects use the [ContainerRenderObjectMixin] mixin with a parent data
/// type that implements [ContainerParentDataMixin<RenderObject>]. Such widgets
/// are expected to inherit from [MultiChildRenderObjectWidget].
///
/// See also:
///
/// * [IndexedSlot], which is used as [Element.slot]s for the children of a
///   [MultiChildRenderObjectElement].
/// * [RenderObjectElement.updateChildren], which discusses why [IndexedSlot]
///   is used for the slots of the children. ¿9ÄÈ ¿É¿†G/// Creates an element that uses the given widget as its configuration.¿°#¿ø  ¿Ã¿“¿	¿”¿‘¿Ú¿	
¿Û¿˚¿	¿	¿	¿	¿	 ¿	¿=¿P  ¿—:¿‰ ¿˘¿ ¿¿¿	¿
¿	&ÄÊ¿	á   ¿	&¿	'¿
Å)¿
ÂÄî/// The current list of children of this element.
///
/// This list is filtered to hide elements that have been forgotten (using
/// [forgetChild]).  ¿
≠¿
Æ¿
∫¿
ª	¿Å¿!  ¿9¿G  ¿M¿d  ¿¿¿ìÅñ¿§  ¿∫¿»  ¿Œ¿Â  ¿Ì¿  ¿ì¿î¿-ÅF¿>  ¿V¿d  ¿j¿s  ¿-¿.¿wÄ∂¿à  ¿ñ¿¶  ¿w¿x¿1Ä ¿B  ¿N¿W  ¿1¿2¿ˇÉ?¿  ¿)¿2   ¿BÄ·¿V  ¿d¿l  ¿v¿  ¿B¿C¿'Çz¿8  ¿>¿H  ¿O¿X  ¿'¿(¿•ÅÊ¿∂  ¿Ω&¿€  ¿•¿¶ ¿èÅ±¿LÄ∂/// A wrapper class for the [Element] that is the creator of a [RenderObject].
///
/// Setting a [DebugCreator] as [RenderObject.debugCreator] will lead to better
/// error messages. ¿]X ¿ö¿¶:/// Create a [DebugCreator] instance with input [Element].¿ß¿≠   ¿π>¿&/// The creator of the [RenderObject].  ¿¸B¿   ¿¸¿˝ ¿ÚÑ’¿ UÇQ/// A value for [Element.slot] used for children of
/// [MultiChildRenderObjectElement]s.
///
/// A slot for a [MultiChildRenderObjectElement] consists of an [index]
/// identifying where the child occupying this slot is located in the
/// [MultiChildRenderObjectElement]'s child list and an arbitrary [value] that
/// can further define where the child occupying this slot fits in its
/// parent's child list.
///
/// See also:
///
///  * [RenderObjectElement.updateChildren], which discusses why this class is
///    used as slot values for the children of a [MultiChildRenderObjectElement].¿ a¿ a¿ yu ¿  ¿ ’H/// Creates an [IndexedSlot] with the provided [index] and slot [value].¿ ÷
¿ ‹  ¿ ‚
¿ Ë   ¿ Út¿!ab/// Information to define where the child occupying this slot fits in its
/// parent's child list. ¿!kH¿!Æ6/// The index of this slot in the parent's child list. ¿"ã:¿"ü   ¿"ã¿"å¿!∏Äœ¿!“  ¿!’¿!›  ¿!∏¿!π¿ D¿ E¿"…Å|¿#9i/// Used as a placeholder in [List<Element>] objects when the actual
/// elements are not yet determined. ¿#Z, ¿#Z¿#f  ¿#k¿#p¿#Ñ¿#q¿#w¿#Ç¿#É¿#ä-¿#û ¿#©¿#µ¿#∂¿#ºC¿#—   ¿#º¿#Ω¿$@¿$   ¿$¿$ ¿$GÄÅ¿$M  ¿$l ¿$r¿$}     ¿$ÑB¿$ò   ¿$Ñ¿$Ö  ¿ Ä¿ÇS¿ ÅE/// Tracks the lifecycle of [State] objects when asserts are enabled.  ¿ Åb¿ ÅzV/// The [State] object has been created. [State.initState] is called at this
/// time. ¿ ÅÜÄ¨¿ Ç'Äú/// The [State.initState] method has been called but the [State] object is
/// not yet ready to build. [State.didChangeDependencies] is called at this time. ¿ Ç7c¿ ÇïY/// The [State] object is ready to build and [State.dispose] has not yet been
/// called. ¿ Çüq¿ É	e/// The [State.dispose] method has been called and the [State] object is
/// no longer able to build.    ¿=aF¿=f   ¿=|¿=|  ¿=á¿=á  ¿=ë¿=ë  ¿=ù¿=ù       ¿BÅÆ¿V  ¿o¿Ä  ¿ä¿í  ¿û¿´  ¿µ*¿Ã   ¿%4Äª¿%9  ¿%P¿%h  ¿%o¿%x    ¿ Éf¿ ÉN0/// The signature of [State.setState] functions.  ¿ Éj¿ Éx   ¿E<Å¿FÄ”/// Signature for the callback to [BuildContext.visitChildElements].
///
/// The argument is the child being visited.
///
/// It is safe to call `element.visitChildElements` reentrantly within
/// this callback.  ¿F7¿F@   ¿˚)Ç#¿˝
Åÿ/// Signature for the constructor that is called when an error occurs while
/// building a widget.
///
/// The argument provides information regarding the cause of the error.
///
/// See also:
///
///  * [ErrorWidget.builder], which can be set to override the default
///    [ErrorWidget] builder.
///  * [FlutterError.reportError], which is typically called with the same
///    [FlutterErrorDetails] object immediately prior to [ErrorWidget.builder]
///    being called.  ¿˝/¿˝D   ¿äÅ÷¿*Åó/// Signature for a function that creates a widget, e.g. [StatelessWidget.build]
/// or [State.build].
///
/// Used by [Builder.builder], [OverlayEntry.builder], etc.
///
/// See also:
///
///  * [IndexedWidgetBuilder], which is similar but also takes an index.
///  * [TransitionBuilder], which is similar but also takes a child.
///  * [ValueWidgetBuilder], which is similar but takes a value and a child.  ¿J¿X   ¿bÅÚ¿Å°/// Signature for a function that creates a widget for a given index, e.g., in a
/// list.
///
/// Used by [ListView.builder] and other APIs that use lazily-generated widgets.
///
/// See also:
///
///  * [WidgetBuilder], which is similar but only takes a [BuildContext].
///  * [TransitionBuilder], which is similar but also takes a child.
///  * [NullableIndexedWidgetBuilder], which is similar but may return null.  ¿3¿A  ¿I	¿N   ¿VÑ¿"É√/// Signature for a function that creates a widget for a given index, e.g., in a
/// list, but may return null.
///
/// Used by [SliverChildBuilderDelegate.builder] and other APIs that
/// use lazily-generated widgets where the child count is not known
/// ahead of time.
///
/// Unlike most builders, this callback can return null, indicating the index
/// is out of range. Whether and when this is valid depends on the semantics
/// of the builder. For example, [SliverChildBuilderDelegate.builder] returns
/// null when the index is out of range, where the range is defined by the
/// [SliverChildBuilderDelegate.childCount]; so in that case the `index`
/// parameter's value may determine whether returning null is valid or not.
///
/// See also:
///
///  * [WidgetBuilder], which is similar but only takes a [BuildContext].
///  * [TransitionBuilder], which is similar but also takes a child.
///  * [IndexedWidgetBuilder], which is similar but not nullable.  ¿R¿`  ¿h	¿m   ¿uÇ+¿WÅŸ/// A builder that builds a widget given a child.
///
/// The child should typically be part of the returned widget tree.
///
/// Used by [AnimatedBuilder.builder], as well as [WidgetsApp.builder] and
/// [MaterialApp.builder].
///
/// See also:
///
///  * [WidgetBuilder], which is similar but only takes a [BuildContext].
///  * [IndexedWidgetBuilder], which is similar but also takes an index.
///  * [ValueWidgetBuilder], which is similar but takes a value and a child.  ¿{¿â  ¿ë¿ö   ¿	óÇ§¿
bÄƒ/// Mixin this class to allow receiving [Notification] objects dispatched by
/// child elements.
///
/// See also:
///   * [NotificationListener], for a widget that allows consuming notifications.    ¿
àÅ1¿èÄ˜/// Called when a notification of the appropriate type arrives at this
/// location in the tree.
///
/// Return true to cancel the notification bubbling. Return false to
/// allow the notification to continue to be dispatched to further ancestors. ¿û¿¨   ¿Ω|¿Œ   ¿Ω¿æ á9*áJ áWáaábô: <ÄÜÄ§Ä•Ä∫Ä‘ÄÌÄÓÅÅAÅBÅYÅnÅãÅ™ÅœÅ–Å˛Ç	ÇÇ'Ç;ÇHÇTÇiÇÌÉQÉ°ÉËÑWÑXÑpÑéÑ¥ÑÌÖSÖûÖüÖÓÜ9ÜåÜµÜ∏Ü√Ü“áááá á6á8á9áeáfánáoá¥á∏àà à$à2à6àaà≤àøà‚â-âLâMâëâ®â©âµâÿäää4ä^äbäcäoä∏äπä≈ä€ä˝ã*ã}ãÅãÉãÑã¥ã∏ååUåúå†åÓç=çåç›çÎçÔé;éäé÷é˛èèRèáèãè◊êêê'ê+êzêπêΩë
ëYë¢ëÚíBíUíYí¶íÒíıìììXìeìwìøîî!î'îwîâîŸî⁄ïïïZïmïûïüïˇñ ñBñHñôñ∞ñÁñËó)ó/óóñóŒóœò ò&òqò¬ò˚ôôAôgôûôœôÂô˚ööööööBöFöìöªöÕõõOõUõâõﬂúúú9ú:úFú\ú°ú úˇù/ù3ù5ù6ùÇùÜù‘ùÓùÚûCûÖû÷ü"ü7ü;üGürü£ü©ü±üµüˇ†L†W†[†ú†Æ†¸°N°â°ä°Œ°‰°Â°Ò¢¢>¢R¢y¢£¢ß¢®¢¥¢„¢‰¢££H£Æ§§(§]§Ç§À§—••
•••?•C•í•ﬁ¶#¶'¶v¶¡¶˚ßIßißmßæ®®Y®ß®ª®ø©©X©ß©˜™E™ñ™†™§™≤™∂´´,´x´û´Î¨¨)¨\¨Ñ¨¢¨£¨Ê¨Ï≠3≠Ñ≠÷Æ&ÆyÆÖÆãÆ€Ø,ØzØ≈∞∞7∞=∞é∞•∞´∞ª∞¡∞Ù±±±A±G±ö±Ï≤9≤â≤ü≤¨≤∑≤“≤”≥≥≥-≥h≥ñ≥ö≥õ≥ß≥Ï¥¥`¥d¥e¥q¥¥≥¥¥¥¿¥Œ¥Ù¥ıµEµuµ{µÃ∂∂`∂f∂∑∑∑∑T∑é∑π∑Ω∑æ∏∏]∏±π
π>πhπìπ°π•πßπ®π⁄πﬁ∫.∫}∫«ªª`ªdªßª´ª˜º?ºèº⁄Ω(ΩMΩQΩsΩwΩ∆ææbæzæ~æœø øjøÖøâø–øÛø˜¿ @H¿ @ò¿ @Á¿ A8¿ Aá¿ A”¿ B
¿ B¿ B_¿ Bù¿ B°¿ BÒ¿ CA¿ Cí¿ C©¿ C≠¿ C¯¿ DB¿ Dí¿ D„¿ E1¿ EÇ¿ E—¿ EÁ¿ F2¿ F}¿ FŒ¿ G¿ Gl¿ G∏¿ H	¿ HF¿ HY¿ H]¿ HØ¿ HÊ¿ HÍ¿ I-¿ I1¿ IE¿ II¿ Iú¿ I†¿ IÒ¿ J¿ J¿ J¿ JJ¿ JÅ¿ JÖ¿ Jï¿ J¿¿ J˙¿ K¿ K¿ K¿ K ¿ K$¿ K8¿ K<¿ Kä¿ K£¿ Kß¿ K≥¿ K‹¿ KÔ¿ L¿ L/¿ LC¿ L_¿ Lc¿ L|¿ Ló¿ Lõ¿ L´¿ L÷¿ M¿ M¿ M¿ M"¿ M2¿ M6¿ M¿ MŒ¿ MÒ¿ Mı¿ N¿ N¿ NS¿ N}¿ N…¿ NÔ¿ O¿ OG¿ OÄ¿ OÅ¿ O“¿ Oÿ¿ P¿ P!¿ P_¿ P`¿ P´¿ P±¿ Q¿ QR¿ Qù¿ Q¿ R¿ R¿ Ri¿ R∂¿ S¿ SP¿ Så¿ Sí¿ S‚¿ T0¿ TU¿ T[¿ T©¿ TÚ¿ U?¿ Uà¿ U”¿ V¿ V¿ VY¿ V_¿ V≠¿ Vπ¿ Vı¿ W0¿ W6¿ W~¿ Wû¿ W§¿ W¥¿ W∫¿ X¿ X ¿ XF¿ XH¿ XI¿ Xn¿ Xr¿ X¡¿ Y¿ YX¿ Yü¿ Y£¿ YÚ¿ ZA¿ Zã¿ Z”¿ [$¿ [(¿ [t¿ [∫¿ \¿ \Y¿ \ú¿ \≥¿ \∑¿ \˙¿ \˛¿ ]N¿ ]ì¿ ]·¿ ^2¿ ^f¿ ^j¿ ^ß¿ ^¿ _?¿ _â¿ _⁄¿ `*¿ `P¿ `T¿ `û¿ `Ï¿ a6¿ aÅ¿ aÕ¿ b¿ bj¿ bπ¿ c	¿ cZ¿ c®¿ c¯¿ dD¿ dH¿ dj¿ dn¿ d©¿ d≠¿ d˛¿ eN¿ eù¿ eÌ¿ f=¿ fâ¿ f⁄¿ fˆ¿ f˙¿ gD¿ gè¿ g‡¿ h)¿ hz¿ hï¿ hô¿ h‡¿ i¿ i¿ iS¿ iö¿ iÍ¿ j¿ j¿ jm¿ jª¿ k¿ kQ¿ kÑ¿ kà¿ k”¿ l$¿ lv¿ l»¿ m¿ mk¿ mì¿ mó¿ m„¿ n¿ n¿ nW¿ n®¿ n˜¿ oD¿ oê¿ o›¿ p(¿ pv¿ põ¿ pü¿ pÍ¿ q6¿ qz¿ q…¿ q˜¿ q˚¿ rC¿ rG¿ rô¿ r–¿ r‘¿ s¿ s¿ s/¿ s3¿ s}¿ sÅ¿ s…¿ t¿ t`¿ td¿ tp¿ tû¿ t÷¿ t⁄¿ tÍ¿ u'¿ u-¿ u1¿ uh¿ ux¿ u£¿ u›¿ uÂ¿ uÎ¿ uÛ¿ v¿ v¿ v¿ vf¿ v≤¿ v“¿ v÷¿ v‚¿ w
¿ w¿ w/¿ w]¿ wq¿ wç¿ wë¿ w™¿ w≈¿ w…¿ wŸ¿ x
¿ x¿ x¿ x?¿ xY¿ x]¿ xq¿ xô¿ x°¿ x•¿ xµ¿ x‡¿ x˙¿ y¿ yZ¿ yy¿ yÑ¿ yå¿ yí¿ yö¿ y™¿ yÆ¿ y˜¿ zF¿ zi¿ zm¿ z{¿ z¿ zƒ¿ {¿ {D¿ {ê¿ {∂¿ {Â¿ |¿ |E¿ |F¿ |ñ¿ |ú¿ |Ÿ¿ |Â¿ }!¿ }"¿ }s¿ }y¿ }¿¿ }ı¿ }˚¿ ~	¿ ~¿ ~R¿ ~\¿ ~b¿ ~Ø¿ ~˛¿ O¿ û¿ Ó¿ Ä9¿ ÄP¿ Ä]¿ Äh¿ ÄΩ¿ Äø¿ Ä¿¿ Å¿ Å¿ Ål¿ Åx¿ ÅÉ¿ ÅÑ¿ Å—¿ Ç%¿ Ç4¿ Ç5¿ ÇÖ¿ Çì¿ Çú¿ Çù¿ ÇË¿ É¿ É¿ É¿ É¿ ÉF¿ É|¿ É}¿ É∂¿ É∫¿ Ñ	¿ ÑU¿ Ñ†¿ ÑÁ¿ ÑÎ¿ Ö+¿ Öx¿ Ö∆¿ Ü¿ Ü_¿ Ü¶¿ Üˆ¿ áF¿ áê¿ áî¿ á∆¿ á ¿ à¿ à(¿ àu¿ àƒ¿ â¿ â_¿ â|¿ â ¿ ä¿ äb¿ ä´¿ ä∫¿ ã¿ ãW¿ ã™¿ ã¯¿ åI¿ åô¿ åﬁ¿ ç-¿ çu¿ ç¡¿ é
¿ é¿ ég¿ é∞¿ é˝¿ èN¿ èü¿ èÔ¿ ê<¿ êâ¿ ê»¿ ë¿ ë_¿ ë•¿ ëÔ¿ í<¿ íã¿ í‹¿ ì)¿ ìv¿ ìØ¿ ì¸¿ îH¿ îï¿ î‚¿ ï3¿ ï|¿ ï∆¿ ï’¿ ñ&¿ ñv¿ ñƒ¿ ó¿ ó3¿ óÄ¿ óÕ¿ ò¿ òb¿ òf¿ òt¿ òx¿ ò…¿ ô¿ ôR¿ ôÖ¿ ô—¿ ô˜¿ ö/¿ öA¿ öÜ¿ öß¿ ö≠¿ ö˙¿ õG¿ õì¿ õ‹¿ ú-¿ ú|¿ úè¿ ú´¿ úπ¿ ú∫¿ ú˙¿ ù ¿ ùM¿ ùú¿ ùﬁ¿ ùﬂ¿ û*¿ ûV¿ ûê¿ ûë¿ û ¿ û–¿ ü¿ üd¿ ü≥¿ †¿ †¿ †!¿ †j¿ †î¿ †±¿ †¡¿ †ﬂ¿ †˚¿ °s¿ °˝¿ ¢¿ ¢¿ ¢#¿ ¢-¿ ¢C¿ ¢G¿ ¢d¿ ¢e¿ ¢ü¿ ¢•¿ ¢Ô¿ £4¿ £Å¿ £“¿ £Ò¿ £˜¿ §9¿ §a¿ §b¿ §õ¿ §°¿ §¿ •¿ •¿ •Q¿ •¢¿ •È¿ •Ô¿ ¶!¿ ¶j¿ ¶≤¿ ¶ˇ¿ ßC¿ ßk¿ ßq¿ ß£¿ ßÔ¿ ®4¿ ®S¿ ®á¿ ®ç¿ ®¢¿ ®®¿ ®˘¿ ©C¿ ©ö¿ ©Ø¿ ©µ¿ ™¿ ™-¿ ™:¿ ™K¿ ™`¿ ™ù¿ ™°¿ ™¢¿ ™⁄¿ ™‡¿ ´/¿ ´t¿ ´¿¿ ¨
¿ ¨9¿ ¨?¿ ¨è¿ ¨´¿ ¨±¿ ≠¿ ≠I¿ ≠O¿ ≠~¿ ≠Ñ¿ ≠”¿ Æ¿ Æ¿ Æ)¿ Æ[¿ Æ\¿ Æé¿ Æî¿ Æﬁ¿ Ø'¿ Øv¿ Ø|¿ Øå¿ Øí¿ Ø∞¿ Ø›¿ ∞¿ ∞¿ ∞/¿ ∞G¿ ∞H¿ ∞ó¿ ∞ù¿ ∞Ë¿ ± ¿ ±&¿ ±4¿ ±a¿ ±k¿ ±q¿ ±æ¿ ≤¿ ≤B¿ ≤H¿ ≤ò¿ ≤Á¿ ≥8¿ ≥F¿ ≥L¿ ≥ò¿ ≥Â¿ ¥"¿ ¥(¿ ¥u¿ ¥√¿ µ¿ µc¿ µï¿ µõ¿ µ©¿ µÿ¿ µÓ¿ ∂¿ ∂¿ ∂X¿ ∂á¿ ∂ ¿ ∂“¿ ∂‹¿ ∂‚¿ ∑0¿ ∑|¿ ∑™¿ ∑∑¿ ∑⁄¿ ∑Ú¿ ∏¿ ∏?¿ ∏w¿ ∏ª¿ ∏◊¿ π4¿ πç¿ π‰¿ ∫%¿ ∫2¿ ∫G¿ ∫p¿ ∫«¿ ª¿ ªq¿ ªÜ¿ ªì¿ ª®¿ ª˝¿ ºQ¿ º†¿ º¿ º˝¿ Ω	¿ Ω¿ ΩZ¿ Ωí¿ Ω’¿ ΩÍ¿ æC¿ æù¿ æ˙¿ ø'¿ ø4¿ ø@¿ øH¿ ø[¿ øe¿ øë¿ ø°¿ øø¿ ø˜¿ ¿B¿ ¿^¿ ¿µ¿ ¿ˆ¿ ¡¿ ¡¿ ¡r¿ ¡Œ¿ ¬¿ ¬¿ ¬$¿ ¬,¿ ¬|¿ ¬û¿ ¬±¿ ¬ª¿ ¬€¿ ¬ﬂ¿ ¬‡¿ √¿ √¿ √l¿ √∏¿ ƒ	¿ ƒY¿ ƒ£¿ ƒÛ¿ ≈B¿ ≈ë¿ ≈·¿ ∆/¿ ∆¿ ∆≠¿ ∆≥¿ ∆˛¿ «M¿ «é¿ «î¿ «·¿ »¿ »¿ »!¿ »'¿ »w¿ »õ¿ »®¿ »π¿ »—¿ »“¿ …¿ …>¿ …D¿ …í¿ …›¿  ¿  ¿  i¿  ∂¿ À¿ ÀP¿ À†¿ ÀÌ¿ Ã5¿ ÃÅ¿ Ã—¿ Õ¿ Õj¿ Õp¿ Õæ¿ Œ¿ Œ!¿ Œ'¿ Œv¿ Œû¿ Œ§¿ Œ¥¿ Œ∫¿ œ ¿ œJ¿ œW¿ œh¿ œ~¿ œ¿ œ√¿ œ…¿ –¿ –a¿ –∞¿ —¿ —K¿ —Q¿ —†¿ —Ÿ¿ —ﬂ¿ “¿ “¿ “a¿ “à¿ “é¿ “û¿ “§¿ “ﬂ¿ “Ï¿ “˝¿ ”¿ ”K¿ ”[¿ ”ë¿ ”§¿ ”Æ¿ ”≤¿ ”≥¿ ”˛¿ ‘¿ ‘S¿ ‘b¿ ‘h¿ ‘å¿ ‘∂¿ ‘Â¿ ’*¿ ’r¿ ’√¿ ’Í¿ ’¿ ÷?¿ ÷p¿ ÷v¿ ÷¡¿ ◊¿ ◊_¿ ◊®¿ ◊‰¿ ◊Í¿ ÿ:¿ ÿâ¿ ÿ‘¿ ÿ⁄¿ Ÿ(¿ Ÿq¿ Ÿ¿¿ ⁄¿ ⁄Z¿ ⁄©¿ ⁄Ë¿ ⁄Ó¿ €	¿ €¿ €Y¿ €_¿ €≠¿ €˚¿ ‹H¿ ‹`¿ ‹f¿ ‹±¿ ›¿ ›R¿ ›¢¿ ›Ó¿ ﬁ(¿ ﬁ.¿ ﬁ¿ ﬁ…¿ ﬂ¿ ﬂ¿ ﬂo¿ ﬂΩ¿ ﬂˇ¿ ‡N¿ ‡ü¿ ‡∏¿ ‡æ¿ ‡Ã¿ ‡˙¿ ·¿ ·!¿ ·'¿ ·9¿ ·{¿ ·¨¿ ·∂¿ ·æ¿ ·»¿ ·Œ¿ ‚¿ ‚j¿ ‚∫¿ „¿ „T¿ „a¿ „g¿ „¥¿ ‰¿ ‰¿ ‰%¿ ‰3¿ ‰g¿ ‰s¿ ‰Ö¿ ‰≤¿ ‰Ï¿ ‰ˆ¿ ‰˛¿ Â¿ Â¿ Â_¿ ÂØ¿ Â¸¿ ÊI¿ Êj¿ Êp¿ ÊÄ¿ ÊÜ¿ Êﬁ¿ ÊÎ¿ Á¿ Á¿ ÁQ¿ ÁW¿ Áò¿ Á‚¿ Ë¿ Ë¿ Ëk¿ Ë∫¿ Ë¿¿ È
¿ ÈV¿ È£¿ ÈÌ¿ Í¿ Í!¿ Í2¿ ÍU¿ ÍV¿ Íb¿ Íß¿ Í“¿ Í‚¿ Îe¿ Îx¿ ÎÇ¿ Î÷¿ Ï<¿ Ï@¿ ÏB¿ ÏC¿ Ïí¿ Ïû¿ Ï¢¿ ÏÓ¿ Ì¿ Ì
¿ Ì¿ Ì¿ Ìh¿ Ìé¿ Ì«¿ Ó¿ Ó=¿ Óâ¿ Ó≥¿ Ô ¿ Ô3¿ Ôk¿ Ôó¿ Ô—¿ ¿ ¿ L¿ R¿ Ü¿ ÿ¿ Ò+¿ Òt¿ Òâ¿ Òü¿ Ò°¿ Ò¢¿ ÒÔ¿ Ú
¿ Ú¿ ÚJ¿ Úò¿ Úÿ¿ Ú‹¿ Û,¿ Û^¿ Ûb¿ Ûv¿ Ûz¿ Û…¿ Ù¿ Ù¿ Ù¿ Ù_¿ Ùv¿ Ùà¿ Ù§¿ Ù√¿ ÙÌ¿ ÙÒ¿ ı¿ ı¿ ı¿ ıT¿ ı∞¿ ı◊¿ ı˘¿ ˆM¿ ˆw¿ ˆÅ¿ ˆâ¿ ˆç¿ ˆù¿ ˆÿ¿ ˆﬁ¿ ˆÊ¿ ˆˆ¿ ˆ˙¿ ˜¿ ˜¿ ˜I¿ ˜ê¿ ˜◊¿ ¯¿ ¯G¿ ¯ï¿ ¯·¿ ˘¿ ˘W¿ ˘®¿ ˘¿ ˙.¿ ˙S¿ ˙T¿ ˙`¿ ˙¶¿ ˙ß¿ ˙Ì¿ ˚¿ ˚	¿ ˚O¿ ˚ü¿ ˚À¿ ˚—¿ ¸¿ ¸K¿ ¸à¿ ¸¢¿ ¸ø¿ ¸Ë¿ ¸Ï¿ ¸Ì¿ ˝>¿ ˝j¿ ˝p¿ ˝æ¿ ˝·¿ ˛¿ ˛¿ ˛R¿ ˛w¿ ˛¢¿ ˛«¿ ˛Œ¿ ˛Ë¿ ˇ¿ ˇ:¿ ˇ;¿ ˇØ¿ ˇÕ¿ ˇÎ¿ ¿ U¿ _¿ j¿ Ñ¿ ˙¿¿¿}¿Ì¿ˆ¿¿.¿ú¿ß¿…¿„¿\¿g¿n¿r¿s¿≈¿À¿¿N¿û¿Ì¿¿¿h¿≤¿¿T¿£¿©¿ı¿.¿{¿ô¿¶¿Ÿ¿⁄¿'¿?¿E¿ë¿‹¿‚¿Ú¿¯¿	H¿	W¿	d¿	é¿	ê¿	ë¿	‚¿	Ê¿
7¿
É¿
á¿
÷¿¿¿Y¿]¿q¿u¿¿¿ƒ¿–¿˛¿¿(¿E¿d¿é¿í¿´¿Ø¿·¿<¿}¿ï¿ù¿°¿±¿ı¿˚¿¿¿¿;¿?¿é¿·¿+¿s¿∑¿ª¿¿T¿s¿w¿≈¿¿b¿±¿¿-¿1¿P¿T¿û¿Ì¿˜¿˚¿¿¿c¿ó¿õ¿ß¿“¿¿¿¿C¿\¿w¿ò¿¥¿È¿¿&¿s¿Ü¿ó¿¶¿≥¿æ¿∆¿Ã¿‘¿‰¿Ë¿¸¿ ¿P¿ñ¿ö¿¶¿÷¿¿¿!¿L¿e¿Ä¿°¿∫¿÷¿¿)¿6¿A¿I¿O¿W¿g¿™¿Æ¿º¿¿¿¿6¿É¿∂¿Ó¿3¿|¿ò¿Ê¿¿H¿ô¿·¿¿C¿D¿P¿é¿è¿‡¿Ê¿7¿à¿◊¿ ¿3¿9¿â¿Ÿ¿%¿3¿@¿Ä¿Ç¿É¿—¿ ¿ ,¿ 0¿ >¿ B¿ ê¿ ≤¿ ¯¿!D¿!w¿!»¿"¿"L¿"M¿"õ¿"ß¿"≤¿"Ÿ¿"⁄¿#¿#k¿#á¿#ç¿#ﬁ¿$ ¿$j¿$ö¿$»¿$’¿$‡¿%¿%¿%g¿%∂¿%€¿%·¿&/¿&y¿&ƒ¿&Ù¿'#¿'0¿'â¿'ä¿'ÿ¿("¿(X¿(e¿(¨¿(Æ¿(Ø¿(ˇ¿)¿)]¿)Æ¿)ˆ¿*6¿*7¿*C¿*è¿*ë¿*í¿*Ê¿+4¿+y¿+}¿+«¿,¿,[¿,ù¿,Á¿-8¿-Ä¿-”¿-‘¿.¿.
¿.;¿.R¿.S¿._¿.π¿.ª¿.º¿/¿/\¿/¶¿/≤¿/∂¿/¿0@¿0â¿0◊¿1¿1B¿1F¿1T¿1X¿1ì¿1‡¿1Ô¿25¿2Ü¿2™¿2Û¿3¿3"¿3o¿3~¿3Õ¿3Ì¿4¿4¿4S¿4ú¿4√¿4·¿5*¿5d¿5q¿5{¿5É¿5ñ¿5—¿5’¿5÷¿6¿6¿6]¿6¢¿6¿6ˇ¿7¿7O¿7†¿7Ò¿88¿8>¿8L¿8Ñ¿8§¿8™¿8≈¿8ﬂ¿8È¿8Ô¿9¿9$¿9F¿9T¿9^¿9d¿9Ä¿9√¿9Ó¿9¯¿: ¿:
¿:¿:O¿:U¿:c¿:õ¿:ª¿:¡¿:‹¿:ˆ¿; ¿;¿;#¿;;¿;Ö¿;ƒ¿;ˆ¿<¿<¿<¿<0¿<|¿<∞¿<∫¿<¬¿<Ã¿<Î¿<Ï¿<¯¿=P¿=R¿=S¿=T¿=`¿=a¿=z¿=Ö¿=è¿=õ¿=¶¿=®¿=©¿=√¿=€¿>¿>¿>4¿>w¿>á¿>π¿>Ê¿?0¿?8¿?K¿?U¿?Å¿?©¿?¿¿?»¿?ﬂ¿@!¿@%¿@&¿@=¿@Q¿@ù¿@¥¿@æ¿@È¿@˘¿A¿A1¿A7¿A;¿A<¿At¿Aµ¿Aœ¿B¿BE¿BU¿Bw¿Bä¿Bî¿Bò¿Bô¿B∑¿BÕ¿B˜¿C¿CY¿CÄ¿Cú¿C†¿C°¿C¬¿Cÿ¿D¿D&¿DE¿DÜ¿Dä¿Dã¿D≥¿D…¿DŸ¿E¿E¿E"¿E5¿E9¿E;¿E<¿EÅ¿EÖ¿E≤¿E∂¿E˝¿F¿FI¿FJ¿Fá¿Fã¿F ¿G¿G¿Gc¿G¥¿H¿HR¿HÜ¿Hä¿H÷¿I$¿Io¿Is¿I¬¿J¿J`¿J∞¿K¿KQ¿Kü¿KÓ¿L:¿LÑ¿L∑¿Lª¿M
¿MU¿Mû¿MÓ¿N7¿N;¿NG¿NU¿N~¿NØ¿N∆¿N˘¿O¿O<¿O[¿OÜ¿O§¿O‡¿P¿P1¿Pd¿Pá¿P≤¿P◊¿P˛¿Q8¿Qf¿Qù¿Q…¿R¿R=¿Ru¿Rñ¿R¥¿R—¿RÏ¿S¿S¿S1¿SD¿SU¿Sd¿Sq¿S{¿SÑ¿Sä¿Sí¿Sñ¿SÊ¿T5¿TÇ¿T£¿Tß¿TÍ¿TÓ¿U<¿Uä¿U®¿Uˆ¿V¿V¿VV¿Vé¿Vß¿V®¿VÙ¿V˙¿WE¿Wy¿W ¿WÏ¿X<¿XV¿X\¿X≠¿XÓ¿Y¿Y ¿YX¿Yt¿Yu¿Yπ¿Z¿ZT¿Zp¿Zv¿Z¡¿[¿[R¿[°¿[Œ¿[‘¿\$¿\t¿\√¿]
¿]¿]"¿]n¿]ê¿]ñ¿]„¿^/¿^¿^•¿^…¿^ ¿_¿_¿_^¿_™¿_Û¿`¿`"¿`n¿`ê¿`ñ¿`Á¿a7¿aÑ¿a—¿a◊¿b$¿bp¿b¿¿bÊ¿b¯¿b˘¿c;¿c|¿cÇ¿c£¿c©¿cÛ¿dE¿dx¿d~¿d“¿e ¿eZ¿e[¿eØ¿f ¿fN¿fò¿fŸ¿fﬂ¿g*¿g<¿gB¿gä¿g÷¿h#¿hs¿h≈¿hÔ¿hı¿iE¿iî¿iÂ¿j2¿jf¿jl¿j∫¿k
¿k<¿kB¿kì¿kæ¿kƒ¿l¿l`¿l±¿l¸¿m!¿m'¿m`¿mß¿mÎ¿n¿ni¿nj¿nø¿o¿o¿o<¿oB¿oÇ¿oà¿o◊¿p¿p¿pc¿p≤¿pÏ¿q?¿qè¿q∫¿r¿r¿rh¿rî¿rö¿rÁ¿s8¿sÇ¿s“¿t¿tl¿tΩ¿u¿uY¿u_¿u´¿uˆ¿v/¿v5¿vá¿v”¿w!¿wt¿wz¿w∆¿wÁ¿x¿x ¿xq¿x¢¿x®¿x˘¿yJ¿yû¿yÒ¿z=¿zâ¿z≠¿z≥¿{ ¿{O¿{†¿{“¿{ÿ¿|$¿|o¿|®¿|Æ¿} ¿}L¿}ö¿}Á¿}Ì¿~¿~	¿~¿~o¿~y¿~ã¿~º¿~Ω¿¿@¿F¿û¿Í¿Ä¿Ä¿Äk¿Ä|¿Ä±¿Ä≤¿Å¿Å?¿ÅE¿Åñ¿ÅÁ¿Ç;¿Çä¿Ç⁄¿É'¿É^¿Éd¿É∞¿É˚¿Ñ4¿Ñ:¿Ñå¿Ñÿ¿Ö&¿Öz¿Öπ¿Ö∫¿Ü¿ÜZ¿Üß¿Üı¿á%¿á+¿á`¿áf¿áπ¿áø¿à¿à^¿à¨¿à˜¿â=¿â>¿âg¿âm¿â∏¿ä¿äV¿äÜ¿äå¿ä⁄¿ã&¿ã4¿ã:¿ãÖ¿ã—¿ã◊¿å(¿år¿å√¿ç¿ç-¿ç`¿ça¿ç§¿ç™¿ç˘¿éD¿éZ¿éí¿éì¿éÎ¿éÒ¿è?¿èE¿èU¿è[¿è≤¿ê%¿ê&¿ê}¿êÉ¿ê–¿ëB¿ëC¿ëí¿ë∑¿ëΩ¿í¿íe¿íf¿í∞¿íÀ¿í—¿ì¿ìT¿ìV¿ìW¿ìÑ¿ìà¿ì’¿î&¿îs¿îô¿îù¿îÈ¿ï)¿ïJ¿ïN¿ïö¿ïû¿ïÕ¿ñ¿ñ*¿ñ.¿ñB¿ñê¿ñ⁄¿ó¿ó"¿ón¿ó~¿óë¿óø¿ó≈¿ò¿ò]¿òß¿òı¿ô¿ôW¿ô®¿ô©¿ôÙ¿ö¿ö#¿ö$¿ög¿öh¿öú¿ö…¿ö ¿õ¿õE¿õK¿õö¿õ†¿õÌ¿ú¿ú*¿ú+¿ún¿út¿úº¿ù¿ù¿ù4¿ù:¿ùà¿ùø¿ù≈¿ù¿ùˆ¿û@¿ûè¿ûﬂ¿ü/¿üB¿ü_¿ü`¿ü¨¿üÊ¿†¿†.¿†Q¿†a¿†ç¿°¿°2¿°j¿°…¿¢¿¢;¿¢û¿¢…¿¢÷¿¢Î¿£I¿£ï¿£Ê¿£Û¿£ˇ¿§¿§¿§$¿§D¿§V¿§Ñ¿•9¿•^¿•ò¿•Î¿¶¿¶\¿¶©¿¶∏¿¶∆¿¶–¿¶Â¿¶Ò¿ß¿ß*¿ß0¿ßu¿ß†¿ßª¿ß¡¿ß‚¿®¿®¿®?¿®|¿®è¿®ô¿®ù¿®û¿®æ¿®¯¿®˘¿©/¿©5¿©`¿©å¿©´¿©–¿©—¿™!¿™C¿™I¿™ô¿™∫¿™‰¿´¿´)¿´9¿´Z¿´m¿´w¿´Å¿´ì¿´£¿´µ¿´ÿ¿´Ì¿´˘¿´ˇ¿¨&¿¨*¿¨+¿¨w¿¨√¿¨˘¿¨ˇ¿≠M¿≠ç¿≠ì¿≠‡¿Æ,¿Æ|¿Ææ¿ÆË¿ÆÓ¿Ø<¿Øã¿Øº¿Ø¬¿Ø˜¿Ø˝¿∞7¿∞=¿∞Ñ¿∞—¿±¿±,¿±Y¿±ö¿±Œ¿±‹¿±˘¿≤ ¿≤=¿≤M¿≤m¿≤Ã¿≤Ì¿≥
¿≥¿≥'¿≥@¿≥ù¿≥Ø¿≥ÿ¿¥¿¥4¿¥k¿¥ò¿¥À¿¥Ù¿µ¿µ¿µ ¿µ,¿µF¿µW¿µÅ¿µä¿µê¿µö¿µ≈¿µ„¿∂¿∂1¿∂E¿∂â¿∂»¿∂ˆ¿∑¿∑¿∑I¿∑W¿∑m¿∑Å¿∑ó¿∑ﬁ¿∏¿∏X¿∏Ü¿∏ü¿∏Ø¿∏π¿∏¡¿∏Î¿π¿πE¿πZ¿π}¿π¥¿π’¿π˚¿∫¿∫y¿∫µ¿ª
¿ª*¿ªè¿ªÈ¿ª˙¿º¿ºz¿º·¿ΩF¿Ωö¿Ω´¿Ω◊¿æ
¿æ#¿æ^¿æo¿æõ¿ø¿ø+¿øf¿øw¿øá¿øì¿ø™¿ø∏¿øÚ¿¿S¿¿i¿¿»¿¿·¿¿Ò¿¡¿¡<¿¡k¿¡x¿¡Ç¿¡ê¿¡≠¿¡ ¿¡Î¿¬,¿¬;¿¬N¿¬â¿¬»¿√¿√9¿√™¿√Ω¿ƒô¿ƒ®¿ƒµ¿ƒø¿ƒ˜¿≈¿≈,¿≈¿≈≠¿≈›¿∆¿∆L¿∆Ø¿«¿«k¿«Œ¿».¿»ä¿»≈¿»›¿»È¿»Û¿»˚¿…¿…ä¿…ƒ¿ ¿ u¿ Ô¿ ˝¿À¿À¿À(¿À8¿Àn¿Àî¿À∫¿À¬¿À‡¿Ã¿Ã7¿ÃR¿Ãq¿Ãy¿Ãó¿Ã©¿Ã…¿ÃÏ¿Õ¿Õ;¿ÕP¿Õ\¿Õb¿Õâ¿Õç¿Õé¿ÕÓ¿ÕÔ¿ŒX¿Œ√¿œ#¿œY¿œl¿œp¿œq¿œ†¿œÚ¿œˆ¿œ˜¿–D¿–E¿–ù¿–◊¿–Â¿—<¿—=¿—å¿—Æ¿—˛¿“¿“ ¿“x¿“≤¿“¿¿”G¿”H¿”ï¿”–¿‘¿‘¿‘T¿‘d¿‘Ç¿‘ü¿‘⁄¿‘Ì¿‘˜¿‘˚¿‘¸¿’8¿’H¿’y¿’°¿’ﬁ¿÷	¿÷V¿÷á¿÷è¿÷¢¿÷¨¿÷”¿÷◊¿÷ÿ¿◊¿◊&¿◊}¿◊•¿◊‚¿ÿ¿ÿZ¿ÿb¿ÿu¿ÿ¿ÿ´¿ÿ—¿ÿ’¿ÿ÷¿Ÿ'¿Ÿ7¿ŸU¿Ÿr¿Ÿπ¿ŸÛ¿⁄¿⁄¿⁄¿⁄¿⁄A¿⁄Q¿⁄õ¿⁄˝¿€9¿€§¿€∂¿€Ú¿‹>¿‹å¿‹ü¿‹ƒ¿‹ÿ¿›$¿›p¿›±¿›‡¿ﬁ-¿ﬁy¿ﬁ¬¿ﬁ˜¿ﬂ!¿ﬂG¿ﬂ¿ﬂø¿‡
¿‡,¿‡ê¿‡º¿‡Ë¿·K¿·^¿·p¿·Ö¿·≈¿‚¿‚2¿‚î¿‚Â¿„¿„u¿„à¿„ö¿„®¿„ı¿‰C¿‰ë¿‰∑¿‰·¿Â¿ÂG¿Âs¿ÂÖ¿Âì¿ÂΩ¿Â¯¿Ê#¿ÊO¿Êa¿Êo¿Êà¿Êõ¿Ê¬¿ÊŒ¿Ê⁄¿Ê‰¿Á¿Á#¿Á-¿Á1¿Á2¿Á\¿Ál¿Áú¿ÁÔ¿Ë3¿ËV¿ËÄ¿ËÆ¿Ë¿È'¿È]¿È†¿Í¿Í&¿ÍX¿Íb¿Íj¿Íë¿Í±¿Í¯¿ÎL¿ÎÉ¿ÎΩ¿Ï¿Ï\¿Ï´¿Ï¸¿Ì5¿Ì´¿Ìµ¿Ó1¿Ód¿Ól¿Ó¿Óâ¿Óç¿Óé¿Ó€¿Ó¿Óˆ¿Ô*¿Ô0¿ÔÅ¿Ôû¿Ô§¿ÔÙ¿!¿N¿f¿¿ﬂ¿Â¿Ô¿ÒB¿ÒT¿Òb¿Òê¿Òº¿Ú¿Úp¿ÚÆ¿Û ¿Ûh¿Û–¿Ûﬁ¿Ù¿ÙO¿Ù≠¿Ù‰¿ı,¿ıE¿ıp¿ıÇ¿ıí¿ıÀ¿ˆ
¿ˆ,¿ˆR¿ˆk¿ˆ÷¿ˆË¿ˆ˙¿˜q¿˜√¿¯/¿¯n¿¯æ¿¯◊¿˘
¿˘¿˘,¿˘i¿˘∞¿˘“¿˙ ¿˙¿˙ê¿˙¢¿˙¥¿˙‡¿˚!¿˚]¿˚¢¿˚È¿¸A¿¸â¿¸œ¿˝!¿˝n¿˝¡¿˛¿˛x¿˛∂¿ˇ¿ˇX¿ˇ¿ˇ°¿ ¿ à¿ „¿¿ä¿¿à¿¯¿k¿§¿ÿ¿=¿P¿b¿p¿|¿ê¿„¿Ì¿¿¿'¿u¿¿¿‡¿9¿I¿d¿É¿ã¿ë¿ï¿ñ¿‚¿1¿Ç¿°¿ß¿Û¿>¿W¿ì¿ô¿£¿«¿È¿	¿	8¿	H¿	c¿	Ç¿	ä¿	ê¿	î¿	ñ¿	ó¿	‰¿	¯¿	¸¿

¿
\¿
Ü¿
œ¿
Î¿
Ò¿8¿à¿∫¿ª¿«¿È¿6¿:¿<¿=¿W¿á¿à¿´¿»¿…¿¿;¿I¿O¿¿É¿Ö¿Ü¿œ¿”¿#¿t¿≈¿¿`¿w¿{¿…¿¿¿D¿H¿ô¿·¿1¿Å¿»¿¿b¿q¿º¿¿Z¿´¿˘¿I¿á¿‘¿$¿t¿¡¿¿?¿é¿◊¿"¿h¿π¿¿S¿°¿Ú¿¿d¿±¿¡¿¿<¿à¿“¿ÿ¿¿2¿P¿h¿i¿}¿Æ¿÷¿◊¿ˇ¿¿O¿ö¿”¿Ÿ¿(¿v¿ƒ¿¿¿f¿µ¿¿K¿Q¿õ¿›¿Î¿˜¿ C¿ ¿ Ä¿ –¿ ‚¿ Ë¿!9¿!â¿!°¿!æ¿!œ¿!–¿"¿"i¿"{¿"ã¿"≈¿#¿##¿#6¿#@¿#S¿#W¿#j¿#k¿#ñ¿#±¿#¬¿#›¿#Ì¿$
¿$¿$8¿$H¿$V¿$Z¿$[¿$¶¿$˚¿%P¿%ß¿%›¿&	¿&6¿&D¿&H¿&I¿&s¿&y¿&√¿'¿'^¿'™¿'˙¿(0¿(<¿(]¿(p¿(q¿(ü¿(•¿(Î¿);¿)W¿)s¿)É¿)√¿)÷¿)‡¿)ˆ¿)˙¿)˚¿*8¿*D¿*g¿*}¿*~¿*≥¿*˛¿+¿+%¿+t¿+¿¿+‡¿+Ê¿,5¿,Ö¿,ö¿,†¿,Ò¿-B¿-ç¿-›¿.&¿.s¿.ƒ¿.ˇ¿/¿/¿/*¿/0¿/L¿/y¿/≠¿/æ¿/À¿/·¿0$¿0<¿0a¿0g¿0ã¿0»¿0‚¿0Í¿1¿1¿1¿1;¿1X¿1v¿1ì¿1®¿1…¿1œ¿1·¿1Â¿1Ê¿2'¿2-¿2~¿2Œ¿2¸¿3¿39¿3[¿3¶¿3Ë¿3¯¿4+¿4R¿4a¿4á¿4è¿4ï¿4¶¿4π¿4Ω¿4æ¿4 ¿5$¿5g¿5ò¿5∆¿5‰¿5˜¿5ˇ¿6 ¿62¿6à¿6î¿6≈¿6Õ¿6Œ¿6Ó¿7G¿7T¿7|¿7π¿7˝¿8¿8¿8%¿8)¿8*¿8Å¿8÷¿8Û¿9¿9}¿9ò¿9ü¿9£¿9§¿9∞¿:$¿:g¿:k¿:l¿:x¿:Î¿;.¿;2¿;3¿;?¿;w¿;¬¿<¿< ¿<[¿<_¿<`¿<©¿<ø¿= ¿=¿=P¿=o¿=u¿=∆¿=Ô¿=ı¿>A¿>í¿>„¿?+¿?\¿?]¿?ô¿?ü¿?Ó¿?˛¿@¿@R¿@ü¿@Ï¿A!¿A'¿Aw¿Aï¿Aõ¿A´¿A±¿AÂ¿B¿Bn¿Bæ¿BÕ¿C!¿C"¿C[¿Cg¿Cõ¿C´¿C·¿Cˆ¿D,¿Do¿Dâ¿D⁄¿E*¿E~¿E™¿Eµ¿Eø¿E…¿EÂ¿EÈ¿EÍ¿F)¿F/¿F~¿FÕ¿F”¿G#¿G)¿G{¿GŒ¿G‘¿H#¿H]¿Hc¿H¥¿I¿IV¿I°¿I ¿I–¿J!¿J3¿J9¿Jà¿J÷¿K¿K¿KH¿KN¿Kü¿K¿LA¿L«¿LÕ¿M¿Mk¿MØ¿M˘¿NG¿Nå¿Ní¿N„¿N¿O¿O[¿Ox¿Oë¿O±¿Oƒ¿O ¿OÀ¿OÁ¿P ¿P%¿Pv¿P∆¿Q¿Qq¿Qæ¿Q«¿R¿Rw¿RÀ¿R·¿RÍ¿S9¿SÖ¿S÷¿T¿T1¿T{¿T«¿U¿U¿U'¿Uc¿U¨¿U˜¿V)¿VL¿Vz¿Vî¿VÁ¿W
¿W8¿Wr¿W”¿WÈ¿XC¿X\¿Xl¿Xä¿X≤¿X·¿XÓ¿X¯¿Y¿YQ¿Yr¿Yù¿Y±¿YË¿Yˇ¿Z¿Z'¿Z6¿ZV¿Z}¿Z«¿[¿[J¿[Ä¿[à¿[ï¿[›¿\+¿\\¿\ê¿\ñ¿\ó¿\ß¿\¿¿\Ò¿]¿]5¿]T¿]ì¿]õ¿]Æ¿]∏¿]π¿]Œ¿]“¿]”¿^¿^#¿^t¿^¿¿_¿_C¿_I¿_ô¿_Ω¿_√¿`¿`b¿`ô¿`Œ¿`‘¿a#¿aW¿ah¿aô¿a”¿aÔ¿b¿b^¿bx¿bé¿b£¿b”¿c
¿c$¿cp¿c∑¿cÎ¿d¿d¿d)¿dJ¿df¿dí¿dò¿d≤¿d–¿d‘¿d’¿e¿e)¿ef¿ej¿ek¿e£¿e©¿eÒ¿f@¿fx¿f~¿f∆¿f◊¿g¿g<¿gv¿gÇ¿g¥¿gŒ¿gÎ¿h
¿h#¿hS¿hZ¿h´¿h¸¿iM¿iò¿i¡¿i—¿j(¿j]¿jp¿jz¿jì¿jó¿jò¿j€¿j·¿k2¿kÉ¿k≤¿kø¿k˚¿l4¿lO¿lr¿lî¿l∏¿l„¿m	¿m¿m!¿m%¿m&¿mL¿mÖ¿m°¿mæ¿n ¿n¿n0¿n4¿n5¿n\¿nã¿n≠¿nÀ¿nÒ¿o¿o&¿o,¿o0¿o1¿oc¿oi¿o®¿o‚¿p2¿pf¿pl¿pó¿pµ¿pŸ¿p˚¿q¿q¿q¿q¿qn¿qt¿q≥¿qÌ¿r=¿rm¿rs¿r√¿r¿s¿s/¿sX¿s`¿su¿sy¿sz¿sø¿t¿th¿t∂¿u¿uT¿u™¿u‹¿uı¿v¿v>¿vQ¿va¿vë¿w	¿w¿w&¿wS¿wm¿w¿wù¿w◊¿x8¿xà¿x€¿y<¿y⁄¿zI¿zW¿za¿zª¿zÕ¿z‹¿zÁ¿z¸¿{¿{+¿{R¿{X¿{}¿{´¿{ø¿{√¿{ƒ¿|¿|0¿|6¿|¿| ¿|⁄¿|‡¿}.¿}}¿}Œ¿~¿~%¿~u¿~{¿~ ¿~˘¿¿$¿a¿Ä¿Å¿∑¿Ä¿Ä&¿Ä|¿Äë¿Äù¿Ä∑¿Ä€¿Å¿Å¿Å¿Å¿Å:¿ÅV¿Åû¿Åº¿ÅÊ¿Å˙¿Ç$¿Ç;¿ÇI¿Ç~¿Çœ¿Ç˘¿É¿É¿É%¿É]¿Ém¿Éì¿É¶¿É∞¿É”¿Ñ¿Ñ¿ÑJ¿Ñg¿Ñh¿Ñ}¿ÑÅ¿ÑÇ¿Ñ≤¿Ñÿ¿ÑË¿Ö¿Ö&¿ÖD¿Öê¿Ö£¿Ö≠¿Ö±¿Ö≤¿Öˇ¿Ü)¿Ü/¿Ü¿Ü–¿Üı¿Ü˚¿á;¿áA¿áé¿á‹¿à-¿à|¿à√¿à–¿à¯¿â¿â6¿âP¿âp¿â≈¿â’¿ä¿ä2¿äu¿ä}¿äê¿äö¿äû¿äü¿äÔ¿ã:¿ã?¿ãó¿ã—¿ãﬂ¿åD¿åE¿åî¿å–¿å÷¿ç#¿çB¿çH¿çñ¿çÊ¿é3¿éF¿éL¿éö¿éª¿é»¿éŸ¿é˝¿èI¿èì¿è·¿ê,¿ê{¿ê©¿êπ¿ê‚¿ë¿ë/¿ë9¿ë=¿ë>¿ë|¿ë∑¿ëÕ¿ë›¿í¿íP¿íc¿ím¿íè¿íØ¿í–¿ì	¿ì¿ì¿ìD¿ìá¿ìü¿ì‡¿î¿î¿î¿î\¿îb¿î≤¿ï¿ïL¿ïú¿ï¢¿ïÚ¿ï¯¿ñG¿ño¿ñÄ¿ñî¿ñœ¿ñÎ¿ó¿ó!¿óó¿ó«¿ò¿ò[¿òw¿ò†¿ò∫¿òÿ¿òË¿ô¿ô&¿ôE¿ôI¿ôJ¿ôê¿ôñ¿ôÊ¿ö7¿öÖ¿ö–¿õ!¿õ<¿õB¿õz¿õÄ¿õ–¿õ÷¿ú#¿úM¿ú^¿út¿ú≠¿ù¿ù)¿ùg¿ùß¿ù‘¿û%¿ûs¿û√¿ü¿ü`¿ü|¿üÇ¿ü†¿ü“¿ü÷¿ü◊¿†-¿†3¿†f¿†w¿†ì¿†Œ¿†“¿†”¿°¿° ¿°o¿°Ω¿¢¿¢V¿¢\¿¢´¿¢¡¿¢«¿£¿£b¿£ñ¿£ú¿£Ï¿£Ú¿§?¿§f¿§w¿§ä¿§≈¿•&¿•A¿•\¿•§¿•«¿•„¿¶¿¶¿¶a¿¶ï¿¶©¿¶√¿¶Ù¿¶¯¿¶˘¿ß¿ß*¿ß:¿ßs¿ß´¿ßÛ¿®¿®_¿®õ¿®„¿©3¿©Y¿©f¿©«¿©”¿©€¿©Ó¿©¯¿™¿™¿™¿™"¿™5¿™E¿™~¿™Œ¿™˝¿´5¿´u¿´ë¿´‚¿¨¿¨e¿¨r¿¨≈¿¨—¿¨Ÿ¿¨¸¿≠4¿≠m¿≠â¿≠€¿Æ+¿Æ|¿Æ…¿Ø¿Ø¿Ø3¿ØH¿Øò¿ØÍ¿∞>¿∞ê¿∞±¿∞æ¿∞◊¿±*¿±6¿±>¿±Q¿±[¿±ñ¿±¶¿±»¿≤ ¿≤D¿≤Y¿≤¨¿≥¿≥U¿≥®¿≥ﬁ¿≥Î¿¥>¿¥J¿¥R¿¥|¿¥¥¿¥Ù¿µ	¿µL¿µú¿µÈ¿∂/¿∂{¿∂ú¿∂©¿∂¸¿∑I¿∑U¿∑]¿∑Ö¿∑Ω¿∏¿∏+¿∏Ä¿∏”¿π$¿πU¿πb¿πµ¿∫¿∫¿∫¿∫@¿∫Z¿∫í¿∫Ù¿ª	¿ª[¿ªÆ¿ª˝¿ºO¿ºô¿º¶¿º˘¿ΩY¿Ωe¿Ωm¿Ωè¿Ω«¿æ.¿æC¿æù¿æ˙¿øT¿ø´¿ø—¿øﬁ¿¿1¿¿ë¿¿¶¿¡ ¿¡H¿¡U¿¡a¿¡i¿¡|¿¡Ü¿¡©¿¡…¿¡⁄¿¡ﬁ¿¡ﬂ¿¬¿¬9¿¬e¿¬f¿¬õ¿¬´¿¬‰¿√¿√m¿√â¿√⁄¿√Ò¿√˛¿ƒ¿ƒb¿ƒ¬¿≈¿≈¿≈¿≈"¿≈5¿≈?¿≈P¿≈T¿≈U¿≈a¿≈Ω¿≈€¿∆¿∆0¿∆_¿∆é¿∆í¿∆ì¿∆ü¿∆ˆ¿«/¿«ê¿«¨¿«Ú¿«¯¿» ¿»1¿»5¿»6¿»B¿»ù¿»÷¿…7¿…L¿…P¿…Q¿…§¿…¡¿…«¿ ¿ r¿ Ñ¿ ä¿ ö¿ Ì¿ ˙¿À¿ÀP¿ÀT¿ÀU¿Às¿À¨¿À‡¿À‰¿ÀÂ¿ÀÒ¿Ã*¿Ãc¿ÃÑ¿Ã≈¿ÃË¿Õ¿Õ¿Õ¿Õ¿Õ^¿Õó¿Õ∏¿Õ◊¿Œ¿Œ$¿ŒG¿ŒM¿Œô¿Œ√¿Œ«¿Œ»¿Œ‘¿œ¿œS¿œt¿œõ¿œ∫¿œ¯¿–¿–@¿–F¿–p¿–t¿–u¿–Å¿–¡¿–˙¿—¿—:¿—É¿—Æ¿——¿—◊¿—Ë¿—Ï¿—Ì¿—˘¿“@¿“y¿“ö¿“Ã¿“Ô¿“Û¿“Ù¿”,¿”2¿”à¿”Ÿ¿‘*¿‘W¿‘¶¿‘‡¿‘Ò¿’¿’r¿’∫¿’–¿’‘¿’’¿÷¿÷#¿÷X¿÷ê¿÷®¿÷Ó¿◊¿◊¿◊v¿◊ã¿◊ﬁ¿◊ˆ¿ÿ¿ÿ=¿ÿV¿ÿ™¿ÿ∑¿ÿ√¿ÿÀ¿ÿﬁ¿ÿË¿ÿ˘¿ÿ˝¿ÿ˛¿ŸE¿ŸK¿ŸÄ¿Ÿ´¿Ÿ÷¿Ÿ¿⁄#¿⁄J¿⁄e¿⁄k¿⁄Å¿⁄ú¿⁄ø¿⁄√¿⁄ƒ¿€¿€¿€j¿€ò¿€ƒ¿€ı¿‹¿‹-¿‹D¿‹_¿‹e¿‹w¿‹{¿‹|¿‹à¿‹¡¿‹¸¿› ¿›¿›5¿›A¿›ü¿›†¿›¨¿ﬁ¿ﬁ,¿ﬁ>¿ﬁQ¿ﬁe¿ﬁl¿ﬁp¿ﬁq¿ﬁ}¿ﬁ¬¿ﬁÌ¿ﬂ5¿ﬂm¿ﬂ¿¿ﬂ∆¿‡¿‡•¿‡”¿·¿·[¿·¶¿‚¿‚*¿‚ï¿‚õ¿‚ü¿‚†¿‚¨¿‚ﬁ¿„¿„B¿„q¿„y¿„é¿„í¿„ì¿„‹¿„¯¿‰¿‰¿‰]¿‰©¿‰∆¿‰«¿Â¿Â"¿Â#¿Âq¿Â¡¿Ê¿ÊM¿ÊÖ¿Ê≈¿Á¿Á9¿ÁJ¿ÁN¿ÁO¿Áù¿Áæ¿Áƒ¿Ë
¿ËQ¿Ëü¿Ë∑¿Ë—¿È¿È@¿ÈN¿Èi¿È¢¿È≤¿È’¿Í¿Í8¿Íw¿Íé¿Í∆¿Î¿Î^¿Î|¿ÎÍ¿ÏD¿Ïù¿Ïı¿ÌL¿Ì°¿Ì“¿Ì·¿ÓC¿ÓP¿Óá¿Ô(¿Ô]¿Ôg¿¿8¿r¿™¿Ò¿Ò$¿Òz¿Ò™¿Ò∑¿Ú¿Ú#¿Ú+¿Ú>¿ÚH¿ÚW¿Úe¿Úx¿Úõ¿Úü¿Ú†¿ÚÓ¿Û ¿Û¿ÛS¿Û°¿Û€¿Û˘¿Ù¿ÙF¿ÙÜ¿Ùî¿Ù§¿Ù‚¿ı¿ı-¿ıU¿ıw¿ıà¿ı≤¿ıº¿ıƒ¿ı◊¿ı·¿ˆ¿ˆ@¿ˆg¿ˆw¿ˆπ¿ˆÁ¿ˆ˙¿˜¿˜¿˜*¿˜a¿˜£¿˜∂¿˜¿¿˜’¿˜Ÿ¿˜⁄¿¯¿¯	¿¯P¿¯]¿¯v¿¯x¿¯y¿¯ø¿¯‚¿¯Ù¿˘¿˘:¿˘U¿˘c¿˘s¿˘Ö¿˘ó¿˘ú¿˘ù¿˘¥¿˘µ¿˘¡¿˙¿˙P¿˙~¿˙°¿˙Í¿˙¿˚¿˚"¿˚&¿˚(¿˚)¿˚u¿˚å¿˚ê¿˚ÿ¿˚‹¿˚Í¿˚Ó¿¸5¿¸S¿¸û¿¸Ì¿˝¿˝M¿˝N¿˝Ä¿˝Ñ¿˝–¿˛!¿˛m¿˛®¿˛¨¿˛ÿ¿˛‹¿˛¿ˇD¿ˇv¿ˇz¿ˇ∏¿ˇº¿ 	¿ ¿ ¿ +¿ /¿ z¿ ¿¿¿+¿^¿ò¿û¿Î¿8¿U¿[¿´¿˙¿#¿C¿j¿Æ¿Õ¿Œ¿¿¿`¿å¿“¿Ô¿¿¿A¿G¿ê¿◊¿¯¿˛¿O¿ú¿Ë¿9¿Ö¿ã¿Ÿ¿¿a¿∞¿˜¿˝¿	J¿	ç¿	ì¿	£¿	©¿	Ú¿
A¿
é¿
°¿
Ú¿¿R¿S¿ù¿∂¿∆¿-¿@¿J¿z¿Â¿È¿Í¿¿$¿G¿]¿∑¿¿]¿c¿w¿{¿|¿ö¿≤¿◊¿ÿ¿‰¿5¿6¿B¿á¿≤¿—¿¿#¿É¿á¿â¿ä¿€¿Ò¿ı¿1¿5¿C¿G¿ê¿’¿"¿a¿b¿≥¿Ω¿¡¿¿¿$¿(¿r¿∑¿¿U¿V¿ß¿∆¿ ¿¿S¿f¿j¿∏¿¿S¿û¿Á¿3¿7¿E¿I¿ì¿ÿ¿¿t¿u¿ß¿´¿Ô¿Û¿>¿Y¿]¿k¿o¿π¿¿O¿°¿¢¿”¿◊¿(¿e¿i¿í¿ƒ¿¿A¿B¿U¿V¿w¿É¿≥¿¥¿¿¿Ò¿¿/¿h¿{¿ó¿õ¿ú¿≥¿¿;¿?¿@¿è¿ﬂ¿¿$¿r¿£¿Ø¿‹¿ˆ¿ 4¿ G¿ Q¿ c¿ Ñ¿ ô¿ •¿ º¿ Œ¿ ¿!¿!¿!?¿!X¿!x¿!õ¿!∫¿!Ë¿!ı¿"¿"?¿"[¿"ñ¿"£¿"Æ¿"∑¿"«¿#¿#`¿#v¿#∑¿#Ω¿#«¿#¯¿$¿$/¿$R¿$q¿$ü¿$¨¿$Ω¿$ˆ¿%¿%M¿%Z¿%e¿%n¿%ù¿%£¿%ß¿%®¿%¯¿&D¿&X¿&e¿&w¿&x¿&Ñ¿&≥¿&À¿&„¿&Á¿&Ë¿&Ù¿'¿'5¿'H¿'f¿'j¿'l¿'m¿'≤¿'‰¿(.¿(j¿(k¿(w¿(¥¿(µ¿(¡¿(Ï¿)	¿)*¿)=¿)L¿)P¿)R¿)S¿)ó¿)»¿*¿*;¿*b¿*z¿*ä¿*∫¿*Ú¿+^¿+z¿+Õ¿,¿,i¿,v¿,Ç¿,ä¿,ù¿,ß¿,À¿,Ê¿,Ú¿-¿-^¿-≠¿-«¿-Œ¿-Í¿.-¿.1¿.2¿.>¿.e¿.f¿.¨¿.≤¿.˚¿/K¿/r¿/†¿/¡¿/¬¿/Œ¿/‰¿0'¿0A¿0G¿0_¿0c¿0d¿0p¿0á¿0 ¿0‘¿1¿1\¿1n¿1£¿1›¿2.¿2ì¿2™¿3¿3P¿3_¿3m¿3w¿3å¿3ò¿3®¿3·¿3Á¿3˜¿47¿4J¿4T¿4w¿4á¿4¡¿4‘¿4ﬁ¿4˜¿4˚¿4¸¿5¿5"¿5D¿5i¿5è¿5ï¿5±¿5µ¿5∂¿5¬¿5Ï¿6	¿6*¿6_¿6£¿6Û¿7¿7¿7D¿7N¿7Ü¿7Â¿7˜¿8,¿8f¿8Ω¿9)¿9@¿9ü¿9Ï¿9˚¿:	¿:¿:(¿:4¿:D¿:}¿:É¿:í¿:ñ¿:ó¿:£¿:∑¿:Õ¿:„¿;4¿;Ç¿;π¿<¿</¿<3¿<4¿<@¿<V¿<n¿<Ü¿<ä¿<ã¿<ó¿<™¿<ø¿<‘¿<‰¿=%¿=:¿=p¿=ƒ¿=ﬁ¿>C¿>é¿>ô¿>£¿>≠¿>»¿?¿?F¿?Y¿?]¿?^¿?j¿?Ω¿?€¿?Î¿@&¿@i¿@°¿AJ¿Af¿A«¿B ¿Br¿B«¿BË¿Bı¿C
¿Cz¿CÏ¿DF¿DS¿D_¿Dg¿D™¿D‚¿Eo¿Eã¿EÂ¿F8¿Fá¿F√¿G¿G+¿G@¿Gñ¿GÎ¿H+¿HÑ¿Hô¿H¶¿Hª¿Hı¿IP¿Iü¿IÚ¿J,¿J9¿JE¿JM¿J`¿Jj¿J√¿J«¿J»¿K¿Kf¿Kµ¿KÓ¿KÙ¿LC¿L|¿LÃ¿L˝¿M$¿M%¿M1¿MR¿Mu¿Mò¿Mú¿Mù¿M©¿M˛¿N)¿N;¿NN¿Nb¿Nx¿N¿NÉ¿NÑ¿Nê¿N’¿O ¿Oe¿Oi¿Ok¿Ol¿O≠¿O‰¿P¿PA¿PB¿PN¿PÅ¿PÇ¿Pé¿Pµ¿PÓ¿Q
¿Q+¿QH¿Qi¿QÅ¿Qî¿Q£¿Qß¿Q®¿Q·¿QÁ¿R7¿RÇ¿R°¿RÆ¿R‡¿R˛¿S¿S¿SO¿S^¿Sd¿S´¿SÚ¿Sˇ¿T6¿T8¿T9¿T¿Tƒ¿U¿UO¿UP¿UÜ¿U∑¿U·¿V
¿V¿VR¿Vá¿Vè¿Vï¿V¿¿Vƒ¿V≈¿W¿WZ¿Wq¿Ww¿Wƒ¿X¿X@¿XF¿Xö¿X‰¿Y4¿YJ¿YP¿Y°¿YÎ¿Z8¿Z>¿Zã¿Z⁄¿Z‡¿[¿[]¿[c¿[®¿[Æ¿[˛¿\N¿\û¿\Ì¿]=¿]â¿]ª¿]¯¿^¿^G¿^ç¿^Æ¿^≤¿^≥¿^ø¿^ı¿_*¿_.¿_0¿_1¿_w¿_•¿_Ô¿`+¿`,¿`u¿`v¿`Ç¿`†¿`Ÿ¿a.¿aO¿aû¿aß¿a‰¿b¿b¿b¿b(¿bD¿bT¿bw¿bä¿bî¿b≤¿b∂¿b∑¿bı¿c¿c¿cY¿cê¿c◊¿d¿d¿dV¿dè¿d®¿dÆ¿dˇ¿e¿e¿e¿ed¿e†¿eÍ¿e¸¿fE¿fë¿f·¿g¿g¿gC¿gf¿gj¿gk¿gµ¿gª¿g˚¿h2¿h¿hÕ¿h”¿i¿ib¿ih¿iπ¿iø¿iœ¿i’¿j¿jZ¿j¶¿j∏¿k¿kR¿k¢¿k»¿k’¿l¿l4¿l8¿l9¿lè¿lï¿lﬁ¿m-¿mF¿mL¿mô¿m‚¿mı¿m˚¿nB¿nÅ¿ná¿nó¿nù¿nÈ¿n˚¿oE¿oé¿o⁄¿p*¿pP¿p]¿pú¿p¬¿p∆¿p«¿p˚¿q¿q=¿qC¿qÅ¿q»¿qŒ¿qﬁ¿q‰¿r-¿ri¿rµ¿r«¿s¿sa¿sá¿sî¿sÂ¿t¿t¿t¿t[¿tî¿tö¿t“¿tÿ¿u¿u'¿uS¿uñ¿u∂¿u∫¿uª¿v¿v;¿vA¿vå¿v€¿w%¿w+¿w;¿wA¿wè¿w–¿w‹¿x¿xN¿xÜ¿xò¿x ¿x˘¿y.¿yU¿yv¿yÇ¿yÆ¿yÂ¿z¿z¿z¿z¿z¿zg¿zk¿zπ¿{¿{ ¿{$¿{J¿{N¿{ü¿{£¿{—¿{’¿|¿|¿|p¿|â¿|ç¿|€¿|Á¿|Î¿}6¿}O¿}S¿}§¿}Ù¿~:¿~ã¿~¿¿~ƒ¿¿]¿¿É¿§¿®¿Ì¿Ä7¿Ä~¿Äƒ¿ÄÛ¿Ä˜¿Å¿Å6¿Å:¿ÅJ¿Åè¿Åì¿Åß¿ÅŒ¿Å÷¿Å„¿ÅÈ¿ÅÒ¿Åı¿Ç¿Ç¿ÇP¿Çâ¿Çç¿ÇŸ¿É'¿Ét¿É¬¿É˙¿É˛¿ÑQ¿Ñ†¿ÑÎ¿Ö;¿Öâ¿Ö¡¿Ö≈¿Ü¿ÜZ¿Üt¿Üx¿Üí¿Üñ¿Ü‡¿á-¿áz¿áò¿áú¿áÎ¿à;¿àã¿à€¿â¿â"¿âr¿âø¿ä¿ä`¿ä®¿ä¯¿ã!¿ã%¿ãq¿ãø¿å¿å[¿å_¿å§¿å®¿åÛ¿çC¿çd¿çh¿ç§¿ç®¿ç˜¿éH¿éñ¿é»¿è
¿èZ¿èó¿èõ¿è·¿ê/¿êx¿ê|¿ê…¿ë¿ëV¿ëZ¿ëÅ¿ëÖ¿ë‘¿í"¿íq¿íø¿í—¿í’¿í¿íÙ¿ì?¿ìÑ¿ìœ¿î¿îf¿îµ¿î¬¿î∆¿ï¿ïa¿ïî¿ïò¿ïÊ¿ñ6¿ñÖ¿ñ¬¿ñÁ¿ñÎ¿ó¿ó¿óW¿ó§¿óÛ¿ò¿ò¿òd¿ò¥¿ò‘¿òÿ¿òı¿ò˘¿ôD¿ôï¿ô‚¿ö&¿ö[¿ö•¿öÁ¿öË¿õ¿õ$¿õh¿õt¿õñ¿õ”¿õÓ¿õÚ¿ú¿ú¿ú3¿ú?¿úo¿úp¿ú•¿ú¶¿ú‚¿ù¿ùD¿ùg¿ùî¿ùò¿ùô¿ù›¿ù˛¿û)¿ûl¿û£¿ûæ¿ûÕ¿û’¿û¯¿û˛¿ü¿ü>¿üS¿ü[¿üß¿†	¿†-¿†r¿†´¿†Û¿†˝¿°#¿°+¿°P¿°x¿°Ü¿°’¿¢"¿¢R¿¢å¿¢Ã¿£A¿£ê¿§I¿§¬¿•r¿•˛¿¶¿¶2¿¶î¿¶û¿¶¶¿¶π¿¶√¿¶÷¿¶⁄¿¶€¿¶Á¿ß¿ß:¿ßJ¿ßi¿ß|¿ßÜ¿ß”¿ßˇ¿®¿®/¿®B¿®L¿®\¿®É¿®ñ¿®†¿®æ¿®ﬂ¿®Û¿®˜¿®¯¿©¿©<¿©Y¿©z¿©ä¿©±¿©ƒ¿©Œ¿™
¿™¿™¿™8¿™H¿™~¿™ë¿™õ¿™ü¿™†¿™¨¿™∆¿´¿´¿´¿´%¿´@¿´P¿´o¿´Ç¿´å¿´◊¿´Á¿¨¿¨¿¨$¿¨8¿¨<¿¨=¿¨|¿¨Ç¿¨À¿≠¿≠G¿≠M¿≠ú¿≠È¿Æ:¿ÆÖ¿Æ–¿Ø!¿ØV¿Ø\¿Ø≠¿Ø˛¿∞O¿∞ù¿∞Ì¿±>¿±ç¿±—¿≤"¿≤Q¿≤W¿≤ê¿≤›¿≥+¿≥w¿≥æ¿¥¿¥<¿¥B¿¥ï¿¥‡¿µ,¿µ{¿µΩ¿∂¿∂Y¿∂§¿∂ı¿∑2¿∑~¿∑Ã¿∏¿∏5¿∏B¿∏“¿∏Û¿π¿πS¿πT¿πç¿πÈ¿πÔ¿π¿∫1¿∫L¿∫k¿∫™¿∫∞¿∫±¿∫Û¿ªB¿ªè¿ª”¿ª‘¿º¿º#¿ºE¿ºä¿ºØ¿ºÚ¿Ω9¿Ω:¿Ωå¿Ω€¿Ωı¿æC¿æè¿æ‹¿æ˝¿øA¿øi¿ø≠¿ø‡¿¿¿¿G¿¿ì¿¿”¿¡¿¡,¿¡-¿¡I¿¡e¿¡ò¿¡Ã¿¡Õ¿¬¿¬s¿¬t¿¬ê¿¬ë¿¬¥¿√¿√j¿√•¿√˝¿ƒJ¿ƒY¿ƒ√¿≈¿≈5¿≈U¿≈p¿≈ã¿≈ë¿≈í¿≈∂¿∆¿∆o¿∆≠¿«¿«R¿«a¿«¿«ù¿«£¿«§¿«‹¿»"¿»K¿»f¿»ë¿»≈¿… ¿…z¿…ö¿…≈¿ ¿ ¿ :¿ D¿ a¿ i¿ o¿ p¿ ñ¿ »¿ ·¿À¿À9¿Àa¿À|¿À©¿ÀÀ¿Ã¿Ã.¿Ã{¿Ãß¿Ãº¿Õ¿Õ!¿Õ/¿Õ;¿ÕE¿ÕM¿Õù¿Œ¿ŒK¿Œª¿ŒÈ¿œ	¿œ$¿œ*¿œ+¿œP¿œÖ¿œ∫¿–¿–@¿–p¿–q¿–ó¿–Ù¿—0¿—l¿—∞¿—Î¿“'¿“ë¿“’¿”E¿”s¿”ì¿”Æ¿”…¿”œ¿”–¿‘¿‘P¿‘ê¿‘‡¿’¿’¿’¿’a¿’y¿’}¿’~¿’ä¿’†¿’∏¿’ƒ¿’‚¿÷/¿÷[¿÷b¿÷f¿÷g¿÷s¿÷Ü¿÷í¿÷∂¿◊¿◊¿◊&¿◊m¿◊Ç¿◊é¿◊¨¿◊ˆ¿ÿ"¿ÿ)¿ÿ]¿ÿ{¿ÿï¿ÿô¿ÿö¿ÿ‰¿Ÿ¿Ÿ¿Ÿ!¿Ÿi¿Ÿå¿Ÿ∆¿⁄¿⁄M¿⁄Ä¿⁄›¿€'¿€6¿€D¿€N¿€r¿€¬¿‹¿‹b¿‹©¿›¿›¿›!¿›+¿›D¿›z¿›~¿›¿›ã¿›±¿›”¿›Û¿ﬁ¿ﬁ0¿ﬁÜ¿ﬁä¿ﬁã¿ﬁó¿ﬁƒ¿ﬁˆ¿ﬂ¿ﬂR¿ﬂ§¿‡¿‡&¿‡y¿‡}¿‡~¿‡ä¿‡®¿‡ÿ¿·)¿·T¿·Z¿·l¿·p¿·q¿·µ¿·ª¿‚	¿‚W¿‚¶¿‚˜¿„/¿„D¿„Q¿„®¿„∏¿„Ó¿‰D¿‰_¿‰ß¿‰÷¿‰·¿‰˚¿ÂB¿Âû¿Â∏¿Â√¿Â÷¿Ê¿Ês¿Ê…¿Á¿ÁR¿Áz¿ÁÖ¿Áè¿Áô¿Áù¿Áû¿ÁË¿ÁÓ¿Ë8¿Ë>¿Ëâ¿Ëè¿Ëﬁ¿È-¿ÈÅ¿È”¿Í%¿Íx¿Í…¿Î¿Î¿ÎÅ¿Îë¿Î«¿Ï¿Ï6¿ÏÇ¿Ï±¿Ïº¿Ï÷¿Ì¿Ìu¿Ìè¿Ìö¿Ì≠¿ÌÒ¿ÓF¿Óö¿Óﬁ¿Ô#¿ÔK¿ÔV¿Ô`¿Ôj¿Ôn¿Ôo¿Ô°¿Ôß¿Ôı¿"¿/¿Ü¿ñ¿Ã¿Ò"¿Ò=¿Òã¿Ò∫¿Ò≈¿Òﬂ¿Ú&¿ÚÇ¿Úú¿Úß¿Ú∫¿Û ¿ÛW¿Û≠¿ÛÒ¿Ù6¿Ù^¿Ùi¿Ùs¿Ù}¿ÙÅ¿ÙÇ¿Ùé¿Ù”¿Ù˛¿ıh¿ıl¿ın¿ıo¿ıò¿ıú¿ı‚¿ˆ¿ˆ[¿ˆÑ¿ˆ ¿ˆÀ¿˜¿˜:¿˜@¿˜q¿˜w¿˜∞¿¯¿¯Q¿¯ï¿¯∑¿˘¿˘/¿˘C¿˘G¿˘H¿˘T¿˘Ö¿˘µ¿˘—¿˘Ó¿˙¿˙¿˙¿˙¿˙c¿˙ü¿˙È¿˚3¿˚4¿˚@¿˚d¿˚w¿˚ï¿˚ô¿˚ö¿˚¶¿˚È¿˚¸¿¸ ¿¸¿¸¿¸b¿¸u¿¸y¿¸z¿¸Ü¿¸…¿¸‹¿¸‡¿¸·¿¸Ì¿˝¿˝J¿˝N¿˝P¿˝Q¿˝§¿˝®¿˝√¿˝«¿˛¿˛Z¿˛ò¿˛€¿ˇ%¿ˇ}¿ˇ~¿ˇë¿ˇí¿ˇû¿ˇÕ¿ˇÂ¿ˇ˝¿ ¿ ¿ ¿ 2¿ O¿ b¿ Ä¿ Ñ¿ Ö¿ ë¿ ¬¿ ‰¿=¿A¿B¿N¿á¿§¿≈¿¿"¿#¿/¿r¿Û¿¿A¿a¿ê¿î¿ï¿°¿ˆ¿	¿¿¿¿]¿ﬁ¿¯¿!¿@¿o¿s¿u¿v¿»¿Ã¿¿`¿∞¿Ò¿ı¿¿¿S¿z¿»¿ı¿7¿Å¿∆¿	¿	#¿	$¿	0¿	ñ¿
	¿
¿
¿
B¿
H¿
ï¿
´¿
∏¿
Õ¿:¿;¿[¿´¿œ¿¿¿¿k¿Ë¿¿]¿å¿ê¿ë¿ù¿¿ã¿µ¿˜¿&¿*¿+¿7¿z¿˜¿!¿A¿p¿t¿u¿Å¿∞¿›¿¿$¿*¿.¿/¿;¿_¿Ü¿∑¿⁄¿¯¿¸¿˝¿=¿M¿x¿ö¿π¿˙¿t¿ç¿‰¿"¿3¿û¿›¿Ì¿˙¿¿¿ ¿*¿;¿?¿@¿L¿â¿œ¿¿ ¿$¿%¿1¿b¿Ñ¿Ú¿p¿å¿ø¿@¿^¿~¿Ñ¿û¿¢¿£¿Ø¿Á¿¿r¿ì¿Ô¿h¿à¿å¿é¿è¿ﬁ¿‚¿2¿F¿[¿ò¿∂¿∑¿‡¿˘¿˙¿¿?¿A¿B¿m¿à¿ú¿≥¿·¿Ê¿!¿;¿M¿m¿É¿≥¿∏¿›¿Ô¿Ò¿Ú¿&¿L¿P¿ò¿ﬁ¿-¿t¿ç¿ë¿ü¿£¿Ú¿ D¿ O¿ w¿ ¬¿ Ô¿ ¿!<¿!W¿!h¿!i¿!¢¿!µ¿!∂¿!¬¿!Â¿"¿"#¿"C¿"c¿"Ñ¿"à¿"â¿"ï¿"∆¿"»¿"…¿#¿#3¿#X¿#á¿#à¿#π¿#∫¿#∆¿$ ¿$¿$¿$D¿$F¿$G¿$j¿$Å¿$Ç¿$é¿$«¿$…¿$ ¿%#¿%4¿%Å¿%Ó¿%     Éí